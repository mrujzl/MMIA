
cv_09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085f4  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  080087a8  080087a8  000187a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089e0  080089e0  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  080089e0  080089e0  000189e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089e8  080089e8  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089e8  080089e8  000189e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089ec  080089ec  000189ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  080089f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000094c  200001c8  08008bb8  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b14  08008bb8  00020b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012776  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ae2  00000000  00000000  0003296e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cc0  00000000  00000000  00035450  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b78  00000000  00000000  00036110  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000259c9  00000000  00000000  00036c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000caa7  00000000  00000000  0005c651  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5a97  00000000  00000000  000690f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013eb8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038e4  00000000  00000000  0013ec0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001c8 	.word	0x200001c8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800878c 	.word	0x0800878c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	0800878c 	.word	0x0800878c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2f>:
 8000aec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af4:	bf24      	itt	cs
 8000af6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afe:	d90d      	bls.n	8000b1c <__aeabi_d2f+0x30>
 8000b00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b14:	bf08      	it	eq
 8000b16:	f020 0001 	biceq.w	r0, r0, #1
 8000b1a:	4770      	bx	lr
 8000b1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b20:	d121      	bne.n	8000b66 <__aeabi_d2f+0x7a>
 8000b22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b26:	bfbc      	itt	lt
 8000b28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	4770      	bxlt	lr
 8000b2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b36:	f1c2 0218 	rsb	r2, r2, #24
 8000b3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b42:	fa20 f002 	lsr.w	r0, r0, r2
 8000b46:	bf18      	it	ne
 8000b48:	f040 0001 	orrne.w	r0, r0, #1
 8000b4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b58:	ea40 000c 	orr.w	r0, r0, ip
 8000b5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b64:	e7cc      	b.n	8000b00 <__aeabi_d2f+0x14>
 8000b66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6a:	d107      	bne.n	8000b7c <__aeabi_d2f+0x90>
 8000b6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b70:	bf1e      	ittt	ne
 8000b72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7a:	4770      	bxne	lr
 8000b7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b972 	b.w	8000e88 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9e08      	ldr	r6, [sp, #32]
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	4688      	mov	r8, r1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d14b      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bca:	428a      	cmp	r2, r1
 8000bcc:	4615      	mov	r5, r2
 8000bce:	d967      	bls.n	8000ca0 <__udivmoddi4+0xe4>
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	b14a      	cbz	r2, 8000bea <__udivmoddi4+0x2e>
 8000bd6:	f1c2 0720 	rsb	r7, r2, #32
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	fa20 f707 	lsr.w	r7, r0, r7
 8000be2:	4095      	lsls	r5, r2
 8000be4:	ea47 0803 	orr.w	r8, r7, r3
 8000be8:	4094      	lsls	r4, r2
 8000bea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bf4:	fa1f fc85 	uxth.w	ip, r5
 8000bf8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bfc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c00:	fb07 f10c 	mul.w	r1, r7, ip
 8000c04:	4299      	cmp	r1, r3
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x60>
 8000c08:	18eb      	adds	r3, r5, r3
 8000c0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c0e:	f080 811b 	bcs.w	8000e48 <__udivmoddi4+0x28c>
 8000c12:	4299      	cmp	r1, r3
 8000c14:	f240 8118 	bls.w	8000e48 <__udivmoddi4+0x28c>
 8000c18:	3f02      	subs	r7, #2
 8000c1a:	442b      	add	r3, r5
 8000c1c:	1a5b      	subs	r3, r3, r1
 8000c1e:	b2a4      	uxth	r4, r4
 8000c20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c30:	45a4      	cmp	ip, r4
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x8c>
 8000c34:	192c      	adds	r4, r5, r4
 8000c36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3a:	f080 8107 	bcs.w	8000e4c <__udivmoddi4+0x290>
 8000c3e:	45a4      	cmp	ip, r4
 8000c40:	f240 8104 	bls.w	8000e4c <__udivmoddi4+0x290>
 8000c44:	3802      	subs	r0, #2
 8000c46:	442c      	add	r4, r5
 8000c48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c4c:	eba4 040c 	sub.w	r4, r4, ip
 8000c50:	2700      	movs	r7, #0
 8000c52:	b11e      	cbz	r6, 8000c5c <__udivmoddi4+0xa0>
 8000c54:	40d4      	lsrs	r4, r2
 8000c56:	2300      	movs	r3, #0
 8000c58:	e9c6 4300 	strd	r4, r3, [r6]
 8000c5c:	4639      	mov	r1, r7
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0xbe>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f000 80eb 	beq.w	8000e42 <__udivmoddi4+0x286>
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c72:	4638      	mov	r0, r7
 8000c74:	4639      	mov	r1, r7
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	fab3 f783 	clz	r7, r3
 8000c7e:	2f00      	cmp	r7, #0
 8000c80:	d147      	bne.n	8000d12 <__udivmoddi4+0x156>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xd0>
 8000c86:	4282      	cmp	r2, r0
 8000c88:	f200 80fa 	bhi.w	8000e80 <__udivmoddi4+0x2c4>
 8000c8c:	1a84      	subs	r4, r0, r2
 8000c8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	4698      	mov	r8, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d0e0      	beq.n	8000c5c <__udivmoddi4+0xa0>
 8000c9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c9e:	e7dd      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000ca0:	b902      	cbnz	r2, 8000ca4 <__udivmoddi4+0xe8>
 8000ca2:	deff      	udf	#255	; 0xff
 8000ca4:	fab2 f282 	clz	r2, r2
 8000ca8:	2a00      	cmp	r2, #0
 8000caa:	f040 808f 	bne.w	8000dcc <__udivmoddi4+0x210>
 8000cae:	1b49      	subs	r1, r1, r5
 8000cb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb4:	fa1f f885 	uxth.w	r8, r5
 8000cb8:	2701      	movs	r7, #1
 8000cba:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc8:	fb08 f10c 	mul.w	r1, r8, ip
 8000ccc:	4299      	cmp	r1, r3
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x124>
 8000cd0:	18eb      	adds	r3, r5, r3
 8000cd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x122>
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	f200 80cd 	bhi.w	8000e78 <__udivmoddi4+0x2bc>
 8000cde:	4684      	mov	ip, r0
 8000ce0:	1a59      	subs	r1, r3, r1
 8000ce2:	b2a3      	uxth	r3, r4
 8000ce4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cf0:	fb08 f800 	mul.w	r8, r8, r0
 8000cf4:	45a0      	cmp	r8, r4
 8000cf6:	d907      	bls.n	8000d08 <__udivmoddi4+0x14c>
 8000cf8:	192c      	adds	r4, r5, r4
 8000cfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x14a>
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	f200 80b6 	bhi.w	8000e72 <__udivmoddi4+0x2b6>
 8000d06:	4618      	mov	r0, r3
 8000d08:	eba4 0408 	sub.w	r4, r4, r8
 8000d0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d10:	e79f      	b.n	8000c52 <__udivmoddi4+0x96>
 8000d12:	f1c7 0c20 	rsb	ip, r7, #32
 8000d16:	40bb      	lsls	r3, r7
 8000d18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d20:	fa01 f407 	lsl.w	r4, r1, r7
 8000d24:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d28:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d30:	4325      	orrs	r5, r4
 8000d32:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d36:	0c2c      	lsrs	r4, r5, #16
 8000d38:	fb08 3319 	mls	r3, r8, r9, r3
 8000d3c:	fa1f fa8e 	uxth.w	sl, lr
 8000d40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d44:	fb09 f40a 	mul.w	r4, r9, sl
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d4e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d52:	d90b      	bls.n	8000d6c <__udivmoddi4+0x1b0>
 8000d54:	eb1e 0303 	adds.w	r3, lr, r3
 8000d58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d5c:	f080 8087 	bcs.w	8000e6e <__udivmoddi4+0x2b2>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f240 8084 	bls.w	8000e6e <__udivmoddi4+0x2b2>
 8000d66:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6a:	4473      	add	r3, lr
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	b2ad      	uxth	r5, r5
 8000d70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d74:	fb08 3310 	mls	r3, r8, r0, r3
 8000d78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d80:	45a2      	cmp	sl, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1da>
 8000d84:	eb1e 0404 	adds.w	r4, lr, r4
 8000d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8c:	d26b      	bcs.n	8000e66 <__udivmoddi4+0x2aa>
 8000d8e:	45a2      	cmp	sl, r4
 8000d90:	d969      	bls.n	8000e66 <__udivmoddi4+0x2aa>
 8000d92:	3802      	subs	r0, #2
 8000d94:	4474      	add	r4, lr
 8000d96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d9e:	eba4 040a 	sub.w	r4, r4, sl
 8000da2:	454c      	cmp	r4, r9
 8000da4:	46c2      	mov	sl, r8
 8000da6:	464b      	mov	r3, r9
 8000da8:	d354      	bcc.n	8000e54 <__udivmoddi4+0x298>
 8000daa:	d051      	beq.n	8000e50 <__udivmoddi4+0x294>
 8000dac:	2e00      	cmp	r6, #0
 8000dae:	d069      	beq.n	8000e84 <__udivmoddi4+0x2c8>
 8000db0:	ebb1 050a 	subs.w	r5, r1, sl
 8000db4:	eb64 0403 	sbc.w	r4, r4, r3
 8000db8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dbc:	40fd      	lsrs	r5, r7
 8000dbe:	40fc      	lsrs	r4, r7
 8000dc0:	ea4c 0505 	orr.w	r5, ip, r5
 8000dc4:	e9c6 5400 	strd	r5, r4, [r6]
 8000dc8:	2700      	movs	r7, #0
 8000dca:	e747      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f703 	lsr.w	r7, r0, r3
 8000dd4:	4095      	lsls	r5, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	fa21 f303 	lsr.w	r3, r1, r3
 8000dde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de2:	4338      	orrs	r0, r7
 8000de4:	0c01      	lsrs	r1, r0, #16
 8000de6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dea:	fa1f f885 	uxth.w	r8, r5
 8000dee:	fb0e 3317 	mls	r3, lr, r7, r3
 8000df2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df6:	fb07 f308 	mul.w	r3, r7, r8
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x256>
 8000e02:	1869      	adds	r1, r5, r1
 8000e04:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e08:	d22f      	bcs.n	8000e6a <__udivmoddi4+0x2ae>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d92d      	bls.n	8000e6a <__udivmoddi4+0x2ae>
 8000e0e:	3f02      	subs	r7, #2
 8000e10:	4429      	add	r1, r5
 8000e12:	1acb      	subs	r3, r1, r3
 8000e14:	b281      	uxth	r1, r0
 8000e16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb00 f308 	mul.w	r3, r0, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x27e>
 8000e2a:	1869      	adds	r1, r5, r1
 8000e2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e30:	d217      	bcs.n	8000e62 <__udivmoddi4+0x2a6>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d915      	bls.n	8000e62 <__udivmoddi4+0x2a6>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4429      	add	r1, r5
 8000e3a:	1ac9      	subs	r1, r1, r3
 8000e3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e40:	e73b      	b.n	8000cba <__udivmoddi4+0xfe>
 8000e42:	4637      	mov	r7, r6
 8000e44:	4630      	mov	r0, r6
 8000e46:	e709      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000e48:	4607      	mov	r7, r0
 8000e4a:	e6e7      	b.n	8000c1c <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fb      	b.n	8000c48 <__udivmoddi4+0x8c>
 8000e50:	4541      	cmp	r1, r8
 8000e52:	d2ab      	bcs.n	8000dac <__udivmoddi4+0x1f0>
 8000e54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e58:	eb69 020e 	sbc.w	r2, r9, lr
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	4613      	mov	r3, r2
 8000e60:	e7a4      	b.n	8000dac <__udivmoddi4+0x1f0>
 8000e62:	4660      	mov	r0, ip
 8000e64:	e7e9      	b.n	8000e3a <__udivmoddi4+0x27e>
 8000e66:	4618      	mov	r0, r3
 8000e68:	e795      	b.n	8000d96 <__udivmoddi4+0x1da>
 8000e6a:	4667      	mov	r7, ip
 8000e6c:	e7d1      	b.n	8000e12 <__udivmoddi4+0x256>
 8000e6e:	4681      	mov	r9, r0
 8000e70:	e77c      	b.n	8000d6c <__udivmoddi4+0x1b0>
 8000e72:	3802      	subs	r0, #2
 8000e74:	442c      	add	r4, r5
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0x14c>
 8000e78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e7c:	442b      	add	r3, r5
 8000e7e:	e72f      	b.n	8000ce0 <__udivmoddi4+0x124>
 8000e80:	4638      	mov	r0, r7
 8000e82:	e708      	b.n	8000c96 <__udivmoddi4+0xda>
 8000e84:	4637      	mov	r7, r6
 8000e86:	e6e9      	b.n	8000c5c <__udivmoddi4+0xa0>

08000e88 <__aeabi_idiv0>:
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <step>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void step(int8_t x, int8_t y, uint8_t btn)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
 8000e96:	460b      	mov	r3, r1
 8000e98:	71bb      	strb	r3, [r7, #6]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	717b      	strb	r3, [r7, #5]
	uint8_t buff[4];
	buff[0] = btn; 				// Press left button
 8000e9e:	797b      	ldrb	r3, [r7, #5]
 8000ea0:	733b      	strb	r3, [r7, #12]
	buff[1] = (int8_t)(x); 			// Shift X + x
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	737b      	strb	r3, [r7, #13]
	buff[2] = (int8_t)(y); 			// Shift Y + y
 8000ea6:	79bb      	ldrb	r3, [r7, #6]
 8000ea8:	73bb      	strb	r3, [r7, #14]
	buff[3] = 0; 					// Without scroll
 8000eaa:	2300      	movs	r3, #0
 8000eac:	73fb      	strb	r3, [r7, #15]
	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));	// Send data in buffer
 8000eae:	f107 030c 	add.w	r3, r7, #12
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4807      	ldr	r0, [pc, #28]	; (8000ed4 <step+0x48>)
 8000eb8:	f004 fd7a 	bl	80059b0 <USBD_HID_SendReport>
	HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));	// Waiting
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <step+0x48>)
 8000ebe:	f004 fd99 	bl	80059f4 <USBD_HID_GetPollingInterval>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 fc55 	bl	8001774 <HAL_Delay>
}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000238 	.word	0x20000238

08000ed8 <circle>:

void circle(uint8_t radius, float start_ang, float end_ang)
{
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b08c      	sub	sp, #48	; 0x30
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	ed87 0a02 	vstr	s0, [r7, #8]
 8000ee4:	edc7 0a01 	vstr	s1, [r7, #4]
 8000ee8:	73fb      	strb	r3, [r7, #15]
	float 	x = 0;
 8000eea:	f04f 0300 	mov.w	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
	float 	y = 0;
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
	float  sx = radius;
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	ee07 3a90 	vmov	s15, r3
 8000efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f00:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float  sy = 0;
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
	float  act_ang;
	int8_t diff_x, diff_y;
	uint8_t i;

	for (i = 0; i < FIN; i++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f10:	e08f      	b.n	8001032 <circle+0x15a>
	{
		act_ang = i*MIN_ANG_STEP;
 8000f12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fabc 	bl	8000494 <__aeabi_i2d>
 8000f1c:	a34a      	add	r3, pc, #296	; (adr r3, 8001048 <circle+0x170>)
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	f7ff fb21 	bl	8000568 <__aeabi_dmul>
 8000f26:	4603      	mov	r3, r0
 8000f28:	460c      	mov	r4, r1
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	4621      	mov	r1, r4
 8000f2e:	f7ff fddd 	bl	8000aec <__aeabi_d2f>
 8000f32:	4603      	mov	r3, r0
 8000f34:	61bb      	str	r3, [r7, #24]

		x = radius * cos(act_ang);		// Polar to cartesian
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff faab 	bl	8000494 <__aeabi_i2d>
 8000f3e:	4604      	mov	r4, r0
 8000f40:	460d      	mov	r5, r1
 8000f42:	69b8      	ldr	r0, [r7, #24]
 8000f44:	f7ff fab8 	bl	80004b8 <__aeabi_f2d>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	ec43 2b10 	vmov	d0, r2, r3
 8000f50:	f006 fbc6 	bl	80076e0 <cos>
 8000f54:	ec53 2b10 	vmov	r2, r3, d0
 8000f58:	4620      	mov	r0, r4
 8000f5a:	4629      	mov	r1, r5
 8000f5c:	f7ff fb04 	bl	8000568 <__aeabi_dmul>
 8000f60:	4603      	mov	r3, r0
 8000f62:	460c      	mov	r4, r1
 8000f64:	4618      	mov	r0, r3
 8000f66:	4621      	mov	r1, r4
 8000f68:	f7ff fdc0 	bl	8000aec <__aeabi_d2f>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	623b      	str	r3, [r7, #32]
		y = radius * sin(act_ang);
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fa8e 	bl	8000494 <__aeabi_i2d>
 8000f78:	4604      	mov	r4, r0
 8000f7a:	460d      	mov	r5, r1
 8000f7c:	69b8      	ldr	r0, [r7, #24]
 8000f7e:	f7ff fa9b 	bl	80004b8 <__aeabi_f2d>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	ec43 2b10 	vmov	d0, r2, r3
 8000f8a:	f006 fbed 	bl	8007768 <sin>
 8000f8e:	ec53 2b10 	vmov	r2, r3, d0
 8000f92:	4620      	mov	r0, r4
 8000f94:	4629      	mov	r1, r5
 8000f96:	f7ff fae7 	bl	8000568 <__aeabi_dmul>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460c      	mov	r4, r1
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	4621      	mov	r1, r4
 8000fa2:	f7ff fda3 	bl	8000aec <__aeabi_d2f>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	61fb      	str	r3, [r7, #28]

		diff_x = x - sx;						// Difference
 8000faa:	ed97 7a08 	vldr	s14, [r7, #32]
 8000fae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fba:	edc7 7a00 	vstr	s15, [r7]
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	75fb      	strb	r3, [r7, #23]
		diff_y = y - sy;
 8000fc2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fc6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000fca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fd2:	edc7 7a00 	vstr	s15, [r7]
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	75bb      	strb	r3, [r7, #22]


		if ((act_ang > start_ang) && (act_ang < end_ang))
 8000fda:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fde:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fe2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fea:	dd11      	ble.n	8001010 <circle+0x138>
 8000fec:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ff0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffc:	d508      	bpl.n	8001010 <circle+0x138>
			step(diff_x, diff_y, LEFT_BTN);			// Step the cursor
 8000ffe:	f997 1016 	ldrsb.w	r1, [r7, #22]
 8001002:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001006:	2201      	movs	r2, #1
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff3f 	bl	8000e8c <step>
 800100e:	e007      	b.n	8001020 <circle+0x148>
		else
			step(diff_x, diff_y, NONE_BTN);			// Step the cursor
 8001010:	f997 1016 	ldrsb.w	r1, [r7, #22]
 8001014:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001018:	2200      	movs	r2, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff36 	bl	8000e8c <step>

		sx = x;
 8001020:	6a3b      	ldr	r3, [r7, #32]
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
		sy = y;
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
	for (i = 0; i < FIN; i++)
 8001028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800102c:	3301      	adds	r3, #1
 800102e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001036:	2b31      	cmp	r3, #49	; 0x31
 8001038:	f67f af6b 	bls.w	8000f12 <circle+0x3a>
	}
}
 800103c:	bf00      	nop
 800103e:	3730      	adds	r7, #48	; 0x30
 8001040:	46bd      	mov	sp, r7
 8001042:	bdb0      	pop	{r4, r5, r7, pc}
 8001044:	f3af 8000 	nop.w
 8001048:	9ba5e354 	.word	0x9ba5e354
 800104c:	3fc020c4 	.word	0x3fc020c4

08001050 <line_y>:
	step(0, len_x, LEFT_BTN);
}


void line_y(int8_t len_y)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
	step(0, len_y, LEFT_BTN);
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	2201      	movs	r2, #1
 8001060:	4619      	mov	r1, r3
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff ff12 	bl	8000e8c <step>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <pos_cursor>:

void pos_cursor(int8_t step_x, int8_t step_y)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	460a      	mov	r2, r1
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	4613      	mov	r3, r2
 800107e:	71bb      	strb	r3, [r7, #6]
	step(step_x, step_y, NONE_BTN);
 8001080:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	2200      	movs	r2, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fefe 	bl	8000e8c <step>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800109c:	f000 faf8 	bl	8001690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a0:	f000 f84a 	bl	8001138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a4:	f000 f8dc 	bl	8001260 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80010a8:	f000 f8b0 	bl	800120c <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80010ac:	f005 fdf0 	bl	8006c90 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  do { HAL_Delay(40); } while (!HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)); 	// Wait for press
 80010b0:	2028      	movs	r0, #40	; 0x28
 80010b2:	f000 fb5f 	bl	8001774 <HAL_Delay>
 80010b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ba:	481c      	ldr	r0, [pc, #112]	; (800112c <main+0x94>)
 80010bc:	f000 fe38 	bl	8001d30 <HAL_GPIO_ReadPin>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0f4      	beq.n	80010b0 <main+0x18>

	  circle(20, 0, 6.3);
 80010c6:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8001130 <main+0x98>
 80010ca:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8001134 <main+0x9c>
 80010ce:	2014      	movs	r0, #20
 80010d0:	f7ff ff02 	bl	8000ed8 <circle>
	  pos_cursor(5, 5);
 80010d4:	2105      	movs	r1, #5
 80010d6:	2005      	movs	r0, #5
 80010d8:	f7ff ffca 	bl	8001070 <pos_cursor>
	  circle(2, 0, 6.3);
 80010dc:	eddf 0a14 	vldr	s1, [pc, #80]	; 8001130 <main+0x98>
 80010e0:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8001134 <main+0x9c>
 80010e4:	2002      	movs	r0, #2
 80010e6:	f7ff fef7 	bl	8000ed8 <circle>
	  pos_cursor(0,3);
 80010ea:	2103      	movs	r1, #3
 80010ec:	2000      	movs	r0, #0
 80010ee:	f7ff ffbf 	bl	8001070 <pos_cursor>
	  circle(2, 0, 6.3);
 80010f2:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8001130 <main+0x98>
 80010f6:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001134 <main+0x9c>
 80010fa:	2002      	movs	r0, #2
 80010fc:	f7ff feec 	bl	8000ed8 <circle>
	  pos_cursor(-3,-7);
 8001100:	f06f 0106 	mvn.w	r1, #6
 8001104:	f06f 0002 	mvn.w	r0, #2
 8001108:	f7ff ffb2 	bl	8001070 <pos_cursor>
	  line_y(6);
 800110c:	2006      	movs	r0, #6
 800110e:	f7ff ff9f 	bl	8001050 <line_y>
	  pos_cursor(0,3);
 8001112:	2103      	movs	r1, #3
 8001114:	2000      	movs	r0, #0
 8001116:	f7ff ffab 	bl	8001070 <pos_cursor>
	  circle(15, 1, 2.5);
 800111a:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 800111e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001122:	200f      	movs	r0, #15
 8001124:	f7ff fed8 	bl	8000ed8 <circle>
  while (1)
 8001128:	e7c2      	b.n	80010b0 <main+0x18>
 800112a:	bf00      	nop
 800112c:	40020800 	.word	0x40020800
 8001130:	40c9999a 	.word	0x40c9999a
 8001134:	00000000 	.word	0x00000000

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b094      	sub	sp, #80	; 0x50
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 0320 	add.w	r3, r7, #32
 8001142:	2230      	movs	r2, #48	; 0x30
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f006 fa08 	bl	800755c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	4b28      	ldr	r3, [pc, #160]	; (8001204 <SystemClock_Config+0xcc>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	4a27      	ldr	r2, [pc, #156]	; (8001204 <SystemClock_Config+0xcc>)
 8001166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116a:	6413      	str	r3, [r2, #64]	; 0x40
 800116c:	4b25      	ldr	r3, [pc, #148]	; (8001204 <SystemClock_Config+0xcc>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <SystemClock_Config+0xd0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a21      	ldr	r2, [pc, #132]	; (8001208 <SystemClock_Config+0xd0>)
 8001182:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <SystemClock_Config+0xd0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001194:	2301      	movs	r3, #1
 8001196:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001198:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119e:	2302      	movs	r3, #2
 80011a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011a8:	2304      	movs	r3, #4
 80011aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011ac:	23a8      	movs	r3, #168	; 0xa8
 80011ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011b4:	2307      	movs	r3, #7
 80011b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b8:	f107 0320 	add.w	r3, r7, #32
 80011bc:	4618      	mov	r0, r3
 80011be:	f001 ff53 	bl	8003068 <HAL_RCC_OscConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011c8:	f000 f93c 	bl	8001444 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011cc:	230f      	movs	r3, #15
 80011ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d0:	2302      	movs	r3, #2
 80011d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2105      	movs	r1, #5
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 f9ac 	bl	8003548 <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011f6:	f000 f925 	bl	8001444 <Error_Handler>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3750      	adds	r7, #80	; 0x50
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40007000 	.word	0x40007000

0800120c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 8001212:	4a12      	ldr	r2, [pc, #72]	; (800125c <MX_USART3_UART_Init+0x50>)
 8001214:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 8001218:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800121c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 8001232:	220c      	movs	r2, #12
 8001234:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 8001244:	f002 fb72 	bl	800392c <HAL_UART_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800124e:	f000 f8f9 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200001f4 	.word	0x200001f4
 800125c:	40004800 	.word	0x40004800

08001260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08c      	sub	sp, #48	; 0x30
 8001264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	4b6c      	ldr	r3, [pc, #432]	; (800142c <MX_GPIO_Init+0x1cc>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a6b      	ldr	r2, [pc, #428]	; (800142c <MX_GPIO_Init+0x1cc>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b69      	ldr	r3, [pc, #420]	; (800142c <MX_GPIO_Init+0x1cc>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	61bb      	str	r3, [r7, #24]
 8001290:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	4b65      	ldr	r3, [pc, #404]	; (800142c <MX_GPIO_Init+0x1cc>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a64      	ldr	r2, [pc, #400]	; (800142c <MX_GPIO_Init+0x1cc>)
 800129c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b62      	ldr	r3, [pc, #392]	; (800142c <MX_GPIO_Init+0x1cc>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b5e      	ldr	r3, [pc, #376]	; (800142c <MX_GPIO_Init+0x1cc>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a5d      	ldr	r2, [pc, #372]	; (800142c <MX_GPIO_Init+0x1cc>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b5b      	ldr	r3, [pc, #364]	; (800142c <MX_GPIO_Init+0x1cc>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b57      	ldr	r3, [pc, #348]	; (800142c <MX_GPIO_Init+0x1cc>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a56      	ldr	r2, [pc, #344]	; (800142c <MX_GPIO_Init+0x1cc>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b54      	ldr	r3, [pc, #336]	; (800142c <MX_GPIO_Init+0x1cc>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b50      	ldr	r3, [pc, #320]	; (800142c <MX_GPIO_Init+0x1cc>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a4f      	ldr	r2, [pc, #316]	; (800142c <MX_GPIO_Init+0x1cc>)
 80012f0:	f043 0308 	orr.w	r3, r3, #8
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b4d      	ldr	r3, [pc, #308]	; (800142c <MX_GPIO_Init+0x1cc>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b49      	ldr	r3, [pc, #292]	; (800142c <MX_GPIO_Init+0x1cc>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a48      	ldr	r2, [pc, #288]	; (800142c <MX_GPIO_Init+0x1cc>)
 800130c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b46      	ldr	r3, [pc, #280]	; (800142c <MX_GPIO_Init+0x1cc>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f244 0181 	movw	r1, #16513	; 0x4081
 8001324:	4842      	ldr	r0, [pc, #264]	; (8001430 <MX_GPIO_Init+0x1d0>)
 8001326:	f000 fd1b 	bl	8001d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	2140      	movs	r1, #64	; 0x40
 800132e:	4841      	ldr	r0, [pc, #260]	; (8001434 <MX_GPIO_Init+0x1d4>)
 8001330:	f000 fd16 	bl	8001d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800133a:	4b3f      	ldr	r3, [pc, #252]	; (8001438 <MX_GPIO_Init+0x1d8>)
 800133c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	4619      	mov	r1, r3
 8001348:	483c      	ldr	r0, [pc, #240]	; (800143c <MX_GPIO_Init+0x1dc>)
 800134a:	f000 fb47 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800134e:	2332      	movs	r3, #50	; 0x32
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800135e:	230b      	movs	r3, #11
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	4834      	ldr	r0, [pc, #208]	; (800143c <MX_GPIO_Init+0x1dc>)
 800136a:	f000 fb37 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800136e:	2386      	movs	r3, #134	; 0x86
 8001370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800137e:	230b      	movs	r3, #11
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	482d      	ldr	r0, [pc, #180]	; (8001440 <MX_GPIO_Init+0x1e0>)
 800138a:	f000 fb27 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800138e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2300      	movs	r3, #0
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	f107 031c 	add.w	r3, r7, #28
 80013a4:	4619      	mov	r1, r3
 80013a6:	4822      	ldr	r0, [pc, #136]	; (8001430 <MX_GPIO_Init+0x1d0>)
 80013a8:	f000 fb18 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013be:	230b      	movs	r3, #11
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	4619      	mov	r1, r3
 80013c8:	4819      	ldr	r0, [pc, #100]	; (8001430 <MX_GPIO_Init+0x1d0>)
 80013ca:	f000 fb07 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013ce:	2340      	movs	r3, #64	; 0x40
 80013d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	4619      	mov	r1, r3
 80013e4:	4813      	ldr	r0, [pc, #76]	; (8001434 <MX_GPIO_Init+0x1d4>)
 80013e6:	f000 faf9 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ee:	2300      	movs	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	4619      	mov	r1, r3
 80013fc:	480d      	ldr	r0, [pc, #52]	; (8001434 <MX_GPIO_Init+0x1d4>)
 80013fe:	f000 faed 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001402:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001410:	2303      	movs	r3, #3
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001414:	230b      	movs	r3, #11
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001418:	f107 031c 	add.w	r3, r7, #28
 800141c:	4619      	mov	r1, r3
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_GPIO_Init+0x1d4>)
 8001420:	f000 fadc 	bl	80019dc <HAL_GPIO_Init>

}
 8001424:	bf00      	nop
 8001426:	3730      	adds	r7, #48	; 0x30
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40023800 	.word	0x40023800
 8001430:	40020400 	.word	0x40020400
 8001434:	40021800 	.word	0x40021800
 8001438:	10110000 	.word	0x10110000
 800143c:	40020800 	.word	0x40020800
 8001440:	40020000 	.word	0x40020000

08001444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <HAL_MspInit+0x4c>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a0f      	ldr	r2, [pc, #60]	; (80014a0 <HAL_MspInit+0x4c>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <HAL_MspInit+0x4c>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <HAL_MspInit+0x4c>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <HAL_MspInit+0x4c>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_MspInit+0x4c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800

080014a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a19      	ldr	r2, [pc, #100]	; (8001528 <HAL_UART_MspInit+0x84>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d12c      	bne.n	8001520 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_UART_MspInit+0x88>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a17      	ldr	r2, [pc, #92]	; (800152c <HAL_UART_MspInit+0x88>)
 80014d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_UART_MspInit+0x88>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <HAL_UART_MspInit+0x88>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a10      	ldr	r2, [pc, #64]	; (800152c <HAL_UART_MspInit+0x88>)
 80014ec:	f043 0308 	orr.w	r3, r3, #8
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <HAL_UART_MspInit+0x88>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001510:	2307      	movs	r3, #7
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <HAL_UART_MspInit+0x8c>)
 800151c:	f000 fa5e 	bl	80019dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001520:	bf00      	nop
 8001522:	3728      	adds	r7, #40	; 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40004800 	.word	0x40004800
 800152c:	40023800 	.word	0x40023800
 8001530:	40020c00 	.word	0x40020c00

08001534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <HardFault_Handler+0x4>

08001548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <MemManage_Handler+0x4>

0800154e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <BusFault_Handler+0x4>

08001554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <UsageFault_Handler+0x4>

0800155a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001588:	f000 f8d4 	bl	8001734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}

08001590 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <OTG_FS_IRQHandler+0x10>)
 8001596:	f000 fd4c 	bl	8002032 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000708 	.word	0x20000708

080015a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ac:	4a14      	ldr	r2, [pc, #80]	; (8001600 <_sbrk+0x5c>)
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <_sbrk+0x60>)
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <_sbrk+0x64>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <_sbrk+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d207      	bcs.n	80015e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d4:	f005 ff88 	bl	80074e8 <__errno>
 80015d8:	4602      	mov	r2, r0
 80015da:	230c      	movs	r3, #12
 80015dc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	e009      	b.n	80015f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <_sbrk+0x64>)
 80015f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20030000 	.word	0x20030000
 8001604:	00000400 	.word	0x00000400
 8001608:	200001e4 	.word	0x200001e4
 800160c:	20000b18 	.word	0x20000b18

08001610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <SystemInit+0x28>)
 8001616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161a:	4a07      	ldr	r2, [pc, #28]	; (8001638 <SystemInit+0x28>)
 800161c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <SystemInit+0x28>)
 8001626:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800162a:	609a      	str	r2, [r3, #8]
#endif
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800163c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001674 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001640:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001642:	e003      	b.n	800164c <LoopCopyDataInit>

08001644 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001646:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001648:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800164a:	3104      	adds	r1, #4

0800164c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800164c:	480b      	ldr	r0, [pc, #44]	; (800167c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800164e:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001650:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001652:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001654:	d3f6      	bcc.n	8001644 <CopyDataInit>
  ldr  r2, =_sbss
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001658:	e002      	b.n	8001660 <LoopFillZerobss>

0800165a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800165a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800165c:	f842 3b04 	str.w	r3, [r2], #4

08001660 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001662:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001664:	d3f9      	bcc.n	800165a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001666:	f7ff ffd3 	bl	8001610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800166a:	f005 ff43 	bl	80074f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166e:	f7ff fd13 	bl	8001098 <main>
  bx  lr    
 8001672:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001674:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001678:	080089f0 	.word	0x080089f0
  ldr  r0, =_sdata
 800167c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001680:	200001c8 	.word	0x200001c8
  ldr  r2, =_sbss
 8001684:	200001c8 	.word	0x200001c8
  ldr  r3, = _ebss
 8001688:	20000b14 	.word	0x20000b14

0800168c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC_IRQHandler>
	...

08001690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_Init+0x40>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <HAL_Init+0x40>)
 800169a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800169e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_Init+0x40>)
 80016a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <HAL_Init+0x40>)
 80016b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b8:	2003      	movs	r0, #3
 80016ba:	f000 f94d 	bl	8001958 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016be:	2000      	movs	r0, #0
 80016c0:	f000 f808 	bl	80016d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c4:	f7ff fec6 	bl	8001454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023c00 	.word	0x40023c00

080016d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_InitTick+0x54>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_InitTick+0x58>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 f965 	bl	80019c2 <HAL_SYSTICK_Config>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e00e      	b.n	8001720 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b0f      	cmp	r3, #15
 8001706:	d80a      	bhi.n	800171e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001708:	2200      	movs	r2, #0
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f000 f92d 	bl	800196e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001714:	4a06      	ldr	r2, [pc, #24]	; (8001730 <HAL_InitTick+0x5c>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	e000      	b.n	8001720 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000000 	.word	0x20000000
 800172c:	20000008 	.word	0x20000008
 8001730:	20000004 	.word	0x20000004

08001734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_IncTick+0x20>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_IncTick+0x24>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4413      	add	r3, r2
 8001744:	4a04      	ldr	r2, [pc, #16]	; (8001758 <HAL_IncTick+0x24>)
 8001746:	6013      	str	r3, [r2, #0]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000008 	.word	0x20000008
 8001758:	20000234 	.word	0x20000234

0800175c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <HAL_GetTick+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000234 	.word	0x20000234

08001774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff ffee 	bl	800175c <HAL_GetTick>
 8001780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178c:	d005      	beq.n	800179a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_Delay+0x40>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4413      	add	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800179a:	bf00      	nop
 800179c:	f7ff ffde 	bl	800175c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d8f7      	bhi.n	800179c <HAL_Delay+0x28>
  {
  }
}
 80017ac:	bf00      	nop
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000008 	.word	0x20000008

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db0b      	blt.n	8001846 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	4907      	ldr	r1, [pc, #28]	; (8001854 <__NVIC_EnableIRQ+0x38>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2001      	movs	r0, #1
 800183e:	fa00 f202 	lsl.w	r2, r0, r2
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100

08001858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	; (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	; (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001924:	d301      	bcc.n	800192a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001926:	2301      	movs	r3, #1
 8001928:	e00f      	b.n	800194a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <SysTick_Config+0x40>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001932:	210f      	movs	r1, #15
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f7ff ff8e 	bl	8001858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <SysTick_Config+0x40>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001942:	4b04      	ldr	r3, [pc, #16]	; (8001954 <SysTick_Config+0x40>)
 8001944:	2207      	movs	r2, #7
 8001946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	e000e010 	.word	0xe000e010

08001958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff29 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001980:	f7ff ff3e 	bl	8001800 <__NVIC_GetPriorityGrouping>
 8001984:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	6978      	ldr	r0, [r7, #20]
 800198c:	f7ff ff8e 	bl	80018ac <NVIC_EncodePriority>
 8001990:	4602      	mov	r2, r0
 8001992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff5d 	bl	8001858 <__NVIC_SetPriority>
}
 800199e:	bf00      	nop
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff31 	bl	800181c <__NVIC_EnableIRQ>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ffa2 	bl	8001914 <SysTick_Config>
 80019d0:	4603      	mov	r3, r0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	; 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	e177      	b.n	8001ce8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019f8:	2201      	movs	r2, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	f040 8166 	bne.w	8001ce2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d00b      	beq.n	8001a36 <HAL_GPIO_Init+0x5a>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d007      	beq.n	8001a36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a2a:	2b11      	cmp	r3, #17
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b12      	cmp	r3, #18
 8001a34:	d130      	bne.n	8001a98 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	2203      	movs	r2, #3
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	091b      	lsrs	r3, r3, #4
 8001a82:	f003 0201 	and.w	r2, r3, #1
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0xfc>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b12      	cmp	r3, #18
 8001ad6:	d123      	bne.n	8001b20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	08da      	lsrs	r2, r3, #3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3208      	adds	r2, #8
 8001ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	220f      	movs	r2, #15
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	691a      	ldr	r2, [r3, #16]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	08da      	lsrs	r2, r3, #3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3208      	adds	r2, #8
 8001b1a:	69b9      	ldr	r1, [r7, #24]
 8001b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0203 	and.w	r2, r3, #3
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80c0 	beq.w	8001ce2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b65      	ldr	r3, [pc, #404]	; (8001cfc <HAL_GPIO_Init+0x320>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	4a64      	ldr	r2, [pc, #400]	; (8001cfc <HAL_GPIO_Init+0x320>)
 8001b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b70:	6453      	str	r3, [r2, #68]	; 0x44
 8001b72:	4b62      	ldr	r3, [pc, #392]	; (8001cfc <HAL_GPIO_Init+0x320>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b7e:	4a60      	ldr	r2, [pc, #384]	; (8001d00 <HAL_GPIO_Init+0x324>)
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	089b      	lsrs	r3, r3, #2
 8001b84:	3302      	adds	r3, #2
 8001b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	220f      	movs	r2, #15
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a57      	ldr	r2, [pc, #348]	; (8001d04 <HAL_GPIO_Init+0x328>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d037      	beq.n	8001c1a <HAL_GPIO_Init+0x23e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a56      	ldr	r2, [pc, #344]	; (8001d08 <HAL_GPIO_Init+0x32c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d031      	beq.n	8001c16 <HAL_GPIO_Init+0x23a>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a55      	ldr	r2, [pc, #340]	; (8001d0c <HAL_GPIO_Init+0x330>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d02b      	beq.n	8001c12 <HAL_GPIO_Init+0x236>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a54      	ldr	r2, [pc, #336]	; (8001d10 <HAL_GPIO_Init+0x334>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d025      	beq.n	8001c0e <HAL_GPIO_Init+0x232>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a53      	ldr	r2, [pc, #332]	; (8001d14 <HAL_GPIO_Init+0x338>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d01f      	beq.n	8001c0a <HAL_GPIO_Init+0x22e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a52      	ldr	r2, [pc, #328]	; (8001d18 <HAL_GPIO_Init+0x33c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d019      	beq.n	8001c06 <HAL_GPIO_Init+0x22a>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a51      	ldr	r2, [pc, #324]	; (8001d1c <HAL_GPIO_Init+0x340>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d013      	beq.n	8001c02 <HAL_GPIO_Init+0x226>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a50      	ldr	r2, [pc, #320]	; (8001d20 <HAL_GPIO_Init+0x344>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d00d      	beq.n	8001bfe <HAL_GPIO_Init+0x222>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a4f      	ldr	r2, [pc, #316]	; (8001d24 <HAL_GPIO_Init+0x348>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d007      	beq.n	8001bfa <HAL_GPIO_Init+0x21e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a4e      	ldr	r2, [pc, #312]	; (8001d28 <HAL_GPIO_Init+0x34c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d101      	bne.n	8001bf6 <HAL_GPIO_Init+0x21a>
 8001bf2:	2309      	movs	r3, #9
 8001bf4:	e012      	b.n	8001c1c <HAL_GPIO_Init+0x240>
 8001bf6:	230a      	movs	r3, #10
 8001bf8:	e010      	b.n	8001c1c <HAL_GPIO_Init+0x240>
 8001bfa:	2308      	movs	r3, #8
 8001bfc:	e00e      	b.n	8001c1c <HAL_GPIO_Init+0x240>
 8001bfe:	2307      	movs	r3, #7
 8001c00:	e00c      	b.n	8001c1c <HAL_GPIO_Init+0x240>
 8001c02:	2306      	movs	r3, #6
 8001c04:	e00a      	b.n	8001c1c <HAL_GPIO_Init+0x240>
 8001c06:	2305      	movs	r3, #5
 8001c08:	e008      	b.n	8001c1c <HAL_GPIO_Init+0x240>
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	e006      	b.n	8001c1c <HAL_GPIO_Init+0x240>
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e004      	b.n	8001c1c <HAL_GPIO_Init+0x240>
 8001c12:	2302      	movs	r3, #2
 8001c14:	e002      	b.n	8001c1c <HAL_GPIO_Init+0x240>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <HAL_GPIO_Init+0x240>
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	69fa      	ldr	r2, [r7, #28]
 8001c1e:	f002 0203 	and.w	r2, r2, #3
 8001c22:	0092      	lsls	r2, r2, #2
 8001c24:	4093      	lsls	r3, r2
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c2c:	4934      	ldr	r1, [pc, #208]	; (8001d00 <HAL_GPIO_Init+0x324>)
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	089b      	lsrs	r3, r3, #2
 8001c32:	3302      	adds	r3, #2
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c3a:	4b3c      	ldr	r3, [pc, #240]	; (8001d2c <HAL_GPIO_Init+0x350>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c5e:	4a33      	ldr	r2, [pc, #204]	; (8001d2c <HAL_GPIO_Init+0x350>)
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c64:	4b31      	ldr	r3, [pc, #196]	; (8001d2c <HAL_GPIO_Init+0x350>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c88:	4a28      	ldr	r2, [pc, #160]	; (8001d2c <HAL_GPIO_Init+0x350>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c8e:	4b27      	ldr	r3, [pc, #156]	; (8001d2c <HAL_GPIO_Init+0x350>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cb2:	4a1e      	ldr	r2, [pc, #120]	; (8001d2c <HAL_GPIO_Init+0x350>)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cb8:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <HAL_GPIO_Init+0x350>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cdc:	4a13      	ldr	r2, [pc, #76]	; (8001d2c <HAL_GPIO_Init+0x350>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	61fb      	str	r3, [r7, #28]
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	2b0f      	cmp	r3, #15
 8001cec:	f67f ae84 	bls.w	80019f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	3724      	adds	r7, #36	; 0x24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40013800 	.word	0x40013800
 8001d04:	40020000 	.word	0x40020000
 8001d08:	40020400 	.word	0x40020400
 8001d0c:	40020800 	.word	0x40020800
 8001d10:	40020c00 	.word	0x40020c00
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40021400 	.word	0x40021400
 8001d1c:	40021800 	.word	0x40021800
 8001d20:	40021c00 	.word	0x40021c00
 8001d24:	40022000 	.word	0x40022000
 8001d28:	40022400 	.word	0x40022400
 8001d2c:	40013c00 	.word	0x40013c00

08001d30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	887b      	ldrh	r3, [r7, #2]
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	73fb      	strb	r3, [r7, #15]
 8001d4c:	e001      	b.n	8001d52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d70:	787b      	ldrb	r3, [r7, #1]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d76:	887a      	ldrh	r2, [r7, #2]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d7c:	e003      	b.n	8001d86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d7e:	887b      	ldrh	r3, [r7, #2]
 8001d80:	041a      	lsls	r2, r3, #16
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	619a      	str	r2, [r3, #24]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d94:	b08f      	sub	sp, #60	; 0x3c
 8001d96:	af0a      	add	r7, sp, #40	; 0x28
 8001d98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e10f      	b.n	8001fc4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d106      	bne.n	8001dc4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f005 f89a 	bl	8006ef8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d102      	bne.n	8001dde <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f002 fa81 	bl	80042ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	603b      	str	r3, [r7, #0]
 8001dee:	687e      	ldr	r6, [r7, #4]
 8001df0:	466d      	mov	r5, sp
 8001df2:	f106 0410 	add.w	r4, r6, #16
 8001df6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dfe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e02:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e06:	1d33      	adds	r3, r6, #4
 8001e08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e0a:	6838      	ldr	r0, [r7, #0]
 8001e0c:	f002 f958 	bl	80040c0 <USB_CoreInit>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d005      	beq.n	8001e22 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2202      	movs	r2, #2
 8001e1a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e0d0      	b.n	8001fc4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f002 fa6f 	bl	800430c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	73fb      	strb	r3, [r7, #15]
 8001e32:	e04a      	b.n	8001eca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	333d      	adds	r3, #61	; 0x3d
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e48:	7bfa      	ldrb	r2, [r7, #15]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	333c      	adds	r3, #60	; 0x3c
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e5c:	7bfa      	ldrb	r2, [r7, #15]
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	b298      	uxth	r0, r3
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	1a9b      	subs	r3, r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3342      	adds	r3, #66	; 0x42
 8001e70:	4602      	mov	r2, r0
 8001e72:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e74:	7bfa      	ldrb	r2, [r7, #15]
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	1a9b      	subs	r3, r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	333f      	adds	r3, #63	; 0x3f
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e88:	7bfa      	ldrb	r2, [r7, #15]
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	1a9b      	subs	r3, r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	3344      	adds	r3, #68	; 0x44
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	1a9b      	subs	r3, r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	3348      	adds	r3, #72	; 0x48
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001eb0:	7bfa      	ldrb	r2, [r7, #15]
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	1a9b      	subs	r3, r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	3350      	adds	r3, #80	; 0x50
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	73fb      	strb	r3, [r7, #15]
 8001eca:	7bfa      	ldrb	r2, [r7, #15]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d3af      	bcc.n	8001e34 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]
 8001ed8:	e044      	b.n	8001f64 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001eda:	7bfa      	ldrb	r2, [r7, #15]
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	1a9b      	subs	r3, r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ef0:	7bfa      	ldrb	r2, [r7, #15]
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	1a9b      	subs	r3, r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f06:	7bfa      	ldrb	r2, [r7, #15]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	1a9b      	subs	r3, r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	1a9b      	subs	r3, r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	1a9b      	subs	r3, r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	440b      	add	r3, r1
 8001f40:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	1a9b      	subs	r3, r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	3301      	adds	r3, #1
 8001f62:	73fb      	strb	r3, [r7, #15]
 8001f64:	7bfa      	ldrb	r2, [r7, #15]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d3b5      	bcc.n	8001eda <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	687e      	ldr	r6, [r7, #4]
 8001f76:	466d      	mov	r5, sp
 8001f78:	f106 0410 	add.w	r4, r6, #16
 8001f7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f88:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f8c:	1d33      	adds	r3, r6, #4
 8001f8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f90:	6838      	ldr	r0, [r7, #0]
 8001f92:	f002 f9e5 	bl	8004360 <USB_DevInit>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e00d      	b.n	8001fc4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f003 fa2d 	bl	800541c <USB_DevDisconnect>

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fcc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_PCD_Start+0x1c>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e020      	b.n	800202a <HAL_PCD_Start+0x5e>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d109      	bne.n	800200c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d005      	beq.n	800200c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002004:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f002 f959 	bl	80042c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f003 f9dd 	bl	80053da <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002032:	b590      	push	{r4, r7, lr}
 8002034:	b08d      	sub	sp, #52	; 0x34
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f003 fa9b 	bl	8005584 <USB_GetMode>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	f040 839d 	bne.w	8002790 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f003 f9ff 	bl	800545e <USB_ReadInterrupts>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 8393 	beq.w	800278e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f003 f9f6 	bl	800545e <USB_ReadInterrupts>
 8002072:	4603      	mov	r3, r0
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b02      	cmp	r3, #2
 800207a:	d107      	bne.n	800208c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f002 0202 	and.w	r2, r2, #2
 800208a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f003 f9e4 	bl	800545e <USB_ReadInterrupts>
 8002096:	4603      	mov	r3, r0
 8002098:	f003 0310 	and.w	r3, r3, #16
 800209c:	2b10      	cmp	r3, #16
 800209e:	d161      	bne.n	8002164 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699a      	ldr	r2, [r3, #24]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0210 	bic.w	r2, r2, #16
 80020ae:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	f003 020f 	and.w	r2, r3, #15
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	4413      	add	r3, r2
 80020cc:	3304      	adds	r3, #4
 80020ce:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	0c5b      	lsrs	r3, r3, #17
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d124      	bne.n	8002126 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d035      	beq.n	8002154 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	091b      	lsrs	r3, r3, #4
 80020f0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80020f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	461a      	mov	r2, r3
 80020fa:	6a38      	ldr	r0, [r7, #32]
 80020fc:	f003 f84a 	bl	8005194 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	091b      	lsrs	r3, r3, #4
 8002108:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800210c:	441a      	add	r2, r3
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	699a      	ldr	r2, [r3, #24]
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800211e:	441a      	add	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	619a      	str	r2, [r3, #24]
 8002124:	e016      	b.n	8002154 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	0c5b      	lsrs	r3, r3, #17
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	2b06      	cmp	r3, #6
 8002130:	d110      	bne.n	8002154 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002138:	2208      	movs	r2, #8
 800213a:	4619      	mov	r1, r3
 800213c:	6a38      	ldr	r0, [r7, #32]
 800213e:	f003 f829 	bl	8005194 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	699a      	ldr	r2, [r3, #24]
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800214e:	441a      	add	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699a      	ldr	r2, [r3, #24]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0210 	orr.w	r2, r2, #16
 8002162:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f003 f978 	bl	800545e <USB_ReadInterrupts>
 800216e:	4603      	mov	r3, r0
 8002170:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002174:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002178:	d16e      	bne.n	8002258 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f003 f97e 	bl	8005484 <USB_ReadDevAllOutEpInterrupt>
 8002188:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800218a:	e062      	b.n	8002252 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800218c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d057      	beq.n	8002246 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f003 f9a3 	bl	80054ec <USB_ReadDevOutEPInterrupt>
 80021a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00c      	beq.n	80021cc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	015a      	lsls	r2, r3, #5
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021be:	461a      	mov	r2, r3
 80021c0:	2301      	movs	r3, #1
 80021c2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80021c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 fd98 	bl	8002cfc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00c      	beq.n	80021f0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e2:	461a      	mov	r2, r3
 80021e4:	2308      	movs	r3, #8
 80021e6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80021e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 fe92 	bl	8002f14 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f003 0310 	and.w	r3, r3, #16
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d008      	beq.n	800220c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	4413      	add	r3, r2
 8002202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002206:	461a      	mov	r2, r3
 8002208:	2310      	movs	r3, #16
 800220a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	2b00      	cmp	r3, #0
 8002214:	d008      	beq.n	8002228 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	4413      	add	r3, r2
 800221e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002222:	461a      	mov	r2, r3
 8002224:	2320      	movs	r3, #32
 8002226:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d009      	beq.n	8002246 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	4413      	add	r3, r2
 800223a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223e:	461a      	mov	r2, r3
 8002240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002244:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	3301      	adds	r3, #1
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800224c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224e:	085b      	lsrs	r3, r3, #1
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002254:	2b00      	cmp	r3, #0
 8002256:	d199      	bne.n	800218c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f003 f8fe 	bl	800545e <USB_ReadInterrupts>
 8002262:	4603      	mov	r3, r0
 8002264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002268:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800226c:	f040 80c0 	bne.w	80023f0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f003 f91f 	bl	80054b8 <USB_ReadDevAllInEpInterrupt>
 800227a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002280:	e0b2      	b.n	80023e8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80a7 	beq.w	80023dc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f003 f945 	bl	8005528 <USB_ReadDevInEPInterrupt>
 800229e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d057      	beq.n	800235a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	f003 030f 	and.w	r3, r3, #15
 80022b0:	2201      	movs	r2, #1
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69f9      	ldr	r1, [r7, #28]
 80022c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022ca:	4013      	ands	r3, r2
 80022cc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022da:	461a      	mov	r2, r3
 80022dc:	2301      	movs	r3, #1
 80022de:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d132      	bne.n	800234e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	3348      	adds	r3, #72	; 0x48
 80022f8:	6819      	ldr	r1, [r3, #0]
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4403      	add	r3, r0
 8002308:	3344      	adds	r3, #68	; 0x44
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4419      	add	r1, r3
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002312:	4613      	mov	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	1a9b      	subs	r3, r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4403      	add	r3, r0
 800231c:	3348      	adds	r3, #72	; 0x48
 800231e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	2b00      	cmp	r3, #0
 8002324:	d113      	bne.n	800234e <HAL_PCD_IRQHandler+0x31c>
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	3350      	adds	r3, #80	; 0x50
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d108      	bne.n	800234e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6818      	ldr	r0, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002346:	461a      	mov	r2, r3
 8002348:	2101      	movs	r1, #1
 800234a:	f003 f94d 	bl	80055e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	b2db      	uxtb	r3, r3
 8002352:	4619      	mov	r1, r3
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f004 fe5e 	bl	8007016 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	4413      	add	r3, r2
 800236c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002370:	461a      	mov	r2, r3
 8002372:	2308      	movs	r3, #8
 8002374:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	4413      	add	r3, r2
 8002388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800238c:	461a      	mov	r2, r3
 800238e:	2310      	movs	r3, #16
 8002390:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023a8:	461a      	mov	r2, r3
 80023aa:	2340      	movs	r3, #64	; 0x40
 80023ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d008      	beq.n	80023ca <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023c4:	461a      	mov	r2, r3
 80023c6:	2302      	movs	r3, #2
 80023c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 fc03 	bl	8002be2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	3301      	adds	r3, #1
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e4:	085b      	lsrs	r3, r3, #1
 80023e6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f47f af49 	bne.w	8002282 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f003 f832 	bl	800545e <USB_ReadInterrupts>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002400:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002404:	d122      	bne.n	800244c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002420:	2b01      	cmp	r3, #1
 8002422:	d108      	bne.n	8002436 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800242c:	2100      	movs	r1, #0
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 fe0e 	bl	8003050 <HAL_PCDEx_LPM_Callback>
 8002434:	e002      	b.n	800243c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f004 fe64 	bl	8007104 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	695a      	ldr	r2, [r3, #20]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800244a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f003 f804 	bl	800545e <USB_ReadInterrupts>
 8002456:	4603      	mov	r3, r0
 8002458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800245c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002460:	d112      	bne.n	8002488 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b01      	cmp	r3, #1
 8002470:	d102      	bne.n	8002478 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f004 fe20 	bl	80070b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695a      	ldr	r2, [r3, #20]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002486:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f002 ffe6 	bl	800545e <USB_ReadInterrupts>
 8002492:	4603      	mov	r3, r0
 8002494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800249c:	f040 80c7 	bne.w	800262e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	69fa      	ldr	r2, [r7, #28]
 80024aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024ae:	f023 0301 	bic.w	r3, r3, #1
 80024b2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2110      	movs	r1, #16
 80024ba:	4618      	mov	r0, r3
 80024bc:	f002 f8b4 	bl	8004628 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024c0:	2300      	movs	r3, #0
 80024c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024c4:	e056      	b.n	8002574 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024d2:	461a      	mov	r2, r3
 80024d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024d8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024dc:	015a      	lsls	r2, r3, #5
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ea:	0151      	lsls	r1, r2, #5
 80024ec:	69fa      	ldr	r2, [r7, #28]
 80024ee:	440a      	add	r2, r1
 80024f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024f8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80024fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	4413      	add	r3, r2
 8002502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800250a:	0151      	lsls	r1, r2, #5
 800250c:	69fa      	ldr	r2, [r7, #28]
 800250e:	440a      	add	r2, r1
 8002510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002514:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002518:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800251a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	4413      	add	r3, r2
 8002522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002526:	461a      	mov	r2, r3
 8002528:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800252c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800252e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	4413      	add	r3, r2
 8002536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800253e:	0151      	lsls	r1, r2, #5
 8002540:	69fa      	ldr	r2, [r7, #28]
 8002542:	440a      	add	r2, r1
 8002544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002548:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800254c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800254e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002550:	015a      	lsls	r2, r3, #5
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	4413      	add	r3, r2
 8002556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800255e:	0151      	lsls	r1, r2, #5
 8002560:	69fa      	ldr	r2, [r7, #28]
 8002562:	440a      	add	r2, r1
 8002564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002568:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800256c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800256e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002570:	3301      	adds	r3, #1
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800257a:	429a      	cmp	r2, r3
 800257c:	d3a3      	bcc.n	80024c6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	69fa      	ldr	r2, [r7, #28]
 8002588:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800258c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002590:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	2b00      	cmp	r3, #0
 8002598:	d016      	beq.n	80025c8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025a4:	69fa      	ldr	r2, [r7, #28]
 80025a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025aa:	f043 030b 	orr.w	r3, r3, #11
 80025ae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025c0:	f043 030b 	orr.w	r3, r3, #11
 80025c4:	6453      	str	r3, [r2, #68]	; 0x44
 80025c6:	e015      	b.n	80025f4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	69fa      	ldr	r2, [r7, #28]
 80025d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025da:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80025de:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	69fa      	ldr	r2, [r7, #28]
 80025ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ee:	f043 030b 	orr.w	r3, r3, #11
 80025f2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	69fa      	ldr	r2, [r7, #28]
 80025fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002602:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002606:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002618:	461a      	mov	r2, r3
 800261a:	f002 ffe5 	bl	80055e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695a      	ldr	r2, [r3, #20]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800262c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f002 ff13 	bl	800545e <USB_ReadInterrupts>
 8002638:	4603      	mov	r3, r0
 800263a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800263e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002642:	d124      	bne.n	800268e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f002 ffa9 	bl	80055a0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f002 f849 	bl	80046ea <USB_GetDevSpeed>
 8002658:	4603      	mov	r3, r0
 800265a:	461a      	mov	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681c      	ldr	r4, [r3, #0]
 8002664:	f001 f92e 	bl	80038c4 <HAL_RCC_GetHCLKFreq>
 8002668:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800266e:	b2db      	uxtb	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	4620      	mov	r0, r4
 8002674:	f001 fd86 	bl	8004184 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f004 fcf4 	bl	8007066 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800268c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f002 fee3 	bl	800545e <USB_ReadInterrupts>
 8002698:	4603      	mov	r3, r0
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d10a      	bne.n	80026b8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f004 fcd1 	bl	800704a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695a      	ldr	r2, [r3, #20]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f002 0208 	and.w	r2, r2, #8
 80026b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f002 fece 	bl	800545e <USB_ReadInterrupts>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026cc:	d10f      	bne.n	80026ee <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	4619      	mov	r1, r3
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f004 fd33 	bl	8007144 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80026ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f002 feb3 	bl	800545e <USB_ReadInterrupts>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002702:	d10f      	bne.n	8002724 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	b2db      	uxtb	r3, r3
 800270c:	4619      	mov	r1, r3
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f004 fd06 	bl	8007120 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002722:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f002 fe98 	bl	800545e <USB_ReadInterrupts>
 800272e:	4603      	mov	r3, r0
 8002730:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002738:	d10a      	bne.n	8002750 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f004 fd14 	bl	8007168 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800274e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f002 fe82 	bl	800545e <USB_ReadInterrupts>
 800275a:	4603      	mov	r3, r0
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b04      	cmp	r3, #4
 8002762:	d115      	bne.n	8002790 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f004 fd04 	bl	8007184 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6859      	ldr	r1, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	430a      	orrs	r2, r1
 800278a:	605a      	str	r2, [r3, #4]
 800278c:	e000      	b.n	8002790 <HAL_PCD_IRQHandler+0x75e>
      return;
 800278e:	bf00      	nop
    }
  }
}
 8002790:	3734      	adds	r7, #52	; 0x34
 8002792:	46bd      	mov	sp, r7
 8002794:	bd90      	pop	{r4, r7, pc}

08002796 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	460b      	mov	r3, r1
 80027a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_PCD_SetAddress+0x1a>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e013      	b.n	80027d8 <HAL_PCD_SetAddress+0x42>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	4611      	mov	r1, r2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f002 fde0 	bl	800538e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	4608      	mov	r0, r1
 80027ea:	4611      	mov	r1, r2
 80027ec:	461a      	mov	r2, r3
 80027ee:	4603      	mov	r3, r0
 80027f0:	70fb      	strb	r3, [r7, #3]
 80027f2:	460b      	mov	r3, r1
 80027f4:	803b      	strh	r3, [r7, #0]
 80027f6:	4613      	mov	r3, r2
 80027f8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002802:	2b00      	cmp	r3, #0
 8002804:	da0f      	bge.n	8002826 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	f003 020f 	and.w	r2, r3, #15
 800280c:	4613      	mov	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	3338      	adds	r3, #56	; 0x38
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	4413      	add	r3, r2
 800281a:	3304      	adds	r3, #4
 800281c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2201      	movs	r2, #1
 8002822:	705a      	strb	r2, [r3, #1]
 8002824:	e00f      	b.n	8002846 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002826:	78fb      	ldrb	r3, [r7, #3]
 8002828:	f003 020f 	and.w	r2, r3, #15
 800282c:	4613      	mov	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	4413      	add	r3, r2
 800283c:	3304      	adds	r3, #4
 800283e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	f003 030f 	and.w	r3, r3, #15
 800284c:	b2da      	uxtb	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002852:	883a      	ldrh	r2, [r7, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	78ba      	ldrb	r2, [r7, #2]
 800285c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	785b      	ldrb	r3, [r3, #1]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d004      	beq.n	8002870 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002870:	78bb      	ldrb	r3, [r7, #2]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d102      	bne.n	800287c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_PCD_EP_Open+0xaa>
 8002886:	2302      	movs	r3, #2
 8002888:	e00e      	b.n	80028a8 <HAL_PCD_EP_Open+0xc8>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68f9      	ldr	r1, [r7, #12]
 8002898:	4618      	mov	r0, r3
 800289a:	f001 ff4b 	bl	8004734 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80028a6:	7afb      	ldrb	r3, [r7, #11]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	da0f      	bge.n	80028e4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028c4:	78fb      	ldrb	r3, [r7, #3]
 80028c6:	f003 020f 	and.w	r2, r3, #15
 80028ca:	4613      	mov	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	1a9b      	subs	r3, r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	3338      	adds	r3, #56	; 0x38
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	4413      	add	r3, r2
 80028d8:	3304      	adds	r3, #4
 80028da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2201      	movs	r2, #1
 80028e0:	705a      	strb	r2, [r3, #1]
 80028e2:	e00f      	b.n	8002904 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	f003 020f 	and.w	r2, r3, #15
 80028ea:	4613      	mov	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	1a9b      	subs	r3, r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	4413      	add	r3, r2
 80028fa:	3304      	adds	r3, #4
 80028fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	b2da      	uxtb	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_PCD_EP_Close+0x6e>
 800291a:	2302      	movs	r3, #2
 800291c:	e00e      	b.n	800293c <HAL_PCD_EP_Close+0x8c>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68f9      	ldr	r1, [r7, #12]
 800292c:	4618      	mov	r0, r3
 800292e:	f001 ff89 	bl	8004844 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	460b      	mov	r3, r1
 8002952:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002954:	7afb      	ldrb	r3, [r7, #11]
 8002956:	f003 020f 	and.w	r2, r3, #15
 800295a:	4613      	mov	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4413      	add	r3, r2
 800296a:	3304      	adds	r3, #4
 800296c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2200      	movs	r2, #0
 8002984:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002986:	7afb      	ldrb	r3, [r7, #11]
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	b2da      	uxtb	r2, r3
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d102      	bne.n	80029a0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029a0:	7afb      	ldrb	r3, [r7, #11]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d109      	bne.n	80029be <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	6979      	ldr	r1, [r7, #20]
 80029b8:	f002 fa64 	bl	8004e84 <USB_EP0StartXfer>
 80029bc:	e008      	b.n	80029d0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	461a      	mov	r2, r3
 80029ca:	6979      	ldr	r1, [r7, #20]
 80029cc:	f002 f816 	bl	80049fc <USB_EPStartXfer>
  }

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b086      	sub	sp, #24
 80029de:	af00      	add	r7, sp, #0
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	460b      	mov	r3, r1
 80029e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ea:	7afb      	ldrb	r3, [r7, #11]
 80029ec:	f003 020f 	and.w	r2, r3, #15
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	3338      	adds	r3, #56	; 0x38
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4413      	add	r3, r2
 80029fe:	3304      	adds	r3, #4
 8002a00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2200      	movs	r2, #0
 8002a12:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2201      	movs	r2, #1
 8002a18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a1a:	7afb      	ldrb	r3, [r7, #11]
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d102      	bne.n	8002a34 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a34:	7afb      	ldrb	r3, [r7, #11]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	6979      	ldr	r1, [r7, #20]
 8002a4c:	f002 fa1a 	bl	8004e84 <USB_EP0StartXfer>
 8002a50:	e008      	b.n	8002a64 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	6979      	ldr	r1, [r7, #20]
 8002a60:	f001 ffcc 	bl	80049fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	460b      	mov	r3, r1
 8002a78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a7a:	78fb      	ldrb	r3, [r7, #3]
 8002a7c:	f003 020f 	and.w	r2, r3, #15
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d901      	bls.n	8002a8c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e050      	b.n	8002b2e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	da0f      	bge.n	8002ab4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	f003 020f 	and.w	r2, r3, #15
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	1a9b      	subs	r3, r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	3338      	adds	r3, #56	; 0x38
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	705a      	strb	r2, [r3, #1]
 8002ab2:	e00d      	b.n	8002ad0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ab4:	78fa      	ldrb	r2, [r7, #3]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ad6:	78fb      	ldrb	r3, [r7, #3]
 8002ad8:	f003 030f 	and.w	r3, r3, #15
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <HAL_PCD_EP_SetStall+0x82>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e01e      	b.n	8002b2e <HAL_PCD_EP_SetStall+0xc0>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68f9      	ldr	r1, [r7, #12]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f002 fb71 	bl	80051e6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10a      	bne.n	8002b24 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	b2d9      	uxtb	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b1e:	461a      	mov	r2, r3
 8002b20:	f002 fd62 	bl	80055e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b42:	78fb      	ldrb	r3, [r7, #3]
 8002b44:	f003 020f 	and.w	r2, r3, #15
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d901      	bls.n	8002b54 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e042      	b.n	8002bda <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	da0f      	bge.n	8002b7c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	f003 020f 	and.w	r2, r3, #15
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	1a9b      	subs	r3, r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	3338      	adds	r3, #56	; 0x38
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	4413      	add	r3, r2
 8002b70:	3304      	adds	r3, #4
 8002b72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	705a      	strb	r2, [r3, #1]
 8002b7a:	e00f      	b.n	8002b9c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	f003 020f 	and.w	r2, r3, #15
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	1a9b      	subs	r3, r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	3304      	adds	r3, #4
 8002b94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_PCD_EP_ClrStall+0x86>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e00e      	b.n	8002bda <HAL_PCD_EP_ClrStall+0xa4>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68f9      	ldr	r1, [r7, #12]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f002 fb79 	bl	80052c2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b08a      	sub	sp, #40	; 0x28
 8002be6:	af02      	add	r7, sp, #8
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	3338      	adds	r3, #56	; 0x38
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	4413      	add	r3, r2
 8002c06:	3304      	adds	r3, #4
 8002c08:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d901      	bls.n	8002c1a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e06c      	b.n	8002cf4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d902      	bls.n	8002c36 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	3303      	adds	r3, #3
 8002c3a:	089b      	lsrs	r3, r3, #2
 8002c3c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c3e:	e02b      	b.n	8002c98 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	695a      	ldr	r2, [r3, #20]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	69fa      	ldr	r2, [r7, #28]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d902      	bls.n	8002c5c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	3303      	adds	r3, #3
 8002c60:	089b      	lsrs	r3, r3, #2
 8002c62:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	68d9      	ldr	r1, [r3, #12]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	4603      	mov	r3, r0
 8002c7a:	6978      	ldr	r0, [r7, #20]
 8002c7c:	f002 fa55 	bl	800512a <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	441a      	add	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	699a      	ldr	r2, [r3, #24]
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	441a      	add	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d809      	bhi.n	8002cc2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	699a      	ldr	r2, [r3, #24]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d203      	bcs.n	8002cc2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1be      	bne.n	8002c40 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d811      	bhi.n	8002cf2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ce2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	6939      	ldr	r1, [r7, #16]
 8002cea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002cee:	4013      	ands	r3, r2
 8002cf0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3720      	adds	r7, #32
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	333c      	adds	r3, #60	; 0x3c
 8002d14:	3304      	adds	r3, #4
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	015a      	lsls	r2, r3, #5
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	4413      	add	r3, r2
 8002d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	f040 80a0 	bne.w	8002e74 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d015      	beq.n	8002d6a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4a72      	ldr	r2, [pc, #456]	; (8002f0c <PCD_EP_OutXfrComplete_int+0x210>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	f240 80dd 	bls.w	8002f02 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 80d7 	beq.w	8002f02 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d60:	461a      	mov	r2, r3
 8002d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d66:	6093      	str	r3, [r2, #8]
 8002d68:	e0cb      	b.n	8002f02 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d009      	beq.n	8002d88 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d80:	461a      	mov	r2, r3
 8002d82:	2320      	movs	r3, #32
 8002d84:	6093      	str	r3, [r2, #8]
 8002d86:	e0bc      	b.n	8002f02 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f040 80b7 	bne.w	8002f02 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4a5d      	ldr	r2, [pc, #372]	; (8002f0c <PCD_EP_OutXfrComplete_int+0x210>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d90f      	bls.n	8002dbc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002db2:	461a      	mov	r2, r3
 8002db4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002db8:	6093      	str	r3, [r2, #8]
 8002dba:	e0a2      	b.n	8002f02 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002dce:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	0159      	lsls	r1, r3, #5
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	440b      	add	r3, r1
 8002dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002de2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	4613      	mov	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4403      	add	r3, r0
 8002df2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002df6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	1a9b      	subs	r3, r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e0a:	6819      	ldr	r1, [r3, #0]
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	4613      	mov	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4403      	add	r3, r0
 8002e1a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4419      	add	r1, r3
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	4613      	mov	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4403      	add	r3, r0
 8002e30:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e34:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d114      	bne.n	8002e66 <PCD_EP_OutXfrComplete_int+0x16a>
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d108      	bne.n	8002e66 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e5e:	461a      	mov	r2, r3
 8002e60:	2101      	movs	r1, #1
 8002e62:	f002 fbc1 	bl	80055e8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f004 f8b7 	bl	8006fe0 <HAL_PCD_DataOutStageCallback>
 8002e72:	e046      	b.n	8002f02 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4a26      	ldr	r2, [pc, #152]	; (8002f10 <PCD_EP_OutXfrComplete_int+0x214>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d124      	bne.n	8002ec6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	015a      	lsls	r2, r3, #5
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e92:	461a      	mov	r2, r3
 8002e94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e98:	6093      	str	r3, [r2, #8]
 8002e9a:	e032      	b.n	8002f02 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f003 0320 	and.w	r3, r3, #32
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d008      	beq.n	8002eb8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2320      	movs	r3, #32
 8002eb6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f004 f88e 	bl	8006fe0 <HAL_PCD_DataOutStageCallback>
 8002ec4:	e01d      	b.n	8002f02 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d114      	bne.n	8002ef6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d108      	bne.n	8002ef6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002eee:	461a      	mov	r2, r3
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	f002 fb79 	bl	80055e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	4619      	mov	r1, r3
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f004 f86f 	bl	8006fe0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	4f54300a 	.word	0x4f54300a
 8002f10:	4f54310a 	.word	0x4f54310a

08002f14 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	333c      	adds	r3, #60	; 0x3c
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4a15      	ldr	r2, [pc, #84]	; (8002f9c <PCD_EP_OutSetupPacket_int+0x88>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d90e      	bls.n	8002f68 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d009      	beq.n	8002f68 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f60:	461a      	mov	r2, r3
 8002f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f66:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f004 f827 	bl	8006fbc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4a0a      	ldr	r2, [pc, #40]	; (8002f9c <PCD_EP_OutSetupPacket_int+0x88>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d90c      	bls.n	8002f90 <PCD_EP_OutSetupPacket_int+0x7c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d108      	bne.n	8002f90 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f88:	461a      	mov	r2, r3
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	f002 fb2c 	bl	80055e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	4f54300a 	.word	0x4f54300a

08002fa0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	70fb      	strb	r3, [r7, #3]
 8002fac:	4613      	mov	r3, r2
 8002fae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d107      	bne.n	8002fce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002fbe:	883b      	ldrh	r3, [r7, #0]
 8002fc0:	0419      	lsls	r1, r3, #16
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	629a      	str	r2, [r3, #40]	; 0x28
 8002fcc:	e028      	b.n	8003020 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	0c1b      	lsrs	r3, r3, #16
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	4413      	add	r3, r2
 8002fda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fdc:	2300      	movs	r3, #0
 8002fde:	73fb      	strb	r3, [r7, #15]
 8002fe0:	e00d      	b.n	8002ffe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	3340      	adds	r3, #64	; 0x40
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	0c1b      	lsrs	r3, r3, #16
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	73fb      	strb	r3, [r7, #15]
 8002ffe:	7bfa      	ldrb	r2, [r7, #15]
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	3b01      	subs	r3, #1
 8003004:	429a      	cmp	r2, r3
 8003006:	d3ec      	bcc.n	8002fe2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003008:	883b      	ldrh	r3, [r7, #0]
 800300a:	0418      	lsls	r0, r3, #16
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6819      	ldr	r1, [r3, #0]
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	3b01      	subs	r3, #1
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	4302      	orrs	r2, r0
 8003018:	3340      	adds	r3, #64	; 0x40
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	460b      	mov	r3, r1
 8003038:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	887a      	ldrh	r2, [r7, #2]
 8003040:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e25b      	b.n	8003532 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d075      	beq.n	8003172 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003086:	4ba3      	ldr	r3, [pc, #652]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b04      	cmp	r3, #4
 8003090:	d00c      	beq.n	80030ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003092:	4ba0      	ldr	r3, [pc, #640]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800309a:	2b08      	cmp	r3, #8
 800309c:	d112      	bne.n	80030c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800309e:	4b9d      	ldr	r3, [pc, #628]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030aa:	d10b      	bne.n	80030c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ac:	4b99      	ldr	r3, [pc, #612]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d05b      	beq.n	8003170 <HAL_RCC_OscConfig+0x108>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d157      	bne.n	8003170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e236      	b.n	8003532 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030cc:	d106      	bne.n	80030dc <HAL_RCC_OscConfig+0x74>
 80030ce:	4b91      	ldr	r3, [pc, #580]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a90      	ldr	r2, [pc, #576]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	e01d      	b.n	8003118 <HAL_RCC_OscConfig+0xb0>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0x98>
 80030e6:	4b8b      	ldr	r3, [pc, #556]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a8a      	ldr	r2, [pc, #552]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80030ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	4b88      	ldr	r3, [pc, #544]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a87      	ldr	r2, [pc, #540]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80030f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	e00b      	b.n	8003118 <HAL_RCC_OscConfig+0xb0>
 8003100:	4b84      	ldr	r3, [pc, #528]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a83      	ldr	r2, [pc, #524]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 8003106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	4b81      	ldr	r3, [pc, #516]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a80      	ldr	r2, [pc, #512]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 8003112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d013      	beq.n	8003148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7fe fb1c 	bl	800175c <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003128:	f7fe fb18 	bl	800175c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	; 0x64
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e1fb      	b.n	8003532 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313a:	4b76      	ldr	r3, [pc, #472]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0xc0>
 8003146:	e014      	b.n	8003172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003148:	f7fe fb08 	bl	800175c <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003150:	f7fe fb04 	bl	800175c <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b64      	cmp	r3, #100	; 0x64
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e1e7      	b.n	8003532 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003162:	4b6c      	ldr	r3, [pc, #432]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0xe8>
 800316e:	e000      	b.n	8003172 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d063      	beq.n	8003246 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800317e:	4b65      	ldr	r3, [pc, #404]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00b      	beq.n	80031a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800318a:	4b62      	ldr	r3, [pc, #392]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003192:	2b08      	cmp	r3, #8
 8003194:	d11c      	bne.n	80031d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003196:	4b5f      	ldr	r3, [pc, #380]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d116      	bne.n	80031d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a2:	4b5c      	ldr	r3, [pc, #368]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d005      	beq.n	80031ba <HAL_RCC_OscConfig+0x152>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d001      	beq.n	80031ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e1bb      	b.n	8003532 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ba:	4b56      	ldr	r3, [pc, #344]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	4952      	ldr	r1, [pc, #328]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ce:	e03a      	b.n	8003246 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d020      	beq.n	800321a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d8:	4b4f      	ldr	r3, [pc, #316]	; (8003318 <HAL_RCC_OscConfig+0x2b0>)
 80031da:	2201      	movs	r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031de:	f7fe fabd 	bl	800175c <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031e6:	f7fe fab9 	bl	800175c <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e19c      	b.n	8003532 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f8:	4b46      	ldr	r3, [pc, #280]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0f0      	beq.n	80031e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003204:	4b43      	ldr	r3, [pc, #268]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4940      	ldr	r1, [pc, #256]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 8003214:	4313      	orrs	r3, r2
 8003216:	600b      	str	r3, [r1, #0]
 8003218:	e015      	b.n	8003246 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800321a:	4b3f      	ldr	r3, [pc, #252]	; (8003318 <HAL_RCC_OscConfig+0x2b0>)
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003220:	f7fe fa9c 	bl	800175c <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003228:	f7fe fa98 	bl	800175c <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e17b      	b.n	8003532 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323a:	4b36      	ldr	r3, [pc, #216]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d030      	beq.n	80032b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d016      	beq.n	8003288 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800325a:	4b30      	ldr	r3, [pc, #192]	; (800331c <HAL_RCC_OscConfig+0x2b4>)
 800325c:	2201      	movs	r2, #1
 800325e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fe fa7c 	bl	800175c <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003268:	f7fe fa78 	bl	800175c <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e15b      	b.n	8003532 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327a:	4b26      	ldr	r3, [pc, #152]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 800327c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0x200>
 8003286:	e015      	b.n	80032b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003288:	4b24      	ldr	r3, [pc, #144]	; (800331c <HAL_RCC_OscConfig+0x2b4>)
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328e:	f7fe fa65 	bl	800175c <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003296:	f7fe fa61 	bl	800175c <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e144      	b.n	8003532 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a8:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80032aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1f0      	bne.n	8003296 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80a0 	beq.w	8003402 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c2:	2300      	movs	r3, #0
 80032c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c6:	4b13      	ldr	r3, [pc, #76]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10f      	bne.n	80032f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	4a0e      	ldr	r2, [pc, #56]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80032dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e0:	6413      	str	r3, [r2, #64]	; 0x40
 80032e2:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <HAL_RCC_OscConfig+0x2ac>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ee:	2301      	movs	r3, #1
 80032f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f2:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_RCC_OscConfig+0x2b8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d121      	bne.n	8003342 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032fe:	4b08      	ldr	r3, [pc, #32]	; (8003320 <HAL_RCC_OscConfig+0x2b8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a07      	ldr	r2, [pc, #28]	; (8003320 <HAL_RCC_OscConfig+0x2b8>)
 8003304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800330a:	f7fe fa27 	bl	800175c <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003310:	e011      	b.n	8003336 <HAL_RCC_OscConfig+0x2ce>
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800
 8003318:	42470000 	.word	0x42470000
 800331c:	42470e80 	.word	0x42470e80
 8003320:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003324:	f7fe fa1a 	bl	800175c <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e0fd      	b.n	8003532 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003336:	4b81      	ldr	r3, [pc, #516]	; (800353c <HAL_RCC_OscConfig+0x4d4>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d106      	bne.n	8003358 <HAL_RCC_OscConfig+0x2f0>
 800334a:	4b7d      	ldr	r3, [pc, #500]	; (8003540 <HAL_RCC_OscConfig+0x4d8>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	4a7c      	ldr	r2, [pc, #496]	; (8003540 <HAL_RCC_OscConfig+0x4d8>)
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	6713      	str	r3, [r2, #112]	; 0x70
 8003356:	e01c      	b.n	8003392 <HAL_RCC_OscConfig+0x32a>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b05      	cmp	r3, #5
 800335e:	d10c      	bne.n	800337a <HAL_RCC_OscConfig+0x312>
 8003360:	4b77      	ldr	r3, [pc, #476]	; (8003540 <HAL_RCC_OscConfig+0x4d8>)
 8003362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003364:	4a76      	ldr	r2, [pc, #472]	; (8003540 <HAL_RCC_OscConfig+0x4d8>)
 8003366:	f043 0304 	orr.w	r3, r3, #4
 800336a:	6713      	str	r3, [r2, #112]	; 0x70
 800336c:	4b74      	ldr	r3, [pc, #464]	; (8003540 <HAL_RCC_OscConfig+0x4d8>)
 800336e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003370:	4a73      	ldr	r2, [pc, #460]	; (8003540 <HAL_RCC_OscConfig+0x4d8>)
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	6713      	str	r3, [r2, #112]	; 0x70
 8003378:	e00b      	b.n	8003392 <HAL_RCC_OscConfig+0x32a>
 800337a:	4b71      	ldr	r3, [pc, #452]	; (8003540 <HAL_RCC_OscConfig+0x4d8>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337e:	4a70      	ldr	r2, [pc, #448]	; (8003540 <HAL_RCC_OscConfig+0x4d8>)
 8003380:	f023 0301 	bic.w	r3, r3, #1
 8003384:	6713      	str	r3, [r2, #112]	; 0x70
 8003386:	4b6e      	ldr	r3, [pc, #440]	; (8003540 <HAL_RCC_OscConfig+0x4d8>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	4a6d      	ldr	r2, [pc, #436]	; (8003540 <HAL_RCC_OscConfig+0x4d8>)
 800338c:	f023 0304 	bic.w	r3, r3, #4
 8003390:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d015      	beq.n	80033c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339a:	f7fe f9df 	bl	800175c <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a0:	e00a      	b.n	80033b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a2:	f7fe f9db 	bl	800175c <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e0bc      	b.n	8003532 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b8:	4b61      	ldr	r3, [pc, #388]	; (8003540 <HAL_RCC_OscConfig+0x4d8>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0ee      	beq.n	80033a2 <HAL_RCC_OscConfig+0x33a>
 80033c4:	e014      	b.n	80033f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c6:	f7fe f9c9 	bl	800175c <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033cc:	e00a      	b.n	80033e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ce:	f7fe f9c5 	bl	800175c <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033dc:	4293      	cmp	r3, r2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e0a6      	b.n	8003532 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e4:	4b56      	ldr	r3, [pc, #344]	; (8003540 <HAL_RCC_OscConfig+0x4d8>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1ee      	bne.n	80033ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033f0:	7dfb      	ldrb	r3, [r7, #23]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d105      	bne.n	8003402 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f6:	4b52      	ldr	r3, [pc, #328]	; (8003540 <HAL_RCC_OscConfig+0x4d8>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	4a51      	ldr	r2, [pc, #324]	; (8003540 <HAL_RCC_OscConfig+0x4d8>)
 80033fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003400:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 8092 	beq.w	8003530 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800340c:	4b4c      	ldr	r3, [pc, #304]	; (8003540 <HAL_RCC_OscConfig+0x4d8>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b08      	cmp	r3, #8
 8003416:	d05c      	beq.n	80034d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d141      	bne.n	80034a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003420:	4b48      	ldr	r3, [pc, #288]	; (8003544 <HAL_RCC_OscConfig+0x4dc>)
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7fe f999 	bl	800175c <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342e:	f7fe f995 	bl	800175c <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e078      	b.n	8003532 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003440:	4b3f      	ldr	r3, [pc, #252]	; (8003540 <HAL_RCC_OscConfig+0x4d8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1f0      	bne.n	800342e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69da      	ldr	r2, [r3, #28]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	431a      	orrs	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	019b      	lsls	r3, r3, #6
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	085b      	lsrs	r3, r3, #1
 8003464:	3b01      	subs	r3, #1
 8003466:	041b      	lsls	r3, r3, #16
 8003468:	431a      	orrs	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	061b      	lsls	r3, r3, #24
 8003470:	4933      	ldr	r1, [pc, #204]	; (8003540 <HAL_RCC_OscConfig+0x4d8>)
 8003472:	4313      	orrs	r3, r2
 8003474:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003476:	4b33      	ldr	r3, [pc, #204]	; (8003544 <HAL_RCC_OscConfig+0x4dc>)
 8003478:	2201      	movs	r2, #1
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fe f96e 	bl	800175c <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003484:	f7fe f96a 	bl	800175c <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e04d      	b.n	8003532 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003496:	4b2a      	ldr	r3, [pc, #168]	; (8003540 <HAL_RCC_OscConfig+0x4d8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCC_OscConfig+0x41c>
 80034a2:	e045      	b.n	8003530 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a4:	4b27      	ldr	r3, [pc, #156]	; (8003544 <HAL_RCC_OscConfig+0x4dc>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034aa:	f7fe f957 	bl	800175c <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b2:	f7fe f953 	bl	800175c <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e036      	b.n	8003532 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c4:	4b1e      	ldr	r3, [pc, #120]	; (8003540 <HAL_RCC_OscConfig+0x4d8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1f0      	bne.n	80034b2 <HAL_RCC_OscConfig+0x44a>
 80034d0:	e02e      	b.n	8003530 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e029      	b.n	8003532 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034de:	4b18      	ldr	r3, [pc, #96]	; (8003540 <HAL_RCC_OscConfig+0x4d8>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d11c      	bne.n	800352c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d115      	bne.n	800352c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003506:	4013      	ands	r3, r2
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800350c:	4293      	cmp	r3, r2
 800350e:	d10d      	bne.n	800352c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800351a:	429a      	cmp	r2, r3
 800351c:	d106      	bne.n	800352c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003528:	429a      	cmp	r2, r3
 800352a:	d001      	beq.n	8003530 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40007000 	.word	0x40007000
 8003540:	40023800 	.word	0x40023800
 8003544:	42470060 	.word	0x42470060

08003548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0cc      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800355c:	4b68      	ldr	r3, [pc, #416]	; (8003700 <HAL_RCC_ClockConfig+0x1b8>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d90c      	bls.n	8003584 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356a:	4b65      	ldr	r3, [pc, #404]	; (8003700 <HAL_RCC_ClockConfig+0x1b8>)
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003572:	4b63      	ldr	r3, [pc, #396]	; (8003700 <HAL_RCC_ClockConfig+0x1b8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d001      	beq.n	8003584 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0b8      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d020      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800359c:	4b59      	ldr	r3, [pc, #356]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	4a58      	ldr	r2, [pc, #352]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035b4:	4b53      	ldr	r3, [pc, #332]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	4a52      	ldr	r2, [pc, #328]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c0:	4b50      	ldr	r3, [pc, #320]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	494d      	ldr	r1, [pc, #308]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d044      	beq.n	8003668 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d107      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e6:	4b47      	ldr	r3, [pc, #284]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d119      	bne.n	8003626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e07f      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d003      	beq.n	8003606 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003602:	2b03      	cmp	r3, #3
 8003604:	d107      	bne.n	8003616 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003606:	4b3f      	ldr	r3, [pc, #252]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e06f      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003616:	4b3b      	ldr	r3, [pc, #236]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e067      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003626:	4b37      	ldr	r3, [pc, #220]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f023 0203 	bic.w	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4934      	ldr	r1, [pc, #208]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 8003634:	4313      	orrs	r3, r2
 8003636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003638:	f7fe f890 	bl	800175c <HAL_GetTick>
 800363c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	e00a      	b.n	8003656 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003640:	f7fe f88c 	bl	800175c <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	; 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e04f      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	4b2b      	ldr	r3, [pc, #172]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 020c 	and.w	r2, r3, #12
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	429a      	cmp	r2, r3
 8003666:	d1eb      	bne.n	8003640 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003668:	4b25      	ldr	r3, [pc, #148]	; (8003700 <HAL_RCC_ClockConfig+0x1b8>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d20c      	bcs.n	8003690 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003676:	4b22      	ldr	r3, [pc, #136]	; (8003700 <HAL_RCC_ClockConfig+0x1b8>)
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800367e:	4b20      	ldr	r3, [pc, #128]	; (8003700 <HAL_RCC_ClockConfig+0x1b8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d001      	beq.n	8003690 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e032      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800369c:	4b19      	ldr	r3, [pc, #100]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	4916      	ldr	r1, [pc, #88]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d009      	beq.n	80036ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ba:	4b12      	ldr	r3, [pc, #72]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	490e      	ldr	r1, [pc, #56]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036ce:	f000 f821 	bl	8003714 <HAL_RCC_GetSysClockFreq>
 80036d2:	4601      	mov	r1, r0
 80036d4:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <HAL_RCC_ClockConfig+0x1c0>)
 80036e0:	5cd3      	ldrb	r3, [r2, r3]
 80036e2:	fa21 f303 	lsr.w	r3, r1, r3
 80036e6:	4a09      	ldr	r2, [pc, #36]	; (800370c <HAL_RCC_ClockConfig+0x1c4>)
 80036e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036ea:	4b09      	ldr	r3, [pc, #36]	; (8003710 <HAL_RCC_ClockConfig+0x1c8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fd fff0 	bl	80016d4 <HAL_InitTick>

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40023c00 	.word	0x40023c00
 8003704:	40023800 	.word	0x40023800
 8003708:	080087f0 	.word	0x080087f0
 800370c:	20000000 	.word	0x20000000
 8003710:	20000004 	.word	0x20000004

08003714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	607b      	str	r3, [r7, #4]
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	2300      	movs	r3, #0
 8003724:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800372a:	4b63      	ldr	r3, [pc, #396]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
 8003732:	2b04      	cmp	r3, #4
 8003734:	d007      	beq.n	8003746 <HAL_RCC_GetSysClockFreq+0x32>
 8003736:	2b08      	cmp	r3, #8
 8003738:	d008      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x38>
 800373a:	2b00      	cmp	r3, #0
 800373c:	f040 80b4 	bne.w	80038a8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003740:	4b5e      	ldr	r3, [pc, #376]	; (80038bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003742:	60bb      	str	r3, [r7, #8]
       break;
 8003744:	e0b3      	b.n	80038ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003746:	4b5e      	ldr	r3, [pc, #376]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003748:	60bb      	str	r3, [r7, #8]
      break;
 800374a:	e0b0      	b.n	80038ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800374c:	4b5a      	ldr	r3, [pc, #360]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003754:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003756:	4b58      	ldr	r3, [pc, #352]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d04a      	beq.n	80037f8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003762:	4b55      	ldr	r3, [pc, #340]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	099b      	lsrs	r3, r3, #6
 8003768:	f04f 0400 	mov.w	r4, #0
 800376c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	ea03 0501 	and.w	r5, r3, r1
 8003778:	ea04 0602 	and.w	r6, r4, r2
 800377c:	4629      	mov	r1, r5
 800377e:	4632      	mov	r2, r6
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	f04f 0400 	mov.w	r4, #0
 8003788:	0154      	lsls	r4, r2, #5
 800378a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800378e:	014b      	lsls	r3, r1, #5
 8003790:	4619      	mov	r1, r3
 8003792:	4622      	mov	r2, r4
 8003794:	1b49      	subs	r1, r1, r5
 8003796:	eb62 0206 	sbc.w	r2, r2, r6
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	f04f 0400 	mov.w	r4, #0
 80037a2:	0194      	lsls	r4, r2, #6
 80037a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037a8:	018b      	lsls	r3, r1, #6
 80037aa:	1a5b      	subs	r3, r3, r1
 80037ac:	eb64 0402 	sbc.w	r4, r4, r2
 80037b0:	f04f 0100 	mov.w	r1, #0
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	00e2      	lsls	r2, r4, #3
 80037ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037be:	00d9      	lsls	r1, r3, #3
 80037c0:	460b      	mov	r3, r1
 80037c2:	4614      	mov	r4, r2
 80037c4:	195b      	adds	r3, r3, r5
 80037c6:	eb44 0406 	adc.w	r4, r4, r6
 80037ca:	f04f 0100 	mov.w	r1, #0
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	0262      	lsls	r2, r4, #9
 80037d4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80037d8:	0259      	lsls	r1, r3, #9
 80037da:	460b      	mov	r3, r1
 80037dc:	4614      	mov	r4, r2
 80037de:	4618      	mov	r0, r3
 80037e0:	4621      	mov	r1, r4
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f04f 0400 	mov.w	r4, #0
 80037e8:	461a      	mov	r2, r3
 80037ea:	4623      	mov	r3, r4
 80037ec:	f7fd f9ce 	bl	8000b8c <__aeabi_uldivmod>
 80037f0:	4603      	mov	r3, r0
 80037f2:	460c      	mov	r4, r1
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	e049      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f8:	4b2f      	ldr	r3, [pc, #188]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	099b      	lsrs	r3, r3, #6
 80037fe:	f04f 0400 	mov.w	r4, #0
 8003802:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	ea03 0501 	and.w	r5, r3, r1
 800380e:	ea04 0602 	and.w	r6, r4, r2
 8003812:	4629      	mov	r1, r5
 8003814:	4632      	mov	r2, r6
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	f04f 0400 	mov.w	r4, #0
 800381e:	0154      	lsls	r4, r2, #5
 8003820:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003824:	014b      	lsls	r3, r1, #5
 8003826:	4619      	mov	r1, r3
 8003828:	4622      	mov	r2, r4
 800382a:	1b49      	subs	r1, r1, r5
 800382c:	eb62 0206 	sbc.w	r2, r2, r6
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	f04f 0400 	mov.w	r4, #0
 8003838:	0194      	lsls	r4, r2, #6
 800383a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800383e:	018b      	lsls	r3, r1, #6
 8003840:	1a5b      	subs	r3, r3, r1
 8003842:	eb64 0402 	sbc.w	r4, r4, r2
 8003846:	f04f 0100 	mov.w	r1, #0
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	00e2      	lsls	r2, r4, #3
 8003850:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003854:	00d9      	lsls	r1, r3, #3
 8003856:	460b      	mov	r3, r1
 8003858:	4614      	mov	r4, r2
 800385a:	195b      	adds	r3, r3, r5
 800385c:	eb44 0406 	adc.w	r4, r4, r6
 8003860:	f04f 0100 	mov.w	r1, #0
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	02a2      	lsls	r2, r4, #10
 800386a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800386e:	0299      	lsls	r1, r3, #10
 8003870:	460b      	mov	r3, r1
 8003872:	4614      	mov	r4, r2
 8003874:	4618      	mov	r0, r3
 8003876:	4621      	mov	r1, r4
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f04f 0400 	mov.w	r4, #0
 800387e:	461a      	mov	r2, r3
 8003880:	4623      	mov	r3, r4
 8003882:	f7fd f983 	bl	8000b8c <__aeabi_uldivmod>
 8003886:	4603      	mov	r3, r0
 8003888:	460c      	mov	r4, r1
 800388a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800388c:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	0c1b      	lsrs	r3, r3, #16
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	3301      	adds	r3, #1
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a4:	60bb      	str	r3, [r7, #8]
      break;
 80038a6:	e002      	b.n	80038ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038a8:	4b04      	ldr	r3, [pc, #16]	; (80038bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80038aa:	60bb      	str	r3, [r7, #8]
      break;
 80038ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ae:	68bb      	ldr	r3, [r7, #8]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038b8:	40023800 	.word	0x40023800
 80038bc:	00f42400 	.word	0x00f42400
 80038c0:	007a1200 	.word	0x007a1200

080038c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038c8:	4b03      	ldr	r3, [pc, #12]	; (80038d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038ca:	681b      	ldr	r3, [r3, #0]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	20000000 	.word	0x20000000

080038dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038e0:	f7ff fff0 	bl	80038c4 <HAL_RCC_GetHCLKFreq>
 80038e4:	4601      	mov	r1, r0
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	0a9b      	lsrs	r3, r3, #10
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	4a03      	ldr	r2, [pc, #12]	; (8003900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038f2:	5cd3      	ldrb	r3, [r2, r3]
 80038f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40023800 	.word	0x40023800
 8003900:	08008800 	.word	0x08008800

08003904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003908:	f7ff ffdc 	bl	80038c4 <HAL_RCC_GetHCLKFreq>
 800390c:	4601      	mov	r1, r0
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	0b5b      	lsrs	r3, r3, #13
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	4a03      	ldr	r2, [pc, #12]	; (8003928 <HAL_RCC_GetPCLK2Freq+0x24>)
 800391a:	5cd3      	ldrb	r3, [r2, r3]
 800391c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003920:	4618      	mov	r0, r3
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40023800 	.word	0x40023800
 8003928:	08008800 	.word	0x08008800

0800392c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e03f      	b.n	80039be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fd fda6 	bl	80014a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2224      	movs	r2, #36	; 0x24
 800395c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800396e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f829 	bl	80039c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003984:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695a      	ldr	r2, [r3, #20]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003994:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039cc:	b085      	sub	sp, #20
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68da      	ldr	r2, [r3, #12]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	431a      	orrs	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003a0a:	f023 030c 	bic.w	r3, r3, #12
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	68f9      	ldr	r1, [r7, #12]
 8003a14:	430b      	orrs	r3, r1
 8003a16:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a36:	f040 818b 	bne.w	8003d50 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4ac1      	ldr	r2, [pc, #772]	; (8003d44 <UART_SetConfig+0x37c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d005      	beq.n	8003a50 <UART_SetConfig+0x88>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4abf      	ldr	r2, [pc, #764]	; (8003d48 <UART_SetConfig+0x380>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	f040 80bd 	bne.w	8003bca <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a50:	f7ff ff58 	bl	8003904 <HAL_RCC_GetPCLK2Freq>
 8003a54:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	461d      	mov	r5, r3
 8003a5a:	f04f 0600 	mov.w	r6, #0
 8003a5e:	46a8      	mov	r8, r5
 8003a60:	46b1      	mov	r9, r6
 8003a62:	eb18 0308 	adds.w	r3, r8, r8
 8003a66:	eb49 0409 	adc.w	r4, r9, r9
 8003a6a:	4698      	mov	r8, r3
 8003a6c:	46a1      	mov	r9, r4
 8003a6e:	eb18 0805 	adds.w	r8, r8, r5
 8003a72:	eb49 0906 	adc.w	r9, r9, r6
 8003a76:	f04f 0100 	mov.w	r1, #0
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a82:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a86:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a8a:	4688      	mov	r8, r1
 8003a8c:	4691      	mov	r9, r2
 8003a8e:	eb18 0005 	adds.w	r0, r8, r5
 8003a92:	eb49 0106 	adc.w	r1, r9, r6
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	461d      	mov	r5, r3
 8003a9c:	f04f 0600 	mov.w	r6, #0
 8003aa0:	196b      	adds	r3, r5, r5
 8003aa2:	eb46 0406 	adc.w	r4, r6, r6
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	4623      	mov	r3, r4
 8003aaa:	f7fd f86f 	bl	8000b8c <__aeabi_uldivmod>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	460c      	mov	r4, r1
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	4ba5      	ldr	r3, [pc, #660]	; (8003d4c <UART_SetConfig+0x384>)
 8003ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	461d      	mov	r5, r3
 8003ac4:	f04f 0600 	mov.w	r6, #0
 8003ac8:	46a9      	mov	r9, r5
 8003aca:	46b2      	mov	sl, r6
 8003acc:	eb19 0309 	adds.w	r3, r9, r9
 8003ad0:	eb4a 040a 	adc.w	r4, sl, sl
 8003ad4:	4699      	mov	r9, r3
 8003ad6:	46a2      	mov	sl, r4
 8003ad8:	eb19 0905 	adds.w	r9, r9, r5
 8003adc:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ae0:	f04f 0100 	mov.w	r1, #0
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003af0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003af4:	4689      	mov	r9, r1
 8003af6:	4692      	mov	sl, r2
 8003af8:	eb19 0005 	adds.w	r0, r9, r5
 8003afc:	eb4a 0106 	adc.w	r1, sl, r6
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	461d      	mov	r5, r3
 8003b06:	f04f 0600 	mov.w	r6, #0
 8003b0a:	196b      	adds	r3, r5, r5
 8003b0c:	eb46 0406 	adc.w	r4, r6, r6
 8003b10:	461a      	mov	r2, r3
 8003b12:	4623      	mov	r3, r4
 8003b14:	f7fd f83a 	bl	8000b8c <__aeabi_uldivmod>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	460c      	mov	r4, r1
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4b8b      	ldr	r3, [pc, #556]	; (8003d4c <UART_SetConfig+0x384>)
 8003b20:	fba3 1302 	umull	r1, r3, r3, r2
 8003b24:	095b      	lsrs	r3, r3, #5
 8003b26:	2164      	movs	r1, #100	; 0x64
 8003b28:	fb01 f303 	mul.w	r3, r1, r3
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	3332      	adds	r3, #50	; 0x32
 8003b32:	4a86      	ldr	r2, [pc, #536]	; (8003d4c <UART_SetConfig+0x384>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	095b      	lsrs	r3, r3, #5
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b40:	4498      	add	r8, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	461d      	mov	r5, r3
 8003b46:	f04f 0600 	mov.w	r6, #0
 8003b4a:	46a9      	mov	r9, r5
 8003b4c:	46b2      	mov	sl, r6
 8003b4e:	eb19 0309 	adds.w	r3, r9, r9
 8003b52:	eb4a 040a 	adc.w	r4, sl, sl
 8003b56:	4699      	mov	r9, r3
 8003b58:	46a2      	mov	sl, r4
 8003b5a:	eb19 0905 	adds.w	r9, r9, r5
 8003b5e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b62:	f04f 0100 	mov.w	r1, #0
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b76:	4689      	mov	r9, r1
 8003b78:	4692      	mov	sl, r2
 8003b7a:	eb19 0005 	adds.w	r0, r9, r5
 8003b7e:	eb4a 0106 	adc.w	r1, sl, r6
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	461d      	mov	r5, r3
 8003b88:	f04f 0600 	mov.w	r6, #0
 8003b8c:	196b      	adds	r3, r5, r5
 8003b8e:	eb46 0406 	adc.w	r4, r6, r6
 8003b92:	461a      	mov	r2, r3
 8003b94:	4623      	mov	r3, r4
 8003b96:	f7fc fff9 	bl	8000b8c <__aeabi_uldivmod>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	4b6a      	ldr	r3, [pc, #424]	; (8003d4c <UART_SetConfig+0x384>)
 8003ba2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	2164      	movs	r1, #100	; 0x64
 8003baa:	fb01 f303 	mul.w	r3, r1, r3
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	3332      	adds	r3, #50	; 0x32
 8003bb4:	4a65      	ldr	r2, [pc, #404]	; (8003d4c <UART_SetConfig+0x384>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	f003 0207 	and.w	r2, r3, #7
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4442      	add	r2, r8
 8003bc6:	609a      	str	r2, [r3, #8]
 8003bc8:	e26f      	b.n	80040aa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bca:	f7ff fe87 	bl	80038dc <HAL_RCC_GetPCLK1Freq>
 8003bce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	461d      	mov	r5, r3
 8003bd4:	f04f 0600 	mov.w	r6, #0
 8003bd8:	46a8      	mov	r8, r5
 8003bda:	46b1      	mov	r9, r6
 8003bdc:	eb18 0308 	adds.w	r3, r8, r8
 8003be0:	eb49 0409 	adc.w	r4, r9, r9
 8003be4:	4698      	mov	r8, r3
 8003be6:	46a1      	mov	r9, r4
 8003be8:	eb18 0805 	adds.w	r8, r8, r5
 8003bec:	eb49 0906 	adc.w	r9, r9, r6
 8003bf0:	f04f 0100 	mov.w	r1, #0
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bfc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c00:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c04:	4688      	mov	r8, r1
 8003c06:	4691      	mov	r9, r2
 8003c08:	eb18 0005 	adds.w	r0, r8, r5
 8003c0c:	eb49 0106 	adc.w	r1, r9, r6
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	461d      	mov	r5, r3
 8003c16:	f04f 0600 	mov.w	r6, #0
 8003c1a:	196b      	adds	r3, r5, r5
 8003c1c:	eb46 0406 	adc.w	r4, r6, r6
 8003c20:	461a      	mov	r2, r3
 8003c22:	4623      	mov	r3, r4
 8003c24:	f7fc ffb2 	bl	8000b8c <__aeabi_uldivmod>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	460c      	mov	r4, r1
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4b47      	ldr	r3, [pc, #284]	; (8003d4c <UART_SetConfig+0x384>)
 8003c30:	fba3 2302 	umull	r2, r3, r3, r2
 8003c34:	095b      	lsrs	r3, r3, #5
 8003c36:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	461d      	mov	r5, r3
 8003c3e:	f04f 0600 	mov.w	r6, #0
 8003c42:	46a9      	mov	r9, r5
 8003c44:	46b2      	mov	sl, r6
 8003c46:	eb19 0309 	adds.w	r3, r9, r9
 8003c4a:	eb4a 040a 	adc.w	r4, sl, sl
 8003c4e:	4699      	mov	r9, r3
 8003c50:	46a2      	mov	sl, r4
 8003c52:	eb19 0905 	adds.w	r9, r9, r5
 8003c56:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c5a:	f04f 0100 	mov.w	r1, #0
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c6e:	4689      	mov	r9, r1
 8003c70:	4692      	mov	sl, r2
 8003c72:	eb19 0005 	adds.w	r0, r9, r5
 8003c76:	eb4a 0106 	adc.w	r1, sl, r6
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	461d      	mov	r5, r3
 8003c80:	f04f 0600 	mov.w	r6, #0
 8003c84:	196b      	adds	r3, r5, r5
 8003c86:	eb46 0406 	adc.w	r4, r6, r6
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	4623      	mov	r3, r4
 8003c8e:	f7fc ff7d 	bl	8000b8c <__aeabi_uldivmod>
 8003c92:	4603      	mov	r3, r0
 8003c94:	460c      	mov	r4, r1
 8003c96:	461a      	mov	r2, r3
 8003c98:	4b2c      	ldr	r3, [pc, #176]	; (8003d4c <UART_SetConfig+0x384>)
 8003c9a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	2164      	movs	r1, #100	; 0x64
 8003ca2:	fb01 f303 	mul.w	r3, r1, r3
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	3332      	adds	r3, #50	; 0x32
 8003cac:	4a27      	ldr	r2, [pc, #156]	; (8003d4c <UART_SetConfig+0x384>)
 8003cae:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cba:	4498      	add	r8, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	461d      	mov	r5, r3
 8003cc0:	f04f 0600 	mov.w	r6, #0
 8003cc4:	46a9      	mov	r9, r5
 8003cc6:	46b2      	mov	sl, r6
 8003cc8:	eb19 0309 	adds.w	r3, r9, r9
 8003ccc:	eb4a 040a 	adc.w	r4, sl, sl
 8003cd0:	4699      	mov	r9, r3
 8003cd2:	46a2      	mov	sl, r4
 8003cd4:	eb19 0905 	adds.w	r9, r9, r5
 8003cd8:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cdc:	f04f 0100 	mov.w	r1, #0
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ce8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cf0:	4689      	mov	r9, r1
 8003cf2:	4692      	mov	sl, r2
 8003cf4:	eb19 0005 	adds.w	r0, r9, r5
 8003cf8:	eb4a 0106 	adc.w	r1, sl, r6
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	461d      	mov	r5, r3
 8003d02:	f04f 0600 	mov.w	r6, #0
 8003d06:	196b      	adds	r3, r5, r5
 8003d08:	eb46 0406 	adc.w	r4, r6, r6
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4623      	mov	r3, r4
 8003d10:	f7fc ff3c 	bl	8000b8c <__aeabi_uldivmod>
 8003d14:	4603      	mov	r3, r0
 8003d16:	460c      	mov	r4, r1
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <UART_SetConfig+0x384>)
 8003d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	2164      	movs	r1, #100	; 0x64
 8003d24:	fb01 f303 	mul.w	r3, r1, r3
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	3332      	adds	r3, #50	; 0x32
 8003d2e:	4a07      	ldr	r2, [pc, #28]	; (8003d4c <UART_SetConfig+0x384>)
 8003d30:	fba2 2303 	umull	r2, r3, r2, r3
 8003d34:	095b      	lsrs	r3, r3, #5
 8003d36:	f003 0207 	and.w	r2, r3, #7
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4442      	add	r2, r8
 8003d40:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003d42:	e1b2      	b.n	80040aa <UART_SetConfig+0x6e2>
 8003d44:	40011000 	.word	0x40011000
 8003d48:	40011400 	.word	0x40011400
 8003d4c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4ad7      	ldr	r2, [pc, #860]	; (80040b4 <UART_SetConfig+0x6ec>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d005      	beq.n	8003d66 <UART_SetConfig+0x39e>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4ad6      	ldr	r2, [pc, #856]	; (80040b8 <UART_SetConfig+0x6f0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	f040 80d1 	bne.w	8003f08 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d66:	f7ff fdcd 	bl	8003904 <HAL_RCC_GetPCLK2Freq>
 8003d6a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	469a      	mov	sl, r3
 8003d70:	f04f 0b00 	mov.w	fp, #0
 8003d74:	46d0      	mov	r8, sl
 8003d76:	46d9      	mov	r9, fp
 8003d78:	eb18 0308 	adds.w	r3, r8, r8
 8003d7c:	eb49 0409 	adc.w	r4, r9, r9
 8003d80:	4698      	mov	r8, r3
 8003d82:	46a1      	mov	r9, r4
 8003d84:	eb18 080a 	adds.w	r8, r8, sl
 8003d88:	eb49 090b 	adc.w	r9, r9, fp
 8003d8c:	f04f 0100 	mov.w	r1, #0
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d98:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d9c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003da0:	4688      	mov	r8, r1
 8003da2:	4691      	mov	r9, r2
 8003da4:	eb1a 0508 	adds.w	r5, sl, r8
 8003da8:	eb4b 0609 	adc.w	r6, fp, r9
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	4619      	mov	r1, r3
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	f04f 0400 	mov.w	r4, #0
 8003dbe:	0094      	lsls	r4, r2, #2
 8003dc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003dc4:	008b      	lsls	r3, r1, #2
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4623      	mov	r3, r4
 8003dca:	4628      	mov	r0, r5
 8003dcc:	4631      	mov	r1, r6
 8003dce:	f7fc fedd 	bl	8000b8c <__aeabi_uldivmod>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	460c      	mov	r4, r1
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	4bb8      	ldr	r3, [pc, #736]	; (80040bc <UART_SetConfig+0x6f4>)
 8003dda:	fba3 2302 	umull	r2, r3, r3, r2
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	469b      	mov	fp, r3
 8003de8:	f04f 0c00 	mov.w	ip, #0
 8003dec:	46d9      	mov	r9, fp
 8003dee:	46e2      	mov	sl, ip
 8003df0:	eb19 0309 	adds.w	r3, r9, r9
 8003df4:	eb4a 040a 	adc.w	r4, sl, sl
 8003df8:	4699      	mov	r9, r3
 8003dfa:	46a2      	mov	sl, r4
 8003dfc:	eb19 090b 	adds.w	r9, r9, fp
 8003e00:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e04:	f04f 0100 	mov.w	r1, #0
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e18:	4689      	mov	r9, r1
 8003e1a:	4692      	mov	sl, r2
 8003e1c:	eb1b 0509 	adds.w	r5, fp, r9
 8003e20:	eb4c 060a 	adc.w	r6, ip, sl
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	f04f 0400 	mov.w	r4, #0
 8003e36:	0094      	lsls	r4, r2, #2
 8003e38:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e3c:	008b      	lsls	r3, r1, #2
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4623      	mov	r3, r4
 8003e42:	4628      	mov	r0, r5
 8003e44:	4631      	mov	r1, r6
 8003e46:	f7fc fea1 	bl	8000b8c <__aeabi_uldivmod>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	461a      	mov	r2, r3
 8003e50:	4b9a      	ldr	r3, [pc, #616]	; (80040bc <UART_SetConfig+0x6f4>)
 8003e52:	fba3 1302 	umull	r1, r3, r3, r2
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	2164      	movs	r1, #100	; 0x64
 8003e5a:	fb01 f303 	mul.w	r3, r1, r3
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	3332      	adds	r3, #50	; 0x32
 8003e64:	4a95      	ldr	r2, [pc, #596]	; (80040bc <UART_SetConfig+0x6f4>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e70:	4498      	add	r8, r3
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	469b      	mov	fp, r3
 8003e76:	f04f 0c00 	mov.w	ip, #0
 8003e7a:	46d9      	mov	r9, fp
 8003e7c:	46e2      	mov	sl, ip
 8003e7e:	eb19 0309 	adds.w	r3, r9, r9
 8003e82:	eb4a 040a 	adc.w	r4, sl, sl
 8003e86:	4699      	mov	r9, r3
 8003e88:	46a2      	mov	sl, r4
 8003e8a:	eb19 090b 	adds.w	r9, r9, fp
 8003e8e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e92:	f04f 0100 	mov.w	r1, #0
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ea2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ea6:	4689      	mov	r9, r1
 8003ea8:	4692      	mov	sl, r2
 8003eaa:	eb1b 0509 	adds.w	r5, fp, r9
 8003eae:	eb4c 060a 	adc.w	r6, ip, sl
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	f04f 0400 	mov.w	r4, #0
 8003ec4:	0094      	lsls	r4, r2, #2
 8003ec6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003eca:	008b      	lsls	r3, r1, #2
 8003ecc:	461a      	mov	r2, r3
 8003ece:	4623      	mov	r3, r4
 8003ed0:	4628      	mov	r0, r5
 8003ed2:	4631      	mov	r1, r6
 8003ed4:	f7fc fe5a 	bl	8000b8c <__aeabi_uldivmod>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	460c      	mov	r4, r1
 8003edc:	461a      	mov	r2, r3
 8003ede:	4b77      	ldr	r3, [pc, #476]	; (80040bc <UART_SetConfig+0x6f4>)
 8003ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ee4:	095b      	lsrs	r3, r3, #5
 8003ee6:	2164      	movs	r1, #100	; 0x64
 8003ee8:	fb01 f303 	mul.w	r3, r1, r3
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	3332      	adds	r3, #50	; 0x32
 8003ef2:	4a72      	ldr	r2, [pc, #456]	; (80040bc <UART_SetConfig+0x6f4>)
 8003ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef8:	095b      	lsrs	r3, r3, #5
 8003efa:	f003 020f 	and.w	r2, r3, #15
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4442      	add	r2, r8
 8003f04:	609a      	str	r2, [r3, #8]
 8003f06:	e0d0      	b.n	80040aa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f08:	f7ff fce8 	bl	80038dc <HAL_RCC_GetPCLK1Freq>
 8003f0c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	469a      	mov	sl, r3
 8003f12:	f04f 0b00 	mov.w	fp, #0
 8003f16:	46d0      	mov	r8, sl
 8003f18:	46d9      	mov	r9, fp
 8003f1a:	eb18 0308 	adds.w	r3, r8, r8
 8003f1e:	eb49 0409 	adc.w	r4, r9, r9
 8003f22:	4698      	mov	r8, r3
 8003f24:	46a1      	mov	r9, r4
 8003f26:	eb18 080a 	adds.w	r8, r8, sl
 8003f2a:	eb49 090b 	adc.w	r9, r9, fp
 8003f2e:	f04f 0100 	mov.w	r1, #0
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f3a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f3e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f42:	4688      	mov	r8, r1
 8003f44:	4691      	mov	r9, r2
 8003f46:	eb1a 0508 	adds.w	r5, sl, r8
 8003f4a:	eb4b 0609 	adc.w	r6, fp, r9
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4619      	mov	r1, r3
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	f04f 0400 	mov.w	r4, #0
 8003f60:	0094      	lsls	r4, r2, #2
 8003f62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f66:	008b      	lsls	r3, r1, #2
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4623      	mov	r3, r4
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	4631      	mov	r1, r6
 8003f70:	f7fc fe0c 	bl	8000b8c <__aeabi_uldivmod>
 8003f74:	4603      	mov	r3, r0
 8003f76:	460c      	mov	r4, r1
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4b50      	ldr	r3, [pc, #320]	; (80040bc <UART_SetConfig+0x6f4>)
 8003f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	469b      	mov	fp, r3
 8003f8a:	f04f 0c00 	mov.w	ip, #0
 8003f8e:	46d9      	mov	r9, fp
 8003f90:	46e2      	mov	sl, ip
 8003f92:	eb19 0309 	adds.w	r3, r9, r9
 8003f96:	eb4a 040a 	adc.w	r4, sl, sl
 8003f9a:	4699      	mov	r9, r3
 8003f9c:	46a2      	mov	sl, r4
 8003f9e:	eb19 090b 	adds.w	r9, r9, fp
 8003fa2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fa6:	f04f 0100 	mov.w	r1, #0
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fb2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fb6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fba:	4689      	mov	r9, r1
 8003fbc:	4692      	mov	sl, r2
 8003fbe:	eb1b 0509 	adds.w	r5, fp, r9
 8003fc2:	eb4c 060a 	adc.w	r6, ip, sl
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	f04f 0400 	mov.w	r4, #0
 8003fd8:	0094      	lsls	r4, r2, #2
 8003fda:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fde:	008b      	lsls	r3, r1, #2
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4623      	mov	r3, r4
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	4631      	mov	r1, r6
 8003fe8:	f7fc fdd0 	bl	8000b8c <__aeabi_uldivmod>
 8003fec:	4603      	mov	r3, r0
 8003fee:	460c      	mov	r4, r1
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	4b32      	ldr	r3, [pc, #200]	; (80040bc <UART_SetConfig+0x6f4>)
 8003ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	2164      	movs	r1, #100	; 0x64
 8003ffc:	fb01 f303 	mul.w	r3, r1, r3
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	3332      	adds	r3, #50	; 0x32
 8004006:	4a2d      	ldr	r2, [pc, #180]	; (80040bc <UART_SetConfig+0x6f4>)
 8004008:	fba2 2303 	umull	r2, r3, r2, r3
 800400c:	095b      	lsrs	r3, r3, #5
 800400e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004012:	4498      	add	r8, r3
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	469b      	mov	fp, r3
 8004018:	f04f 0c00 	mov.w	ip, #0
 800401c:	46d9      	mov	r9, fp
 800401e:	46e2      	mov	sl, ip
 8004020:	eb19 0309 	adds.w	r3, r9, r9
 8004024:	eb4a 040a 	adc.w	r4, sl, sl
 8004028:	4699      	mov	r9, r3
 800402a:	46a2      	mov	sl, r4
 800402c:	eb19 090b 	adds.w	r9, r9, fp
 8004030:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004034:	f04f 0100 	mov.w	r1, #0
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004040:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004044:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004048:	4689      	mov	r9, r1
 800404a:	4692      	mov	sl, r2
 800404c:	eb1b 0509 	adds.w	r5, fp, r9
 8004050:	eb4c 060a 	adc.w	r6, ip, sl
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	4619      	mov	r1, r3
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	f04f 0400 	mov.w	r4, #0
 8004066:	0094      	lsls	r4, r2, #2
 8004068:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800406c:	008b      	lsls	r3, r1, #2
 800406e:	461a      	mov	r2, r3
 8004070:	4623      	mov	r3, r4
 8004072:	4628      	mov	r0, r5
 8004074:	4631      	mov	r1, r6
 8004076:	f7fc fd89 	bl	8000b8c <__aeabi_uldivmod>
 800407a:	4603      	mov	r3, r0
 800407c:	460c      	mov	r4, r1
 800407e:	461a      	mov	r2, r3
 8004080:	4b0e      	ldr	r3, [pc, #56]	; (80040bc <UART_SetConfig+0x6f4>)
 8004082:	fba3 1302 	umull	r1, r3, r3, r2
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	2164      	movs	r1, #100	; 0x64
 800408a:	fb01 f303 	mul.w	r3, r1, r3
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	3332      	adds	r3, #50	; 0x32
 8004094:	4a09      	ldr	r2, [pc, #36]	; (80040bc <UART_SetConfig+0x6f4>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	f003 020f 	and.w	r2, r3, #15
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4442      	add	r2, r8
 80040a6:	609a      	str	r2, [r3, #8]
}
 80040a8:	e7ff      	b.n	80040aa <UART_SetConfig+0x6e2>
 80040aa:	bf00      	nop
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040b4:	40011000 	.word	0x40011000
 80040b8:	40011400 	.word	0x40011400
 80040bc:	51eb851f 	.word	0x51eb851f

080040c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040c0:	b084      	sub	sp, #16
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b084      	sub	sp, #16
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	f107 001c 	add.w	r0, r7, #28
 80040ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d122      	bne.n	800411e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80040ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004102:	2b01      	cmp	r3, #1
 8004104:	d105      	bne.n	8004112 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f001 fac6 	bl	80056a4 <USB_CoreReset>
 8004118:	4603      	mov	r3, r0
 800411a:	73fb      	strb	r3, [r7, #15]
 800411c:	e01a      	b.n	8004154 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f001 faba 	bl	80056a4 <USB_CoreReset>
 8004130:	4603      	mov	r3, r0
 8004132:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004136:	2b00      	cmp	r3, #0
 8004138:	d106      	bne.n	8004148 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	639a      	str	r2, [r3, #56]	; 0x38
 8004146:	e005      	b.n	8004154 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004156:	2b01      	cmp	r3, #1
 8004158:	d10b      	bne.n	8004172 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f043 0206 	orr.w	r2, r3, #6
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f043 0220 	orr.w	r2, r3, #32
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004172:	7bfb      	ldrb	r3, [r7, #15]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800417e:	b004      	add	sp, #16
 8004180:	4770      	bx	lr
	...

08004184 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	4613      	mov	r3, r2
 8004190:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	2b02      	cmp	r3, #2
 8004196:	d165      	bne.n	8004264 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4a41      	ldr	r2, [pc, #260]	; (80042a0 <USB_SetTurnaroundTime+0x11c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d906      	bls.n	80041ae <USB_SetTurnaroundTime+0x2a>
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4a40      	ldr	r2, [pc, #256]	; (80042a4 <USB_SetTurnaroundTime+0x120>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d802      	bhi.n	80041ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80041a8:	230f      	movs	r3, #15
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	e062      	b.n	8004274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	4a3c      	ldr	r2, [pc, #240]	; (80042a4 <USB_SetTurnaroundTime+0x120>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d906      	bls.n	80041c4 <USB_SetTurnaroundTime+0x40>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	4a3b      	ldr	r2, [pc, #236]	; (80042a8 <USB_SetTurnaroundTime+0x124>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d802      	bhi.n	80041c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80041be:	230e      	movs	r3, #14
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	e057      	b.n	8004274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4a38      	ldr	r2, [pc, #224]	; (80042a8 <USB_SetTurnaroundTime+0x124>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d906      	bls.n	80041da <USB_SetTurnaroundTime+0x56>
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4a37      	ldr	r2, [pc, #220]	; (80042ac <USB_SetTurnaroundTime+0x128>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d802      	bhi.n	80041da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80041d4:	230d      	movs	r3, #13
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	e04c      	b.n	8004274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	4a33      	ldr	r2, [pc, #204]	; (80042ac <USB_SetTurnaroundTime+0x128>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d906      	bls.n	80041f0 <USB_SetTurnaroundTime+0x6c>
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	4a32      	ldr	r2, [pc, #200]	; (80042b0 <USB_SetTurnaroundTime+0x12c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d802      	bhi.n	80041f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80041ea:	230c      	movs	r3, #12
 80041ec:	617b      	str	r3, [r7, #20]
 80041ee:	e041      	b.n	8004274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4a2f      	ldr	r2, [pc, #188]	; (80042b0 <USB_SetTurnaroundTime+0x12c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d906      	bls.n	8004206 <USB_SetTurnaroundTime+0x82>
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4a2e      	ldr	r2, [pc, #184]	; (80042b4 <USB_SetTurnaroundTime+0x130>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d802      	bhi.n	8004206 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004200:	230b      	movs	r3, #11
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	e036      	b.n	8004274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	4a2a      	ldr	r2, [pc, #168]	; (80042b4 <USB_SetTurnaroundTime+0x130>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d906      	bls.n	800421c <USB_SetTurnaroundTime+0x98>
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	4a29      	ldr	r2, [pc, #164]	; (80042b8 <USB_SetTurnaroundTime+0x134>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d802      	bhi.n	800421c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004216:	230a      	movs	r3, #10
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	e02b      	b.n	8004274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4a26      	ldr	r2, [pc, #152]	; (80042b8 <USB_SetTurnaroundTime+0x134>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d906      	bls.n	8004232 <USB_SetTurnaroundTime+0xae>
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4a25      	ldr	r2, [pc, #148]	; (80042bc <USB_SetTurnaroundTime+0x138>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d802      	bhi.n	8004232 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800422c:	2309      	movs	r3, #9
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	e020      	b.n	8004274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	4a21      	ldr	r2, [pc, #132]	; (80042bc <USB_SetTurnaroundTime+0x138>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d906      	bls.n	8004248 <USB_SetTurnaroundTime+0xc4>
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	4a20      	ldr	r2, [pc, #128]	; (80042c0 <USB_SetTurnaroundTime+0x13c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d802      	bhi.n	8004248 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004242:	2308      	movs	r3, #8
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	e015      	b.n	8004274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4a1d      	ldr	r2, [pc, #116]	; (80042c0 <USB_SetTurnaroundTime+0x13c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d906      	bls.n	800425e <USB_SetTurnaroundTime+0xda>
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4a1c      	ldr	r2, [pc, #112]	; (80042c4 <USB_SetTurnaroundTime+0x140>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d802      	bhi.n	800425e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004258:	2307      	movs	r3, #7
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	e00a      	b.n	8004274 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800425e:	2306      	movs	r3, #6
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	e007      	b.n	8004274 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004264:	79fb      	ldrb	r3, [r7, #7]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d102      	bne.n	8004270 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800426a:	2309      	movs	r3, #9
 800426c:	617b      	str	r3, [r7, #20]
 800426e:	e001      	b.n	8004274 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004270:	2309      	movs	r3, #9
 8004272:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	029b      	lsls	r3, r3, #10
 8004288:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800428c:	431a      	orrs	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	371c      	adds	r7, #28
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	00d8acbf 	.word	0x00d8acbf
 80042a4:	00e4e1bf 	.word	0x00e4e1bf
 80042a8:	00f423ff 	.word	0x00f423ff
 80042ac:	0106737f 	.word	0x0106737f
 80042b0:	011a499f 	.word	0x011a499f
 80042b4:	01312cff 	.word	0x01312cff
 80042b8:	014ca43f 	.word	0x014ca43f
 80042bc:	016e35ff 	.word	0x016e35ff
 80042c0:	01a6ab1f 	.word	0x01a6ab1f
 80042c4:	01e847ff 	.word	0x01e847ff

080042c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f043 0201 	orr.w	r2, r3, #1
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f023 0201 	bic.w	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	460b      	mov	r3, r1
 8004316:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004324:	78fb      	ldrb	r3, [r7, #3]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d106      	bne.n	8004338 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	60da      	str	r2, [r3, #12]
 8004336:	e00b      	b.n	8004350 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d106      	bne.n	800434c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	60da      	str	r2, [r3, #12]
 800434a:	e001      	b.n	8004350 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e003      	b.n	8004358 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004350:	2032      	movs	r0, #50	; 0x32
 8004352:	f7fd fa0f 	bl	8001774 <HAL_Delay>

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004360:	b084      	sub	sp, #16
 8004362:	b580      	push	{r7, lr}
 8004364:	b086      	sub	sp, #24
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800436e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800437a:	2300      	movs	r3, #0
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	e009      	b.n	8004394 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	3340      	adds	r3, #64	; 0x40
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	2200      	movs	r2, #0
 800438c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	3301      	adds	r3, #1
 8004392:	613b      	str	r3, [r7, #16]
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b0e      	cmp	r3, #14
 8004398:	d9f2      	bls.n	8004380 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800439a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800439c:	2b00      	cmp	r3, #0
 800439e:	d11c      	bne.n	80043da <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043ae:	f043 0302 	orr.w	r3, r3, #2
 80043b2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	639a      	str	r2, [r3, #56]	; 0x38
 80043d8:	e00b      	b.n	80043f2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043f8:	461a      	mov	r2, r3
 80043fa:	2300      	movs	r3, #0
 80043fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004404:	4619      	mov	r1, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440c:	461a      	mov	r2, r3
 800440e:	680b      	ldr	r3, [r1, #0]
 8004410:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004414:	2b01      	cmp	r3, #1
 8004416:	d10c      	bne.n	8004432 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d104      	bne.n	8004428 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800441e:	2100      	movs	r1, #0
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f949 	bl	80046b8 <USB_SetDevSpeed>
 8004426:	e008      	b.n	800443a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004428:	2101      	movs	r1, #1
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f944 	bl	80046b8 <USB_SetDevSpeed>
 8004430:	e003      	b.n	800443a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004432:	2103      	movs	r1, #3
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f93f 	bl	80046b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800443a:	2110      	movs	r1, #16
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f8f3 	bl	8004628 <USB_FlushTxFifo>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f911 	bl	8004674 <USB_FlushRxFifo>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004462:	461a      	mov	r2, r3
 8004464:	2300      	movs	r3, #0
 8004466:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446e:	461a      	mov	r2, r3
 8004470:	2300      	movs	r3, #0
 8004472:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800447a:	461a      	mov	r2, r3
 800447c:	2300      	movs	r3, #0
 800447e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004480:	2300      	movs	r3, #0
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	e043      	b.n	800450e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4413      	add	r3, r2
 800448e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004498:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800449c:	d118      	bne.n	80044d0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b0:	461a      	mov	r2, r3
 80044b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	e013      	b.n	80044e2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c6:	461a      	mov	r2, r3
 80044c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	e008      	b.n	80044e2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044dc:	461a      	mov	r2, r3
 80044de:	2300      	movs	r3, #0
 80044e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ee:	461a      	mov	r2, r3
 80044f0:	2300      	movs	r3, #0
 80044f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004500:	461a      	mov	r2, r3
 8004502:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004506:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	3301      	adds	r3, #1
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	429a      	cmp	r2, r3
 8004514:	d3b7      	bcc.n	8004486 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004516:	2300      	movs	r3, #0
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	e043      	b.n	80045a4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800452e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004532:	d118      	bne.n	8004566 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10a      	bne.n	8004550 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004546:	461a      	mov	r2, r3
 8004548:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	e013      	b.n	8004578 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455c:	461a      	mov	r2, r3
 800455e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004562:	6013      	str	r3, [r2, #0]
 8004564:	e008      	b.n	8004578 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4413      	add	r3, r2
 800456e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004572:	461a      	mov	r2, r3
 8004574:	2300      	movs	r3, #0
 8004576:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004584:	461a      	mov	r2, r3
 8004586:	2300      	movs	r3, #0
 8004588:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004596:	461a      	mov	r2, r3
 8004598:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800459c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	3301      	adds	r3, #1
 80045a2:	613b      	str	r3, [r7, #16]
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d3b7      	bcc.n	800451c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80045cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80045ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d105      	bne.n	80045e0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	f043 0210 	orr.w	r2, r3, #16
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699a      	ldr	r2, [r3, #24]
 80045e4:	4b0f      	ldr	r3, [pc, #60]	; (8004624 <USB_DevInit+0x2c4>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80045ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d005      	beq.n	80045fe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	f043 0208 	orr.w	r2, r3, #8
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004600:	2b01      	cmp	r3, #1
 8004602:	d107      	bne.n	8004614 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800460c:	f043 0304 	orr.w	r3, r3, #4
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004614:	7dfb      	ldrb	r3, [r7, #23]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004620:	b004      	add	sp, #16
 8004622:	4770      	bx	lr
 8004624:	803c3800 	.word	0x803c3800

08004628 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	019b      	lsls	r3, r3, #6
 800463a:	f043 0220 	orr.w	r2, r3, #32
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	3301      	adds	r3, #1
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4a09      	ldr	r2, [pc, #36]	; (8004670 <USB_FlushTxFifo+0x48>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d901      	bls.n	8004654 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e006      	b.n	8004662 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f003 0320 	and.w	r3, r3, #32
 800465c:	2b20      	cmp	r3, #32
 800465e:	d0f0      	beq.n	8004642 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	00030d40 	.word	0x00030d40

08004674 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2210      	movs	r2, #16
 8004684:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3301      	adds	r3, #1
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4a09      	ldr	r2, [pc, #36]	; (80046b4 <USB_FlushRxFifo+0x40>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d901      	bls.n	8004698 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e006      	b.n	80046a6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	2b10      	cmp	r3, #16
 80046a2:	d0f0      	beq.n	8004686 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	00030d40 	.word	0x00030d40

080046b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	460b      	mov	r3, r1
 80046c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	78fb      	ldrb	r3, [r7, #3]
 80046d2:	68f9      	ldr	r1, [r7, #12]
 80046d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046d8:	4313      	orrs	r3, r2
 80046da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b087      	sub	sp, #28
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 0306 	and.w	r3, r3, #6
 8004702:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d102      	bne.n	8004710 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800470a:	2300      	movs	r3, #0
 800470c:	75fb      	strb	r3, [r7, #23]
 800470e:	e00a      	b.n	8004726 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b02      	cmp	r3, #2
 8004714:	d002      	beq.n	800471c <USB_GetDevSpeed+0x32>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2b06      	cmp	r3, #6
 800471a:	d102      	bne.n	8004722 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800471c:	2302      	movs	r3, #2
 800471e:	75fb      	strb	r3, [r7, #23]
 8004720:	e001      	b.n	8004726 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004722:	230f      	movs	r3, #15
 8004724:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004726:	7dfb      	ldrb	r3, [r7, #23]
}
 8004728:	4618      	mov	r0, r3
 800472a:	371c      	adds	r7, #28
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	785b      	ldrb	r3, [r3, #1]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d13a      	bne.n	80047c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004756:	69da      	ldr	r2, [r3, #28]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	f003 030f 	and.w	r3, r3, #15
 8004760:	2101      	movs	r1, #1
 8004762:	fa01 f303 	lsl.w	r3, r1, r3
 8004766:	b29b      	uxth	r3, r3
 8004768:	68f9      	ldr	r1, [r7, #12]
 800476a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800476e:	4313      	orrs	r3, r2
 8004770:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d155      	bne.n	8004834 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	78db      	ldrb	r3, [r3, #3]
 80047a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	059b      	lsls	r3, r3, #22
 80047aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047ac:	4313      	orrs	r3, r2
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	0151      	lsls	r1, r2, #5
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	440a      	add	r2, r1
 80047b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c2:	6013      	str	r3, [r2, #0]
 80047c4:	e036      	b.n	8004834 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047cc:	69da      	ldr	r2, [r3, #28]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	2101      	movs	r1, #1
 80047d8:	fa01 f303 	lsl.w	r3, r1, r3
 80047dc:	041b      	lsls	r3, r3, #16
 80047de:	68f9      	ldr	r1, [r7, #12]
 80047e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047e4:	4313      	orrs	r3, r2
 80047e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d11a      	bne.n	8004834 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	78db      	ldrb	r3, [r3, #3]
 8004818:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800481a:	430b      	orrs	r3, r1
 800481c:	4313      	orrs	r3, r2
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	0151      	lsls	r1, r2, #5
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	440a      	add	r2, r1
 8004826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800482a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800482e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004832:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
	...

08004844 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	785b      	ldrb	r3, [r3, #1]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d161      	bne.n	8004924 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004872:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004876:	d11f      	bne.n	80048b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	0151      	lsls	r1, r2, #5
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	440a      	add	r2, r1
 800488e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004892:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004896:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	0151      	lsls	r1, r2, #5
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	440a      	add	r2, r1
 80048ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	f003 030f 	and.w	r3, r3, #15
 80048c8:	2101      	movs	r1, #1
 80048ca:	fa01 f303 	lsl.w	r3, r1, r3
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	43db      	mvns	r3, r3
 80048d2:	68f9      	ldr	r1, [r7, #12]
 80048d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048d8:	4013      	ands	r3, r2
 80048da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e2:	69da      	ldr	r2, [r3, #28]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	f003 030f 	and.w	r3, r3, #15
 80048ec:	2101      	movs	r1, #1
 80048ee:	fa01 f303 	lsl.w	r3, r1, r3
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	43db      	mvns	r3, r3
 80048f6:	68f9      	ldr	r1, [r7, #12]
 80048f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048fc:	4013      	ands	r3, r2
 80048fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	0159      	lsls	r1, r3, #5
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	440b      	add	r3, r1
 8004916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491a:	4619      	mov	r1, r3
 800491c:	4b35      	ldr	r3, [pc, #212]	; (80049f4 <USB_DeactivateEndpoint+0x1b0>)
 800491e:	4013      	ands	r3, r2
 8004920:	600b      	str	r3, [r1, #0]
 8004922:	e060      	b.n	80049e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004936:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800493a:	d11f      	bne.n	800497c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	0151      	lsls	r1, r2, #5
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	440a      	add	r2, r1
 8004952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004956:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800495a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	0151      	lsls	r1, r2, #5
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	440a      	add	r2, r1
 8004972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004976:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800497a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	f003 030f 	and.w	r3, r3, #15
 800498c:	2101      	movs	r1, #1
 800498e:	fa01 f303 	lsl.w	r3, r1, r3
 8004992:	041b      	lsls	r3, r3, #16
 8004994:	43db      	mvns	r3, r3
 8004996:	68f9      	ldr	r1, [r7, #12]
 8004998:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800499c:	4013      	ands	r3, r2
 800499e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a6:	69da      	ldr	r2, [r3, #28]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	f003 030f 	and.w	r3, r3, #15
 80049b0:	2101      	movs	r1, #1
 80049b2:	fa01 f303 	lsl.w	r3, r1, r3
 80049b6:	041b      	lsls	r3, r3, #16
 80049b8:	43db      	mvns	r3, r3
 80049ba:	68f9      	ldr	r1, [r7, #12]
 80049bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049c0:	4013      	ands	r3, r2
 80049c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	0159      	lsls	r1, r3, #5
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	440b      	add	r3, r1
 80049da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049de:	4619      	mov	r1, r3
 80049e0:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <USB_DeactivateEndpoint+0x1b4>)
 80049e2:	4013      	ands	r3, r2
 80049e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	ec337800 	.word	0xec337800
 80049f8:	eff37800 	.word	0xeff37800

080049fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b08a      	sub	sp, #40	; 0x28
 8004a00:	af02      	add	r7, sp, #8
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	4613      	mov	r3, r2
 8004a08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	785b      	ldrb	r3, [r3, #1]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	f040 815c 	bne.w	8004cd6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d132      	bne.n	8004a8c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	0151      	lsls	r1, r2, #5
 8004a38:	69fa      	ldr	r2, [r7, #28]
 8004a3a:	440a      	add	r2, r1
 8004a3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	0151      	lsls	r1, r2, #5
 8004a5c:	69fa      	ldr	r2, [r7, #28]
 8004a5e:	440a      	add	r2, r1
 8004a60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	0151      	lsls	r1, r2, #5
 8004a7c:	69fa      	ldr	r2, [r7, #28]
 8004a7e:	440a      	add	r2, r1
 8004a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a84:	0cdb      	lsrs	r3, r3, #19
 8004a86:	04db      	lsls	r3, r3, #19
 8004a88:	6113      	str	r3, [r2, #16]
 8004a8a:	e074      	b.n	8004b76 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	0151      	lsls	r1, r2, #5
 8004a9e:	69fa      	ldr	r2, [r7, #28]
 8004aa0:	440a      	add	r2, r1
 8004aa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa6:	0cdb      	lsrs	r3, r3, #19
 8004aa8:	04db      	lsls	r3, r3, #19
 8004aaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	0151      	lsls	r1, r2, #5
 8004abe:	69fa      	ldr	r2, [r7, #28]
 8004ac0:	440a      	add	r2, r1
 8004ac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ac6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004aca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ace:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004adc:	691a      	ldr	r2, [r3, #16]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	6959      	ldr	r1, [r3, #20]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	440b      	add	r3, r1
 8004ae8:	1e59      	subs	r1, r3, #1
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	fbb1 f3f3 	udiv	r3, r1, r3
 8004af2:	04d9      	lsls	r1, r3, #19
 8004af4:	4b9d      	ldr	r3, [pc, #628]	; (8004d6c <USB_EPStartXfer+0x370>)
 8004af6:	400b      	ands	r3, r1
 8004af8:	69b9      	ldr	r1, [r7, #24]
 8004afa:	0148      	lsls	r0, r1, #5
 8004afc:	69f9      	ldr	r1, [r7, #28]
 8004afe:	4401      	add	r1, r0
 8004b00:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b04:	4313      	orrs	r3, r2
 8004b06:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b14:	691a      	ldr	r2, [r3, #16]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b1e:	69b9      	ldr	r1, [r7, #24]
 8004b20:	0148      	lsls	r0, r1, #5
 8004b22:	69f9      	ldr	r1, [r7, #28]
 8004b24:	4401      	add	r1, r0
 8004b26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	78db      	ldrb	r3, [r3, #3]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d11f      	bne.n	8004b76 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	0151      	lsls	r1, r2, #5
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	440a      	add	r2, r1
 8004b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b50:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004b54:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	0151      	lsls	r1, r2, #5
 8004b68:	69fa      	ldr	r2, [r7, #28]
 8004b6a:	440a      	add	r2, r1
 8004b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b74:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004b76:	79fb      	ldrb	r3, [r7, #7]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d14b      	bne.n	8004c14 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d009      	beq.n	8004b98 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b90:	461a      	mov	r2, r3
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	78db      	ldrb	r3, [r3, #3]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d128      	bne.n	8004bf2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d110      	bne.n	8004bd2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	0151      	lsls	r1, r2, #5
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	440a      	add	r2, r1
 8004bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bce:	6013      	str	r3, [r2, #0]
 8004bd0:	e00f      	b.n	8004bf2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	0151      	lsls	r1, r2, #5
 8004be4:	69fa      	ldr	r2, [r7, #28]
 8004be6:	440a      	add	r2, r1
 8004be8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	0151      	lsls	r1, r2, #5
 8004c04:	69fa      	ldr	r2, [r7, #28]
 8004c06:	440a      	add	r2, r1
 8004c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	e12f      	b.n	8004e74 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	0151      	lsls	r1, r2, #5
 8004c26:	69fa      	ldr	r2, [r7, #28]
 8004c28:	440a      	add	r2, r1
 8004c2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c32:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	78db      	ldrb	r3, [r3, #3]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d015      	beq.n	8004c68 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 8117 	beq.w	8004e74 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	2101      	movs	r1, #1
 8004c58:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5c:	69f9      	ldr	r1, [r7, #28]
 8004c5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c62:	4313      	orrs	r3, r2
 8004c64:	634b      	str	r3, [r1, #52]	; 0x34
 8004c66:	e105      	b.n	8004e74 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d110      	bne.n	8004c9a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	015a      	lsls	r2, r3, #5
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	0151      	lsls	r1, r2, #5
 8004c8a:	69fa      	ldr	r2, [r7, #28]
 8004c8c:	440a      	add	r2, r1
 8004c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	e00f      	b.n	8004cba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	0151      	lsls	r1, r2, #5
 8004cac:	69fa      	ldr	r2, [r7, #28]
 8004cae:	440a      	add	r2, r1
 8004cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	68d9      	ldr	r1, [r3, #12]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	781a      	ldrb	r2, [r3, #0]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	b298      	uxth	r0, r3
 8004cc8:	79fb      	ldrb	r3, [r7, #7]
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	4603      	mov	r3, r0
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 fa2b 	bl	800512a <USB_WritePacket>
 8004cd4:	e0ce      	b.n	8004e74 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	0151      	lsls	r1, r2, #5
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	440a      	add	r2, r1
 8004cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf0:	0cdb      	lsrs	r3, r3, #19
 8004cf2:	04db      	lsls	r3, r3, #19
 8004cf4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	0151      	lsls	r1, r2, #5
 8004d08:	69fa      	ldr	r2, [r7, #28]
 8004d0a:	440a      	add	r2, r1
 8004d0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d18:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d126      	bne.n	8004d70 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2e:	691a      	ldr	r2, [r3, #16]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d38:	69b9      	ldr	r1, [r7, #24]
 8004d3a:	0148      	lsls	r0, r1, #5
 8004d3c:	69f9      	ldr	r1, [r7, #28]
 8004d3e:	4401      	add	r1, r0
 8004d40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d44:	4313      	orrs	r3, r2
 8004d46:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	0151      	lsls	r1, r2, #5
 8004d5a:	69fa      	ldr	r2, [r7, #28]
 8004d5c:	440a      	add	r2, r1
 8004d5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d66:	6113      	str	r3, [r2, #16]
 8004d68:	e036      	b.n	8004dd8 <USB_EPStartXfer+0x3dc>
 8004d6a:	bf00      	nop
 8004d6c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	695a      	ldr	r2, [r3, #20]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	4413      	add	r3, r2
 8004d7a:	1e5a      	subs	r2, r3, #1
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d84:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d92:	691a      	ldr	r2, [r3, #16]
 8004d94:	8afb      	ldrh	r3, [r7, #22]
 8004d96:	04d9      	lsls	r1, r3, #19
 8004d98:	4b39      	ldr	r3, [pc, #228]	; (8004e80 <USB_EPStartXfer+0x484>)
 8004d9a:	400b      	ands	r3, r1
 8004d9c:	69b9      	ldr	r1, [r7, #24]
 8004d9e:	0148      	lsls	r0, r1, #5
 8004da0:	69f9      	ldr	r1, [r7, #28]
 8004da2:	4401      	add	r1, r0
 8004da4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004da8:	4313      	orrs	r3, r2
 8004daa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db8:	691a      	ldr	r2, [r3, #16]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	8af9      	ldrh	r1, [r7, #22]
 8004dc0:	fb01 f303 	mul.w	r3, r1, r3
 8004dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dc8:	69b9      	ldr	r1, [r7, #24]
 8004dca:	0148      	lsls	r0, r1, #5
 8004dcc:	69f9      	ldr	r1, [r7, #28]
 8004dce:	4401      	add	r1, r0
 8004dd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004dd8:	79fb      	ldrb	r3, [r7, #7]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d10d      	bne.n	8004dfa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d009      	beq.n	8004dfa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	68d9      	ldr	r1, [r3, #12]
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df6:	460a      	mov	r2, r1
 8004df8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	78db      	ldrb	r3, [r3, #3]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d128      	bne.n	8004e54 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d110      	bne.n	8004e34 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	0151      	lsls	r1, r2, #5
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	440a      	add	r2, r1
 8004e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	e00f      	b.n	8004e54 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	0151      	lsls	r1, r2, #5
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	440a      	add	r2, r1
 8004e4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e52:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	0151      	lsls	r1, r2, #5
 8004e66:	69fa      	ldr	r2, [r7, #28]
 8004e68:	440a      	add	r2, r1
 8004e6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3720      	adds	r7, #32
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	1ff80000 	.word	0x1ff80000

08004e84 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	785b      	ldrb	r3, [r3, #1]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	f040 80cd 	bne.w	8005040 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d132      	bne.n	8004f14 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	0151      	lsls	r1, r2, #5
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	440a      	add	r2, r1
 8004ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ec8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ecc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ed0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	0151      	lsls	r1, r2, #5
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	440a      	add	r2, r1
 8004ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ef0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	0151      	lsls	r1, r2, #5
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	440a      	add	r2, r1
 8004f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f0c:	0cdb      	lsrs	r3, r3, #19
 8004f0e:	04db      	lsls	r3, r3, #19
 8004f10:	6113      	str	r3, [r2, #16]
 8004f12:	e04e      	b.n	8004fb2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	0151      	lsls	r1, r2, #5
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	440a      	add	r2, r1
 8004f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f2e:	0cdb      	lsrs	r3, r3, #19
 8004f30:	04db      	lsls	r3, r3, #19
 8004f32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	0151      	lsls	r1, r2, #5
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	440a      	add	r2, r1
 8004f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f4e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f52:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f56:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	695a      	ldr	r2, [r3, #20]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d903      	bls.n	8004f6c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	0151      	lsls	r1, r2, #5
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	440a      	add	r2, r1
 8004f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fa2:	6939      	ldr	r1, [r7, #16]
 8004fa4:	0148      	lsls	r0, r1, #5
 8004fa6:	6979      	ldr	r1, [r7, #20]
 8004fa8:	4401      	add	r1, r0
 8004faa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004fb2:	79fb      	ldrb	r3, [r7, #7]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d11e      	bne.n	8004ff6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d009      	beq.n	8004fd4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fcc:	461a      	mov	r2, r3
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	0151      	lsls	r1, r2, #5
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	440a      	add	r2, r1
 8004fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ff2:	6013      	str	r3, [r2, #0]
 8004ff4:	e092      	b.n	800511c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	0151      	lsls	r1, r2, #5
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	440a      	add	r2, r1
 800500c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005010:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005014:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d07e      	beq.n	800511c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	2101      	movs	r1, #1
 8005030:	fa01 f303 	lsl.w	r3, r1, r3
 8005034:	6979      	ldr	r1, [r7, #20]
 8005036:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800503a:	4313      	orrs	r3, r2
 800503c:	634b      	str	r3, [r1, #52]	; 0x34
 800503e:	e06d      	b.n	800511c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	0151      	lsls	r1, r2, #5
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	440a      	add	r2, r1
 8005056:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800505a:	0cdb      	lsrs	r3, r3, #19
 800505c:	04db      	lsls	r3, r3, #19
 800505e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	0151      	lsls	r1, r2, #5
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	440a      	add	r2, r1
 8005076:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800507a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800507e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005082:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	0151      	lsls	r1, r2, #5
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	440a      	add	r2, r1
 80050aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c0:	691a      	ldr	r2, [r3, #16]
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ca:	6939      	ldr	r1, [r7, #16]
 80050cc:	0148      	lsls	r0, r1, #5
 80050ce:	6979      	ldr	r1, [r7, #20]
 80050d0:	4401      	add	r1, r0
 80050d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050d6:	4313      	orrs	r3, r2
 80050d8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d10d      	bne.n	80050fc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d009      	beq.n	80050fc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	68d9      	ldr	r1, [r3, #12]
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f8:	460a      	mov	r2, r1
 80050fa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	0151      	lsls	r1, r2, #5
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	440a      	add	r2, r1
 8005112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005116:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800511a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	371c      	adds	r7, #28
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800512a:	b480      	push	{r7}
 800512c:	b089      	sub	sp, #36	; 0x24
 800512e:	af00      	add	r7, sp, #0
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	4611      	mov	r1, r2
 8005136:	461a      	mov	r2, r3
 8005138:	460b      	mov	r3, r1
 800513a:	71fb      	strb	r3, [r7, #7]
 800513c:	4613      	mov	r3, r2
 800513e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005148:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800514c:	2b00      	cmp	r3, #0
 800514e:	d11a      	bne.n	8005186 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005150:	88bb      	ldrh	r3, [r7, #4]
 8005152:	3303      	adds	r3, #3
 8005154:	089b      	lsrs	r3, r3, #2
 8005156:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005158:	2300      	movs	r3, #0
 800515a:	61bb      	str	r3, [r7, #24]
 800515c:	e00f      	b.n	800517e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800515e:	79fb      	ldrb	r3, [r7, #7]
 8005160:	031a      	lsls	r2, r3, #12
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	4413      	add	r3, r2
 8005166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800516a:	461a      	mov	r2, r3
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	3304      	adds	r3, #4
 8005176:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	3301      	adds	r3, #1
 800517c:	61bb      	str	r3, [r7, #24]
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	429a      	cmp	r2, r3
 8005184:	d3eb      	bcc.n	800515e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3724      	adds	r7, #36	; 0x24
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005194:	b480      	push	{r7}
 8005196:	b089      	sub	sp, #36	; 0x24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	4613      	mov	r3, r2
 80051a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80051aa:	88fb      	ldrh	r3, [r7, #6]
 80051ac:	3303      	adds	r3, #3
 80051ae:	089b      	lsrs	r3, r3, #2
 80051b0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80051b2:	2300      	movs	r3, #0
 80051b4:	61bb      	str	r3, [r7, #24]
 80051b6:	e00b      	b.n	80051d0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	3304      	adds	r3, #4
 80051c8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	3301      	adds	r3, #1
 80051ce:	61bb      	str	r3, [r7, #24]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d3ef      	bcc.n	80051b8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80051d8:	69fb      	ldr	r3, [r7, #28]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3724      	adds	r7, #36	; 0x24
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b085      	sub	sp, #20
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	785b      	ldrb	r3, [r3, #1]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d12c      	bne.n	800525c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	db12      	blt.n	800523a <USB_EPSetStall+0x54>
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00f      	beq.n	800523a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	0151      	lsls	r1, r2, #5
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	440a      	add	r2, r1
 8005230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005234:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005238:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	0151      	lsls	r1, r2, #5
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	440a      	add	r2, r1
 8005250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005254:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	e02b      	b.n	80052b4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	db12      	blt.n	8005294 <USB_EPSetStall+0xae>
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00f      	beq.n	8005294 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	0151      	lsls	r1, r2, #5
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	440a      	add	r2, r1
 800528a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800528e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005292:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	0151      	lsls	r1, r2, #5
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	440a      	add	r2, r1
 80052aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b085      	sub	sp, #20
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	785b      	ldrb	r3, [r3, #1]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d128      	bne.n	8005330 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	0151      	lsls	r1, r2, #5
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	440a      	add	r2, r1
 80052f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	78db      	ldrb	r3, [r3, #3]
 8005302:	2b03      	cmp	r3, #3
 8005304:	d003      	beq.n	800530e <USB_EPClearStall+0x4c>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	78db      	ldrb	r3, [r3, #3]
 800530a:	2b02      	cmp	r3, #2
 800530c:	d138      	bne.n	8005380 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	0151      	lsls	r1, r2, #5
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	440a      	add	r2, r1
 8005324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	e027      	b.n	8005380 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	0151      	lsls	r1, r2, #5
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	440a      	add	r2, r1
 8005346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800534a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800534e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	78db      	ldrb	r3, [r3, #3]
 8005354:	2b03      	cmp	r3, #3
 8005356:	d003      	beq.n	8005360 <USB_EPClearStall+0x9e>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	78db      	ldrb	r3, [r3, #3]
 800535c:	2b02      	cmp	r3, #2
 800535e:	d10f      	bne.n	8005380 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	0151      	lsls	r1, r2, #5
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	440a      	add	r2, r1
 8005376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800537a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800537e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800538e:	b480      	push	{r7}
 8005390:	b085      	sub	sp, #20
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	460b      	mov	r3, r1
 8005398:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80053b0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	78fb      	ldrb	r3, [r7, #3]
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80053c2:	68f9      	ldr	r1, [r7, #12]
 80053c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053c8:	4313      	orrs	r3, r2
 80053ca:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053da:	b480      	push	{r7}
 80053dc:	b085      	sub	sp, #20
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053f4:	f023 0303 	bic.w	r3, r3, #3
 80053f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005408:	f023 0302 	bic.w	r3, r3, #2
 800540c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005436:	f023 0303 	bic.w	r3, r3, #3
 800543a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800544a:	f043 0302 	orr.w	r3, r3, #2
 800544e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800545e:	b480      	push	{r7}
 8005460:	b085      	sub	sp, #20
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	4013      	ands	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005476:	68fb      	ldr	r3, [r7, #12]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	4013      	ands	r3, r2
 80054a6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	0c1b      	lsrs	r3, r3, #16
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	4013      	ands	r3, r2
 80054da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	b29b      	uxth	r3, r3
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	460b      	mov	r3, r1
 80054f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80054fc:	78fb      	ldrb	r3, [r7, #3]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	4013      	ands	r3, r2
 8005518:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800551a:	68bb      	ldr	r3, [r7, #8]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	460b      	mov	r3, r1
 8005532:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800554a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800554c:	78fb      	ldrb	r3, [r7, #3]
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	fa22 f303 	lsr.w	r3, r2, r3
 8005558:	01db      	lsls	r3, r3, #7
 800555a:	b2db      	uxtb	r3, r3
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	4313      	orrs	r3, r2
 8005560:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005562:	78fb      	ldrb	r3, [r7, #3]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4013      	ands	r3, r2
 8005574:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005576:	68bb      	ldr	r3, [r7, #8]
}
 8005578:	4618      	mov	r0, r3
 800557a:	371c      	adds	r7, #28
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	f003 0301 	and.w	r3, r3, #1
}
 8005594:	4618      	mov	r0, r3
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80055be:	f023 0307 	bic.w	r3, r3, #7
 80055c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
	...

080055e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	460b      	mov	r3, r1
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	333c      	adds	r3, #60	; 0x3c
 80055fe:	3304      	adds	r3, #4
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	4a26      	ldr	r2, [pc, #152]	; (80056a0 <USB_EP0_OutStart+0xb8>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d90a      	bls.n	8005622 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800561c:	d101      	bne.n	8005622 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	e037      	b.n	8005692 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005628:	461a      	mov	r2, r3
 800562a:	2300      	movs	r3, #0
 800562c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800563c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005640:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005650:	f043 0318 	orr.w	r3, r3, #24
 8005654:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005664:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005668:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800566a:	7afb      	ldrb	r3, [r7, #11]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d10f      	bne.n	8005690 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005676:	461a      	mov	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800568a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800568e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	4f54300a 	.word	0x4f54300a

080056a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3301      	adds	r3, #1
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4a13      	ldr	r2, [pc, #76]	; (8005708 <USB_CoreReset+0x64>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d901      	bls.n	80056c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e01b      	b.n	80056fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	daf2      	bge.n	80056b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f043 0201 	orr.w	r2, r3, #1
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	3301      	adds	r3, #1
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4a09      	ldr	r2, [pc, #36]	; (8005708 <USB_CoreReset+0x64>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d901      	bls.n	80056ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e006      	b.n	80056fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d0f0      	beq.n	80056da <USB_CoreReset+0x36>

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	00030d40 	.word	0x00030d40

0800570c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	460b      	mov	r3, r1
 8005716:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005718:	2010      	movs	r0, #16
 800571a:	f001 ff0f 	bl	800753c <malloc>
 800571e:	4603      	mov	r3, r0
 8005720:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d105      	bne.n	8005734 <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005730:	2302      	movs	r3, #2
 8005732:	e01b      	b.n	800576c <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	7c1b      	ldrb	r3, [r3, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d103      	bne.n	800574c <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2207      	movs	r2, #7
 8005748:	875a      	strh	r2, [r3, #58]	; 0x3a
 800574a:	e002      	b.n	8005752 <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	220a      	movs	r2, #10
 8005750:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005752:	2304      	movs	r3, #4
 8005754:	2203      	movs	r2, #3
 8005756:	2181      	movs	r1, #129	; 0x81
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f001 fd88 	bl	800726e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	460b      	mov	r3, r1
 800577e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005780:	2181      	movs	r1, #129	; 0x81
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f001 fd99 	bl	80072ba <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800579a:	2b00      	cmp	r3, #0
 800579c:	d009      	beq.n	80057b2 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057a4:	4618      	mov	r0, r3
 80057a6:	f001 fed1 	bl	800754c <free>
    pdev->pClassData = NULL;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057cc:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80057d2:	2300      	movs	r3, #0
 80057d4:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d045      	beq.n	800586e <USBD_HID_Setup+0xb2>
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	f040 80d4 	bne.w	8005990 <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	785b      	ldrb	r3, [r3, #1]
 80057ec:	3b02      	subs	r3, #2
 80057ee:	2b09      	cmp	r3, #9
 80057f0:	d835      	bhi.n	800585e <USBD_HID_Setup+0xa2>
 80057f2:	a201      	add	r2, pc, #4	; (adr r2, 80057f8 <USBD_HID_Setup+0x3c>)
 80057f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f8:	0800584f 	.word	0x0800584f
 80057fc:	0800582f 	.word	0x0800582f
 8005800:	0800585f 	.word	0x0800585f
 8005804:	0800585f 	.word	0x0800585f
 8005808:	0800585f 	.word	0x0800585f
 800580c:	0800585f 	.word	0x0800585f
 8005810:	0800585f 	.word	0x0800585f
 8005814:	0800585f 	.word	0x0800585f
 8005818:	0800583d 	.word	0x0800583d
 800581c:	08005821 	.word	0x08005821
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	885b      	ldrh	r3, [r3, #2]
 8005824:	b2db      	uxtb	r3, r3
 8005826:	461a      	mov	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	601a      	str	r2, [r3, #0]
      break;
 800582c:	e01e      	b.n	800586c <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	4619      	mov	r1, r3
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f001 f9c8 	bl	8006bca <USBD_CtlSendData>
      break;
 800583a:	e017      	b.n	800586c <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	885b      	ldrh	r3, [r3, #2]
 8005840:	0a1b      	lsrs	r3, r3, #8
 8005842:	b29b      	uxth	r3, r3
 8005844:	b2db      	uxtb	r3, r3
 8005846:	461a      	mov	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	605a      	str	r2, [r3, #4]
      break;
 800584c:	e00e      	b.n	800586c <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	3304      	adds	r3, #4
 8005852:	2201      	movs	r2, #1
 8005854:	4619      	mov	r1, r3
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f001 f9b7 	bl	8006bca <USBD_CtlSendData>
      break;
 800585c:	e006      	b.n	800586c <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 800585e:	6839      	ldr	r1, [r7, #0]
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f001 f941 	bl	8006ae8 <USBD_CtlError>
      ret = USBD_FAIL;
 8005866:	2303      	movs	r3, #3
 8005868:	75fb      	strb	r3, [r7, #23]
      break;
 800586a:	bf00      	nop
    }
    break;
 800586c:	e097      	b.n	800599e <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	785b      	ldrb	r3, [r3, #1]
 8005872:	2b0b      	cmp	r3, #11
 8005874:	f200 8083 	bhi.w	800597e <USBD_HID_Setup+0x1c2>
 8005878:	a201      	add	r2, pc, #4	; (adr r2, 8005880 <USBD_HID_Setup+0xc4>)
 800587a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587e:	bf00      	nop
 8005880:	080058b1 	.word	0x080058b1
 8005884:	0800598d 	.word	0x0800598d
 8005888:	0800597f 	.word	0x0800597f
 800588c:	0800597f 	.word	0x0800597f
 8005890:	0800597f 	.word	0x0800597f
 8005894:	0800597f 	.word	0x0800597f
 8005898:	080058d9 	.word	0x080058d9
 800589c:	0800597f 	.word	0x0800597f
 80058a0:	0800597f 	.word	0x0800597f
 80058a4:	0800597f 	.word	0x0800597f
 80058a8:	08005931 	.word	0x08005931
 80058ac:	08005959 	.word	0x08005959
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058b6:	2b03      	cmp	r3, #3
 80058b8:	d107      	bne.n	80058ca <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80058ba:	f107 030a 	add.w	r3, r7, #10
 80058be:	2202      	movs	r2, #2
 80058c0:	4619      	mov	r1, r3
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f001 f981 	bl	8006bca <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80058c8:	e061      	b.n	800598e <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 80058ca:	6839      	ldr	r1, [r7, #0]
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f001 f90b 	bl	8006ae8 <USBD_CtlError>
        ret = USBD_FAIL;
 80058d2:	2303      	movs	r3, #3
 80058d4:	75fb      	strb	r3, [r7, #23]
      break;
 80058d6:	e05a      	b.n	800598e <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	885b      	ldrh	r3, [r3, #2]
 80058dc:	0a1b      	lsrs	r3, r3, #8
 80058de:	b29b      	uxth	r3, r3
 80058e0:	2b22      	cmp	r3, #34	; 0x22
 80058e2:	d108      	bne.n	80058f6 <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	88db      	ldrh	r3, [r3, #6]
 80058e8:	2b4a      	cmp	r3, #74	; 0x4a
 80058ea:	bf28      	it	cs
 80058ec:	234a      	movcs	r3, #74	; 0x4a
 80058ee:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 80058f0:	4b2d      	ldr	r3, [pc, #180]	; (80059a8 <USBD_HID_Setup+0x1ec>)
 80058f2:	613b      	str	r3, [r7, #16]
 80058f4:	e015      	b.n	8005922 <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	885b      	ldrh	r3, [r3, #2]
 80058fa:	0a1b      	lsrs	r3, r3, #8
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	2b21      	cmp	r3, #33	; 0x21
 8005900:	d108      	bne.n	8005914 <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 8005902:	4b2a      	ldr	r3, [pc, #168]	; (80059ac <USBD_HID_Setup+0x1f0>)
 8005904:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	88db      	ldrh	r3, [r3, #6]
 800590a:	2b09      	cmp	r3, #9
 800590c:	bf28      	it	cs
 800590e:	2309      	movcs	r3, #9
 8005910:	82bb      	strh	r3, [r7, #20]
 8005912:	e006      	b.n	8005922 <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005914:	6839      	ldr	r1, [r7, #0]
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f001 f8e6 	bl	8006ae8 <USBD_CtlError>
        ret = USBD_FAIL;
 800591c:	2303      	movs	r3, #3
 800591e:	75fb      	strb	r3, [r7, #23]
        break;
 8005920:	e035      	b.n	800598e <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005922:	8abb      	ldrh	r3, [r7, #20]
 8005924:	461a      	mov	r2, r3
 8005926:	6939      	ldr	r1, [r7, #16]
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f001 f94e 	bl	8006bca <USBD_CtlSendData>
      break;
 800592e:	e02e      	b.n	800598e <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005936:	2b03      	cmp	r3, #3
 8005938:	d107      	bne.n	800594a <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3308      	adds	r3, #8
 800593e:	2201      	movs	r2, #1
 8005940:	4619      	mov	r1, r3
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f001 f941 	bl	8006bca <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005948:	e021      	b.n	800598e <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f001 f8cb 	bl	8006ae8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005952:	2303      	movs	r3, #3
 8005954:	75fb      	strb	r3, [r7, #23]
      break;
 8005956:	e01a      	b.n	800598e <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800595e:	2b03      	cmp	r3, #3
 8005960:	d106      	bne.n	8005970 <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	885b      	ldrh	r3, [r3, #2]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	461a      	mov	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800596e:	e00e      	b.n	800598e <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8005970:	6839      	ldr	r1, [r7, #0]
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f001 f8b8 	bl	8006ae8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005978:	2303      	movs	r3, #3
 800597a:	75fb      	strb	r3, [r7, #23]
      break;
 800597c:	e007      	b.n	800598e <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800597e:	6839      	ldr	r1, [r7, #0]
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f001 f8b1 	bl	8006ae8 <USBD_CtlError>
      ret = USBD_FAIL;
 8005986:	2303      	movs	r3, #3
 8005988:	75fb      	strb	r3, [r7, #23]
      break;
 800598a:	e000      	b.n	800598e <USBD_HID_Setup+0x1d2>
      break;
 800598c:	bf00      	nop
    }
    break;
 800598e:	e006      	b.n	800599e <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 8005990:	6839      	ldr	r1, [r7, #0]
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f001 f8a8 	bl	8006ae8 <USBD_CtlError>
    ret = USBD_FAIL;
 8005998:	2303      	movs	r3, #3
 800599a:	75fb      	strb	r3, [r7, #23]
    break;
 800599c:	bf00      	nop
  }

  return (uint8_t)ret;
 800599e:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	200000c8 	.word	0x200000c8
 80059ac:	200000b0 	.word	0x200000b0

080059b0 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	4613      	mov	r3, r2
 80059bc:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059c4:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	d10c      	bne.n	80059ea <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	7b1b      	ldrb	r3, [r3, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d108      	bne.n	80059ea <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	2201      	movs	r2, #1
 80059dc:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 80059de:	88fb      	ldrh	r3, [r7, #6]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	2181      	movs	r1, #129	; 0x81
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f001 fd10 	bl	800740a <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3718      	adds	r7, #24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	7c1b      	ldrb	r3, [r3, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d102      	bne.n	8005a0a <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8005a04:	2308      	movs	r3, #8
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	e001      	b.n	8005a0e <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 8005a0a:	230a      	movs	r3, #10
 8005a0c:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8005a0e:	68fb      	ldr	r3, [r7, #12]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2222      	movs	r2, #34	; 0x22
 8005a28:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8005a2a:	4b03      	ldr	r3, [pc, #12]	; (8005a38 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	20000044 	.word	0x20000044

08005a3c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2222      	movs	r2, #34	; 0x22
 8005a48:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8005a4a:	4b03      	ldr	r3, [pc, #12]	; (8005a58 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	20000068 	.word	0x20000068

08005a5c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2222      	movs	r2, #34	; 0x22
 8005a68:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8005a6a:	4b03      	ldr	r3, [pc, #12]	; (8005a78 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	2000008c 	.word	0x2000008c

08005a7c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a8e:	2200      	movs	r2, #0
 8005a90:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	220a      	movs	r2, #10
 8005aac:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005aae:	4b03      	ldr	r3, [pc, #12]	; (8005abc <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	200000bc 	.word	0x200000bc

08005ac0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	4613      	mov	r3, r2
 8005acc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e025      	b.n	8005b24 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	79fa      	ldrb	r2, [r7, #7]
 8005b16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f001 fb41 	bl	80071a0 <USBD_LL_Init>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3718      	adds	r7, #24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e010      	b.n	8005b66 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b54:	f107 020e 	add.w	r2, r7, #14
 8005b58:	4610      	mov	r0, r2
 8005b5a:	4798      	blx	r3
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b082      	sub	sp, #8
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f001 fb5e 	bl	8007238 <USBD_LL_Start>
 8005b7c:	4603      	mov	r3, r0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d009      	beq.n	8005bca <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	78fa      	ldrb	r2, [r7, #3]
 8005bc0:	4611      	mov	r1, r2
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	4798      	blx	r3
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d007      	beq.n	8005bfa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	78fa      	ldrb	r2, [r7, #3]
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	4798      	blx	r3
  }

  return USBD_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c14:	6839      	ldr	r1, [r7, #0]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 ff2c 	bl	8006a74 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c38:	f003 031f 	and.w	r3, r3, #31
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d00e      	beq.n	8005c5e <USBD_LL_SetupStage+0x5a>
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d302      	bcc.n	8005c4a <USBD_LL_SetupStage+0x46>
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d014      	beq.n	8005c72 <USBD_LL_SetupStage+0x6e>
 8005c48:	e01d      	b.n	8005c86 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c50:	4619      	mov	r1, r3
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fa18 	bl	8006088 <USBD_StdDevReq>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c5c:	e020      	b.n	8005ca0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c64:	4619      	mov	r1, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fa7c 	bl	8006164 <USBD_StdItfReq>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c70:	e016      	b.n	8005ca0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c78:	4619      	mov	r1, r3
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fab8 	bl	80061f0 <USBD_StdEPReq>
 8005c80:	4603      	mov	r3, r0
 8005c82:	73fb      	strb	r3, [r7, #15]
      break;
 8005c84:	e00c      	b.n	8005ca0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	4619      	mov	r1, r3
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f001 fb2f 	bl	80072f8 <USBD_LL_StallEP>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8005c9e:	bf00      	nop
  }

  return ret;
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b086      	sub	sp, #24
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	607a      	str	r2, [r7, #4]
 8005cb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005cb8:	7afb      	ldrb	r3, [r7, #11]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d137      	bne.n	8005d2e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005cc4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d14a      	bne.n	8005d66 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d913      	bls.n	8005d04 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	1ad2      	subs	r2, r2, r3
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	bf28      	it	cs
 8005cf6:	4613      	movcs	r3, r2
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 ff90 	bl	8006c22 <USBD_CtlContinueRx>
 8005d02:	e030      	b.n	8005d66 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00a      	beq.n	8005d26 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d105      	bne.n	8005d26 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 ff8c 	bl	8006c44 <USBD_CtlSendStatus>
 8005d2c:	e01b      	b.n	8005d66 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d013      	beq.n	8005d62 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d10e      	bne.n	8005d62 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	7afa      	ldrb	r2, [r7, #11]
 8005d4e:	4611      	mov	r1, r2
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	4798      	blx	r3
 8005d54:	4603      	mov	r3, r0
 8005d56:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005d58:	7dfb      	ldrb	r3, [r7, #23]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005d5e:	7dfb      	ldrb	r3, [r7, #23]
 8005d60:	e002      	b.n	8005d68 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e000      	b.n	8005d68 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3718      	adds	r7, #24
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	607a      	str	r2, [r7, #4]
 8005d7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005d7e:	7afb      	ldrb	r3, [r7, #11]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d16a      	bne.n	8005e5a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3314      	adds	r3, #20
 8005d88:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d155      	bne.n	8005e40 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d914      	bls.n	8005dca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	1ad2      	subs	r2, r2, r3
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	461a      	mov	r2, r3
 8005db4:	6879      	ldr	r1, [r7, #4]
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 ff22 	bl	8006c00 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f001 fb42 	bl	800744c <USBD_LL_PrepareReceive>
 8005dc8:	e03a      	b.n	8005e40 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d11c      	bne.n	8005e10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d316      	bcc.n	8005e10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d20f      	bcs.n	8005e10 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005df0:	2200      	movs	r2, #0
 8005df2:	2100      	movs	r1, #0
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f000 ff03 	bl	8006c00 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e02:	2300      	movs	r3, #0
 8005e04:	2200      	movs	r2, #0
 8005e06:	2100      	movs	r1, #0
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f001 fb1f 	bl	800744c <USBD_LL_PrepareReceive>
 8005e0e:	e017      	b.n	8005e40 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	d105      	bne.n	8005e32 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e32:	2180      	movs	r1, #128	; 0x80
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f001 fa5f 	bl	80072f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f000 ff15 	bl	8006c6a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d123      	bne.n	8005e92 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f7ff fe9b 	bl	8005b86 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005e58:	e01b      	b.n	8005e92 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d013      	beq.n	8005e8e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d10e      	bne.n	8005e8e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	7afa      	ldrb	r2, [r7, #11]
 8005e7a:	4611      	mov	r1, r2
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	4798      	blx	r3
 8005e80:	4603      	mov	r3, r0
 8005e82:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005e84:	7dfb      	ldrb	r3, [r7, #23]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
 8005e8c:	e002      	b.n	8005e94 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e000      	b.n	8005e94 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3718      	adds	r7, #24
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d009      	beq.n	8005ee0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	6852      	ldr	r2, [r2, #4]
 8005ed8:	b2d2      	uxtb	r2, r2
 8005eda:	4611      	mov	r1, r2
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ee0:	2340      	movs	r3, #64	; 0x40
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f001 f9c1 	bl	800726e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2240      	movs	r2, #64	; 0x40
 8005ef8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005efc:	2340      	movs	r3, #64	; 0x40
 8005efe:	2200      	movs	r2, #0
 8005f00:	2180      	movs	r1, #128	; 0x80
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f001 f9b3 	bl	800726e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2240      	movs	r2, #64	; 0x40
 8005f12:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b083      	sub	sp, #12
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	460b      	mov	r3, r1
 8005f28:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	78fa      	ldrb	r2, [r7, #3]
 8005f2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2204      	movs	r2, #4
 8005f56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	d105      	bne.n	8005f86 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fa2:	2b03      	cmp	r3, #3
 8005fa4:	d10b      	bne.n	8005fbe <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d005      	beq.n	8005fbe <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b083      	sub	sp, #12
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	460b      	mov	r3, r1
 8005fec:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b082      	sub	sp, #8
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006028:	2b00      	cmp	r3, #0
 800602a:	d009      	beq.n	8006040 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	6852      	ldr	r2, [r2, #4]
 8006038:	b2d2      	uxtb	r2, r2
 800603a:	4611      	mov	r1, r2
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	4798      	blx	r3
  }

  return USBD_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800604a:	b480      	push	{r7}
 800604c:	b087      	sub	sp, #28
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	3301      	adds	r3, #1
 8006060:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006068:	8a3b      	ldrh	r3, [r7, #16]
 800606a:	021b      	lsls	r3, r3, #8
 800606c:	b21a      	sxth	r2, r3
 800606e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006072:	4313      	orrs	r3, r2
 8006074:	b21b      	sxth	r3, r3
 8006076:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006078:	89fb      	ldrh	r3, [r7, #14]
}
 800607a:	4618      	mov	r0, r3
 800607c:	371c      	adds	r7, #28
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
	...

08006088 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800609e:	2b20      	cmp	r3, #32
 80060a0:	d004      	beq.n	80060ac <USBD_StdDevReq+0x24>
 80060a2:	2b40      	cmp	r3, #64	; 0x40
 80060a4:	d002      	beq.n	80060ac <USBD_StdDevReq+0x24>
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00a      	beq.n	80060c0 <USBD_StdDevReq+0x38>
 80060aa:	e050      	b.n	800614e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	6839      	ldr	r1, [r7, #0]
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	4798      	blx	r3
 80060ba:	4603      	mov	r3, r0
 80060bc:	73fb      	strb	r3, [r7, #15]
    break;
 80060be:	e04b      	b.n	8006158 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	785b      	ldrb	r3, [r3, #1]
 80060c4:	2b09      	cmp	r3, #9
 80060c6:	d83c      	bhi.n	8006142 <USBD_StdDevReq+0xba>
 80060c8:	a201      	add	r2, pc, #4	; (adr r2, 80060d0 <USBD_StdDevReq+0x48>)
 80060ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ce:	bf00      	nop
 80060d0:	08006125 	.word	0x08006125
 80060d4:	08006139 	.word	0x08006139
 80060d8:	08006143 	.word	0x08006143
 80060dc:	0800612f 	.word	0x0800612f
 80060e0:	08006143 	.word	0x08006143
 80060e4:	08006103 	.word	0x08006103
 80060e8:	080060f9 	.word	0x080060f9
 80060ec:	08006143 	.word	0x08006143
 80060f0:	0800611b 	.word	0x0800611b
 80060f4:	0800610d 	.word	0x0800610d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80060f8:	6839      	ldr	r1, [r7, #0]
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f9ce 	bl	800649c <USBD_GetDescriptor>
      break;
 8006100:	e024      	b.n	800614c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006102:	6839      	ldr	r1, [r7, #0]
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fb33 	bl	8006770 <USBD_SetAddress>
      break;
 800610a:	e01f      	b.n	800614c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800610c:	6839      	ldr	r1, [r7, #0]
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fb70 	bl	80067f4 <USBD_SetConfig>
 8006114:	4603      	mov	r3, r0
 8006116:	73fb      	strb	r3, [r7, #15]
      break;
 8006118:	e018      	b.n	800614c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800611a:	6839      	ldr	r1, [r7, #0]
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fc0d 	bl	800693c <USBD_GetConfig>
      break;
 8006122:	e013      	b.n	800614c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006124:	6839      	ldr	r1, [r7, #0]
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fc3c 	bl	80069a4 <USBD_GetStatus>
      break;
 800612c:	e00e      	b.n	800614c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fc6a 	bl	8006a0a <USBD_SetFeature>
      break;
 8006136:	e009      	b.n	800614c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006138:	6839      	ldr	r1, [r7, #0]
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fc79 	bl	8006a32 <USBD_ClrFeature>
      break;
 8006140:	e004      	b.n	800614c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006142:	6839      	ldr	r1, [r7, #0]
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fccf 	bl	8006ae8 <USBD_CtlError>
      break;
 800614a:	bf00      	nop
    }
    break;
 800614c:	e004      	b.n	8006158 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800614e:	6839      	ldr	r1, [r7, #0]
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fcc9 	bl	8006ae8 <USBD_CtlError>
    break;
 8006156:	bf00      	nop
  }

  return ret;
 8006158:	7bfb      	ldrb	r3, [r7, #15]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop

08006164 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800616e:	2300      	movs	r3, #0
 8006170:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800617a:	2b20      	cmp	r3, #32
 800617c:	d003      	beq.n	8006186 <USBD_StdItfReq+0x22>
 800617e:	2b40      	cmp	r3, #64	; 0x40
 8006180:	d001      	beq.n	8006186 <USBD_StdItfReq+0x22>
 8006182:	2b00      	cmp	r3, #0
 8006184:	d12a      	bne.n	80061dc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800618c:	3b01      	subs	r3, #1
 800618e:	2b02      	cmp	r3, #2
 8006190:	d81d      	bhi.n	80061ce <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	889b      	ldrh	r3, [r3, #4]
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b01      	cmp	r3, #1
 800619a:	d813      	bhi.n	80061c4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	4798      	blx	r3
 80061aa:	4603      	mov	r3, r0
 80061ac:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	88db      	ldrh	r3, [r3, #6]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d110      	bne.n	80061d8 <USBD_StdItfReq+0x74>
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10d      	bne.n	80061d8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 fd41 	bl	8006c44 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80061c2:	e009      	b.n	80061d8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fc8e 	bl	8006ae8 <USBD_CtlError>
      break;
 80061cc:	e004      	b.n	80061d8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80061ce:	6839      	ldr	r1, [r7, #0]
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fc89 	bl	8006ae8 <USBD_CtlError>
      break;
 80061d6:	e000      	b.n	80061da <USBD_StdItfReq+0x76>
      break;
 80061d8:	bf00      	nop
    }
    break;
 80061da:	e004      	b.n	80061e6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80061dc:	6839      	ldr	r1, [r7, #0]
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fc82 	bl	8006ae8 <USBD_CtlError>
    break;
 80061e4:	bf00      	nop
  }

  return ret;
 80061e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	889b      	ldrh	r3, [r3, #4]
 8006202:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800620c:	2b20      	cmp	r3, #32
 800620e:	d004      	beq.n	800621a <USBD_StdEPReq+0x2a>
 8006210:	2b40      	cmp	r3, #64	; 0x40
 8006212:	d002      	beq.n	800621a <USBD_StdEPReq+0x2a>
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00a      	beq.n	800622e <USBD_StdEPReq+0x3e>
 8006218:	e135      	b.n	8006486 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	6839      	ldr	r1, [r7, #0]
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	4798      	blx	r3
 8006228:	4603      	mov	r3, r0
 800622a:	73fb      	strb	r3, [r7, #15]
    break;
 800622c:	e130      	b.n	8006490 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	785b      	ldrb	r3, [r3, #1]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d03e      	beq.n	80062b4 <USBD_StdEPReq+0xc4>
 8006236:	2b03      	cmp	r3, #3
 8006238:	d002      	beq.n	8006240 <USBD_StdEPReq+0x50>
 800623a:	2b00      	cmp	r3, #0
 800623c:	d077      	beq.n	800632e <USBD_StdEPReq+0x13e>
 800623e:	e11c      	b.n	800647a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006246:	2b02      	cmp	r3, #2
 8006248:	d002      	beq.n	8006250 <USBD_StdEPReq+0x60>
 800624a:	2b03      	cmp	r3, #3
 800624c:	d015      	beq.n	800627a <USBD_StdEPReq+0x8a>
 800624e:	e02b      	b.n	80062a8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006250:	7bbb      	ldrb	r3, [r7, #14]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00c      	beq.n	8006270 <USBD_StdEPReq+0x80>
 8006256:	7bbb      	ldrb	r3, [r7, #14]
 8006258:	2b80      	cmp	r3, #128	; 0x80
 800625a:	d009      	beq.n	8006270 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800625c:	7bbb      	ldrb	r3, [r7, #14]
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f001 f849 	bl	80072f8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006266:	2180      	movs	r1, #128	; 0x80
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f001 f845 	bl	80072f8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800626e:	e020      	b.n	80062b2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006270:	6839      	ldr	r1, [r7, #0]
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fc38 	bl	8006ae8 <USBD_CtlError>
        break;
 8006278:	e01b      	b.n	80062b2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	885b      	ldrh	r3, [r3, #2]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10e      	bne.n	80062a0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006282:	7bbb      	ldrb	r3, [r7, #14]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00b      	beq.n	80062a0 <USBD_StdEPReq+0xb0>
 8006288:	7bbb      	ldrb	r3, [r7, #14]
 800628a:	2b80      	cmp	r3, #128	; 0x80
 800628c:	d008      	beq.n	80062a0 <USBD_StdEPReq+0xb0>
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	88db      	ldrh	r3, [r3, #6]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d104      	bne.n	80062a0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006296:	7bbb      	ldrb	r3, [r7, #14]
 8006298:	4619      	mov	r1, r3
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f001 f82c 	bl	80072f8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fccf 	bl	8006c44 <USBD_CtlSendStatus>

        break;
 80062a6:	e004      	b.n	80062b2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80062a8:	6839      	ldr	r1, [r7, #0]
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fc1c 	bl	8006ae8 <USBD_CtlError>
        break;
 80062b0:	bf00      	nop
      }
      break;
 80062b2:	e0e7      	b.n	8006484 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d002      	beq.n	80062c4 <USBD_StdEPReq+0xd4>
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d015      	beq.n	80062ee <USBD_StdEPReq+0xfe>
 80062c2:	e02d      	b.n	8006320 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062c4:	7bbb      	ldrb	r3, [r7, #14]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00c      	beq.n	80062e4 <USBD_StdEPReq+0xf4>
 80062ca:	7bbb      	ldrb	r3, [r7, #14]
 80062cc:	2b80      	cmp	r3, #128	; 0x80
 80062ce:	d009      	beq.n	80062e4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80062d0:	7bbb      	ldrb	r3, [r7, #14]
 80062d2:	4619      	mov	r1, r3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f001 f80f 	bl	80072f8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80062da:	2180      	movs	r1, #128	; 0x80
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f001 f80b 	bl	80072f8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80062e2:	e023      	b.n	800632c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80062e4:	6839      	ldr	r1, [r7, #0]
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fbfe 	bl	8006ae8 <USBD_CtlError>
        break;
 80062ec:	e01e      	b.n	800632c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	885b      	ldrh	r3, [r3, #2]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d119      	bne.n	800632a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80062f6:	7bbb      	ldrb	r3, [r7, #14]
 80062f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d004      	beq.n	800630a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006300:	7bbb      	ldrb	r3, [r7, #14]
 8006302:	4619      	mov	r1, r3
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f001 f816 	bl	8007336 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 fc9a 	bl	8006c44 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	4798      	blx	r3
        }
        break;
 800631e:	e004      	b.n	800632a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006320:	6839      	ldr	r1, [r7, #0]
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fbe0 	bl	8006ae8 <USBD_CtlError>
        break;
 8006328:	e000      	b.n	800632c <USBD_StdEPReq+0x13c>
        break;
 800632a:	bf00      	nop
      }
      break;
 800632c:	e0aa      	b.n	8006484 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006334:	2b02      	cmp	r3, #2
 8006336:	d002      	beq.n	800633e <USBD_StdEPReq+0x14e>
 8006338:	2b03      	cmp	r3, #3
 800633a:	d032      	beq.n	80063a2 <USBD_StdEPReq+0x1b2>
 800633c:	e097      	b.n	800646e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800633e:	7bbb      	ldrb	r3, [r7, #14]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d007      	beq.n	8006354 <USBD_StdEPReq+0x164>
 8006344:	7bbb      	ldrb	r3, [r7, #14]
 8006346:	2b80      	cmp	r3, #128	; 0x80
 8006348:	d004      	beq.n	8006354 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fbcb 	bl	8006ae8 <USBD_CtlError>
          break;
 8006352:	e091      	b.n	8006478 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006354:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006358:	2b00      	cmp	r3, #0
 800635a:	da0b      	bge.n	8006374 <USBD_StdEPReq+0x184>
 800635c:	7bbb      	ldrb	r3, [r7, #14]
 800635e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006362:	4613      	mov	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	3310      	adds	r3, #16
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	4413      	add	r3, r2
 8006370:	3304      	adds	r3, #4
 8006372:	e00b      	b.n	800638c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006374:	7bbb      	ldrb	r3, [r7, #14]
 8006376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800637a:	4613      	mov	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	4413      	add	r3, r2
 800638a:	3304      	adds	r3, #4
 800638c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2200      	movs	r2, #0
 8006392:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2202      	movs	r2, #2
 8006398:	4619      	mov	r1, r3
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fc15 	bl	8006bca <USBD_CtlSendData>
        break;
 80063a0:	e06a      	b.n	8006478 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80063a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	da11      	bge.n	80063ce <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80063aa:	7bbb      	ldrb	r3, [r7, #14]
 80063ac:	f003 020f 	and.w	r2, r3, #15
 80063b0:	6879      	ldr	r1, [r7, #4]
 80063b2:	4613      	mov	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	440b      	add	r3, r1
 80063bc:	3324      	adds	r3, #36	; 0x24
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d117      	bne.n	80063f4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80063c4:	6839      	ldr	r1, [r7, #0]
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fb8e 	bl	8006ae8 <USBD_CtlError>
            break;
 80063cc:	e054      	b.n	8006478 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80063ce:	7bbb      	ldrb	r3, [r7, #14]
 80063d0:	f003 020f 	and.w	r2, r3, #15
 80063d4:	6879      	ldr	r1, [r7, #4]
 80063d6:	4613      	mov	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	440b      	add	r3, r1
 80063e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d104      	bne.n	80063f4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80063ea:	6839      	ldr	r1, [r7, #0]
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fb7b 	bl	8006ae8 <USBD_CtlError>
            break;
 80063f2:	e041      	b.n	8006478 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	da0b      	bge.n	8006414 <USBD_StdEPReq+0x224>
 80063fc:	7bbb      	ldrb	r3, [r7, #14]
 80063fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006402:	4613      	mov	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	3310      	adds	r3, #16
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	4413      	add	r3, r2
 8006410:	3304      	adds	r3, #4
 8006412:	e00b      	b.n	800642c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006414:	7bbb      	ldrb	r3, [r7, #14]
 8006416:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800641a:	4613      	mov	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	4413      	add	r3, r2
 800642a:	3304      	adds	r3, #4
 800642c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800642e:	7bbb      	ldrb	r3, [r7, #14]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d002      	beq.n	800643a <USBD_StdEPReq+0x24a>
 8006434:	7bbb      	ldrb	r3, [r7, #14]
 8006436:	2b80      	cmp	r3, #128	; 0x80
 8006438:	d103      	bne.n	8006442 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2200      	movs	r2, #0
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	e00e      	b.n	8006460 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006442:	7bbb      	ldrb	r3, [r7, #14]
 8006444:	4619      	mov	r1, r3
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 ff94 	bl	8007374 <USBD_LL_IsStallEP>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2201      	movs	r2, #1
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	e002      	b.n	8006460 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	2200      	movs	r2, #0
 800645e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2202      	movs	r2, #2
 8006464:	4619      	mov	r1, r3
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fbaf 	bl	8006bca <USBD_CtlSendData>
          break;
 800646c:	e004      	b.n	8006478 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800646e:	6839      	ldr	r1, [r7, #0]
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fb39 	bl	8006ae8 <USBD_CtlError>
        break;
 8006476:	bf00      	nop
      }
      break;
 8006478:	e004      	b.n	8006484 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fb33 	bl	8006ae8 <USBD_CtlError>
      break;
 8006482:	bf00      	nop
    }
    break;
 8006484:	e004      	b.n	8006490 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006486:	6839      	ldr	r1, [r7, #0]
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 fb2d 	bl	8006ae8 <USBD_CtlError>
    break;
 800648e:	bf00      	nop
  }

  return ret;
 8006490:	7bfb      	ldrb	r3, [r7, #15]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80064a6:	2300      	movs	r3, #0
 80064a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80064aa:	2300      	movs	r3, #0
 80064ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	885b      	ldrh	r3, [r3, #2]
 80064b6:	0a1b      	lsrs	r3, r3, #8
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	3b01      	subs	r3, #1
 80064bc:	2b06      	cmp	r3, #6
 80064be:	f200 8128 	bhi.w	8006712 <USBD_GetDescriptor+0x276>
 80064c2:	a201      	add	r2, pc, #4	; (adr r2, 80064c8 <USBD_GetDescriptor+0x2c>)
 80064c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c8:	080064e5 	.word	0x080064e5
 80064cc:	080064fd 	.word	0x080064fd
 80064d0:	0800653d 	.word	0x0800653d
 80064d4:	08006713 	.word	0x08006713
 80064d8:	08006713 	.word	0x08006713
 80064dc:	080066b3 	.word	0x080066b3
 80064e0:	080066df 	.word	0x080066df
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	7c12      	ldrb	r2, [r2, #16]
 80064f0:	f107 0108 	add.w	r1, r7, #8
 80064f4:	4610      	mov	r0, r2
 80064f6:	4798      	blx	r3
 80064f8:	60f8      	str	r0, [r7, #12]
    break;
 80064fa:	e112      	b.n	8006722 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	7c1b      	ldrb	r3, [r3, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10d      	bne.n	8006520 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800650a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650c:	f107 0208 	add.w	r2, r7, #8
 8006510:	4610      	mov	r0, r2
 8006512:	4798      	blx	r3
 8006514:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	3301      	adds	r3, #1
 800651a:	2202      	movs	r2, #2
 800651c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800651e:	e100      	b.n	8006722 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006528:	f107 0208 	add.w	r2, r7, #8
 800652c:	4610      	mov	r0, r2
 800652e:	4798      	blx	r3
 8006530:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	3301      	adds	r3, #1
 8006536:	2202      	movs	r2, #2
 8006538:	701a      	strb	r2, [r3, #0]
    break;
 800653a:	e0f2      	b.n	8006722 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	885b      	ldrh	r3, [r3, #2]
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b05      	cmp	r3, #5
 8006544:	f200 80ac 	bhi.w	80066a0 <USBD_GetDescriptor+0x204>
 8006548:	a201      	add	r2, pc, #4	; (adr r2, 8006550 <USBD_GetDescriptor+0xb4>)
 800654a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654e:	bf00      	nop
 8006550:	08006569 	.word	0x08006569
 8006554:	0800659d 	.word	0x0800659d
 8006558:	080065d1 	.word	0x080065d1
 800655c:	08006605 	.word	0x08006605
 8006560:	08006639 	.word	0x08006639
 8006564:	0800666d 	.word	0x0800666d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00b      	beq.n	800658c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	7c12      	ldrb	r2, [r2, #16]
 8006580:	f107 0108 	add.w	r1, r7, #8
 8006584:	4610      	mov	r0, r2
 8006586:	4798      	blx	r3
 8006588:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800658a:	e091      	b.n	80066b0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 faaa 	bl	8006ae8 <USBD_CtlError>
        err++;
 8006594:	7afb      	ldrb	r3, [r7, #11]
 8006596:	3301      	adds	r3, #1
 8006598:	72fb      	strb	r3, [r7, #11]
      break;
 800659a:	e089      	b.n	80066b0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00b      	beq.n	80065c0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	7c12      	ldrb	r2, [r2, #16]
 80065b4:	f107 0108 	add.w	r1, r7, #8
 80065b8:	4610      	mov	r0, r2
 80065ba:	4798      	blx	r3
 80065bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065be:	e077      	b.n	80066b0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fa90 	bl	8006ae8 <USBD_CtlError>
        err++;
 80065c8:	7afb      	ldrb	r3, [r7, #11]
 80065ca:	3301      	adds	r3, #1
 80065cc:	72fb      	strb	r3, [r7, #11]
      break;
 80065ce:	e06f      	b.n	80066b0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00b      	beq.n	80065f4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	7c12      	ldrb	r2, [r2, #16]
 80065e8:	f107 0108 	add.w	r1, r7, #8
 80065ec:	4610      	mov	r0, r2
 80065ee:	4798      	blx	r3
 80065f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065f2:	e05d      	b.n	80066b0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80065f4:	6839      	ldr	r1, [r7, #0]
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fa76 	bl	8006ae8 <USBD_CtlError>
        err++;
 80065fc:	7afb      	ldrb	r3, [r7, #11]
 80065fe:	3301      	adds	r3, #1
 8006600:	72fb      	strb	r3, [r7, #11]
      break;
 8006602:	e055      	b.n	80066b0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00b      	beq.n	8006628 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	7c12      	ldrb	r2, [r2, #16]
 800661c:	f107 0108 	add.w	r1, r7, #8
 8006620:	4610      	mov	r0, r2
 8006622:	4798      	blx	r3
 8006624:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006626:	e043      	b.n	80066b0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fa5c 	bl	8006ae8 <USBD_CtlError>
        err++;
 8006630:	7afb      	ldrb	r3, [r7, #11]
 8006632:	3301      	adds	r3, #1
 8006634:	72fb      	strb	r3, [r7, #11]
      break;
 8006636:	e03b      	b.n	80066b0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00b      	beq.n	800665c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	7c12      	ldrb	r2, [r2, #16]
 8006650:	f107 0108 	add.w	r1, r7, #8
 8006654:	4610      	mov	r0, r2
 8006656:	4798      	blx	r3
 8006658:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800665a:	e029      	b.n	80066b0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800665c:	6839      	ldr	r1, [r7, #0]
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fa42 	bl	8006ae8 <USBD_CtlError>
        err++;
 8006664:	7afb      	ldrb	r3, [r7, #11]
 8006666:	3301      	adds	r3, #1
 8006668:	72fb      	strb	r3, [r7, #11]
      break;
 800666a:	e021      	b.n	80066b0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00b      	beq.n	8006690 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	7c12      	ldrb	r2, [r2, #16]
 8006684:	f107 0108 	add.w	r1, r7, #8
 8006688:	4610      	mov	r0, r2
 800668a:	4798      	blx	r3
 800668c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800668e:	e00f      	b.n	80066b0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fa28 	bl	8006ae8 <USBD_CtlError>
        err++;
 8006698:	7afb      	ldrb	r3, [r7, #11]
 800669a:	3301      	adds	r3, #1
 800669c:	72fb      	strb	r3, [r7, #11]
      break;
 800669e:	e007      	b.n	80066b0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80066a0:	6839      	ldr	r1, [r7, #0]
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fa20 	bl	8006ae8 <USBD_CtlError>
      err++;
 80066a8:	7afb      	ldrb	r3, [r7, #11]
 80066aa:	3301      	adds	r3, #1
 80066ac:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80066ae:	bf00      	nop
    }
    break;
 80066b0:	e037      	b.n	8006722 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	7c1b      	ldrb	r3, [r3, #16]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d109      	bne.n	80066ce <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c2:	f107 0208 	add.w	r2, r7, #8
 80066c6:	4610      	mov	r0, r2
 80066c8:	4798      	blx	r3
 80066ca:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80066cc:	e029      	b.n	8006722 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80066ce:	6839      	ldr	r1, [r7, #0]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fa09 	bl	8006ae8 <USBD_CtlError>
      err++;
 80066d6:	7afb      	ldrb	r3, [r7, #11]
 80066d8:	3301      	adds	r3, #1
 80066da:	72fb      	strb	r3, [r7, #11]
    break;
 80066dc:	e021      	b.n	8006722 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	7c1b      	ldrb	r3, [r3, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10d      	bne.n	8006702 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ee:	f107 0208 	add.w	r2, r7, #8
 80066f2:	4610      	mov	r0, r2
 80066f4:	4798      	blx	r3
 80066f6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	3301      	adds	r3, #1
 80066fc:	2207      	movs	r2, #7
 80066fe:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006700:	e00f      	b.n	8006722 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006702:	6839      	ldr	r1, [r7, #0]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f9ef 	bl	8006ae8 <USBD_CtlError>
      err++;
 800670a:	7afb      	ldrb	r3, [r7, #11]
 800670c:	3301      	adds	r3, #1
 800670e:	72fb      	strb	r3, [r7, #11]
    break;
 8006710:	e007      	b.n	8006722 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f9e7 	bl	8006ae8 <USBD_CtlError>
    err++;
 800671a:	7afb      	ldrb	r3, [r7, #11]
 800671c:	3301      	adds	r3, #1
 800671e:	72fb      	strb	r3, [r7, #11]
    break;
 8006720:	bf00      	nop
  }

  if (err != 0U)
 8006722:	7afb      	ldrb	r3, [r7, #11]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d11e      	bne.n	8006766 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	88db      	ldrh	r3, [r3, #6]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d016      	beq.n	800675e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006730:	893b      	ldrh	r3, [r7, #8]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00e      	beq.n	8006754 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	88da      	ldrh	r2, [r3, #6]
 800673a:	893b      	ldrh	r3, [r7, #8]
 800673c:	4293      	cmp	r3, r2
 800673e:	bf28      	it	cs
 8006740:	4613      	movcs	r3, r2
 8006742:	b29b      	uxth	r3, r3
 8006744:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006746:	893b      	ldrh	r3, [r7, #8]
 8006748:	461a      	mov	r2, r3
 800674a:	68f9      	ldr	r1, [r7, #12]
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fa3c 	bl	8006bca <USBD_CtlSendData>
 8006752:	e009      	b.n	8006768 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f9c6 	bl	8006ae8 <USBD_CtlError>
 800675c:	e004      	b.n	8006768 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fa70 	bl	8006c44 <USBD_CtlSendStatus>
 8006764:	e000      	b.n	8006768 <USBD_GetDescriptor+0x2cc>
    return;
 8006766:	bf00      	nop
    }
  }
}
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop

08006770 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	889b      	ldrh	r3, [r3, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d130      	bne.n	80067e4 <USBD_SetAddress+0x74>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	88db      	ldrh	r3, [r3, #6]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d12c      	bne.n	80067e4 <USBD_SetAddress+0x74>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	885b      	ldrh	r3, [r3, #2]
 800678e:	2b7f      	cmp	r3, #127	; 0x7f
 8006790:	d828      	bhi.n	80067e4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	885b      	ldrh	r3, [r3, #2]
 8006796:	b2db      	uxtb	r3, r3
 8006798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800679c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d104      	bne.n	80067b2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f99c 	bl	8006ae8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067b0:	e01c      	b.n	80067ec <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	7bfa      	ldrb	r2, [r7, #15]
 80067b6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
 80067bc:	4619      	mov	r1, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fe04 	bl	80073cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fa3d 	bl	8006c44 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d004      	beq.n	80067da <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2202      	movs	r2, #2
 80067d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067d8:	e008      	b.n	80067ec <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067e2:	e003      	b.n	80067ec <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80067e4:	6839      	ldr	r1, [r7, #0]
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f97e 	bl	8006ae8 <USBD_CtlError>
  }
}
 80067ec:	bf00      	nop
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	885b      	ldrh	r3, [r3, #2]
 8006806:	b2da      	uxtb	r2, r3
 8006808:	4b4b      	ldr	r3, [pc, #300]	; (8006938 <USBD_SetConfig+0x144>)
 800680a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800680c:	4b4a      	ldr	r3, [pc, #296]	; (8006938 <USBD_SetConfig+0x144>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d905      	bls.n	8006820 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f966 	bl	8006ae8 <USBD_CtlError>
    return USBD_FAIL;
 800681c:	2303      	movs	r3, #3
 800681e:	e087      	b.n	8006930 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006826:	2b02      	cmp	r3, #2
 8006828:	d002      	beq.n	8006830 <USBD_SetConfig+0x3c>
 800682a:	2b03      	cmp	r3, #3
 800682c:	d025      	beq.n	800687a <USBD_SetConfig+0x86>
 800682e:	e071      	b.n	8006914 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006830:	4b41      	ldr	r3, [pc, #260]	; (8006938 <USBD_SetConfig+0x144>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d01c      	beq.n	8006872 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006838:	4b3f      	ldr	r3, [pc, #252]	; (8006938 <USBD_SetConfig+0x144>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	461a      	mov	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006842:	4b3d      	ldr	r3, [pc, #244]	; (8006938 <USBD_SetConfig+0x144>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	4619      	mov	r1, r3
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f7ff f9a7 	bl	8005b9c <USBD_SetClassConfig>
 800684e:	4603      	mov	r3, r0
 8006850:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006852:	7bfb      	ldrb	r3, [r7, #15]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d004      	beq.n	8006862 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006858:	6839      	ldr	r1, [r7, #0]
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f944 	bl	8006ae8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006860:	e065      	b.n	800692e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f9ee 	bl	8006c44 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2203      	movs	r2, #3
 800686c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006870:	e05d      	b.n	800692e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f9e6 	bl	8006c44 <USBD_CtlSendStatus>
    break;
 8006878:	e059      	b.n	800692e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800687a:	4b2f      	ldr	r3, [pc, #188]	; (8006938 <USBD_SetConfig+0x144>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d112      	bne.n	80068a8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2202      	movs	r2, #2
 8006886:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800688a:	4b2b      	ldr	r3, [pc, #172]	; (8006938 <USBD_SetConfig+0x144>)
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	461a      	mov	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006894:	4b28      	ldr	r3, [pc, #160]	; (8006938 <USBD_SetConfig+0x144>)
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7ff f99a 	bl	8005bd4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f9cf 	bl	8006c44 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80068a6:	e042      	b.n	800692e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80068a8:	4b23      	ldr	r3, [pc, #140]	; (8006938 <USBD_SetConfig+0x144>)
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	461a      	mov	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d02a      	beq.n	800690c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7ff f988 	bl	8005bd4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80068c4:	4b1c      	ldr	r3, [pc, #112]	; (8006938 <USBD_SetConfig+0x144>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	461a      	mov	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80068ce:	4b1a      	ldr	r3, [pc, #104]	; (8006938 <USBD_SetConfig+0x144>)
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7ff f961 	bl	8005b9c <USBD_SetClassConfig>
 80068da:	4603      	mov	r3, r0
 80068dc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80068de:	7bfb      	ldrb	r3, [r7, #15]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00f      	beq.n	8006904 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f8fe 	bl	8006ae8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f7ff f96d 	bl	8005bd4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2202      	movs	r2, #2
 80068fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006902:	e014      	b.n	800692e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f99d 	bl	8006c44 <USBD_CtlSendStatus>
    break;
 800690a:	e010      	b.n	800692e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f999 	bl	8006c44 <USBD_CtlSendStatus>
    break;
 8006912:	e00c      	b.n	800692e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f8e6 	bl	8006ae8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800691c:	4b06      	ldr	r3, [pc, #24]	; (8006938 <USBD_SetConfig+0x144>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	4619      	mov	r1, r3
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7ff f956 	bl	8005bd4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006928:	2303      	movs	r3, #3
 800692a:	73fb      	strb	r3, [r7, #15]
    break;
 800692c:	bf00      	nop
  }

  return ret;
 800692e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	200001e8 	.word	0x200001e8

0800693c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	88db      	ldrh	r3, [r3, #6]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d004      	beq.n	8006958 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800694e:	6839      	ldr	r1, [r7, #0]
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f8c9 	bl	8006ae8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006956:	e021      	b.n	800699c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800695e:	2b01      	cmp	r3, #1
 8006960:	db17      	blt.n	8006992 <USBD_GetConfig+0x56>
 8006962:	2b02      	cmp	r3, #2
 8006964:	dd02      	ble.n	800696c <USBD_GetConfig+0x30>
 8006966:	2b03      	cmp	r3, #3
 8006968:	d00b      	beq.n	8006982 <USBD_GetConfig+0x46>
 800696a:	e012      	b.n	8006992 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	3308      	adds	r3, #8
 8006976:	2201      	movs	r2, #1
 8006978:	4619      	mov	r1, r3
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f925 	bl	8006bca <USBD_CtlSendData>
      break;
 8006980:	e00c      	b.n	800699c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	3304      	adds	r3, #4
 8006986:	2201      	movs	r2, #1
 8006988:	4619      	mov	r1, r3
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f91d 	bl	8006bca <USBD_CtlSendData>
      break;
 8006990:	e004      	b.n	800699c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f8a7 	bl	8006ae8 <USBD_CtlError>
      break;
 800699a:	bf00      	nop
}
 800699c:	bf00      	nop
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b4:	3b01      	subs	r3, #1
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d81e      	bhi.n	80069f8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	88db      	ldrh	r3, [r3, #6]
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d004      	beq.n	80069cc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f88f 	bl	8006ae8 <USBD_CtlError>
      break;
 80069ca:	e01a      	b.n	8006a02 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d005      	beq.n	80069e8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f043 0202 	orr.w	r2, r3, #2
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	330c      	adds	r3, #12
 80069ec:	2202      	movs	r2, #2
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f8ea 	bl	8006bca <USBD_CtlSendData>
    break;
 80069f6:	e004      	b.n	8006a02 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f874 	bl	8006ae8 <USBD_CtlError>
    break;
 8006a00:	bf00      	nop
  }
}
 8006a02:	bf00      	nop
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b082      	sub	sp, #8
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	885b      	ldrh	r3, [r3, #2]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d106      	bne.n	8006a2a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f90d 	bl	8006c44 <USBD_CtlSendStatus>
  }
}
 8006a2a:	bf00      	nop
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b082      	sub	sp, #8
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a42:	3b01      	subs	r3, #1
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d80b      	bhi.n	8006a60 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	885b      	ldrh	r3, [r3, #2]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d10c      	bne.n	8006a6a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f8f3 	bl	8006c44 <USBD_CtlSendStatus>
      }
      break;
 8006a5e:	e004      	b.n	8006a6a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f840 	bl	8006ae8 <USBD_CtlError>
      break;
 8006a68:	e000      	b.n	8006a6c <USBD_ClrFeature+0x3a>
      break;
 8006a6a:	bf00      	nop
  }
}
 8006a6c:	bf00      	nop
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	781a      	ldrb	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	781a      	ldrb	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f7ff fad3 	bl	800604a <SWAPBYTE>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f7ff fac6 	bl	800604a <SWAPBYTE>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f7ff fab9 	bl	800604a <SWAPBYTE>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	461a      	mov	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	80da      	strh	r2, [r3, #6]
}
 8006ae0:	bf00      	nop
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006af2:	2180      	movs	r1, #128	; 0x80
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fbff 	bl	80072f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006afa:	2100      	movs	r1, #0
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fbfb 	bl	80072f8 <USBD_LL_StallEP>
}
 8006b02:	bf00      	nop
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b086      	sub	sp, #24
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	60f8      	str	r0, [r7, #12]
 8006b12:	60b9      	str	r1, [r7, #8]
 8006b14:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d036      	beq.n	8006b8e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006b24:	6938      	ldr	r0, [r7, #16]
 8006b26:	f000 f836 	bl	8006b96 <USBD_GetLen>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006b38:	7dfb      	ldrb	r3, [r7, #23]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	7812      	ldrb	r2, [r2, #0]
 8006b42:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b44:	7dfb      	ldrb	r3, [r7, #23]
 8006b46:	3301      	adds	r3, #1
 8006b48:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006b4a:	7dfb      	ldrb	r3, [r7, #23]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	4413      	add	r3, r2
 8006b50:	2203      	movs	r2, #3
 8006b52:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b54:	7dfb      	ldrb	r3, [r7, #23]
 8006b56:	3301      	adds	r3, #1
 8006b58:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006b5a:	e013      	b.n	8006b84 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006b5c:	7dfb      	ldrb	r3, [r7, #23]
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	4413      	add	r3, r2
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	7812      	ldrb	r2, [r2, #0]
 8006b66:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	613b      	str	r3, [r7, #16]
    idx++;
 8006b6e:	7dfb      	ldrb	r3, [r7, #23]
 8006b70:	3301      	adds	r3, #1
 8006b72:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006b74:	7dfb      	ldrb	r3, [r7, #23]
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	4413      	add	r3, r2
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	701a      	strb	r2, [r3, #0]
    idx++;
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
 8006b80:	3301      	adds	r3, #1
 8006b82:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e7      	bne.n	8006b5c <USBD_GetString+0x52>
 8006b8c:	e000      	b.n	8006b90 <USBD_GetString+0x86>
    return;
 8006b8e:	bf00      	nop
  }
}
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b085      	sub	sp, #20
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006ba6:	e005      	b.n	8006bb4 <USBD_GetLen+0x1e>
  {
    len++;
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
 8006baa:	3301      	adds	r3, #1
 8006bac:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1f5      	bne.n	8006ba8 <USBD_GetLen+0x12>
  }

  return len;
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b084      	sub	sp, #16
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2202      	movs	r2, #2
 8006bda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	2100      	movs	r1, #0
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 fc0a 	bl	800740a <USBD_LL_Transmit>

  return USBD_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	2100      	movs	r1, #0
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 fbf9 	bl	800740a <USBD_LL_Transmit>

  return USBD_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	60f8      	str	r0, [r7, #12]
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	2100      	movs	r1, #0
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 fc09 	bl	800744c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2204      	movs	r2, #4
 8006c50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006c54:	2300      	movs	r3, #0
 8006c56:	2200      	movs	r2, #0
 8006c58:	2100      	movs	r1, #0
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fbd5 	bl	800740a <USBD_LL_Transmit>

  return USBD_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b082      	sub	sp, #8
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2205      	movs	r2, #5
 8006c76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2100      	movs	r1, #0
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 fbe3 	bl	800744c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006c94:	2200      	movs	r2, #0
 8006c96:	490e      	ldr	r1, [pc, #56]	; (8006cd0 <MX_USB_DEVICE_Init+0x40>)
 8006c98:	480e      	ldr	r0, [pc, #56]	; (8006cd4 <MX_USB_DEVICE_Init+0x44>)
 8006c9a:	f7fe ff11 	bl	8005ac0 <USBD_Init>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006ca4:	f7fa fbce 	bl	8001444 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006ca8:	490b      	ldr	r1, [pc, #44]	; (8006cd8 <MX_USB_DEVICE_Init+0x48>)
 8006caa:	480a      	ldr	r0, [pc, #40]	; (8006cd4 <MX_USB_DEVICE_Init+0x44>)
 8006cac:	f7fe ff3e 	bl	8005b2c <USBD_RegisterClass>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006cb6:	f7fa fbc5 	bl	8001444 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006cba:	4806      	ldr	r0, [pc, #24]	; (8006cd4 <MX_USB_DEVICE_Init+0x44>)
 8006cbc:	f7fe ff57 	bl	8005b6e <USBD_Start>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d001      	beq.n	8006cca <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006cc6:	f7fa fbbd 	bl	8001444 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006cca:	bf00      	nop
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20000114 	.word	0x20000114
 8006cd4:	20000238 	.word	0x20000238
 8006cd8:	2000000c 	.word	0x2000000c

08006cdc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	6039      	str	r1, [r7, #0]
 8006ce6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	2212      	movs	r2, #18
 8006cec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006cee:	4b03      	ldr	r3, [pc, #12]	; (8006cfc <USBD_FS_DeviceDescriptor+0x20>)
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	20000130 	.word	0x20000130

08006d00 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	4603      	mov	r3, r0
 8006d08:	6039      	str	r1, [r7, #0]
 8006d0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	2204      	movs	r2, #4
 8006d10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006d12:	4b03      	ldr	r3, [pc, #12]	; (8006d20 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	20000144 	.word	0x20000144

08006d24 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	6039      	str	r1, [r7, #0]
 8006d2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d30:	79fb      	ldrb	r3, [r7, #7]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d105      	bne.n	8006d42 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	4907      	ldr	r1, [pc, #28]	; (8006d58 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d3a:	4808      	ldr	r0, [pc, #32]	; (8006d5c <USBD_FS_ProductStrDescriptor+0x38>)
 8006d3c:	f7ff fee5 	bl	8006b0a <USBD_GetString>
 8006d40:	e004      	b.n	8006d4c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	4904      	ldr	r1, [pc, #16]	; (8006d58 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d46:	4805      	ldr	r0, [pc, #20]	; (8006d5c <USBD_FS_ProductStrDescriptor+0x38>)
 8006d48:	f7ff fedf 	bl	8006b0a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d4c:	4b02      	ldr	r3, [pc, #8]	; (8006d58 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20000508 	.word	0x20000508
 8006d5c:	080087a8 	.word	0x080087a8

08006d60 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	4603      	mov	r3, r0
 8006d68:	6039      	str	r1, [r7, #0]
 8006d6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	4904      	ldr	r1, [pc, #16]	; (8006d80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006d70:	4804      	ldr	r0, [pc, #16]	; (8006d84 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006d72:	f7ff feca 	bl	8006b0a <USBD_GetString>
  return USBD_StrDesc;
 8006d76:	4b02      	ldr	r3, [pc, #8]	; (8006d80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	20000508 	.word	0x20000508
 8006d84:	080087c0 	.word	0x080087c0

08006d88 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	4603      	mov	r3, r0
 8006d90:	6039      	str	r1, [r7, #0]
 8006d92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	221a      	movs	r2, #26
 8006d98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006d9a:	f000 f843 	bl	8006e24 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006d9e:	4b02      	ldr	r3, [pc, #8]	; (8006da8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20000148 	.word	0x20000148

08006dac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	4603      	mov	r3, r0
 8006db4:	6039      	str	r1, [r7, #0]
 8006db6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006db8:	79fb      	ldrb	r3, [r7, #7]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d105      	bne.n	8006dca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	4907      	ldr	r1, [pc, #28]	; (8006de0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006dc2:	4808      	ldr	r0, [pc, #32]	; (8006de4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006dc4:	f7ff fea1 	bl	8006b0a <USBD_GetString>
 8006dc8:	e004      	b.n	8006dd4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	4904      	ldr	r1, [pc, #16]	; (8006de0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006dce:	4805      	ldr	r0, [pc, #20]	; (8006de4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006dd0:	f7ff fe9b 	bl	8006b0a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006dd4:	4b02      	ldr	r3, [pc, #8]	; (8006de0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	20000508 	.word	0x20000508
 8006de4:	080087d4 	.word	0x080087d4

08006de8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	4603      	mov	r3, r0
 8006df0:	6039      	str	r1, [r7, #0]
 8006df2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006df4:	79fb      	ldrb	r3, [r7, #7]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d105      	bne.n	8006e06 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	4907      	ldr	r1, [pc, #28]	; (8006e1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006dfe:	4808      	ldr	r0, [pc, #32]	; (8006e20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e00:	f7ff fe83 	bl	8006b0a <USBD_GetString>
 8006e04:	e004      	b.n	8006e10 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	4904      	ldr	r1, [pc, #16]	; (8006e1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e0a:	4805      	ldr	r0, [pc, #20]	; (8006e20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e0c:	f7ff fe7d 	bl	8006b0a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e10:	4b02      	ldr	r3, [pc, #8]	; (8006e1c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	20000508 	.word	0x20000508
 8006e20:	080087e0 	.word	0x080087e0

08006e24 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e2a:	4b0f      	ldr	r3, [pc, #60]	; (8006e68 <Get_SerialNum+0x44>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e30:	4b0e      	ldr	r3, [pc, #56]	; (8006e6c <Get_SerialNum+0x48>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e36:	4b0e      	ldr	r3, [pc, #56]	; (8006e70 <Get_SerialNum+0x4c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4413      	add	r3, r2
 8006e42:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d009      	beq.n	8006e5e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e4a:	2208      	movs	r2, #8
 8006e4c:	4909      	ldr	r1, [pc, #36]	; (8006e74 <Get_SerialNum+0x50>)
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 f814 	bl	8006e7c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006e54:	2204      	movs	r2, #4
 8006e56:	4908      	ldr	r1, [pc, #32]	; (8006e78 <Get_SerialNum+0x54>)
 8006e58:	68b8      	ldr	r0, [r7, #8]
 8006e5a:	f000 f80f 	bl	8006e7c <IntToUnicode>
  }
}
 8006e5e:	bf00      	nop
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	1fff7a10 	.word	0x1fff7a10
 8006e6c:	1fff7a14 	.word	0x1fff7a14
 8006e70:	1fff7a18 	.word	0x1fff7a18
 8006e74:	2000014a 	.word	0x2000014a
 8006e78:	2000015a 	.word	0x2000015a

08006e7c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	4613      	mov	r3, r2
 8006e88:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006e8e:	2300      	movs	r3, #0
 8006e90:	75fb      	strb	r3, [r7, #23]
 8006e92:	e027      	b.n	8006ee4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	0f1b      	lsrs	r3, r3, #28
 8006e98:	2b09      	cmp	r3, #9
 8006e9a:	d80b      	bhi.n	8006eb4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	0f1b      	lsrs	r3, r3, #28
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	7dfb      	ldrb	r3, [r7, #23]
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	440b      	add	r3, r1
 8006eac:	3230      	adds	r2, #48	; 0x30
 8006eae:	b2d2      	uxtb	r2, r2
 8006eb0:	701a      	strb	r2, [r3, #0]
 8006eb2:	e00a      	b.n	8006eca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	0f1b      	lsrs	r3, r3, #28
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	7dfb      	ldrb	r3, [r7, #23]
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	440b      	add	r3, r1
 8006ec4:	3237      	adds	r2, #55	; 0x37
 8006ec6:	b2d2      	uxtb	r2, r2
 8006ec8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	011b      	lsls	r3, r3, #4
 8006ece:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006ed0:	7dfb      	ldrb	r3, [r7, #23]
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	4413      	add	r3, r2
 8006eda:	2200      	movs	r2, #0
 8006edc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	75fb      	strb	r3, [r7, #23]
 8006ee4:	7dfa      	ldrb	r2, [r7, #23]
 8006ee6:	79fb      	ldrb	r3, [r7, #7]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d3d3      	bcc.n	8006e94 <IntToUnicode+0x18>
  }
}
 8006eec:	bf00      	nop
 8006eee:	371c      	adds	r7, #28
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08a      	sub	sp, #40	; 0x28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f00:	f107 0314 	add.w	r3, r7, #20
 8006f04:	2200      	movs	r2, #0
 8006f06:	601a      	str	r2, [r3, #0]
 8006f08:	605a      	str	r2, [r3, #4]
 8006f0a:	609a      	str	r2, [r3, #8]
 8006f0c:	60da      	str	r2, [r3, #12]
 8006f0e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f18:	d147      	bne.n	8006faa <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	613b      	str	r3, [r7, #16]
 8006f1e:	4b25      	ldr	r3, [pc, #148]	; (8006fb4 <HAL_PCD_MspInit+0xbc>)
 8006f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f22:	4a24      	ldr	r2, [pc, #144]	; (8006fb4 <HAL_PCD_MspInit+0xbc>)
 8006f24:	f043 0301 	orr.w	r3, r3, #1
 8006f28:	6313      	str	r3, [r2, #48]	; 0x30
 8006f2a:	4b22      	ldr	r3, [pc, #136]	; (8006fb4 <HAL_PCD_MspInit+0xbc>)
 8006f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	613b      	str	r3, [r7, #16]
 8006f34:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8006f36:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8006f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f40:	2300      	movs	r3, #0
 8006f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f44:	2303      	movs	r3, #3
 8006f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006f48:	230a      	movs	r3, #10
 8006f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f4c:	f107 0314 	add.w	r3, r7, #20
 8006f50:	4619      	mov	r1, r3
 8006f52:	4819      	ldr	r0, [pc, #100]	; (8006fb8 <HAL_PCD_MspInit+0xc0>)
 8006f54:	f7fa fd42 	bl	80019dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006f58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006f66:	f107 0314 	add.w	r3, r7, #20
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4812      	ldr	r0, [pc, #72]	; (8006fb8 <HAL_PCD_MspInit+0xc0>)
 8006f6e:	f7fa fd35 	bl	80019dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006f72:	4b10      	ldr	r3, [pc, #64]	; (8006fb4 <HAL_PCD_MspInit+0xbc>)
 8006f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f76:	4a0f      	ldr	r2, [pc, #60]	; (8006fb4 <HAL_PCD_MspInit+0xbc>)
 8006f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f7c:	6353      	str	r3, [r2, #52]	; 0x34
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60fb      	str	r3, [r7, #12]
 8006f82:	4b0c      	ldr	r3, [pc, #48]	; (8006fb4 <HAL_PCD_MspInit+0xbc>)
 8006f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f86:	4a0b      	ldr	r2, [pc, #44]	; (8006fb4 <HAL_PCD_MspInit+0xbc>)
 8006f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8006f8e:	4b09      	ldr	r3, [pc, #36]	; (8006fb4 <HAL_PCD_MspInit+0xbc>)
 8006f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	2043      	movs	r0, #67	; 0x43
 8006fa0:	f7fa fce5 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006fa4:	2043      	movs	r0, #67	; 0x43
 8006fa6:	f7fa fcfe 	bl	80019a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006faa:	bf00      	nop
 8006fac:	3728      	adds	r7, #40	; 0x28
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	40023800 	.word	0x40023800
 8006fb8:	40020000 	.word	0x40020000

08006fbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4610      	mov	r0, r2
 8006fd4:	f7fe fe16 	bl	8005c04 <USBD_LL_SetupStage>
}
 8006fd8:	bf00      	nop
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006ff2:	78fa      	ldrb	r2, [r7, #3]
 8006ff4:	6879      	ldr	r1, [r7, #4]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	00db      	lsls	r3, r3, #3
 8006ffa:	1a9b      	subs	r3, r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	440b      	add	r3, r1
 8007000:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	78fb      	ldrb	r3, [r7, #3]
 8007008:	4619      	mov	r1, r3
 800700a:	f7fe fe4e 	bl	8005caa <USBD_LL_DataOutStage>
}
 800700e:	bf00      	nop
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b082      	sub	sp, #8
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	460b      	mov	r3, r1
 8007020:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007028:	78fa      	ldrb	r2, [r7, #3]
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	4613      	mov	r3, r2
 800702e:	00db      	lsls	r3, r3, #3
 8007030:	1a9b      	subs	r3, r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	440b      	add	r3, r1
 8007036:	3348      	adds	r3, #72	; 0x48
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	78fb      	ldrb	r3, [r7, #3]
 800703c:	4619      	mov	r1, r3
 800703e:	f7fe fe97 	bl	8005d70 <USBD_LL_DataInStage>
}
 8007042:	bf00      	nop
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b082      	sub	sp, #8
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007058:	4618      	mov	r0, r3
 800705a:	f7fe ff9b 	bl	8005f94 <USBD_LL_SOF>
}
 800705e:	bf00      	nop
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b084      	sub	sp, #16
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800706e:	2301      	movs	r3, #1
 8007070:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d102      	bne.n	8007080 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800707a:	2300      	movs	r3, #0
 800707c:	73fb      	strb	r3, [r7, #15]
 800707e:	e008      	b.n	8007092 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	2b02      	cmp	r3, #2
 8007086:	d102      	bne.n	800708e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007088:	2301      	movs	r3, #1
 800708a:	73fb      	strb	r3, [r7, #15]
 800708c:	e001      	b.n	8007092 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800708e:	f7fa f9d9 	bl	8001444 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007098:	7bfa      	ldrb	r2, [r7, #15]
 800709a:	4611      	mov	r1, r2
 800709c:	4618      	mov	r0, r3
 800709e:	f7fe ff3e 	bl	8005f1e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7fe fef7 	bl	8005e9c <USBD_LL_Reset>
}
 80070ae:	bf00      	nop
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
	...

080070b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fe ff39 	bl	8005f3e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	6812      	ldr	r2, [r2, #0]
 80070da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070de:	f043 0301 	orr.w	r3, r3, #1
 80070e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a1b      	ldr	r3, [r3, #32]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d005      	beq.n	80070f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80070ec:	4b04      	ldr	r3, [pc, #16]	; (8007100 <HAL_PCD_SuspendCallback+0x48>)
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	4a03      	ldr	r2, [pc, #12]	; (8007100 <HAL_PCD_SuspendCallback+0x48>)
 80070f2:	f043 0306 	orr.w	r3, r3, #6
 80070f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80070f8:	bf00      	nop
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	e000ed00 	.word	0xe000ed00

08007104 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007112:	4618      	mov	r0, r3
 8007114:	f7fe ff28 	bl	8005f68 <USBD_LL_Resume>
}
 8007118:	bf00      	nop
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	460b      	mov	r3, r1
 800712a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007132:	78fa      	ldrb	r2, [r7, #3]
 8007134:	4611      	mov	r1, r2
 8007136:	4618      	mov	r0, r3
 8007138:	f7fe ff53 	bl	8005fe2 <USBD_LL_IsoOUTIncomplete>
}
 800713c:	bf00      	nop
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	460b      	mov	r3, r1
 800714e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007156:	78fa      	ldrb	r2, [r7, #3]
 8007158:	4611      	mov	r1, r2
 800715a:	4618      	mov	r0, r3
 800715c:	f7fe ff34 	bl	8005fc8 <USBD_LL_IsoINIncomplete>
}
 8007160:	bf00      	nop
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe ff40 	bl	8005ffc <USBD_LL_DevConnected>
}
 800717c:	bf00      	nop
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007192:	4618      	mov	r0, r3
 8007194:	f7fe ff3d 	bl	8006012 <USBD_LL_DevDisconnected>
}
 8007198:	bf00      	nop
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d13c      	bne.n	800722a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80071b0:	4a20      	ldr	r2, [pc, #128]	; (8007234 <USBD_LL_Init+0x94>)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a1e      	ldr	r2, [pc, #120]	; (8007234 <USBD_LL_Init+0x94>)
 80071bc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80071c0:	4b1c      	ldr	r3, [pc, #112]	; (8007234 <USBD_LL_Init+0x94>)
 80071c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80071c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80071c8:	4b1a      	ldr	r3, [pc, #104]	; (8007234 <USBD_LL_Init+0x94>)
 80071ca:	2204      	movs	r2, #4
 80071cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80071ce:	4b19      	ldr	r3, [pc, #100]	; (8007234 <USBD_LL_Init+0x94>)
 80071d0:	2202      	movs	r2, #2
 80071d2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80071d4:	4b17      	ldr	r3, [pc, #92]	; (8007234 <USBD_LL_Init+0x94>)
 80071d6:	2200      	movs	r2, #0
 80071d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80071da:	4b16      	ldr	r3, [pc, #88]	; (8007234 <USBD_LL_Init+0x94>)
 80071dc:	2202      	movs	r2, #2
 80071de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80071e0:	4b14      	ldr	r3, [pc, #80]	; (8007234 <USBD_LL_Init+0x94>)
 80071e2:	2201      	movs	r2, #1
 80071e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80071e6:	4b13      	ldr	r3, [pc, #76]	; (8007234 <USBD_LL_Init+0x94>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80071ec:	4b11      	ldr	r3, [pc, #68]	; (8007234 <USBD_LL_Init+0x94>)
 80071ee:	2200      	movs	r2, #0
 80071f0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80071f2:	4b10      	ldr	r3, [pc, #64]	; (8007234 <USBD_LL_Init+0x94>)
 80071f4:	2201      	movs	r2, #1
 80071f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80071f8:	4b0e      	ldr	r3, [pc, #56]	; (8007234 <USBD_LL_Init+0x94>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80071fe:	480d      	ldr	r0, [pc, #52]	; (8007234 <USBD_LL_Init+0x94>)
 8007200:	f7fa fdc7 	bl	8001d92 <HAL_PCD_Init>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800720a:	f7fa f91b 	bl	8001444 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800720e:	2180      	movs	r1, #128	; 0x80
 8007210:	4808      	ldr	r0, [pc, #32]	; (8007234 <USBD_LL_Init+0x94>)
 8007212:	f7fb ff0c 	bl	800302e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007216:	2240      	movs	r2, #64	; 0x40
 8007218:	2100      	movs	r1, #0
 800721a:	4806      	ldr	r0, [pc, #24]	; (8007234 <USBD_LL_Init+0x94>)
 800721c:	f7fb fec0 	bl	8002fa0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007220:	2280      	movs	r2, #128	; 0x80
 8007222:	2101      	movs	r1, #1
 8007224:	4803      	ldr	r0, [pc, #12]	; (8007234 <USBD_LL_Init+0x94>)
 8007226:	f7fb febb 	bl	8002fa0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	20000708 	.word	0x20000708

08007238 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007240:	2300      	movs	r3, #0
 8007242:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007244:	2300      	movs	r3, #0
 8007246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800724e:	4618      	mov	r0, r3
 8007250:	f7fa febc 	bl	8001fcc <HAL_PCD_Start>
 8007254:	4603      	mov	r3, r0
 8007256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007258:	7bfb      	ldrb	r3, [r7, #15]
 800725a:	4618      	mov	r0, r3
 800725c:	f000 f918 	bl	8007490 <USBD_Get_USB_Status>
 8007260:	4603      	mov	r3, r0
 8007262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007264:	7bbb      	ldrb	r3, [r7, #14]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	4608      	mov	r0, r1
 8007278:	4611      	mov	r1, r2
 800727a:	461a      	mov	r2, r3
 800727c:	4603      	mov	r3, r0
 800727e:	70fb      	strb	r3, [r7, #3]
 8007280:	460b      	mov	r3, r1
 8007282:	70bb      	strb	r3, [r7, #2]
 8007284:	4613      	mov	r3, r2
 8007286:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007288:	2300      	movs	r3, #0
 800728a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007296:	78bb      	ldrb	r3, [r7, #2]
 8007298:	883a      	ldrh	r2, [r7, #0]
 800729a:	78f9      	ldrb	r1, [r7, #3]
 800729c:	f7fb faa0 	bl	80027e0 <HAL_PCD_EP_Open>
 80072a0:	4603      	mov	r3, r0
 80072a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 f8f2 	bl	8007490 <USBD_Get_USB_Status>
 80072ac:	4603      	mov	r3, r0
 80072ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b084      	sub	sp, #16
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
 80072c2:	460b      	mov	r3, r1
 80072c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072d4:	78fa      	ldrb	r2, [r7, #3]
 80072d6:	4611      	mov	r1, r2
 80072d8:	4618      	mov	r0, r3
 80072da:	f7fb fae9 	bl	80028b0 <HAL_PCD_EP_Close>
 80072de:	4603      	mov	r3, r0
 80072e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 f8d3 	bl	8007490 <USBD_Get_USB_Status>
 80072ea:	4603      	mov	r3, r0
 80072ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	460b      	mov	r3, r1
 8007302:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007304:	2300      	movs	r3, #0
 8007306:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007312:	78fa      	ldrb	r2, [r7, #3]
 8007314:	4611      	mov	r1, r2
 8007316:	4618      	mov	r0, r3
 8007318:	f7fb fba9 	bl	8002a6e <HAL_PCD_EP_SetStall>
 800731c:	4603      	mov	r3, r0
 800731e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007320:	7bfb      	ldrb	r3, [r7, #15]
 8007322:	4618      	mov	r0, r3
 8007324:	f000 f8b4 	bl	8007490 <USBD_Get_USB_Status>
 8007328:	4603      	mov	r3, r0
 800732a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800732c:	7bbb      	ldrb	r3, [r7, #14]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b084      	sub	sp, #16
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	460b      	mov	r3, r1
 8007340:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007350:	78fa      	ldrb	r2, [r7, #3]
 8007352:	4611      	mov	r1, r2
 8007354:	4618      	mov	r0, r3
 8007356:	f7fb fbee 	bl	8002b36 <HAL_PCD_EP_ClrStall>
 800735a:	4603      	mov	r3, r0
 800735c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800735e:	7bfb      	ldrb	r3, [r7, #15]
 8007360:	4618      	mov	r0, r3
 8007362:	f000 f895 	bl	8007490 <USBD_Get_USB_Status>
 8007366:	4603      	mov	r3, r0
 8007368:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800736a:	7bbb      	ldrb	r3, [r7, #14]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	460b      	mov	r3, r1
 800737e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007386:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007388:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800738c:	2b00      	cmp	r3, #0
 800738e:	da0b      	bge.n	80073a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007390:	78fb      	ldrb	r3, [r7, #3]
 8007392:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007396:	68f9      	ldr	r1, [r7, #12]
 8007398:	4613      	mov	r3, r2
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	1a9b      	subs	r3, r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	440b      	add	r3, r1
 80073a2:	333e      	adds	r3, #62	; 0x3e
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	e00b      	b.n	80073c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80073a8:	78fb      	ldrb	r3, [r7, #3]
 80073aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073ae:	68f9      	ldr	r1, [r7, #12]
 80073b0:	4613      	mov	r3, r2
 80073b2:	00db      	lsls	r3, r3, #3
 80073b4:	1a9b      	subs	r3, r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	440b      	add	r3, r1
 80073ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80073be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073dc:	2300      	movs	r3, #0
 80073de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073e6:	78fa      	ldrb	r2, [r7, #3]
 80073e8:	4611      	mov	r1, r2
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fb f9d3 	bl	8002796 <HAL_PCD_SetAddress>
 80073f0:	4603      	mov	r3, r0
 80073f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 f84a 	bl	8007490 <USBD_Get_USB_Status>
 80073fc:	4603      	mov	r3, r0
 80073fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007400:	7bbb      	ldrb	r3, [r7, #14]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b086      	sub	sp, #24
 800740e:	af00      	add	r7, sp, #0
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	607a      	str	r2, [r7, #4]
 8007414:	603b      	str	r3, [r7, #0]
 8007416:	460b      	mov	r3, r1
 8007418:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800741a:	2300      	movs	r3, #0
 800741c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007428:	7af9      	ldrb	r1, [r7, #11]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	f7fb fad4 	bl	80029da <HAL_PCD_EP_Transmit>
 8007432:	4603      	mov	r3, r0
 8007434:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007436:	7dfb      	ldrb	r3, [r7, #23]
 8007438:	4618      	mov	r0, r3
 800743a:	f000 f829 	bl	8007490 <USBD_Get_USB_Status>
 800743e:	4603      	mov	r3, r0
 8007440:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007442:	7dbb      	ldrb	r3, [r7, #22]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3718      	adds	r7, #24
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	607a      	str	r2, [r7, #4]
 8007456:	603b      	str	r3, [r7, #0]
 8007458:	460b      	mov	r3, r1
 800745a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007460:	2300      	movs	r3, #0
 8007462:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800746a:	7af9      	ldrb	r1, [r7, #11]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	f7fb fa68 	bl	8002944 <HAL_PCD_EP_Receive>
 8007474:	4603      	mov	r3, r0
 8007476:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007478:	7dfb      	ldrb	r3, [r7, #23]
 800747a:	4618      	mov	r0, r3
 800747c:	f000 f808 	bl	8007490 <USBD_Get_USB_Status>
 8007480:	4603      	mov	r3, r0
 8007482:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007484:	7dbb      	ldrb	r3, [r7, #22]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3718      	adds	r7, #24
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
	...

08007490 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	4603      	mov	r3, r0
 8007498:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800749a:	2300      	movs	r3, #0
 800749c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800749e:	79fb      	ldrb	r3, [r7, #7]
 80074a0:	2b03      	cmp	r3, #3
 80074a2:	d817      	bhi.n	80074d4 <USBD_Get_USB_Status+0x44>
 80074a4:	a201      	add	r2, pc, #4	; (adr r2, 80074ac <USBD_Get_USB_Status+0x1c>)
 80074a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074aa:	bf00      	nop
 80074ac:	080074bd 	.word	0x080074bd
 80074b0:	080074c3 	.word	0x080074c3
 80074b4:	080074c9 	.word	0x080074c9
 80074b8:	080074cf 	.word	0x080074cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80074bc:	2300      	movs	r3, #0
 80074be:	73fb      	strb	r3, [r7, #15]
    break;
 80074c0:	e00b      	b.n	80074da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80074c2:	2303      	movs	r3, #3
 80074c4:	73fb      	strb	r3, [r7, #15]
    break;
 80074c6:	e008      	b.n	80074da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80074c8:	2301      	movs	r3, #1
 80074ca:	73fb      	strb	r3, [r7, #15]
    break;
 80074cc:	e005      	b.n	80074da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80074ce:	2303      	movs	r3, #3
 80074d0:	73fb      	strb	r3, [r7, #15]
    break;
 80074d2:	e002      	b.n	80074da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80074d4:	2303      	movs	r3, #3
 80074d6:	73fb      	strb	r3, [r7, #15]
    break;
 80074d8:	bf00      	nop
  }
  return usb_status;
 80074da:	7bfb      	ldrb	r3, [r7, #15]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <__errno>:
 80074e8:	4b01      	ldr	r3, [pc, #4]	; (80074f0 <__errno+0x8>)
 80074ea:	6818      	ldr	r0, [r3, #0]
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	20000164 	.word	0x20000164

080074f4 <__libc_init_array>:
 80074f4:	b570      	push	{r4, r5, r6, lr}
 80074f6:	4e0d      	ldr	r6, [pc, #52]	; (800752c <__libc_init_array+0x38>)
 80074f8:	4c0d      	ldr	r4, [pc, #52]	; (8007530 <__libc_init_array+0x3c>)
 80074fa:	1ba4      	subs	r4, r4, r6
 80074fc:	10a4      	asrs	r4, r4, #2
 80074fe:	2500      	movs	r5, #0
 8007500:	42a5      	cmp	r5, r4
 8007502:	d109      	bne.n	8007518 <__libc_init_array+0x24>
 8007504:	4e0b      	ldr	r6, [pc, #44]	; (8007534 <__libc_init_array+0x40>)
 8007506:	4c0c      	ldr	r4, [pc, #48]	; (8007538 <__libc_init_array+0x44>)
 8007508:	f001 f940 	bl	800878c <_init>
 800750c:	1ba4      	subs	r4, r4, r6
 800750e:	10a4      	asrs	r4, r4, #2
 8007510:	2500      	movs	r5, #0
 8007512:	42a5      	cmp	r5, r4
 8007514:	d105      	bne.n	8007522 <__libc_init_array+0x2e>
 8007516:	bd70      	pop	{r4, r5, r6, pc}
 8007518:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800751c:	4798      	blx	r3
 800751e:	3501      	adds	r5, #1
 8007520:	e7ee      	b.n	8007500 <__libc_init_array+0xc>
 8007522:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007526:	4798      	blx	r3
 8007528:	3501      	adds	r5, #1
 800752a:	e7f2      	b.n	8007512 <__libc_init_array+0x1e>
 800752c:	080089e8 	.word	0x080089e8
 8007530:	080089e8 	.word	0x080089e8
 8007534:	080089e8 	.word	0x080089e8
 8007538:	080089ec 	.word	0x080089ec

0800753c <malloc>:
 800753c:	4b02      	ldr	r3, [pc, #8]	; (8007548 <malloc+0xc>)
 800753e:	4601      	mov	r1, r0
 8007540:	6818      	ldr	r0, [r3, #0]
 8007542:	f000 b861 	b.w	8007608 <_malloc_r>
 8007546:	bf00      	nop
 8007548:	20000164 	.word	0x20000164

0800754c <free>:
 800754c:	4b02      	ldr	r3, [pc, #8]	; (8007558 <free+0xc>)
 800754e:	4601      	mov	r1, r0
 8007550:	6818      	ldr	r0, [r3, #0]
 8007552:	f000 b80b 	b.w	800756c <_free_r>
 8007556:	bf00      	nop
 8007558:	20000164 	.word	0x20000164

0800755c <memset>:
 800755c:	4402      	add	r2, r0
 800755e:	4603      	mov	r3, r0
 8007560:	4293      	cmp	r3, r2
 8007562:	d100      	bne.n	8007566 <memset+0xa>
 8007564:	4770      	bx	lr
 8007566:	f803 1b01 	strb.w	r1, [r3], #1
 800756a:	e7f9      	b.n	8007560 <memset+0x4>

0800756c <_free_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	4605      	mov	r5, r0
 8007570:	2900      	cmp	r1, #0
 8007572:	d045      	beq.n	8007600 <_free_r+0x94>
 8007574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007578:	1f0c      	subs	r4, r1, #4
 800757a:	2b00      	cmp	r3, #0
 800757c:	bfb8      	it	lt
 800757e:	18e4      	addlt	r4, r4, r3
 8007580:	f000 f8ac 	bl	80076dc <__malloc_lock>
 8007584:	4a1f      	ldr	r2, [pc, #124]	; (8007604 <_free_r+0x98>)
 8007586:	6813      	ldr	r3, [r2, #0]
 8007588:	4610      	mov	r0, r2
 800758a:	b933      	cbnz	r3, 800759a <_free_r+0x2e>
 800758c:	6063      	str	r3, [r4, #4]
 800758e:	6014      	str	r4, [r2, #0]
 8007590:	4628      	mov	r0, r5
 8007592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007596:	f000 b8a2 	b.w	80076de <__malloc_unlock>
 800759a:	42a3      	cmp	r3, r4
 800759c:	d90c      	bls.n	80075b8 <_free_r+0x4c>
 800759e:	6821      	ldr	r1, [r4, #0]
 80075a0:	1862      	adds	r2, r4, r1
 80075a2:	4293      	cmp	r3, r2
 80075a4:	bf04      	itt	eq
 80075a6:	681a      	ldreq	r2, [r3, #0]
 80075a8:	685b      	ldreq	r3, [r3, #4]
 80075aa:	6063      	str	r3, [r4, #4]
 80075ac:	bf04      	itt	eq
 80075ae:	1852      	addeq	r2, r2, r1
 80075b0:	6022      	streq	r2, [r4, #0]
 80075b2:	6004      	str	r4, [r0, #0]
 80075b4:	e7ec      	b.n	8007590 <_free_r+0x24>
 80075b6:	4613      	mov	r3, r2
 80075b8:	685a      	ldr	r2, [r3, #4]
 80075ba:	b10a      	cbz	r2, 80075c0 <_free_r+0x54>
 80075bc:	42a2      	cmp	r2, r4
 80075be:	d9fa      	bls.n	80075b6 <_free_r+0x4a>
 80075c0:	6819      	ldr	r1, [r3, #0]
 80075c2:	1858      	adds	r0, r3, r1
 80075c4:	42a0      	cmp	r0, r4
 80075c6:	d10b      	bne.n	80075e0 <_free_r+0x74>
 80075c8:	6820      	ldr	r0, [r4, #0]
 80075ca:	4401      	add	r1, r0
 80075cc:	1858      	adds	r0, r3, r1
 80075ce:	4282      	cmp	r2, r0
 80075d0:	6019      	str	r1, [r3, #0]
 80075d2:	d1dd      	bne.n	8007590 <_free_r+0x24>
 80075d4:	6810      	ldr	r0, [r2, #0]
 80075d6:	6852      	ldr	r2, [r2, #4]
 80075d8:	605a      	str	r2, [r3, #4]
 80075da:	4401      	add	r1, r0
 80075dc:	6019      	str	r1, [r3, #0]
 80075de:	e7d7      	b.n	8007590 <_free_r+0x24>
 80075e0:	d902      	bls.n	80075e8 <_free_r+0x7c>
 80075e2:	230c      	movs	r3, #12
 80075e4:	602b      	str	r3, [r5, #0]
 80075e6:	e7d3      	b.n	8007590 <_free_r+0x24>
 80075e8:	6820      	ldr	r0, [r4, #0]
 80075ea:	1821      	adds	r1, r4, r0
 80075ec:	428a      	cmp	r2, r1
 80075ee:	bf04      	itt	eq
 80075f0:	6811      	ldreq	r1, [r2, #0]
 80075f2:	6852      	ldreq	r2, [r2, #4]
 80075f4:	6062      	str	r2, [r4, #4]
 80075f6:	bf04      	itt	eq
 80075f8:	1809      	addeq	r1, r1, r0
 80075fa:	6021      	streq	r1, [r4, #0]
 80075fc:	605c      	str	r4, [r3, #4]
 80075fe:	e7c7      	b.n	8007590 <_free_r+0x24>
 8007600:	bd38      	pop	{r3, r4, r5, pc}
 8007602:	bf00      	nop
 8007604:	200001ec 	.word	0x200001ec

08007608 <_malloc_r>:
 8007608:	b570      	push	{r4, r5, r6, lr}
 800760a:	1ccd      	adds	r5, r1, #3
 800760c:	f025 0503 	bic.w	r5, r5, #3
 8007610:	3508      	adds	r5, #8
 8007612:	2d0c      	cmp	r5, #12
 8007614:	bf38      	it	cc
 8007616:	250c      	movcc	r5, #12
 8007618:	2d00      	cmp	r5, #0
 800761a:	4606      	mov	r6, r0
 800761c:	db01      	blt.n	8007622 <_malloc_r+0x1a>
 800761e:	42a9      	cmp	r1, r5
 8007620:	d903      	bls.n	800762a <_malloc_r+0x22>
 8007622:	230c      	movs	r3, #12
 8007624:	6033      	str	r3, [r6, #0]
 8007626:	2000      	movs	r0, #0
 8007628:	bd70      	pop	{r4, r5, r6, pc}
 800762a:	f000 f857 	bl	80076dc <__malloc_lock>
 800762e:	4a21      	ldr	r2, [pc, #132]	; (80076b4 <_malloc_r+0xac>)
 8007630:	6814      	ldr	r4, [r2, #0]
 8007632:	4621      	mov	r1, r4
 8007634:	b991      	cbnz	r1, 800765c <_malloc_r+0x54>
 8007636:	4c20      	ldr	r4, [pc, #128]	; (80076b8 <_malloc_r+0xb0>)
 8007638:	6823      	ldr	r3, [r4, #0]
 800763a:	b91b      	cbnz	r3, 8007644 <_malloc_r+0x3c>
 800763c:	4630      	mov	r0, r6
 800763e:	f000 f83d 	bl	80076bc <_sbrk_r>
 8007642:	6020      	str	r0, [r4, #0]
 8007644:	4629      	mov	r1, r5
 8007646:	4630      	mov	r0, r6
 8007648:	f000 f838 	bl	80076bc <_sbrk_r>
 800764c:	1c43      	adds	r3, r0, #1
 800764e:	d124      	bne.n	800769a <_malloc_r+0x92>
 8007650:	230c      	movs	r3, #12
 8007652:	6033      	str	r3, [r6, #0]
 8007654:	4630      	mov	r0, r6
 8007656:	f000 f842 	bl	80076de <__malloc_unlock>
 800765a:	e7e4      	b.n	8007626 <_malloc_r+0x1e>
 800765c:	680b      	ldr	r3, [r1, #0]
 800765e:	1b5b      	subs	r3, r3, r5
 8007660:	d418      	bmi.n	8007694 <_malloc_r+0x8c>
 8007662:	2b0b      	cmp	r3, #11
 8007664:	d90f      	bls.n	8007686 <_malloc_r+0x7e>
 8007666:	600b      	str	r3, [r1, #0]
 8007668:	50cd      	str	r5, [r1, r3]
 800766a:	18cc      	adds	r4, r1, r3
 800766c:	4630      	mov	r0, r6
 800766e:	f000 f836 	bl	80076de <__malloc_unlock>
 8007672:	f104 000b 	add.w	r0, r4, #11
 8007676:	1d23      	adds	r3, r4, #4
 8007678:	f020 0007 	bic.w	r0, r0, #7
 800767c:	1ac3      	subs	r3, r0, r3
 800767e:	d0d3      	beq.n	8007628 <_malloc_r+0x20>
 8007680:	425a      	negs	r2, r3
 8007682:	50e2      	str	r2, [r4, r3]
 8007684:	e7d0      	b.n	8007628 <_malloc_r+0x20>
 8007686:	428c      	cmp	r4, r1
 8007688:	684b      	ldr	r3, [r1, #4]
 800768a:	bf16      	itet	ne
 800768c:	6063      	strne	r3, [r4, #4]
 800768e:	6013      	streq	r3, [r2, #0]
 8007690:	460c      	movne	r4, r1
 8007692:	e7eb      	b.n	800766c <_malloc_r+0x64>
 8007694:	460c      	mov	r4, r1
 8007696:	6849      	ldr	r1, [r1, #4]
 8007698:	e7cc      	b.n	8007634 <_malloc_r+0x2c>
 800769a:	1cc4      	adds	r4, r0, #3
 800769c:	f024 0403 	bic.w	r4, r4, #3
 80076a0:	42a0      	cmp	r0, r4
 80076a2:	d005      	beq.n	80076b0 <_malloc_r+0xa8>
 80076a4:	1a21      	subs	r1, r4, r0
 80076a6:	4630      	mov	r0, r6
 80076a8:	f000 f808 	bl	80076bc <_sbrk_r>
 80076ac:	3001      	adds	r0, #1
 80076ae:	d0cf      	beq.n	8007650 <_malloc_r+0x48>
 80076b0:	6025      	str	r5, [r4, #0]
 80076b2:	e7db      	b.n	800766c <_malloc_r+0x64>
 80076b4:	200001ec 	.word	0x200001ec
 80076b8:	200001f0 	.word	0x200001f0

080076bc <_sbrk_r>:
 80076bc:	b538      	push	{r3, r4, r5, lr}
 80076be:	4c06      	ldr	r4, [pc, #24]	; (80076d8 <_sbrk_r+0x1c>)
 80076c0:	2300      	movs	r3, #0
 80076c2:	4605      	mov	r5, r0
 80076c4:	4608      	mov	r0, r1
 80076c6:	6023      	str	r3, [r4, #0]
 80076c8:	f7f9 ff6c 	bl	80015a4 <_sbrk>
 80076cc:	1c43      	adds	r3, r0, #1
 80076ce:	d102      	bne.n	80076d6 <_sbrk_r+0x1a>
 80076d0:	6823      	ldr	r3, [r4, #0]
 80076d2:	b103      	cbz	r3, 80076d6 <_sbrk_r+0x1a>
 80076d4:	602b      	str	r3, [r5, #0]
 80076d6:	bd38      	pop	{r3, r4, r5, pc}
 80076d8:	20000b10 	.word	0x20000b10

080076dc <__malloc_lock>:
 80076dc:	4770      	bx	lr

080076de <__malloc_unlock>:
 80076de:	4770      	bx	lr

080076e0 <cos>:
 80076e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076e2:	ec51 0b10 	vmov	r0, r1, d0
 80076e6:	4a1e      	ldr	r2, [pc, #120]	; (8007760 <cos+0x80>)
 80076e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80076ec:	4293      	cmp	r3, r2
 80076ee:	dc06      	bgt.n	80076fe <cos+0x1e>
 80076f0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8007758 <cos+0x78>
 80076f4:	f000 fa74 	bl	8007be0 <__kernel_cos>
 80076f8:	ec51 0b10 	vmov	r0, r1, d0
 80076fc:	e007      	b.n	800770e <cos+0x2e>
 80076fe:	4a19      	ldr	r2, [pc, #100]	; (8007764 <cos+0x84>)
 8007700:	4293      	cmp	r3, r2
 8007702:	dd09      	ble.n	8007718 <cos+0x38>
 8007704:	ee10 2a10 	vmov	r2, s0
 8007708:	460b      	mov	r3, r1
 800770a:	f7f8 fd75 	bl	80001f8 <__aeabi_dsub>
 800770e:	ec41 0b10 	vmov	d0, r0, r1
 8007712:	b005      	add	sp, #20
 8007714:	f85d fb04 	ldr.w	pc, [sp], #4
 8007718:	4668      	mov	r0, sp
 800771a:	f000 f86d 	bl	80077f8 <__ieee754_rem_pio2>
 800771e:	f000 0003 	and.w	r0, r0, #3
 8007722:	2801      	cmp	r0, #1
 8007724:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007728:	ed9d 0b00 	vldr	d0, [sp]
 800772c:	d007      	beq.n	800773e <cos+0x5e>
 800772e:	2802      	cmp	r0, #2
 8007730:	d00e      	beq.n	8007750 <cos+0x70>
 8007732:	2800      	cmp	r0, #0
 8007734:	d0de      	beq.n	80076f4 <cos+0x14>
 8007736:	2001      	movs	r0, #1
 8007738:	f000 fe5a 	bl	80083f0 <__kernel_sin>
 800773c:	e7dc      	b.n	80076f8 <cos+0x18>
 800773e:	f000 fe57 	bl	80083f0 <__kernel_sin>
 8007742:	ec53 2b10 	vmov	r2, r3, d0
 8007746:	ee10 0a10 	vmov	r0, s0
 800774a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800774e:	e7de      	b.n	800770e <cos+0x2e>
 8007750:	f000 fa46 	bl	8007be0 <__kernel_cos>
 8007754:	e7f5      	b.n	8007742 <cos+0x62>
 8007756:	bf00      	nop
	...
 8007760:	3fe921fb 	.word	0x3fe921fb
 8007764:	7fefffff 	.word	0x7fefffff

08007768 <sin>:
 8007768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800776a:	ec51 0b10 	vmov	r0, r1, d0
 800776e:	4a20      	ldr	r2, [pc, #128]	; (80077f0 <sin+0x88>)
 8007770:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007774:	4293      	cmp	r3, r2
 8007776:	dc07      	bgt.n	8007788 <sin+0x20>
 8007778:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80077e8 <sin+0x80>
 800777c:	2000      	movs	r0, #0
 800777e:	f000 fe37 	bl	80083f0 <__kernel_sin>
 8007782:	ec51 0b10 	vmov	r0, r1, d0
 8007786:	e007      	b.n	8007798 <sin+0x30>
 8007788:	4a1a      	ldr	r2, [pc, #104]	; (80077f4 <sin+0x8c>)
 800778a:	4293      	cmp	r3, r2
 800778c:	dd09      	ble.n	80077a2 <sin+0x3a>
 800778e:	ee10 2a10 	vmov	r2, s0
 8007792:	460b      	mov	r3, r1
 8007794:	f7f8 fd30 	bl	80001f8 <__aeabi_dsub>
 8007798:	ec41 0b10 	vmov	d0, r0, r1
 800779c:	b005      	add	sp, #20
 800779e:	f85d fb04 	ldr.w	pc, [sp], #4
 80077a2:	4668      	mov	r0, sp
 80077a4:	f000 f828 	bl	80077f8 <__ieee754_rem_pio2>
 80077a8:	f000 0003 	and.w	r0, r0, #3
 80077ac:	2801      	cmp	r0, #1
 80077ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80077b2:	ed9d 0b00 	vldr	d0, [sp]
 80077b6:	d004      	beq.n	80077c2 <sin+0x5a>
 80077b8:	2802      	cmp	r0, #2
 80077ba:	d005      	beq.n	80077c8 <sin+0x60>
 80077bc:	b970      	cbnz	r0, 80077dc <sin+0x74>
 80077be:	2001      	movs	r0, #1
 80077c0:	e7dd      	b.n	800777e <sin+0x16>
 80077c2:	f000 fa0d 	bl	8007be0 <__kernel_cos>
 80077c6:	e7dc      	b.n	8007782 <sin+0x1a>
 80077c8:	2001      	movs	r0, #1
 80077ca:	f000 fe11 	bl	80083f0 <__kernel_sin>
 80077ce:	ec53 2b10 	vmov	r2, r3, d0
 80077d2:	ee10 0a10 	vmov	r0, s0
 80077d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80077da:	e7dd      	b.n	8007798 <sin+0x30>
 80077dc:	f000 fa00 	bl	8007be0 <__kernel_cos>
 80077e0:	e7f5      	b.n	80077ce <sin+0x66>
 80077e2:	bf00      	nop
 80077e4:	f3af 8000 	nop.w
	...
 80077f0:	3fe921fb 	.word	0x3fe921fb
 80077f4:	7fefffff 	.word	0x7fefffff

080077f8 <__ieee754_rem_pio2>:
 80077f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fc:	ec57 6b10 	vmov	r6, r7, d0
 8007800:	4bc3      	ldr	r3, [pc, #780]	; (8007b10 <__ieee754_rem_pio2+0x318>)
 8007802:	b08d      	sub	sp, #52	; 0x34
 8007804:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007808:	4598      	cmp	r8, r3
 800780a:	4604      	mov	r4, r0
 800780c:	9704      	str	r7, [sp, #16]
 800780e:	dc07      	bgt.n	8007820 <__ieee754_rem_pio2+0x28>
 8007810:	2200      	movs	r2, #0
 8007812:	2300      	movs	r3, #0
 8007814:	ed84 0b00 	vstr	d0, [r4]
 8007818:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800781c:	2500      	movs	r5, #0
 800781e:	e027      	b.n	8007870 <__ieee754_rem_pio2+0x78>
 8007820:	4bbc      	ldr	r3, [pc, #752]	; (8007b14 <__ieee754_rem_pio2+0x31c>)
 8007822:	4598      	cmp	r8, r3
 8007824:	dc75      	bgt.n	8007912 <__ieee754_rem_pio2+0x11a>
 8007826:	9b04      	ldr	r3, [sp, #16]
 8007828:	4dbb      	ldr	r5, [pc, #748]	; (8007b18 <__ieee754_rem_pio2+0x320>)
 800782a:	2b00      	cmp	r3, #0
 800782c:	ee10 0a10 	vmov	r0, s0
 8007830:	a3a9      	add	r3, pc, #676	; (adr r3, 8007ad8 <__ieee754_rem_pio2+0x2e0>)
 8007832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007836:	4639      	mov	r1, r7
 8007838:	dd36      	ble.n	80078a8 <__ieee754_rem_pio2+0xb0>
 800783a:	f7f8 fcdd 	bl	80001f8 <__aeabi_dsub>
 800783e:	45a8      	cmp	r8, r5
 8007840:	4606      	mov	r6, r0
 8007842:	460f      	mov	r7, r1
 8007844:	d018      	beq.n	8007878 <__ieee754_rem_pio2+0x80>
 8007846:	a3a6      	add	r3, pc, #664	; (adr r3, 8007ae0 <__ieee754_rem_pio2+0x2e8>)
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	f7f8 fcd4 	bl	80001f8 <__aeabi_dsub>
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	e9c4 2300 	strd	r2, r3, [r4]
 8007858:	4630      	mov	r0, r6
 800785a:	4639      	mov	r1, r7
 800785c:	f7f8 fccc 	bl	80001f8 <__aeabi_dsub>
 8007860:	a39f      	add	r3, pc, #636	; (adr r3, 8007ae0 <__ieee754_rem_pio2+0x2e8>)
 8007862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007866:	f7f8 fcc7 	bl	80001f8 <__aeabi_dsub>
 800786a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800786e:	2501      	movs	r5, #1
 8007870:	4628      	mov	r0, r5
 8007872:	b00d      	add	sp, #52	; 0x34
 8007874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007878:	a39b      	add	r3, pc, #620	; (adr r3, 8007ae8 <__ieee754_rem_pio2+0x2f0>)
 800787a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787e:	f7f8 fcbb 	bl	80001f8 <__aeabi_dsub>
 8007882:	a39b      	add	r3, pc, #620	; (adr r3, 8007af0 <__ieee754_rem_pio2+0x2f8>)
 8007884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007888:	4606      	mov	r6, r0
 800788a:	460f      	mov	r7, r1
 800788c:	f7f8 fcb4 	bl	80001f8 <__aeabi_dsub>
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	e9c4 2300 	strd	r2, r3, [r4]
 8007898:	4630      	mov	r0, r6
 800789a:	4639      	mov	r1, r7
 800789c:	f7f8 fcac 	bl	80001f8 <__aeabi_dsub>
 80078a0:	a393      	add	r3, pc, #588	; (adr r3, 8007af0 <__ieee754_rem_pio2+0x2f8>)
 80078a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a6:	e7de      	b.n	8007866 <__ieee754_rem_pio2+0x6e>
 80078a8:	f7f8 fca8 	bl	80001fc <__adddf3>
 80078ac:	45a8      	cmp	r8, r5
 80078ae:	4606      	mov	r6, r0
 80078b0:	460f      	mov	r7, r1
 80078b2:	d016      	beq.n	80078e2 <__ieee754_rem_pio2+0xea>
 80078b4:	a38a      	add	r3, pc, #552	; (adr r3, 8007ae0 <__ieee754_rem_pio2+0x2e8>)
 80078b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ba:	f7f8 fc9f 	bl	80001fc <__adddf3>
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	e9c4 2300 	strd	r2, r3, [r4]
 80078c6:	4630      	mov	r0, r6
 80078c8:	4639      	mov	r1, r7
 80078ca:	f7f8 fc95 	bl	80001f8 <__aeabi_dsub>
 80078ce:	a384      	add	r3, pc, #528	; (adr r3, 8007ae0 <__ieee754_rem_pio2+0x2e8>)
 80078d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d4:	f7f8 fc92 	bl	80001fc <__adddf3>
 80078d8:	f04f 35ff 	mov.w	r5, #4294967295
 80078dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80078e0:	e7c6      	b.n	8007870 <__ieee754_rem_pio2+0x78>
 80078e2:	a381      	add	r3, pc, #516	; (adr r3, 8007ae8 <__ieee754_rem_pio2+0x2f0>)
 80078e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e8:	f7f8 fc88 	bl	80001fc <__adddf3>
 80078ec:	a380      	add	r3, pc, #512	; (adr r3, 8007af0 <__ieee754_rem_pio2+0x2f8>)
 80078ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f2:	4606      	mov	r6, r0
 80078f4:	460f      	mov	r7, r1
 80078f6:	f7f8 fc81 	bl	80001fc <__adddf3>
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	e9c4 2300 	strd	r2, r3, [r4]
 8007902:	4630      	mov	r0, r6
 8007904:	4639      	mov	r1, r7
 8007906:	f7f8 fc77 	bl	80001f8 <__aeabi_dsub>
 800790a:	a379      	add	r3, pc, #484	; (adr r3, 8007af0 <__ieee754_rem_pio2+0x2f8>)
 800790c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007910:	e7e0      	b.n	80078d4 <__ieee754_rem_pio2+0xdc>
 8007912:	4b82      	ldr	r3, [pc, #520]	; (8007b1c <__ieee754_rem_pio2+0x324>)
 8007914:	4598      	cmp	r8, r3
 8007916:	f300 80d0 	bgt.w	8007aba <__ieee754_rem_pio2+0x2c2>
 800791a:	f000 fe23 	bl	8008564 <fabs>
 800791e:	ec57 6b10 	vmov	r6, r7, d0
 8007922:	ee10 0a10 	vmov	r0, s0
 8007926:	a374      	add	r3, pc, #464	; (adr r3, 8007af8 <__ieee754_rem_pio2+0x300>)
 8007928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792c:	4639      	mov	r1, r7
 800792e:	f7f8 fe1b 	bl	8000568 <__aeabi_dmul>
 8007932:	2200      	movs	r2, #0
 8007934:	4b7a      	ldr	r3, [pc, #488]	; (8007b20 <__ieee754_rem_pio2+0x328>)
 8007936:	f7f8 fc61 	bl	80001fc <__adddf3>
 800793a:	f7f9 f8af 	bl	8000a9c <__aeabi_d2iz>
 800793e:	4605      	mov	r5, r0
 8007940:	f7f8 fda8 	bl	8000494 <__aeabi_i2d>
 8007944:	a364      	add	r3, pc, #400	; (adr r3, 8007ad8 <__ieee754_rem_pio2+0x2e0>)
 8007946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800794e:	f7f8 fe0b 	bl	8000568 <__aeabi_dmul>
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	4630      	mov	r0, r6
 8007958:	4639      	mov	r1, r7
 800795a:	f7f8 fc4d 	bl	80001f8 <__aeabi_dsub>
 800795e:	a360      	add	r3, pc, #384	; (adr r3, 8007ae0 <__ieee754_rem_pio2+0x2e8>)
 8007960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007964:	4682      	mov	sl, r0
 8007966:	468b      	mov	fp, r1
 8007968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800796c:	f7f8 fdfc 	bl	8000568 <__aeabi_dmul>
 8007970:	2d1f      	cmp	r5, #31
 8007972:	4606      	mov	r6, r0
 8007974:	460f      	mov	r7, r1
 8007976:	dc0c      	bgt.n	8007992 <__ieee754_rem_pio2+0x19a>
 8007978:	1e6a      	subs	r2, r5, #1
 800797a:	4b6a      	ldr	r3, [pc, #424]	; (8007b24 <__ieee754_rem_pio2+0x32c>)
 800797c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007980:	4543      	cmp	r3, r8
 8007982:	d006      	beq.n	8007992 <__ieee754_rem_pio2+0x19a>
 8007984:	4632      	mov	r2, r6
 8007986:	463b      	mov	r3, r7
 8007988:	4650      	mov	r0, sl
 800798a:	4659      	mov	r1, fp
 800798c:	f7f8 fc34 	bl	80001f8 <__aeabi_dsub>
 8007990:	e00e      	b.n	80079b0 <__ieee754_rem_pio2+0x1b8>
 8007992:	4632      	mov	r2, r6
 8007994:	463b      	mov	r3, r7
 8007996:	4650      	mov	r0, sl
 8007998:	4659      	mov	r1, fp
 800799a:	f7f8 fc2d 	bl	80001f8 <__aeabi_dsub>
 800799e:	ea4f 5328 	mov.w	r3, r8, asr #20
 80079a2:	9305      	str	r3, [sp, #20]
 80079a4:	9a05      	ldr	r2, [sp, #20]
 80079a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	2b10      	cmp	r3, #16
 80079ae:	dc02      	bgt.n	80079b6 <__ieee754_rem_pio2+0x1be>
 80079b0:	e9c4 0100 	strd	r0, r1, [r4]
 80079b4:	e039      	b.n	8007a2a <__ieee754_rem_pio2+0x232>
 80079b6:	a34c      	add	r3, pc, #304	; (adr r3, 8007ae8 <__ieee754_rem_pio2+0x2f0>)
 80079b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079c0:	f7f8 fdd2 	bl	8000568 <__aeabi_dmul>
 80079c4:	4606      	mov	r6, r0
 80079c6:	460f      	mov	r7, r1
 80079c8:	4602      	mov	r2, r0
 80079ca:	460b      	mov	r3, r1
 80079cc:	4650      	mov	r0, sl
 80079ce:	4659      	mov	r1, fp
 80079d0:	f7f8 fc12 	bl	80001f8 <__aeabi_dsub>
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	4680      	mov	r8, r0
 80079da:	4689      	mov	r9, r1
 80079dc:	4650      	mov	r0, sl
 80079de:	4659      	mov	r1, fp
 80079e0:	f7f8 fc0a 	bl	80001f8 <__aeabi_dsub>
 80079e4:	4632      	mov	r2, r6
 80079e6:	463b      	mov	r3, r7
 80079e8:	f7f8 fc06 	bl	80001f8 <__aeabi_dsub>
 80079ec:	a340      	add	r3, pc, #256	; (adr r3, 8007af0 <__ieee754_rem_pio2+0x2f8>)
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	4606      	mov	r6, r0
 80079f4:	460f      	mov	r7, r1
 80079f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079fa:	f7f8 fdb5 	bl	8000568 <__aeabi_dmul>
 80079fe:	4632      	mov	r2, r6
 8007a00:	463b      	mov	r3, r7
 8007a02:	f7f8 fbf9 	bl	80001f8 <__aeabi_dsub>
 8007a06:	4602      	mov	r2, r0
 8007a08:	460b      	mov	r3, r1
 8007a0a:	4606      	mov	r6, r0
 8007a0c:	460f      	mov	r7, r1
 8007a0e:	4640      	mov	r0, r8
 8007a10:	4649      	mov	r1, r9
 8007a12:	f7f8 fbf1 	bl	80001f8 <__aeabi_dsub>
 8007a16:	9a05      	ldr	r2, [sp, #20]
 8007a18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	2b31      	cmp	r3, #49	; 0x31
 8007a20:	dc20      	bgt.n	8007a64 <__ieee754_rem_pio2+0x26c>
 8007a22:	e9c4 0100 	strd	r0, r1, [r4]
 8007a26:	46c2      	mov	sl, r8
 8007a28:	46cb      	mov	fp, r9
 8007a2a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007a2e:	4650      	mov	r0, sl
 8007a30:	4642      	mov	r2, r8
 8007a32:	464b      	mov	r3, r9
 8007a34:	4659      	mov	r1, fp
 8007a36:	f7f8 fbdf 	bl	80001f8 <__aeabi_dsub>
 8007a3a:	463b      	mov	r3, r7
 8007a3c:	4632      	mov	r2, r6
 8007a3e:	f7f8 fbdb 	bl	80001f8 <__aeabi_dsub>
 8007a42:	9b04      	ldr	r3, [sp, #16]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007a4a:	f6bf af11 	bge.w	8007870 <__ieee754_rem_pio2+0x78>
 8007a4e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007a52:	6063      	str	r3, [r4, #4]
 8007a54:	f8c4 8000 	str.w	r8, [r4]
 8007a58:	60a0      	str	r0, [r4, #8]
 8007a5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a5e:	60e3      	str	r3, [r4, #12]
 8007a60:	426d      	negs	r5, r5
 8007a62:	e705      	b.n	8007870 <__ieee754_rem_pio2+0x78>
 8007a64:	a326      	add	r3, pc, #152	; (adr r3, 8007b00 <__ieee754_rem_pio2+0x308>)
 8007a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a6e:	f7f8 fd7b 	bl	8000568 <__aeabi_dmul>
 8007a72:	4606      	mov	r6, r0
 8007a74:	460f      	mov	r7, r1
 8007a76:	4602      	mov	r2, r0
 8007a78:	460b      	mov	r3, r1
 8007a7a:	4640      	mov	r0, r8
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	f7f8 fbbb 	bl	80001f8 <__aeabi_dsub>
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	4682      	mov	sl, r0
 8007a88:	468b      	mov	fp, r1
 8007a8a:	4640      	mov	r0, r8
 8007a8c:	4649      	mov	r1, r9
 8007a8e:	f7f8 fbb3 	bl	80001f8 <__aeabi_dsub>
 8007a92:	4632      	mov	r2, r6
 8007a94:	463b      	mov	r3, r7
 8007a96:	f7f8 fbaf 	bl	80001f8 <__aeabi_dsub>
 8007a9a:	a31b      	add	r3, pc, #108	; (adr r3, 8007b08 <__ieee754_rem_pio2+0x310>)
 8007a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa0:	4606      	mov	r6, r0
 8007aa2:	460f      	mov	r7, r1
 8007aa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aa8:	f7f8 fd5e 	bl	8000568 <__aeabi_dmul>
 8007aac:	4632      	mov	r2, r6
 8007aae:	463b      	mov	r3, r7
 8007ab0:	f7f8 fba2 	bl	80001f8 <__aeabi_dsub>
 8007ab4:	4606      	mov	r6, r0
 8007ab6:	460f      	mov	r7, r1
 8007ab8:	e764      	b.n	8007984 <__ieee754_rem_pio2+0x18c>
 8007aba:	4b1b      	ldr	r3, [pc, #108]	; (8007b28 <__ieee754_rem_pio2+0x330>)
 8007abc:	4598      	cmp	r8, r3
 8007abe:	dd35      	ble.n	8007b2c <__ieee754_rem_pio2+0x334>
 8007ac0:	ee10 2a10 	vmov	r2, s0
 8007ac4:	463b      	mov	r3, r7
 8007ac6:	4630      	mov	r0, r6
 8007ac8:	4639      	mov	r1, r7
 8007aca:	f7f8 fb95 	bl	80001f8 <__aeabi_dsub>
 8007ace:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007ad2:	e9c4 0100 	strd	r0, r1, [r4]
 8007ad6:	e6a1      	b.n	800781c <__ieee754_rem_pio2+0x24>
 8007ad8:	54400000 	.word	0x54400000
 8007adc:	3ff921fb 	.word	0x3ff921fb
 8007ae0:	1a626331 	.word	0x1a626331
 8007ae4:	3dd0b461 	.word	0x3dd0b461
 8007ae8:	1a600000 	.word	0x1a600000
 8007aec:	3dd0b461 	.word	0x3dd0b461
 8007af0:	2e037073 	.word	0x2e037073
 8007af4:	3ba3198a 	.word	0x3ba3198a
 8007af8:	6dc9c883 	.word	0x6dc9c883
 8007afc:	3fe45f30 	.word	0x3fe45f30
 8007b00:	2e000000 	.word	0x2e000000
 8007b04:	3ba3198a 	.word	0x3ba3198a
 8007b08:	252049c1 	.word	0x252049c1
 8007b0c:	397b839a 	.word	0x397b839a
 8007b10:	3fe921fb 	.word	0x3fe921fb
 8007b14:	4002d97b 	.word	0x4002d97b
 8007b18:	3ff921fb 	.word	0x3ff921fb
 8007b1c:	413921fb 	.word	0x413921fb
 8007b20:	3fe00000 	.word	0x3fe00000
 8007b24:	08008808 	.word	0x08008808
 8007b28:	7fefffff 	.word	0x7fefffff
 8007b2c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007b30:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8007b34:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007b38:	4630      	mov	r0, r6
 8007b3a:	460f      	mov	r7, r1
 8007b3c:	f7f8 ffae 	bl	8000a9c <__aeabi_d2iz>
 8007b40:	f7f8 fca8 	bl	8000494 <__aeabi_i2d>
 8007b44:	4602      	mov	r2, r0
 8007b46:	460b      	mov	r3, r1
 8007b48:	4630      	mov	r0, r6
 8007b4a:	4639      	mov	r1, r7
 8007b4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b50:	f7f8 fb52 	bl	80001f8 <__aeabi_dsub>
 8007b54:	2200      	movs	r2, #0
 8007b56:	4b1f      	ldr	r3, [pc, #124]	; (8007bd4 <__ieee754_rem_pio2+0x3dc>)
 8007b58:	f7f8 fd06 	bl	8000568 <__aeabi_dmul>
 8007b5c:	460f      	mov	r7, r1
 8007b5e:	4606      	mov	r6, r0
 8007b60:	f7f8 ff9c 	bl	8000a9c <__aeabi_d2iz>
 8007b64:	f7f8 fc96 	bl	8000494 <__aeabi_i2d>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	4639      	mov	r1, r7
 8007b70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b74:	f7f8 fb40 	bl	80001f8 <__aeabi_dsub>
 8007b78:	2200      	movs	r2, #0
 8007b7a:	4b16      	ldr	r3, [pc, #88]	; (8007bd4 <__ieee754_rem_pio2+0x3dc>)
 8007b7c:	f7f8 fcf4 	bl	8000568 <__aeabi_dmul>
 8007b80:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007b84:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8007b88:	f04f 0803 	mov.w	r8, #3
 8007b8c:	2600      	movs	r6, #0
 8007b8e:	2700      	movs	r7, #0
 8007b90:	4632      	mov	r2, r6
 8007b92:	463b      	mov	r3, r7
 8007b94:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007b98:	f108 3aff 	add.w	sl, r8, #4294967295
 8007b9c:	f7f8 ff4c 	bl	8000a38 <__aeabi_dcmpeq>
 8007ba0:	b9b0      	cbnz	r0, 8007bd0 <__ieee754_rem_pio2+0x3d8>
 8007ba2:	4b0d      	ldr	r3, [pc, #52]	; (8007bd8 <__ieee754_rem_pio2+0x3e0>)
 8007ba4:	9301      	str	r3, [sp, #4]
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	462a      	mov	r2, r5
 8007bac:	4643      	mov	r3, r8
 8007bae:	4621      	mov	r1, r4
 8007bb0:	a806      	add	r0, sp, #24
 8007bb2:	f000 f8dd 	bl	8007d70 <__kernel_rem_pio2>
 8007bb6:	9b04      	ldr	r3, [sp, #16]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	4605      	mov	r5, r0
 8007bbc:	f6bf ae58 	bge.w	8007870 <__ieee754_rem_pio2+0x78>
 8007bc0:	6863      	ldr	r3, [r4, #4]
 8007bc2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007bc6:	6063      	str	r3, [r4, #4]
 8007bc8:	68e3      	ldr	r3, [r4, #12]
 8007bca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007bce:	e746      	b.n	8007a5e <__ieee754_rem_pio2+0x266>
 8007bd0:	46d0      	mov	r8, sl
 8007bd2:	e7dd      	b.n	8007b90 <__ieee754_rem_pio2+0x398>
 8007bd4:	41700000 	.word	0x41700000
 8007bd8:	08008888 	.word	0x08008888
 8007bdc:	00000000 	.word	0x00000000

08007be0 <__kernel_cos>:
 8007be0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be4:	ec59 8b10 	vmov	r8, r9, d0
 8007be8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8007bec:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8007bf0:	ed2d 8b02 	vpush	{d8}
 8007bf4:	eeb0 8a41 	vmov.f32	s16, s2
 8007bf8:	eef0 8a61 	vmov.f32	s17, s3
 8007bfc:	da07      	bge.n	8007c0e <__kernel_cos+0x2e>
 8007bfe:	ee10 0a10 	vmov	r0, s0
 8007c02:	4649      	mov	r1, r9
 8007c04:	f7f8 ff4a 	bl	8000a9c <__aeabi_d2iz>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	f000 8089 	beq.w	8007d20 <__kernel_cos+0x140>
 8007c0e:	4642      	mov	r2, r8
 8007c10:	464b      	mov	r3, r9
 8007c12:	4640      	mov	r0, r8
 8007c14:	4649      	mov	r1, r9
 8007c16:	f7f8 fca7 	bl	8000568 <__aeabi_dmul>
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	4b4e      	ldr	r3, [pc, #312]	; (8007d58 <__kernel_cos+0x178>)
 8007c1e:	4604      	mov	r4, r0
 8007c20:	460d      	mov	r5, r1
 8007c22:	f7f8 fca1 	bl	8000568 <__aeabi_dmul>
 8007c26:	a340      	add	r3, pc, #256	; (adr r3, 8007d28 <__kernel_cos+0x148>)
 8007c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2c:	4682      	mov	sl, r0
 8007c2e:	468b      	mov	fp, r1
 8007c30:	4620      	mov	r0, r4
 8007c32:	4629      	mov	r1, r5
 8007c34:	f7f8 fc98 	bl	8000568 <__aeabi_dmul>
 8007c38:	a33d      	add	r3, pc, #244	; (adr r3, 8007d30 <__kernel_cos+0x150>)
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	f7f8 fadd 	bl	80001fc <__adddf3>
 8007c42:	4622      	mov	r2, r4
 8007c44:	462b      	mov	r3, r5
 8007c46:	f7f8 fc8f 	bl	8000568 <__aeabi_dmul>
 8007c4a:	a33b      	add	r3, pc, #236	; (adr r3, 8007d38 <__kernel_cos+0x158>)
 8007c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c50:	f7f8 fad2 	bl	80001f8 <__aeabi_dsub>
 8007c54:	4622      	mov	r2, r4
 8007c56:	462b      	mov	r3, r5
 8007c58:	f7f8 fc86 	bl	8000568 <__aeabi_dmul>
 8007c5c:	a338      	add	r3, pc, #224	; (adr r3, 8007d40 <__kernel_cos+0x160>)
 8007c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c62:	f7f8 facb 	bl	80001fc <__adddf3>
 8007c66:	4622      	mov	r2, r4
 8007c68:	462b      	mov	r3, r5
 8007c6a:	f7f8 fc7d 	bl	8000568 <__aeabi_dmul>
 8007c6e:	a336      	add	r3, pc, #216	; (adr r3, 8007d48 <__kernel_cos+0x168>)
 8007c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c74:	f7f8 fac0 	bl	80001f8 <__aeabi_dsub>
 8007c78:	4622      	mov	r2, r4
 8007c7a:	462b      	mov	r3, r5
 8007c7c:	f7f8 fc74 	bl	8000568 <__aeabi_dmul>
 8007c80:	a333      	add	r3, pc, #204	; (adr r3, 8007d50 <__kernel_cos+0x170>)
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	f7f8 fab9 	bl	80001fc <__adddf3>
 8007c8a:	4622      	mov	r2, r4
 8007c8c:	462b      	mov	r3, r5
 8007c8e:	f7f8 fc6b 	bl	8000568 <__aeabi_dmul>
 8007c92:	4622      	mov	r2, r4
 8007c94:	462b      	mov	r3, r5
 8007c96:	f7f8 fc67 	bl	8000568 <__aeabi_dmul>
 8007c9a:	ec53 2b18 	vmov	r2, r3, d8
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	460d      	mov	r5, r1
 8007ca2:	4640      	mov	r0, r8
 8007ca4:	4649      	mov	r1, r9
 8007ca6:	f7f8 fc5f 	bl	8000568 <__aeabi_dmul>
 8007caa:	460b      	mov	r3, r1
 8007cac:	4602      	mov	r2, r0
 8007cae:	4629      	mov	r1, r5
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	f7f8 faa1 	bl	80001f8 <__aeabi_dsub>
 8007cb6:	4b29      	ldr	r3, [pc, #164]	; (8007d5c <__kernel_cos+0x17c>)
 8007cb8:	429e      	cmp	r6, r3
 8007cba:	4680      	mov	r8, r0
 8007cbc:	4689      	mov	r9, r1
 8007cbe:	dc11      	bgt.n	8007ce4 <__kernel_cos+0x104>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	4650      	mov	r0, sl
 8007cc6:	4659      	mov	r1, fp
 8007cc8:	f7f8 fa96 	bl	80001f8 <__aeabi_dsub>
 8007ccc:	460b      	mov	r3, r1
 8007cce:	4924      	ldr	r1, [pc, #144]	; (8007d60 <__kernel_cos+0x180>)
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	f7f8 fa90 	bl	80001f8 <__aeabi_dsub>
 8007cd8:	ecbd 8b02 	vpop	{d8}
 8007cdc:	ec41 0b10 	vmov	d0, r0, r1
 8007ce0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce4:	4b1f      	ldr	r3, [pc, #124]	; (8007d64 <__kernel_cos+0x184>)
 8007ce6:	491e      	ldr	r1, [pc, #120]	; (8007d60 <__kernel_cos+0x180>)
 8007ce8:	429e      	cmp	r6, r3
 8007cea:	bfcc      	ite	gt
 8007cec:	4d1e      	ldrgt	r5, [pc, #120]	; (8007d68 <__kernel_cos+0x188>)
 8007cee:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8007cf2:	2400      	movs	r4, #0
 8007cf4:	4622      	mov	r2, r4
 8007cf6:	462b      	mov	r3, r5
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	f7f8 fa7d 	bl	80001f8 <__aeabi_dsub>
 8007cfe:	4622      	mov	r2, r4
 8007d00:	4606      	mov	r6, r0
 8007d02:	460f      	mov	r7, r1
 8007d04:	462b      	mov	r3, r5
 8007d06:	4650      	mov	r0, sl
 8007d08:	4659      	mov	r1, fp
 8007d0a:	f7f8 fa75 	bl	80001f8 <__aeabi_dsub>
 8007d0e:	4642      	mov	r2, r8
 8007d10:	464b      	mov	r3, r9
 8007d12:	f7f8 fa71 	bl	80001f8 <__aeabi_dsub>
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	4639      	mov	r1, r7
 8007d1e:	e7d9      	b.n	8007cd4 <__kernel_cos+0xf4>
 8007d20:	2000      	movs	r0, #0
 8007d22:	490f      	ldr	r1, [pc, #60]	; (8007d60 <__kernel_cos+0x180>)
 8007d24:	e7d8      	b.n	8007cd8 <__kernel_cos+0xf8>
 8007d26:	bf00      	nop
 8007d28:	be8838d4 	.word	0xbe8838d4
 8007d2c:	bda8fae9 	.word	0xbda8fae9
 8007d30:	bdb4b1c4 	.word	0xbdb4b1c4
 8007d34:	3e21ee9e 	.word	0x3e21ee9e
 8007d38:	809c52ad 	.word	0x809c52ad
 8007d3c:	3e927e4f 	.word	0x3e927e4f
 8007d40:	19cb1590 	.word	0x19cb1590
 8007d44:	3efa01a0 	.word	0x3efa01a0
 8007d48:	16c15177 	.word	0x16c15177
 8007d4c:	3f56c16c 	.word	0x3f56c16c
 8007d50:	5555554c 	.word	0x5555554c
 8007d54:	3fa55555 	.word	0x3fa55555
 8007d58:	3fe00000 	.word	0x3fe00000
 8007d5c:	3fd33332 	.word	0x3fd33332
 8007d60:	3ff00000 	.word	0x3ff00000
 8007d64:	3fe90000 	.word	0x3fe90000
 8007d68:	3fd20000 	.word	0x3fd20000
 8007d6c:	00000000 	.word	0x00000000

08007d70 <__kernel_rem_pio2>:
 8007d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d74:	ed2d 8b02 	vpush	{d8}
 8007d78:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8007d7c:	1ed4      	subs	r4, r2, #3
 8007d7e:	9308      	str	r3, [sp, #32]
 8007d80:	9101      	str	r1, [sp, #4]
 8007d82:	4bc5      	ldr	r3, [pc, #788]	; (8008098 <__kernel_rem_pio2+0x328>)
 8007d84:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007d86:	9009      	str	r0, [sp, #36]	; 0x24
 8007d88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007d8c:	9304      	str	r3, [sp, #16]
 8007d8e:	9b08      	ldr	r3, [sp, #32]
 8007d90:	3b01      	subs	r3, #1
 8007d92:	9307      	str	r3, [sp, #28]
 8007d94:	2318      	movs	r3, #24
 8007d96:	fb94 f4f3 	sdiv	r4, r4, r3
 8007d9a:	f06f 0317 	mvn.w	r3, #23
 8007d9e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8007da2:	fb04 3303 	mla	r3, r4, r3, r3
 8007da6:	eb03 0a02 	add.w	sl, r3, r2
 8007daa:	9b04      	ldr	r3, [sp, #16]
 8007dac:	9a07      	ldr	r2, [sp, #28]
 8007dae:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8008088 <__kernel_rem_pio2+0x318>
 8007db2:	eb03 0802 	add.w	r8, r3, r2
 8007db6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007db8:	1aa7      	subs	r7, r4, r2
 8007dba:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007dbe:	ae22      	add	r6, sp, #136	; 0x88
 8007dc0:	2500      	movs	r5, #0
 8007dc2:	4545      	cmp	r5, r8
 8007dc4:	dd13      	ble.n	8007dee <__kernel_rem_pio2+0x7e>
 8007dc6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8008088 <__kernel_rem_pio2+0x318>
 8007dca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007dce:	2600      	movs	r6, #0
 8007dd0:	9b04      	ldr	r3, [sp, #16]
 8007dd2:	429e      	cmp	r6, r3
 8007dd4:	dc32      	bgt.n	8007e3c <__kernel_rem_pio2+0xcc>
 8007dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dd8:	9302      	str	r3, [sp, #8]
 8007dda:	9b08      	ldr	r3, [sp, #32]
 8007ddc:	199d      	adds	r5, r3, r6
 8007dde:	ab22      	add	r3, sp, #136	; 0x88
 8007de0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007de4:	9306      	str	r3, [sp, #24]
 8007de6:	ec59 8b18 	vmov	r8, r9, d8
 8007dea:	2700      	movs	r7, #0
 8007dec:	e01f      	b.n	8007e2e <__kernel_rem_pio2+0xbe>
 8007dee:	42ef      	cmn	r7, r5
 8007df0:	d407      	bmi.n	8007e02 <__kernel_rem_pio2+0x92>
 8007df2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007df6:	f7f8 fb4d 	bl	8000494 <__aeabi_i2d>
 8007dfa:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007dfe:	3501      	adds	r5, #1
 8007e00:	e7df      	b.n	8007dc2 <__kernel_rem_pio2+0x52>
 8007e02:	ec51 0b18 	vmov	r0, r1, d8
 8007e06:	e7f8      	b.n	8007dfa <__kernel_rem_pio2+0x8a>
 8007e08:	9906      	ldr	r1, [sp, #24]
 8007e0a:	9d02      	ldr	r5, [sp, #8]
 8007e0c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8007e10:	9106      	str	r1, [sp, #24]
 8007e12:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8007e16:	9502      	str	r5, [sp, #8]
 8007e18:	f7f8 fba6 	bl	8000568 <__aeabi_dmul>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	460b      	mov	r3, r1
 8007e20:	4640      	mov	r0, r8
 8007e22:	4649      	mov	r1, r9
 8007e24:	f7f8 f9ea 	bl	80001fc <__adddf3>
 8007e28:	3701      	adds	r7, #1
 8007e2a:	4680      	mov	r8, r0
 8007e2c:	4689      	mov	r9, r1
 8007e2e:	9b07      	ldr	r3, [sp, #28]
 8007e30:	429f      	cmp	r7, r3
 8007e32:	dde9      	ble.n	8007e08 <__kernel_rem_pio2+0x98>
 8007e34:	e8eb 8902 	strd	r8, r9, [fp], #8
 8007e38:	3601      	adds	r6, #1
 8007e3a:	e7c9      	b.n	8007dd0 <__kernel_rem_pio2+0x60>
 8007e3c:	9b04      	ldr	r3, [sp, #16]
 8007e3e:	aa0e      	add	r2, sp, #56	; 0x38
 8007e40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e44:	930c      	str	r3, [sp, #48]	; 0x30
 8007e46:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007e48:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007e4c:	9c04      	ldr	r4, [sp, #16]
 8007e4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e50:	ab9a      	add	r3, sp, #616	; 0x268
 8007e52:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8007e56:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e5e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8007e62:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8007e66:	ab9a      	add	r3, sp, #616	; 0x268
 8007e68:	445b      	add	r3, fp
 8007e6a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8007e6e:	2500      	movs	r5, #0
 8007e70:	1b63      	subs	r3, r4, r5
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	dc78      	bgt.n	8007f68 <__kernel_rem_pio2+0x1f8>
 8007e76:	4650      	mov	r0, sl
 8007e78:	ec49 8b10 	vmov	d0, r8, r9
 8007e7c:	f000 fc00 	bl	8008680 <scalbn>
 8007e80:	ec57 6b10 	vmov	r6, r7, d0
 8007e84:	2200      	movs	r2, #0
 8007e86:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007e8a:	ee10 0a10 	vmov	r0, s0
 8007e8e:	4639      	mov	r1, r7
 8007e90:	f7f8 fb6a 	bl	8000568 <__aeabi_dmul>
 8007e94:	ec41 0b10 	vmov	d0, r0, r1
 8007e98:	f000 fb6e 	bl	8008578 <floor>
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	ec51 0b10 	vmov	r0, r1, d0
 8007ea2:	4b7e      	ldr	r3, [pc, #504]	; (800809c <__kernel_rem_pio2+0x32c>)
 8007ea4:	f7f8 fb60 	bl	8000568 <__aeabi_dmul>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	460b      	mov	r3, r1
 8007eac:	4630      	mov	r0, r6
 8007eae:	4639      	mov	r1, r7
 8007eb0:	f7f8 f9a2 	bl	80001f8 <__aeabi_dsub>
 8007eb4:	460f      	mov	r7, r1
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	f7f8 fdf0 	bl	8000a9c <__aeabi_d2iz>
 8007ebc:	9006      	str	r0, [sp, #24]
 8007ebe:	f7f8 fae9 	bl	8000494 <__aeabi_i2d>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	4639      	mov	r1, r7
 8007eca:	f7f8 f995 	bl	80001f8 <__aeabi_dsub>
 8007ece:	f1ba 0f00 	cmp.w	sl, #0
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	460f      	mov	r7, r1
 8007ed6:	dd6c      	ble.n	8007fb2 <__kernel_rem_pio2+0x242>
 8007ed8:	1e62      	subs	r2, r4, #1
 8007eda:	ab0e      	add	r3, sp, #56	; 0x38
 8007edc:	f1ca 0118 	rsb	r1, sl, #24
 8007ee0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007ee4:	9d06      	ldr	r5, [sp, #24]
 8007ee6:	fa40 f301 	asr.w	r3, r0, r1
 8007eea:	441d      	add	r5, r3
 8007eec:	408b      	lsls	r3, r1
 8007eee:	1ac0      	subs	r0, r0, r3
 8007ef0:	ab0e      	add	r3, sp, #56	; 0x38
 8007ef2:	9506      	str	r5, [sp, #24]
 8007ef4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007ef8:	f1ca 0317 	rsb	r3, sl, #23
 8007efc:	fa40 f303 	asr.w	r3, r0, r3
 8007f00:	9302      	str	r3, [sp, #8]
 8007f02:	9b02      	ldr	r3, [sp, #8]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	dd62      	ble.n	8007fce <__kernel_rem_pio2+0x25e>
 8007f08:	9b06      	ldr	r3, [sp, #24]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	9306      	str	r3, [sp, #24]
 8007f10:	4615      	mov	r5, r2
 8007f12:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007f16:	4294      	cmp	r4, r2
 8007f18:	f300 8095 	bgt.w	8008046 <__kernel_rem_pio2+0x2d6>
 8007f1c:	f1ba 0f00 	cmp.w	sl, #0
 8007f20:	dd07      	ble.n	8007f32 <__kernel_rem_pio2+0x1c2>
 8007f22:	f1ba 0f01 	cmp.w	sl, #1
 8007f26:	f000 80a2 	beq.w	800806e <__kernel_rem_pio2+0x2fe>
 8007f2a:	f1ba 0f02 	cmp.w	sl, #2
 8007f2e:	f000 80c1 	beq.w	80080b4 <__kernel_rem_pio2+0x344>
 8007f32:	9b02      	ldr	r3, [sp, #8]
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d14a      	bne.n	8007fce <__kernel_rem_pio2+0x25e>
 8007f38:	4632      	mov	r2, r6
 8007f3a:	463b      	mov	r3, r7
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	4958      	ldr	r1, [pc, #352]	; (80080a0 <__kernel_rem_pio2+0x330>)
 8007f40:	f7f8 f95a 	bl	80001f8 <__aeabi_dsub>
 8007f44:	4606      	mov	r6, r0
 8007f46:	460f      	mov	r7, r1
 8007f48:	2d00      	cmp	r5, #0
 8007f4a:	d040      	beq.n	8007fce <__kernel_rem_pio2+0x25e>
 8007f4c:	4650      	mov	r0, sl
 8007f4e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8008090 <__kernel_rem_pio2+0x320>
 8007f52:	f000 fb95 	bl	8008680 <scalbn>
 8007f56:	4630      	mov	r0, r6
 8007f58:	4639      	mov	r1, r7
 8007f5a:	ec53 2b10 	vmov	r2, r3, d0
 8007f5e:	f7f8 f94b 	bl	80001f8 <__aeabi_dsub>
 8007f62:	4606      	mov	r6, r0
 8007f64:	460f      	mov	r7, r1
 8007f66:	e032      	b.n	8007fce <__kernel_rem_pio2+0x25e>
 8007f68:	2200      	movs	r2, #0
 8007f6a:	4b4e      	ldr	r3, [pc, #312]	; (80080a4 <__kernel_rem_pio2+0x334>)
 8007f6c:	4640      	mov	r0, r8
 8007f6e:	4649      	mov	r1, r9
 8007f70:	f7f8 fafa 	bl	8000568 <__aeabi_dmul>
 8007f74:	f7f8 fd92 	bl	8000a9c <__aeabi_d2iz>
 8007f78:	f7f8 fa8c 	bl	8000494 <__aeabi_i2d>
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	4b4a      	ldr	r3, [pc, #296]	; (80080a8 <__kernel_rem_pio2+0x338>)
 8007f80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f84:	f7f8 faf0 	bl	8000568 <__aeabi_dmul>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	4640      	mov	r0, r8
 8007f8e:	4649      	mov	r1, r9
 8007f90:	f7f8 f932 	bl	80001f8 <__aeabi_dsub>
 8007f94:	f7f8 fd82 	bl	8000a9c <__aeabi_d2iz>
 8007f98:	ab0e      	add	r3, sp, #56	; 0x38
 8007f9a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8007f9e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007fa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fa6:	f7f8 f929 	bl	80001fc <__adddf3>
 8007faa:	3501      	adds	r5, #1
 8007fac:	4680      	mov	r8, r0
 8007fae:	4689      	mov	r9, r1
 8007fb0:	e75e      	b.n	8007e70 <__kernel_rem_pio2+0x100>
 8007fb2:	d105      	bne.n	8007fc0 <__kernel_rem_pio2+0x250>
 8007fb4:	1e63      	subs	r3, r4, #1
 8007fb6:	aa0e      	add	r2, sp, #56	; 0x38
 8007fb8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007fbc:	15c3      	asrs	r3, r0, #23
 8007fbe:	e79f      	b.n	8007f00 <__kernel_rem_pio2+0x190>
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	4b3a      	ldr	r3, [pc, #232]	; (80080ac <__kernel_rem_pio2+0x33c>)
 8007fc4:	f7f8 fd56 	bl	8000a74 <__aeabi_dcmpge>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	d139      	bne.n	8008040 <__kernel_rem_pio2+0x2d0>
 8007fcc:	9002      	str	r0, [sp, #8]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	4639      	mov	r1, r7
 8007fd6:	f7f8 fd2f 	bl	8000a38 <__aeabi_dcmpeq>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	f000 80c7 	beq.w	800816e <__kernel_rem_pio2+0x3fe>
 8007fe0:	1e65      	subs	r5, r4, #1
 8007fe2:	462b      	mov	r3, r5
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	9904      	ldr	r1, [sp, #16]
 8007fe8:	428b      	cmp	r3, r1
 8007fea:	da6a      	bge.n	80080c2 <__kernel_rem_pio2+0x352>
 8007fec:	2a00      	cmp	r2, #0
 8007fee:	f000 8088 	beq.w	8008102 <__kernel_rem_pio2+0x392>
 8007ff2:	ab0e      	add	r3, sp, #56	; 0x38
 8007ff4:	f1aa 0a18 	sub.w	sl, sl, #24
 8007ff8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f000 80b4 	beq.w	800816a <__kernel_rem_pio2+0x3fa>
 8008002:	4650      	mov	r0, sl
 8008004:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8008090 <__kernel_rem_pio2+0x320>
 8008008:	f000 fb3a 	bl	8008680 <scalbn>
 800800c:	00ec      	lsls	r4, r5, #3
 800800e:	ab72      	add	r3, sp, #456	; 0x1c8
 8008010:	191e      	adds	r6, r3, r4
 8008012:	ec59 8b10 	vmov	r8, r9, d0
 8008016:	f106 0a08 	add.w	sl, r6, #8
 800801a:	462f      	mov	r7, r5
 800801c:	2f00      	cmp	r7, #0
 800801e:	f280 80df 	bge.w	80081e0 <__kernel_rem_pio2+0x470>
 8008022:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8008088 <__kernel_rem_pio2+0x318>
 8008026:	f04f 0a00 	mov.w	sl, #0
 800802a:	eba5 030a 	sub.w	r3, r5, sl
 800802e:	2b00      	cmp	r3, #0
 8008030:	f2c0 810a 	blt.w	8008248 <__kernel_rem_pio2+0x4d8>
 8008034:	f8df b078 	ldr.w	fp, [pc, #120]	; 80080b0 <__kernel_rem_pio2+0x340>
 8008038:	ec59 8b18 	vmov	r8, r9, d8
 800803c:	2700      	movs	r7, #0
 800803e:	e0f5      	b.n	800822c <__kernel_rem_pio2+0x4bc>
 8008040:	2302      	movs	r3, #2
 8008042:	9302      	str	r3, [sp, #8]
 8008044:	e760      	b.n	8007f08 <__kernel_rem_pio2+0x198>
 8008046:	ab0e      	add	r3, sp, #56	; 0x38
 8008048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800804c:	b94d      	cbnz	r5, 8008062 <__kernel_rem_pio2+0x2f2>
 800804e:	b12b      	cbz	r3, 800805c <__kernel_rem_pio2+0x2ec>
 8008050:	a80e      	add	r0, sp, #56	; 0x38
 8008052:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008056:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800805a:	2301      	movs	r3, #1
 800805c:	3201      	adds	r2, #1
 800805e:	461d      	mov	r5, r3
 8008060:	e759      	b.n	8007f16 <__kernel_rem_pio2+0x1a6>
 8008062:	a80e      	add	r0, sp, #56	; 0x38
 8008064:	1acb      	subs	r3, r1, r3
 8008066:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800806a:	462b      	mov	r3, r5
 800806c:	e7f6      	b.n	800805c <__kernel_rem_pio2+0x2ec>
 800806e:	1e62      	subs	r2, r4, #1
 8008070:	ab0e      	add	r3, sp, #56	; 0x38
 8008072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008076:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800807a:	a90e      	add	r1, sp, #56	; 0x38
 800807c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008080:	e757      	b.n	8007f32 <__kernel_rem_pio2+0x1c2>
 8008082:	bf00      	nop
 8008084:	f3af 8000 	nop.w
	...
 8008094:	3ff00000 	.word	0x3ff00000
 8008098:	080089d0 	.word	0x080089d0
 800809c:	40200000 	.word	0x40200000
 80080a0:	3ff00000 	.word	0x3ff00000
 80080a4:	3e700000 	.word	0x3e700000
 80080a8:	41700000 	.word	0x41700000
 80080ac:	3fe00000 	.word	0x3fe00000
 80080b0:	08008990 	.word	0x08008990
 80080b4:	1e62      	subs	r2, r4, #1
 80080b6:	ab0e      	add	r3, sp, #56	; 0x38
 80080b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80080c0:	e7db      	b.n	800807a <__kernel_rem_pio2+0x30a>
 80080c2:	a90e      	add	r1, sp, #56	; 0x38
 80080c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80080c8:	3b01      	subs	r3, #1
 80080ca:	430a      	orrs	r2, r1
 80080cc:	e78b      	b.n	8007fe6 <__kernel_rem_pio2+0x276>
 80080ce:	3301      	adds	r3, #1
 80080d0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80080d4:	2900      	cmp	r1, #0
 80080d6:	d0fa      	beq.n	80080ce <__kernel_rem_pio2+0x35e>
 80080d8:	9a08      	ldr	r2, [sp, #32]
 80080da:	4422      	add	r2, r4
 80080dc:	00d2      	lsls	r2, r2, #3
 80080de:	a922      	add	r1, sp, #136	; 0x88
 80080e0:	18e3      	adds	r3, r4, r3
 80080e2:	9206      	str	r2, [sp, #24]
 80080e4:	440a      	add	r2, r1
 80080e6:	9302      	str	r3, [sp, #8]
 80080e8:	f10b 0108 	add.w	r1, fp, #8
 80080ec:	f102 0308 	add.w	r3, r2, #8
 80080f0:	1c66      	adds	r6, r4, #1
 80080f2:	910a      	str	r1, [sp, #40]	; 0x28
 80080f4:	2500      	movs	r5, #0
 80080f6:	930d      	str	r3, [sp, #52]	; 0x34
 80080f8:	9b02      	ldr	r3, [sp, #8]
 80080fa:	42b3      	cmp	r3, r6
 80080fc:	da04      	bge.n	8008108 <__kernel_rem_pio2+0x398>
 80080fe:	461c      	mov	r4, r3
 8008100:	e6a6      	b.n	8007e50 <__kernel_rem_pio2+0xe0>
 8008102:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008104:	2301      	movs	r3, #1
 8008106:	e7e3      	b.n	80080d0 <__kernel_rem_pio2+0x360>
 8008108:	9b06      	ldr	r3, [sp, #24]
 800810a:	18ef      	adds	r7, r5, r3
 800810c:	ab22      	add	r3, sp, #136	; 0x88
 800810e:	441f      	add	r7, r3
 8008110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008112:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008116:	f7f8 f9bd 	bl	8000494 <__aeabi_i2d>
 800811a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800811c:	461c      	mov	r4, r3
 800811e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008120:	e9c7 0100 	strd	r0, r1, [r7]
 8008124:	eb03 0b05 	add.w	fp, r3, r5
 8008128:	2700      	movs	r7, #0
 800812a:	f04f 0800 	mov.w	r8, #0
 800812e:	f04f 0900 	mov.w	r9, #0
 8008132:	9b07      	ldr	r3, [sp, #28]
 8008134:	429f      	cmp	r7, r3
 8008136:	dd08      	ble.n	800814a <__kernel_rem_pio2+0x3da>
 8008138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800813a:	aa72      	add	r2, sp, #456	; 0x1c8
 800813c:	18eb      	adds	r3, r5, r3
 800813e:	4413      	add	r3, r2
 8008140:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8008144:	3601      	adds	r6, #1
 8008146:	3508      	adds	r5, #8
 8008148:	e7d6      	b.n	80080f8 <__kernel_rem_pio2+0x388>
 800814a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800814e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008152:	f7f8 fa09 	bl	8000568 <__aeabi_dmul>
 8008156:	4602      	mov	r2, r0
 8008158:	460b      	mov	r3, r1
 800815a:	4640      	mov	r0, r8
 800815c:	4649      	mov	r1, r9
 800815e:	f7f8 f84d 	bl	80001fc <__adddf3>
 8008162:	3701      	adds	r7, #1
 8008164:	4680      	mov	r8, r0
 8008166:	4689      	mov	r9, r1
 8008168:	e7e3      	b.n	8008132 <__kernel_rem_pio2+0x3c2>
 800816a:	3d01      	subs	r5, #1
 800816c:	e741      	b.n	8007ff2 <__kernel_rem_pio2+0x282>
 800816e:	f1ca 0000 	rsb	r0, sl, #0
 8008172:	ec47 6b10 	vmov	d0, r6, r7
 8008176:	f000 fa83 	bl	8008680 <scalbn>
 800817a:	ec57 6b10 	vmov	r6, r7, d0
 800817e:	2200      	movs	r2, #0
 8008180:	4b99      	ldr	r3, [pc, #612]	; (80083e8 <__kernel_rem_pio2+0x678>)
 8008182:	ee10 0a10 	vmov	r0, s0
 8008186:	4639      	mov	r1, r7
 8008188:	f7f8 fc74 	bl	8000a74 <__aeabi_dcmpge>
 800818c:	b1f8      	cbz	r0, 80081ce <__kernel_rem_pio2+0x45e>
 800818e:	2200      	movs	r2, #0
 8008190:	4b96      	ldr	r3, [pc, #600]	; (80083ec <__kernel_rem_pio2+0x67c>)
 8008192:	4630      	mov	r0, r6
 8008194:	4639      	mov	r1, r7
 8008196:	f7f8 f9e7 	bl	8000568 <__aeabi_dmul>
 800819a:	f7f8 fc7f 	bl	8000a9c <__aeabi_d2iz>
 800819e:	4680      	mov	r8, r0
 80081a0:	f7f8 f978 	bl	8000494 <__aeabi_i2d>
 80081a4:	2200      	movs	r2, #0
 80081a6:	4b90      	ldr	r3, [pc, #576]	; (80083e8 <__kernel_rem_pio2+0x678>)
 80081a8:	f7f8 f9de 	bl	8000568 <__aeabi_dmul>
 80081ac:	460b      	mov	r3, r1
 80081ae:	4602      	mov	r2, r0
 80081b0:	4639      	mov	r1, r7
 80081b2:	4630      	mov	r0, r6
 80081b4:	f7f8 f820 	bl	80001f8 <__aeabi_dsub>
 80081b8:	f7f8 fc70 	bl	8000a9c <__aeabi_d2iz>
 80081bc:	1c65      	adds	r5, r4, #1
 80081be:	ab0e      	add	r3, sp, #56	; 0x38
 80081c0:	f10a 0a18 	add.w	sl, sl, #24
 80081c4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80081c8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80081cc:	e719      	b.n	8008002 <__kernel_rem_pio2+0x292>
 80081ce:	4630      	mov	r0, r6
 80081d0:	4639      	mov	r1, r7
 80081d2:	f7f8 fc63 	bl	8000a9c <__aeabi_d2iz>
 80081d6:	ab0e      	add	r3, sp, #56	; 0x38
 80081d8:	4625      	mov	r5, r4
 80081da:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80081de:	e710      	b.n	8008002 <__kernel_rem_pio2+0x292>
 80081e0:	ab0e      	add	r3, sp, #56	; 0x38
 80081e2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80081e6:	f7f8 f955 	bl	8000494 <__aeabi_i2d>
 80081ea:	4642      	mov	r2, r8
 80081ec:	464b      	mov	r3, r9
 80081ee:	f7f8 f9bb 	bl	8000568 <__aeabi_dmul>
 80081f2:	2200      	movs	r2, #0
 80081f4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80081f8:	4b7c      	ldr	r3, [pc, #496]	; (80083ec <__kernel_rem_pio2+0x67c>)
 80081fa:	4640      	mov	r0, r8
 80081fc:	4649      	mov	r1, r9
 80081fe:	f7f8 f9b3 	bl	8000568 <__aeabi_dmul>
 8008202:	3f01      	subs	r7, #1
 8008204:	4680      	mov	r8, r0
 8008206:	4689      	mov	r9, r1
 8008208:	e708      	b.n	800801c <__kernel_rem_pio2+0x2ac>
 800820a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800820e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008212:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8008216:	f7f8 f9a7 	bl	8000568 <__aeabi_dmul>
 800821a:	4602      	mov	r2, r0
 800821c:	460b      	mov	r3, r1
 800821e:	4640      	mov	r0, r8
 8008220:	4649      	mov	r1, r9
 8008222:	f7f7 ffeb 	bl	80001fc <__adddf3>
 8008226:	3701      	adds	r7, #1
 8008228:	4680      	mov	r8, r0
 800822a:	4689      	mov	r9, r1
 800822c:	9b04      	ldr	r3, [sp, #16]
 800822e:	429f      	cmp	r7, r3
 8008230:	dc01      	bgt.n	8008236 <__kernel_rem_pio2+0x4c6>
 8008232:	45ba      	cmp	sl, r7
 8008234:	dae9      	bge.n	800820a <__kernel_rem_pio2+0x49a>
 8008236:	ab4a      	add	r3, sp, #296	; 0x128
 8008238:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800823c:	e9c3 8900 	strd	r8, r9, [r3]
 8008240:	f10a 0a01 	add.w	sl, sl, #1
 8008244:	3e08      	subs	r6, #8
 8008246:	e6f0      	b.n	800802a <__kernel_rem_pio2+0x2ba>
 8008248:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800824a:	2b03      	cmp	r3, #3
 800824c:	d85b      	bhi.n	8008306 <__kernel_rem_pio2+0x596>
 800824e:	e8df f003 	tbb	[pc, r3]
 8008252:	264a      	.short	0x264a
 8008254:	0226      	.short	0x0226
 8008256:	ab9a      	add	r3, sp, #616	; 0x268
 8008258:	441c      	add	r4, r3
 800825a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800825e:	46a2      	mov	sl, r4
 8008260:	46ab      	mov	fp, r5
 8008262:	f1bb 0f00 	cmp.w	fp, #0
 8008266:	dc6c      	bgt.n	8008342 <__kernel_rem_pio2+0x5d2>
 8008268:	46a2      	mov	sl, r4
 800826a:	46ab      	mov	fp, r5
 800826c:	f1bb 0f01 	cmp.w	fp, #1
 8008270:	f300 8086 	bgt.w	8008380 <__kernel_rem_pio2+0x610>
 8008274:	2000      	movs	r0, #0
 8008276:	2100      	movs	r1, #0
 8008278:	2d01      	cmp	r5, #1
 800827a:	f300 80a0 	bgt.w	80083be <__kernel_rem_pio2+0x64e>
 800827e:	9b02      	ldr	r3, [sp, #8]
 8008280:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8008284:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8008288:	2b00      	cmp	r3, #0
 800828a:	f040 809e 	bne.w	80083ca <__kernel_rem_pio2+0x65a>
 800828e:	9b01      	ldr	r3, [sp, #4]
 8008290:	e9c3 7800 	strd	r7, r8, [r3]
 8008294:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008298:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800829c:	e033      	b.n	8008306 <__kernel_rem_pio2+0x596>
 800829e:	3408      	adds	r4, #8
 80082a0:	ab4a      	add	r3, sp, #296	; 0x128
 80082a2:	441c      	add	r4, r3
 80082a4:	462e      	mov	r6, r5
 80082a6:	2000      	movs	r0, #0
 80082a8:	2100      	movs	r1, #0
 80082aa:	2e00      	cmp	r6, #0
 80082ac:	da3a      	bge.n	8008324 <__kernel_rem_pio2+0x5b4>
 80082ae:	9b02      	ldr	r3, [sp, #8]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d03d      	beq.n	8008330 <__kernel_rem_pio2+0x5c0>
 80082b4:	4602      	mov	r2, r0
 80082b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082ba:	9c01      	ldr	r4, [sp, #4]
 80082bc:	e9c4 2300 	strd	r2, r3, [r4]
 80082c0:	4602      	mov	r2, r0
 80082c2:	460b      	mov	r3, r1
 80082c4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80082c8:	f7f7 ff96 	bl	80001f8 <__aeabi_dsub>
 80082cc:	ae4c      	add	r6, sp, #304	; 0x130
 80082ce:	2401      	movs	r4, #1
 80082d0:	42a5      	cmp	r5, r4
 80082d2:	da30      	bge.n	8008336 <__kernel_rem_pio2+0x5c6>
 80082d4:	9b02      	ldr	r3, [sp, #8]
 80082d6:	b113      	cbz	r3, 80082de <__kernel_rem_pio2+0x56e>
 80082d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082dc:	4619      	mov	r1, r3
 80082de:	9b01      	ldr	r3, [sp, #4]
 80082e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80082e4:	e00f      	b.n	8008306 <__kernel_rem_pio2+0x596>
 80082e6:	ab9a      	add	r3, sp, #616	; 0x268
 80082e8:	441c      	add	r4, r3
 80082ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80082ee:	2000      	movs	r0, #0
 80082f0:	2100      	movs	r1, #0
 80082f2:	2d00      	cmp	r5, #0
 80082f4:	da10      	bge.n	8008318 <__kernel_rem_pio2+0x5a8>
 80082f6:	9b02      	ldr	r3, [sp, #8]
 80082f8:	b113      	cbz	r3, 8008300 <__kernel_rem_pio2+0x590>
 80082fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082fe:	4619      	mov	r1, r3
 8008300:	9b01      	ldr	r3, [sp, #4]
 8008302:	e9c3 0100 	strd	r0, r1, [r3]
 8008306:	9b06      	ldr	r3, [sp, #24]
 8008308:	f003 0007 	and.w	r0, r3, #7
 800830c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008310:	ecbd 8b02 	vpop	{d8}
 8008314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008318:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800831c:	f7f7 ff6e 	bl	80001fc <__adddf3>
 8008320:	3d01      	subs	r5, #1
 8008322:	e7e6      	b.n	80082f2 <__kernel_rem_pio2+0x582>
 8008324:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008328:	f7f7 ff68 	bl	80001fc <__adddf3>
 800832c:	3e01      	subs	r6, #1
 800832e:	e7bc      	b.n	80082aa <__kernel_rem_pio2+0x53a>
 8008330:	4602      	mov	r2, r0
 8008332:	460b      	mov	r3, r1
 8008334:	e7c1      	b.n	80082ba <__kernel_rem_pio2+0x54a>
 8008336:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800833a:	f7f7 ff5f 	bl	80001fc <__adddf3>
 800833e:	3401      	adds	r4, #1
 8008340:	e7c6      	b.n	80082d0 <__kernel_rem_pio2+0x560>
 8008342:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8008346:	ed3a 7b02 	vldmdb	sl!, {d7}
 800834a:	4640      	mov	r0, r8
 800834c:	ec53 2b17 	vmov	r2, r3, d7
 8008350:	4649      	mov	r1, r9
 8008352:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008356:	f7f7 ff51 	bl	80001fc <__adddf3>
 800835a:	4602      	mov	r2, r0
 800835c:	460b      	mov	r3, r1
 800835e:	4606      	mov	r6, r0
 8008360:	460f      	mov	r7, r1
 8008362:	4640      	mov	r0, r8
 8008364:	4649      	mov	r1, r9
 8008366:	f7f7 ff47 	bl	80001f8 <__aeabi_dsub>
 800836a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800836e:	f7f7 ff45 	bl	80001fc <__adddf3>
 8008372:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008376:	e9ca 0100 	strd	r0, r1, [sl]
 800837a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800837e:	e770      	b.n	8008262 <__kernel_rem_pio2+0x4f2>
 8008380:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8008384:	ed3a 7b02 	vldmdb	sl!, {d7}
 8008388:	4630      	mov	r0, r6
 800838a:	ec53 2b17 	vmov	r2, r3, d7
 800838e:	4639      	mov	r1, r7
 8008390:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008394:	f7f7 ff32 	bl	80001fc <__adddf3>
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	4680      	mov	r8, r0
 800839e:	4689      	mov	r9, r1
 80083a0:	4630      	mov	r0, r6
 80083a2:	4639      	mov	r1, r7
 80083a4:	f7f7 ff28 	bl	80001f8 <__aeabi_dsub>
 80083a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083ac:	f7f7 ff26 	bl	80001fc <__adddf3>
 80083b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083b4:	e9ca 0100 	strd	r0, r1, [sl]
 80083b8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80083bc:	e756      	b.n	800826c <__kernel_rem_pio2+0x4fc>
 80083be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80083c2:	f7f7 ff1b 	bl	80001fc <__adddf3>
 80083c6:	3d01      	subs	r5, #1
 80083c8:	e756      	b.n	8008278 <__kernel_rem_pio2+0x508>
 80083ca:	9b01      	ldr	r3, [sp, #4]
 80083cc:	9a01      	ldr	r2, [sp, #4]
 80083ce:	601f      	str	r7, [r3, #0]
 80083d0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80083d4:	605c      	str	r4, [r3, #4]
 80083d6:	609d      	str	r5, [r3, #8]
 80083d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80083dc:	60d3      	str	r3, [r2, #12]
 80083de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083e2:	6110      	str	r0, [r2, #16]
 80083e4:	6153      	str	r3, [r2, #20]
 80083e6:	e78e      	b.n	8008306 <__kernel_rem_pio2+0x596>
 80083e8:	41700000 	.word	0x41700000
 80083ec:	3e700000 	.word	0x3e700000

080083f0 <__kernel_sin>:
 80083f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f4:	ec55 4b10 	vmov	r4, r5, d0
 80083f8:	b085      	sub	sp, #20
 80083fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80083fe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008402:	ed8d 1b00 	vstr	d1, [sp]
 8008406:	9002      	str	r0, [sp, #8]
 8008408:	da06      	bge.n	8008418 <__kernel_sin+0x28>
 800840a:	ee10 0a10 	vmov	r0, s0
 800840e:	4629      	mov	r1, r5
 8008410:	f7f8 fb44 	bl	8000a9c <__aeabi_d2iz>
 8008414:	2800      	cmp	r0, #0
 8008416:	d051      	beq.n	80084bc <__kernel_sin+0xcc>
 8008418:	4622      	mov	r2, r4
 800841a:	462b      	mov	r3, r5
 800841c:	4620      	mov	r0, r4
 800841e:	4629      	mov	r1, r5
 8008420:	f7f8 f8a2 	bl	8000568 <__aeabi_dmul>
 8008424:	4682      	mov	sl, r0
 8008426:	468b      	mov	fp, r1
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	4620      	mov	r0, r4
 800842e:	4629      	mov	r1, r5
 8008430:	f7f8 f89a 	bl	8000568 <__aeabi_dmul>
 8008434:	a341      	add	r3, pc, #260	; (adr r3, 800853c <__kernel_sin+0x14c>)
 8008436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843a:	4680      	mov	r8, r0
 800843c:	4689      	mov	r9, r1
 800843e:	4650      	mov	r0, sl
 8008440:	4659      	mov	r1, fp
 8008442:	f7f8 f891 	bl	8000568 <__aeabi_dmul>
 8008446:	a33f      	add	r3, pc, #252	; (adr r3, 8008544 <__kernel_sin+0x154>)
 8008448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844c:	f7f7 fed4 	bl	80001f8 <__aeabi_dsub>
 8008450:	4652      	mov	r2, sl
 8008452:	465b      	mov	r3, fp
 8008454:	f7f8 f888 	bl	8000568 <__aeabi_dmul>
 8008458:	a33c      	add	r3, pc, #240	; (adr r3, 800854c <__kernel_sin+0x15c>)
 800845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845e:	f7f7 fecd 	bl	80001fc <__adddf3>
 8008462:	4652      	mov	r2, sl
 8008464:	465b      	mov	r3, fp
 8008466:	f7f8 f87f 	bl	8000568 <__aeabi_dmul>
 800846a:	a33a      	add	r3, pc, #232	; (adr r3, 8008554 <__kernel_sin+0x164>)
 800846c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008470:	f7f7 fec2 	bl	80001f8 <__aeabi_dsub>
 8008474:	4652      	mov	r2, sl
 8008476:	465b      	mov	r3, fp
 8008478:	f7f8 f876 	bl	8000568 <__aeabi_dmul>
 800847c:	a337      	add	r3, pc, #220	; (adr r3, 800855c <__kernel_sin+0x16c>)
 800847e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008482:	f7f7 febb 	bl	80001fc <__adddf3>
 8008486:	9b02      	ldr	r3, [sp, #8]
 8008488:	4606      	mov	r6, r0
 800848a:	460f      	mov	r7, r1
 800848c:	b9db      	cbnz	r3, 80084c6 <__kernel_sin+0xd6>
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	4650      	mov	r0, sl
 8008494:	4659      	mov	r1, fp
 8008496:	f7f8 f867 	bl	8000568 <__aeabi_dmul>
 800849a:	a325      	add	r3, pc, #148	; (adr r3, 8008530 <__kernel_sin+0x140>)
 800849c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a0:	f7f7 feaa 	bl	80001f8 <__aeabi_dsub>
 80084a4:	4642      	mov	r2, r8
 80084a6:	464b      	mov	r3, r9
 80084a8:	f7f8 f85e 	bl	8000568 <__aeabi_dmul>
 80084ac:	4602      	mov	r2, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	4620      	mov	r0, r4
 80084b2:	4629      	mov	r1, r5
 80084b4:	f7f7 fea2 	bl	80001fc <__adddf3>
 80084b8:	4604      	mov	r4, r0
 80084ba:	460d      	mov	r5, r1
 80084bc:	ec45 4b10 	vmov	d0, r4, r5
 80084c0:	b005      	add	sp, #20
 80084c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c6:	2200      	movs	r2, #0
 80084c8:	4b1b      	ldr	r3, [pc, #108]	; (8008538 <__kernel_sin+0x148>)
 80084ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084ce:	f7f8 f84b 	bl	8000568 <__aeabi_dmul>
 80084d2:	4632      	mov	r2, r6
 80084d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084d8:	463b      	mov	r3, r7
 80084da:	4640      	mov	r0, r8
 80084dc:	4649      	mov	r1, r9
 80084de:	f7f8 f843 	bl	8000568 <__aeabi_dmul>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ea:	f7f7 fe85 	bl	80001f8 <__aeabi_dsub>
 80084ee:	4652      	mov	r2, sl
 80084f0:	465b      	mov	r3, fp
 80084f2:	f7f8 f839 	bl	8000568 <__aeabi_dmul>
 80084f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084fa:	f7f7 fe7d 	bl	80001f8 <__aeabi_dsub>
 80084fe:	a30c      	add	r3, pc, #48	; (adr r3, 8008530 <__kernel_sin+0x140>)
 8008500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008504:	4606      	mov	r6, r0
 8008506:	460f      	mov	r7, r1
 8008508:	4640      	mov	r0, r8
 800850a:	4649      	mov	r1, r9
 800850c:	f7f8 f82c 	bl	8000568 <__aeabi_dmul>
 8008510:	4602      	mov	r2, r0
 8008512:	460b      	mov	r3, r1
 8008514:	4630      	mov	r0, r6
 8008516:	4639      	mov	r1, r7
 8008518:	f7f7 fe70 	bl	80001fc <__adddf3>
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	4620      	mov	r0, r4
 8008522:	4629      	mov	r1, r5
 8008524:	f7f7 fe68 	bl	80001f8 <__aeabi_dsub>
 8008528:	e7c6      	b.n	80084b8 <__kernel_sin+0xc8>
 800852a:	bf00      	nop
 800852c:	f3af 8000 	nop.w
 8008530:	55555549 	.word	0x55555549
 8008534:	3fc55555 	.word	0x3fc55555
 8008538:	3fe00000 	.word	0x3fe00000
 800853c:	5acfd57c 	.word	0x5acfd57c
 8008540:	3de5d93a 	.word	0x3de5d93a
 8008544:	8a2b9ceb 	.word	0x8a2b9ceb
 8008548:	3e5ae5e6 	.word	0x3e5ae5e6
 800854c:	57b1fe7d 	.word	0x57b1fe7d
 8008550:	3ec71de3 	.word	0x3ec71de3
 8008554:	19c161d5 	.word	0x19c161d5
 8008558:	3f2a01a0 	.word	0x3f2a01a0
 800855c:	1110f8a6 	.word	0x1110f8a6
 8008560:	3f811111 	.word	0x3f811111

08008564 <fabs>:
 8008564:	ec51 0b10 	vmov	r0, r1, d0
 8008568:	ee10 2a10 	vmov	r2, s0
 800856c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008570:	ec43 2b10 	vmov	d0, r2, r3
 8008574:	4770      	bx	lr
	...

08008578 <floor>:
 8008578:	ec51 0b10 	vmov	r0, r1, d0
 800857c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008580:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008584:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008588:	2e13      	cmp	r6, #19
 800858a:	460c      	mov	r4, r1
 800858c:	ee10 5a10 	vmov	r5, s0
 8008590:	4680      	mov	r8, r0
 8008592:	dc34      	bgt.n	80085fe <floor+0x86>
 8008594:	2e00      	cmp	r6, #0
 8008596:	da16      	bge.n	80085c6 <floor+0x4e>
 8008598:	a335      	add	r3, pc, #212	; (adr r3, 8008670 <floor+0xf8>)
 800859a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859e:	f7f7 fe2d 	bl	80001fc <__adddf3>
 80085a2:	2200      	movs	r2, #0
 80085a4:	2300      	movs	r3, #0
 80085a6:	f7f8 fa6f 	bl	8000a88 <__aeabi_dcmpgt>
 80085aa:	b148      	cbz	r0, 80085c0 <floor+0x48>
 80085ac:	2c00      	cmp	r4, #0
 80085ae:	da59      	bge.n	8008664 <floor+0xec>
 80085b0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80085b4:	4a30      	ldr	r2, [pc, #192]	; (8008678 <floor+0x100>)
 80085b6:	432b      	orrs	r3, r5
 80085b8:	2500      	movs	r5, #0
 80085ba:	42ab      	cmp	r3, r5
 80085bc:	bf18      	it	ne
 80085be:	4614      	movne	r4, r2
 80085c0:	4621      	mov	r1, r4
 80085c2:	4628      	mov	r0, r5
 80085c4:	e025      	b.n	8008612 <floor+0x9a>
 80085c6:	4f2d      	ldr	r7, [pc, #180]	; (800867c <floor+0x104>)
 80085c8:	4137      	asrs	r7, r6
 80085ca:	ea01 0307 	and.w	r3, r1, r7
 80085ce:	4303      	orrs	r3, r0
 80085d0:	d01f      	beq.n	8008612 <floor+0x9a>
 80085d2:	a327      	add	r3, pc, #156	; (adr r3, 8008670 <floor+0xf8>)
 80085d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d8:	f7f7 fe10 	bl	80001fc <__adddf3>
 80085dc:	2200      	movs	r2, #0
 80085de:	2300      	movs	r3, #0
 80085e0:	f7f8 fa52 	bl	8000a88 <__aeabi_dcmpgt>
 80085e4:	2800      	cmp	r0, #0
 80085e6:	d0eb      	beq.n	80085c0 <floor+0x48>
 80085e8:	2c00      	cmp	r4, #0
 80085ea:	bfbe      	ittt	lt
 80085ec:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80085f0:	fa43 f606 	asrlt.w	r6, r3, r6
 80085f4:	19a4      	addlt	r4, r4, r6
 80085f6:	ea24 0407 	bic.w	r4, r4, r7
 80085fa:	2500      	movs	r5, #0
 80085fc:	e7e0      	b.n	80085c0 <floor+0x48>
 80085fe:	2e33      	cmp	r6, #51	; 0x33
 8008600:	dd0b      	ble.n	800861a <floor+0xa2>
 8008602:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008606:	d104      	bne.n	8008612 <floor+0x9a>
 8008608:	ee10 2a10 	vmov	r2, s0
 800860c:	460b      	mov	r3, r1
 800860e:	f7f7 fdf5 	bl	80001fc <__adddf3>
 8008612:	ec41 0b10 	vmov	d0, r0, r1
 8008616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800861a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800861e:	f04f 33ff 	mov.w	r3, #4294967295
 8008622:	fa23 f707 	lsr.w	r7, r3, r7
 8008626:	4207      	tst	r7, r0
 8008628:	d0f3      	beq.n	8008612 <floor+0x9a>
 800862a:	a311      	add	r3, pc, #68	; (adr r3, 8008670 <floor+0xf8>)
 800862c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008630:	f7f7 fde4 	bl	80001fc <__adddf3>
 8008634:	2200      	movs	r2, #0
 8008636:	2300      	movs	r3, #0
 8008638:	f7f8 fa26 	bl	8000a88 <__aeabi_dcmpgt>
 800863c:	2800      	cmp	r0, #0
 800863e:	d0bf      	beq.n	80085c0 <floor+0x48>
 8008640:	2c00      	cmp	r4, #0
 8008642:	da02      	bge.n	800864a <floor+0xd2>
 8008644:	2e14      	cmp	r6, #20
 8008646:	d103      	bne.n	8008650 <floor+0xd8>
 8008648:	3401      	adds	r4, #1
 800864a:	ea25 0507 	bic.w	r5, r5, r7
 800864e:	e7b7      	b.n	80085c0 <floor+0x48>
 8008650:	2301      	movs	r3, #1
 8008652:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008656:	fa03 f606 	lsl.w	r6, r3, r6
 800865a:	4435      	add	r5, r6
 800865c:	4545      	cmp	r5, r8
 800865e:	bf38      	it	cc
 8008660:	18e4      	addcc	r4, r4, r3
 8008662:	e7f2      	b.n	800864a <floor+0xd2>
 8008664:	2500      	movs	r5, #0
 8008666:	462c      	mov	r4, r5
 8008668:	e7aa      	b.n	80085c0 <floor+0x48>
 800866a:	bf00      	nop
 800866c:	f3af 8000 	nop.w
 8008670:	8800759c 	.word	0x8800759c
 8008674:	7e37e43c 	.word	0x7e37e43c
 8008678:	bff00000 	.word	0xbff00000
 800867c:	000fffff 	.word	0x000fffff

08008680 <scalbn>:
 8008680:	b570      	push	{r4, r5, r6, lr}
 8008682:	ec55 4b10 	vmov	r4, r5, d0
 8008686:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800868a:	4606      	mov	r6, r0
 800868c:	462b      	mov	r3, r5
 800868e:	b9aa      	cbnz	r2, 80086bc <scalbn+0x3c>
 8008690:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008694:	4323      	orrs	r3, r4
 8008696:	d03b      	beq.n	8008710 <scalbn+0x90>
 8008698:	4b31      	ldr	r3, [pc, #196]	; (8008760 <scalbn+0xe0>)
 800869a:	4629      	mov	r1, r5
 800869c:	2200      	movs	r2, #0
 800869e:	ee10 0a10 	vmov	r0, s0
 80086a2:	f7f7 ff61 	bl	8000568 <__aeabi_dmul>
 80086a6:	4b2f      	ldr	r3, [pc, #188]	; (8008764 <scalbn+0xe4>)
 80086a8:	429e      	cmp	r6, r3
 80086aa:	4604      	mov	r4, r0
 80086ac:	460d      	mov	r5, r1
 80086ae:	da12      	bge.n	80086d6 <scalbn+0x56>
 80086b0:	a327      	add	r3, pc, #156	; (adr r3, 8008750 <scalbn+0xd0>)
 80086b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b6:	f7f7 ff57 	bl	8000568 <__aeabi_dmul>
 80086ba:	e009      	b.n	80086d0 <scalbn+0x50>
 80086bc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80086c0:	428a      	cmp	r2, r1
 80086c2:	d10c      	bne.n	80086de <scalbn+0x5e>
 80086c4:	ee10 2a10 	vmov	r2, s0
 80086c8:	4620      	mov	r0, r4
 80086ca:	4629      	mov	r1, r5
 80086cc:	f7f7 fd96 	bl	80001fc <__adddf3>
 80086d0:	4604      	mov	r4, r0
 80086d2:	460d      	mov	r5, r1
 80086d4:	e01c      	b.n	8008710 <scalbn+0x90>
 80086d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80086da:	460b      	mov	r3, r1
 80086dc:	3a36      	subs	r2, #54	; 0x36
 80086de:	4432      	add	r2, r6
 80086e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80086e4:	428a      	cmp	r2, r1
 80086e6:	dd0b      	ble.n	8008700 <scalbn+0x80>
 80086e8:	ec45 4b11 	vmov	d1, r4, r5
 80086ec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8008758 <scalbn+0xd8>
 80086f0:	f000 f83c 	bl	800876c <copysign>
 80086f4:	a318      	add	r3, pc, #96	; (adr r3, 8008758 <scalbn+0xd8>)
 80086f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fa:	ec51 0b10 	vmov	r0, r1, d0
 80086fe:	e7da      	b.n	80086b6 <scalbn+0x36>
 8008700:	2a00      	cmp	r2, #0
 8008702:	dd08      	ble.n	8008716 <scalbn+0x96>
 8008704:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008708:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800870c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008710:	ec45 4b10 	vmov	d0, r4, r5
 8008714:	bd70      	pop	{r4, r5, r6, pc}
 8008716:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800871a:	da0d      	bge.n	8008738 <scalbn+0xb8>
 800871c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008720:	429e      	cmp	r6, r3
 8008722:	ec45 4b11 	vmov	d1, r4, r5
 8008726:	dce1      	bgt.n	80086ec <scalbn+0x6c>
 8008728:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8008750 <scalbn+0xd0>
 800872c:	f000 f81e 	bl	800876c <copysign>
 8008730:	a307      	add	r3, pc, #28	; (adr r3, 8008750 <scalbn+0xd0>)
 8008732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008736:	e7e0      	b.n	80086fa <scalbn+0x7a>
 8008738:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800873c:	3236      	adds	r2, #54	; 0x36
 800873e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008742:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008746:	4620      	mov	r0, r4
 8008748:	4629      	mov	r1, r5
 800874a:	2200      	movs	r2, #0
 800874c:	4b06      	ldr	r3, [pc, #24]	; (8008768 <scalbn+0xe8>)
 800874e:	e7b2      	b.n	80086b6 <scalbn+0x36>
 8008750:	c2f8f359 	.word	0xc2f8f359
 8008754:	01a56e1f 	.word	0x01a56e1f
 8008758:	8800759c 	.word	0x8800759c
 800875c:	7e37e43c 	.word	0x7e37e43c
 8008760:	43500000 	.word	0x43500000
 8008764:	ffff3cb0 	.word	0xffff3cb0
 8008768:	3c900000 	.word	0x3c900000

0800876c <copysign>:
 800876c:	ec51 0b10 	vmov	r0, r1, d0
 8008770:	ee11 0a90 	vmov	r0, s3
 8008774:	ee10 2a10 	vmov	r2, s0
 8008778:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800877c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008780:	ea41 0300 	orr.w	r3, r1, r0
 8008784:	ec43 2b10 	vmov	d0, r2, r3
 8008788:	4770      	bx	lr
	...

0800878c <_init>:
 800878c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878e:	bf00      	nop
 8008790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008792:	bc08      	pop	{r3}
 8008794:	469e      	mov	lr, r3
 8008796:	4770      	bx	lr

08008798 <_fini>:
 8008798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879a:	bf00      	nop
 800879c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800879e:	bc08      	pop	{r3}
 80087a0:	469e      	mov	lr, r3
 80087a2:	4770      	bx	lr
