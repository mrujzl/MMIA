
cv_06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ce0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b0  08002da0  08002da0  00012da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003650  08003650  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003650  08003650  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003650  08003650  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003650  08003650  00013650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003654  08003654  00013654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08003664  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003664  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007269  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016db  00000000  00000000  0002729d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000740  00000000  00000000  00028978  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000680  00000000  00000000  000290b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000cfda  00000000  00000000  00029738  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000073fc  00000000  00000000  00036712  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00047a4c  00000000  00000000  0003db0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008555a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001850  00000000  00000000  000855d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d88 	.word	0x08002d88

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002d88 	.word	0x08002d88

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <OWInit>:
/******************************************************************
 * LOW LEVEL functions for 1-wire bus
 ******************************************************************/

void OWInit(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
    OWSetLink(1);
 80003f8:	2390      	movs	r3, #144	; 0x90
 80003fa:	05db      	lsls	r3, r3, #23
 80003fc:	2280      	movs	r2, #128	; 0x80
 80003fe:	00d2      	lsls	r2, r2, #3
 8000400:	619a      	str	r2, [r3, #24]
    OWInitHw();

    OWReset();
 8000402:	f000 f803 	bl	800040c <OWReset>
}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}

0800040c <OWReset>:

uint8_t OWReset(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000412:	b672      	cpsid	i
    uint8_t result;

    DELAY_G;
    __disable_irq();
    OWSetLink(0);
 8000414:	2390      	movs	r3, #144	; 0x90
 8000416:	05db      	lsls	r3, r3, #23
 8000418:	2280      	movs	r2, #128	; 0x80
 800041a:	00d2      	lsls	r2, r2, #3
 800041c:	629a      	str	r2, [r3, #40]	; 0x28
 800041e:	23ff      	movs	r3, #255	; 0xff
 8000420:	005b      	lsls	r3, r3, #1
 8000422:	603b      	str	r3, [r7, #0]

/* Dumb delay for F030. Tuned for default clock configuration, i.e. 48MHz with 1 wait state. */
__attribute__((always_inline))
inline static void _delay_us(volatile uint32_t micros)
{
    micros = (micros * 19) / 4; /* Go to clock cycles */
 8000424:	683a      	ldr	r2, [r7, #0]
 8000426:	0013      	movs	r3, r2
 8000428:	00db      	lsls	r3, r3, #3
 800042a:	189b      	adds	r3, r3, r2
 800042c:	005b      	lsls	r3, r3, #1
 800042e:	189b      	adds	r3, r3, r2
 8000430:	089b      	lsrs	r3, r3, #2
 8000432:	603b      	str	r3, [r7, #0]
    while (micros--); /* Wait till done */
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	1e5a      	subs	r2, r3, #1
 8000438:	603a      	str	r2, [r7, #0]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d1fa      	bne.n	8000434 <OWReset+0x28>
    DELAY_H;
    OWSetLink(1);
 800043e:	2390      	movs	r3, #144	; 0x90
 8000440:	05db      	lsls	r3, r3, #23
 8000442:	2280      	movs	r2, #128	; 0x80
 8000444:	00d2      	lsls	r2, r2, #3
 8000446:	619a      	str	r2, [r3, #24]
 8000448:	2346      	movs	r3, #70	; 0x46
 800044a:	60bb      	str	r3, [r7, #8]
    micros = (micros * 19) / 4; /* Go to clock cycles */
 800044c:	68ba      	ldr	r2, [r7, #8]
 800044e:	0013      	movs	r3, r2
 8000450:	00db      	lsls	r3, r3, #3
 8000452:	189b      	adds	r3, r3, r2
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	189b      	adds	r3, r3, r2
 8000458:	089b      	lsrs	r3, r3, #2
 800045a:	60bb      	str	r3, [r7, #8]
    while (micros--); /* Wait till done */
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	1e5a      	subs	r2, r3, #1
 8000460:	60ba      	str	r2, [r7, #8]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d1fa      	bne.n	800045c <OWReset+0x50>
    DELAY_I;
    result = OWGetLink();
 8000466:	2390      	movs	r3, #144	; 0x90
 8000468:	05db      	lsls	r3, r3, #23
 800046a:	691a      	ldr	r2, [r3, #16]
 800046c:	2380      	movs	r3, #128	; 0x80
 800046e:	00db      	lsls	r3, r3, #3
 8000470:	4013      	ands	r3, r2
 8000472:	1e5a      	subs	r2, r3, #1
 8000474:	4193      	sbcs	r3, r2
 8000476:	b2da      	uxtb	r2, r3
 8000478:	230f      	movs	r3, #15
 800047a:	18fb      	adds	r3, r7, r3
 800047c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800047e:	b662      	cpsie	i
 8000480:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <OWReset+0xa0>)
 8000482:	607b      	str	r3, [r7, #4]
    micros = (micros * 19) / 4; /* Go to clock cycles */
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	0013      	movs	r3, r2
 8000488:	00db      	lsls	r3, r3, #3
 800048a:	189b      	adds	r3, r3, r2
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	189b      	adds	r3, r3, r2
 8000490:	089b      	lsrs	r3, r3, #2
 8000492:	607b      	str	r3, [r7, #4]
    while (micros--); /* Wait till done */
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	1e5a      	subs	r2, r3, #1
 8000498:	607a      	str	r2, [r7, #4]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d1fa      	bne.n	8000494 <OWReset+0x88>
    __enable_irq();
    DELAY_J;
    return result;
 800049e:	230f      	movs	r3, #15
 80004a0:	18fb      	adds	r3, r7, r3
 80004a2:	781b      	ldrb	r3, [r3, #0]
}
 80004a4:	0018      	movs	r0, r3
 80004a6:	46bd      	mov	sp, r7
 80004a8:	b004      	add	sp, #16
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	00000d0c 	.word	0x00000d0c

080004b0 <OWWriteBit>:

void OWWriteBit(uint8_t bit)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	0002      	movs	r2, r0
 80004b8:	1dfb      	adds	r3, r7, #7
 80004ba:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80004bc:	b672      	cpsid	i
    __disable_irq();
    if (bit) {
 80004be:	1dfb      	adds	r3, r7, #7
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d028      	beq.n	8000518 <OWWriteBit+0x68>
        OWSetLink(0);
 80004c6:	2390      	movs	r3, #144	; 0x90
 80004c8:	05db      	lsls	r3, r3, #23
 80004ca:	2280      	movs	r2, #128	; 0x80
 80004cc:	00d2      	lsls	r2, r2, #3
 80004ce:	629a      	str	r2, [r3, #40]	; 0x28
 80004d0:	2304      	movs	r3, #4
 80004d2:	60bb      	str	r3, [r7, #8]
    micros = (micros * 19) / 4; /* Go to clock cycles */
 80004d4:	68ba      	ldr	r2, [r7, #8]
 80004d6:	0013      	movs	r3, r2
 80004d8:	00db      	lsls	r3, r3, #3
 80004da:	189b      	adds	r3, r3, r2
 80004dc:	005b      	lsls	r3, r3, #1
 80004de:	189b      	adds	r3, r3, r2
 80004e0:	089b      	lsrs	r3, r3, #2
 80004e2:	60bb      	str	r3, [r7, #8]
    while (micros--); /* Wait till done */
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	1e5a      	subs	r2, r3, #1
 80004e8:	60ba      	str	r2, [r7, #8]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d1fa      	bne.n	80004e4 <OWWriteBit+0x34>
        DELAY_A;
        OWSetLink(1);
 80004ee:	2390      	movs	r3, #144	; 0x90
 80004f0:	05db      	lsls	r3, r3, #23
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	00d2      	lsls	r2, r2, #3
 80004f6:	619a      	str	r2, [r3, #24]
 80004f8:	2342      	movs	r3, #66	; 0x42
 80004fa:	60fb      	str	r3, [r7, #12]
    micros = (micros * 19) / 4; /* Go to clock cycles */
 80004fc:	68fa      	ldr	r2, [r7, #12]
 80004fe:	0013      	movs	r3, r2
 8000500:	00db      	lsls	r3, r3, #3
 8000502:	189b      	adds	r3, r3, r2
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	189b      	adds	r3, r3, r2
 8000508:	089b      	lsrs	r3, r3, #2
 800050a:	60fb      	str	r3, [r7, #12]
    while (micros--); /* Wait till done */
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	1e5a      	subs	r2, r3, #1
 8000510:	60fa      	str	r2, [r7, #12]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d1fa      	bne.n	800050c <OWWriteBit+0x5c>
 8000516:	e027      	b.n	8000568 <OWWriteBit+0xb8>
        DELAY_B;
    } else {
        OWSetLink(0);
 8000518:	2390      	movs	r3, #144	; 0x90
 800051a:	05db      	lsls	r3, r3, #23
 800051c:	2280      	movs	r2, #128	; 0x80
 800051e:	00d2      	lsls	r2, r2, #3
 8000520:	629a      	str	r2, [r3, #40]	; 0x28
 8000522:	2341      	movs	r3, #65	; 0x41
 8000524:	613b      	str	r3, [r7, #16]
    micros = (micros * 19) / 4; /* Go to clock cycles */
 8000526:	693a      	ldr	r2, [r7, #16]
 8000528:	0013      	movs	r3, r2
 800052a:	00db      	lsls	r3, r3, #3
 800052c:	189b      	adds	r3, r3, r2
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	189b      	adds	r3, r3, r2
 8000532:	089b      	lsrs	r3, r3, #2
 8000534:	613b      	str	r3, [r7, #16]
    while (micros--); /* Wait till done */
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	1e5a      	subs	r2, r3, #1
 800053a:	613a      	str	r2, [r7, #16]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d1fa      	bne.n	8000536 <OWWriteBit+0x86>
        DELAY_C;
        OWSetLink(1);
 8000540:	2390      	movs	r3, #144	; 0x90
 8000542:	05db      	lsls	r3, r3, #23
 8000544:	2280      	movs	r2, #128	; 0x80
 8000546:	00d2      	lsls	r2, r2, #3
 8000548:	619a      	str	r2, [r3, #24]
 800054a:	2305      	movs	r3, #5
 800054c:	617b      	str	r3, [r7, #20]
    micros = (micros * 19) / 4; /* Go to clock cycles */
 800054e:	697a      	ldr	r2, [r7, #20]
 8000550:	0013      	movs	r3, r2
 8000552:	00db      	lsls	r3, r3, #3
 8000554:	189b      	adds	r3, r3, r2
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	189b      	adds	r3, r3, r2
 800055a:	089b      	lsrs	r3, r3, #2
 800055c:	617b      	str	r3, [r7, #20]
    while (micros--); /* Wait till done */
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	1e5a      	subs	r2, r3, #1
 8000562:	617a      	str	r2, [r7, #20]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d1fa      	bne.n	800055e <OWWriteBit+0xae>
  __ASM volatile ("cpsie i" : : : "memory");
 8000568:	b662      	cpsie	i
        DELAY_D;
    }
    __enable_irq();
}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b006      	add	sp, #24
 8000570:	bd80      	pop	{r7, pc}

08000572 <OWReadBit>:

uint8_t OWReadBit(void)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	b084      	sub	sp, #16
 8000576:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000578:	b672      	cpsid	i
    uint8_t result;

    __disable_irq();
    OWSetLink(0);
 800057a:	2390      	movs	r3, #144	; 0x90
 800057c:	05db      	lsls	r3, r3, #23
 800057e:	2280      	movs	r2, #128	; 0x80
 8000580:	00d2      	lsls	r2, r2, #3
 8000582:	629a      	str	r2, [r3, #40]	; 0x28
 8000584:	2304      	movs	r3, #4
 8000586:	603b      	str	r3, [r7, #0]
    micros = (micros * 19) / 4; /* Go to clock cycles */
 8000588:	683a      	ldr	r2, [r7, #0]
 800058a:	0013      	movs	r3, r2
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	189b      	adds	r3, r3, r2
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	189b      	adds	r3, r3, r2
 8000594:	089b      	lsrs	r3, r3, #2
 8000596:	603b      	str	r3, [r7, #0]
    while (micros--); /* Wait till done */
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	1e5a      	subs	r2, r3, #1
 800059c:	603a      	str	r2, [r7, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1fa      	bne.n	8000598 <OWReadBit+0x26>
    DELAY_A;
    OWSetLink(1);
 80005a2:	2390      	movs	r3, #144	; 0x90
 80005a4:	05db      	lsls	r3, r3, #23
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	00d2      	lsls	r2, r2, #3
 80005aa:	619a      	str	r2, [r3, #24]
 80005ac:	2309      	movs	r3, #9
 80005ae:	60bb      	str	r3, [r7, #8]
    micros = (micros * 19) / 4; /* Go to clock cycles */
 80005b0:	68ba      	ldr	r2, [r7, #8]
 80005b2:	0013      	movs	r3, r2
 80005b4:	00db      	lsls	r3, r3, #3
 80005b6:	189b      	adds	r3, r3, r2
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	189b      	adds	r3, r3, r2
 80005bc:	089b      	lsrs	r3, r3, #2
 80005be:	60bb      	str	r3, [r7, #8]
    while (micros--); /* Wait till done */
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	1e5a      	subs	r2, r3, #1
 80005c4:	60ba      	str	r2, [r7, #8]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1fa      	bne.n	80005c0 <OWReadBit+0x4e>
    DELAY_E;
    result = OWGetLink();
 80005ca:	2390      	movs	r3, #144	; 0x90
 80005cc:	05db      	lsls	r3, r3, #23
 80005ce:	691a      	ldr	r2, [r3, #16]
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	00db      	lsls	r3, r3, #3
 80005d4:	4013      	ands	r3, r2
 80005d6:	1e5a      	subs	r2, r3, #1
 80005d8:	4193      	sbcs	r3, r2
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	230f      	movs	r3, #15
 80005de:	18fb      	adds	r3, r7, r3
 80005e0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80005e2:	b662      	cpsie	i
 80005e4:	2337      	movs	r3, #55	; 0x37
 80005e6:	607b      	str	r3, [r7, #4]
    micros = (micros * 19) / 4; /* Go to clock cycles */
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	0013      	movs	r3, r2
 80005ec:	00db      	lsls	r3, r3, #3
 80005ee:	189b      	adds	r3, r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	189b      	adds	r3, r3, r2
 80005f4:	089b      	lsrs	r3, r3, #2
 80005f6:	607b      	str	r3, [r7, #4]
    while (micros--); /* Wait till done */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	1e5a      	subs	r2, r3, #1
 80005fc:	607a      	str	r2, [r7, #4]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1fa      	bne.n	80005f8 <OWReadBit+0x86>
    __enable_irq();
    DELAY_F;
    return result;
 8000602:	230f      	movs	r3, #15
 8000604:	18fb      	adds	r3, r7, r3
 8000606:	781b      	ldrb	r3, [r3, #0]
}
 8000608:	0018      	movs	r0, r3
 800060a:	46bd      	mov	sp, r7
 800060c:	b004      	add	sp, #16
 800060e:	bd80      	pop	{r7, pc}

08000610 <OWWriteByte>:

void OWWriteByte(uint8_t data)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	0002      	movs	r2, r0
 8000618:	1dfb      	adds	r3, r7, #7
 800061a:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 800061c:	230f      	movs	r3, #15
 800061e:	18fb      	adds	r3, r7, r3
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
 8000624:	e012      	b.n	800064c <OWWriteByte+0x3c>
        OWWriteBit(data & 0x01);
 8000626:	1dfb      	adds	r3, r7, #7
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2201      	movs	r2, #1
 800062c:	4013      	ands	r3, r2
 800062e:	b2db      	uxtb	r3, r3
 8000630:	0018      	movs	r0, r3
 8000632:	f7ff ff3d 	bl	80004b0 <OWWriteBit>
        data >>= 1;
 8000636:	1dfb      	adds	r3, r7, #7
 8000638:	1dfa      	adds	r2, r7, #7
 800063a:	7812      	ldrb	r2, [r2, #0]
 800063c:	0852      	lsrs	r2, r2, #1
 800063e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 8; i++) {
 8000640:	210f      	movs	r1, #15
 8000642:	187b      	adds	r3, r7, r1
 8000644:	781a      	ldrb	r2, [r3, #0]
 8000646:	187b      	adds	r3, r7, r1
 8000648:	3201      	adds	r2, #1
 800064a:	701a      	strb	r2, [r3, #0]
 800064c:	230f      	movs	r3, #15
 800064e:	18fb      	adds	r3, r7, r3
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b07      	cmp	r3, #7
 8000654:	d9e7      	bls.n	8000626 <OWWriteByte+0x16>
    }
}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b004      	add	sp, #16
 800065c:	bd80      	pop	{r7, pc}

0800065e <OWReadByte>:

uint8_t OWReadByte(void)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b082      	sub	sp, #8
 8000662:	af00      	add	r7, sp, #0
    int i, result = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	603b      	str	r3, [r7, #0]

    for (i = 0; i < 8; i++) {
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	e00d      	b.n	800068a <OWReadByte+0x2c>
        result >>= 1;
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	105b      	asrs	r3, r3, #1
 8000672:	603b      	str	r3, [r7, #0]
        if (OWReadBit())
 8000674:	f7ff ff7d 	bl	8000572 <OWReadBit>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d003      	beq.n	8000684 <OWReadByte+0x26>
            result |= 0x80;
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	2280      	movs	r2, #128	; 0x80
 8000680:	4313      	orrs	r3, r2
 8000682:	603b      	str	r3, [r7, #0]
    for (i = 0; i < 8; i++) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	3301      	adds	r3, #1
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b07      	cmp	r3, #7
 800068e:	ddee      	ble.n	800066e <OWReadByte+0x10>
    }
    return result;
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	b2db      	uxtb	r3, r3
}
 8000694:	0018      	movs	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	b002      	add	sp, #8
 800069a:	bd80      	pop	{r7, pc}

0800069c <OWSendCmd>:

void OWSendCmd(uint8_t *ROM, uint8_t cmd)
{
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	000a      	movs	r2, r1
 80006a6:	1cfb      	adds	r3, r7, #3
 80006a8:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    OWReset();
 80006aa:	f7ff feaf 	bl	800040c <OWReset>
    if (ROM == NULL) {
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d103      	bne.n	80006bc <OWSendCmd+0x20>
        OWWriteByte(OW_SKIP_ROM_CMD);
 80006b4:	20cc      	movs	r0, #204	; 0xcc
 80006b6:	f7ff ffab 	bl	8000610 <OWWriteByte>
 80006ba:	e01a      	b.n	80006f2 <OWSendCmd+0x56>
    } else {
        OWWriteByte(OW_MATCH_ROM_CMD);
 80006bc:	2055      	movs	r0, #85	; 0x55
 80006be:	f7ff ffa7 	bl	8000610 <OWWriteByte>
        for (i = 0; i < 8; i++)
 80006c2:	230f      	movs	r3, #15
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
 80006ca:	e00d      	b.n	80006e8 <OWSendCmd+0x4c>
            OWWriteByte(ROM[i]);
 80006cc:	240f      	movs	r4, #15
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	18d3      	adds	r3, r2, r3
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	0018      	movs	r0, r3
 80006da:	f7ff ff99 	bl	8000610 <OWWriteByte>
        for (i = 0; i < 8; i++)
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	781a      	ldrb	r2, [r3, #0]
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	3201      	adds	r2, #1
 80006e6:	701a      	strb	r2, [r3, #0]
 80006e8:	230f      	movs	r3, #15
 80006ea:	18fb      	adds	r3, r7, r3
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b07      	cmp	r3, #7
 80006f0:	d9ec      	bls.n	80006cc <OWSendCmd+0x30>
    }
    OWWriteByte(cmd);
 80006f2:	1cfb      	adds	r3, r7, #3
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	0018      	movs	r0, r3
 80006f8:	f7ff ff8a 	bl	8000610 <OWWriteByte>
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b005      	add	sp, #20
 8000702:	bd90      	pop	{r4, r7, pc}

08000704 <OWCRC>:

void OWCRC(uint8_t x, uint8_t *crc)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	0002      	movs	r2, r0
 800070c:	6039      	str	r1, [r7, #0]
 800070e:	1dfb      	adds	r3, r7, #7
 8000710:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 8; i; i--) {
 8000712:	230f      	movs	r3, #15
 8000714:	18fb      	adds	r3, r7, r3
 8000716:	2208      	movs	r2, #8
 8000718:	701a      	strb	r2, [r3, #0]
 800071a:	e027      	b.n	800076c <OWCRC+0x68>
        uint8_t mix = (*crc ^ x) & 0x01;
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	781a      	ldrb	r2, [r3, #0]
 8000720:	1dfb      	adds	r3, r7, #7
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4053      	eors	r3, r2
 8000726:	b2da      	uxtb	r2, r3
 8000728:	200e      	movs	r0, #14
 800072a:	183b      	adds	r3, r7, r0
 800072c:	2101      	movs	r1, #1
 800072e:	400a      	ands	r2, r1
 8000730:	701a      	strb	r2, [r3, #0]
        *crc >>= 1;
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	085b      	lsrs	r3, r3, #1
 8000738:	b2da      	uxtb	r2, r3
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	701a      	strb	r2, [r3, #0]
        if (mix) {
 800073e:	183b      	adds	r3, r7, r0
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d007      	beq.n	8000756 <OWCRC+0x52>
            *crc ^= 0x8C;
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2274      	movs	r2, #116	; 0x74
 800074c:	4252      	negs	r2, r2
 800074e:	4053      	eors	r3, r2
 8000750:	b2da      	uxtb	r2, r3
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	701a      	strb	r2, [r3, #0]
        }
        x >>= 1;
 8000756:	1dfb      	adds	r3, r7, #7
 8000758:	1dfa      	adds	r2, r7, #7
 800075a:	7812      	ldrb	r2, [r2, #0]
 800075c:	0852      	lsrs	r2, r2, #1
 800075e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 8; i; i--) {
 8000760:	210f      	movs	r1, #15
 8000762:	187b      	adds	r3, r7, r1
 8000764:	781a      	ldrb	r2, [r3, #0]
 8000766:	187b      	adds	r3, r7, r1
 8000768:	3a01      	subs	r2, #1
 800076a:	701a      	strb	r2, [r3, #0]
 800076c:	230f      	movs	r3, #15
 800076e:	18fb      	adds	r3, r7, r3
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d1d2      	bne.n	800071c <OWCRC+0x18>
    }
}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	b004      	add	sp, #16
 800077c:	bd80      	pop	{r7, pc}

0800077e <OWConvertAll>:

    return 1;
}

void OWConvertAll(void)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	af00      	add	r7, sp, #0
    OWSendCmd(NULL, OW_CONVERT_T_CMD);
 8000782:	2144      	movs	r1, #68	; 0x44
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff ff89 	bl	800069c <OWSendCmd>
}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <OWReadTemperature>:

uint8_t OWReadTemperature(int16_t *result)
{
 8000790:	b5b0      	push	{r4, r5, r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
    uint8_t i, crc = 0, buf[8];
 8000798:	2316      	movs	r3, #22
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]

    OWSendCmd(NULL, OW_RD_SCR_CMD);
 80007a0:	21be      	movs	r1, #190	; 0xbe
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff ff7a 	bl	800069c <OWSendCmd>
    for (i = 0; i < 8; i++) {
 80007a8:	2317      	movs	r3, #23
 80007aa:	18fb      	adds	r3, r7, r3
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
 80007b0:	e01a      	b.n	80007e8 <OWReadTemperature+0x58>
        buf[i] = OWReadByte();
 80007b2:	2417      	movs	r4, #23
 80007b4:	0025      	movs	r5, r4
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	781c      	ldrb	r4, [r3, #0]
 80007ba:	f7ff ff50 	bl	800065e <OWReadByte>
 80007be:	0003      	movs	r3, r0
 80007c0:	001a      	movs	r2, r3
 80007c2:	210c      	movs	r1, #12
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	551a      	strb	r2, [r3, r4]
        OWCRC(buf[i], &crc);
 80007c8:	002c      	movs	r4, r5
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	187a      	adds	r2, r7, r1
 80007d0:	5cd3      	ldrb	r3, [r2, r3]
 80007d2:	2216      	movs	r2, #22
 80007d4:	18ba      	adds	r2, r7, r2
 80007d6:	0011      	movs	r1, r2
 80007d8:	0018      	movs	r0, r3
 80007da:	f7ff ff93 	bl	8000704 <OWCRC>
    for (i = 0; i < 8; i++) {
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	3201      	adds	r2, #1
 80007e6:	701a      	strb	r2, [r3, #0]
 80007e8:	2317      	movs	r3, #23
 80007ea:	18fb      	adds	r3, r7, r3
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b07      	cmp	r3, #7
 80007f0:	d9df      	bls.n	80007b2 <OWReadTemperature+0x22>
    }
    if (crc != OWReadByte()) {
 80007f2:	f7ff ff34 	bl	800065e <OWReadByte>
 80007f6:	0003      	movs	r3, r0
 80007f8:	001a      	movs	r2, r3
 80007fa:	2316      	movs	r3, #22
 80007fc:	18fb      	adds	r3, r7, r3
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	429a      	cmp	r2, r3
 8000802:	d004      	beq.n	800080e <OWReadTemperature+0x7e>
        *result = OW_ERR_BADCRC;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a15      	ldr	r2, [pc, #84]	; (800085c <OWReadTemperature+0xcc>)
 8000808:	801a      	strh	r2, [r3, #0]
        return 0;
 800080a:	2300      	movs	r3, #0
 800080c:	e021      	b.n	8000852 <OWReadTemperature+0xc2>
    }

    *result = (int8_t)((buf[1] << 4) | (buf[0] >> 4)) * 100 + (buf[0] & 0x0F) * 100 / 16;
 800080e:	210c      	movs	r1, #12
 8000810:	187b      	adds	r3, r7, r1
 8000812:	785b      	ldrb	r3, [r3, #1]
 8000814:	011b      	lsls	r3, r3, #4
 8000816:	b25a      	sxtb	r2, r3
 8000818:	187b      	adds	r3, r7, r1
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	091b      	lsrs	r3, r3, #4
 800081e:	b2db      	uxtb	r3, r3
 8000820:	b25b      	sxtb	r3, r3
 8000822:	4313      	orrs	r3, r2
 8000824:	b25b      	sxtb	r3, r3
 8000826:	b29b      	uxth	r3, r3
 8000828:	2264      	movs	r2, #100	; 0x64
 800082a:	4353      	muls	r3, r2
 800082c:	b29a      	uxth	r2, r3
 800082e:	187b      	adds	r3, r7, r1
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	0019      	movs	r1, r3
 8000834:	230f      	movs	r3, #15
 8000836:	400b      	ands	r3, r1
 8000838:	2164      	movs	r1, #100	; 0x64
 800083a:	434b      	muls	r3, r1
 800083c:	2b00      	cmp	r3, #0
 800083e:	da00      	bge.n	8000842 <OWReadTemperature+0xb2>
 8000840:	330f      	adds	r3, #15
 8000842:	111b      	asrs	r3, r3, #4
 8000844:	b29b      	uxth	r3, r3
 8000846:	18d3      	adds	r3, r2, r3
 8000848:	b29b      	uxth	r3, r3
 800084a:	b21a      	sxth	r2, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	801a      	strh	r2, [r3, #0]

    return 1;
 8000850:	2301      	movs	r3, #1
}
 8000852:	0018      	movs	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	b006      	add	sp, #24
 8000858:	bdb0      	pop	{r4, r5, r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	ffff8000 	.word	0xffff8000

08000860 <buttons>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void buttons(void)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
	static uint32_t debounce;

	if(uwTick > debounce + BUTTON_DEBOUNCE)  // 40 ms sampling
 8000866:	4b33      	ldr	r3, [pc, #204]	; (8000934 <buttons+0xd4>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	3328      	adds	r3, #40	; 0x28
 800086c:	001a      	movs	r2, r3
 800086e:	4b32      	ldr	r3, [pc, #200]	; (8000938 <buttons+0xd8>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	429a      	cmp	r2, r3
 8000874:	d259      	bcs.n	800092a <buttons+0xca>
	{
		static uint8_t old_s1 = 0;
		uint8_t new_s1 = HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin);
 8000876:	1dfc      	adds	r4, r7, #7
 8000878:	4b30      	ldr	r3, [pc, #192]	; (800093c <buttons+0xdc>)
 800087a:	2102      	movs	r1, #2
 800087c:	0018      	movs	r0, r3
 800087e:	f001 fa5d 	bl	8001d3c <HAL_GPIO_ReadPin>
 8000882:	0003      	movs	r3, r0
 8000884:	7023      	strb	r3, [r4, #0]
		static uint8_t old_s2 = 0;
		uint8_t new_s2 = HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin);
 8000886:	1dbc      	adds	r4, r7, #6
 8000888:	4b2c      	ldr	r3, [pc, #176]	; (800093c <buttons+0xdc>)
 800088a:	2101      	movs	r1, #1
 800088c:	0018      	movs	r0, r3
 800088e:	f001 fa55 	bl	8001d3c <HAL_GPIO_ReadPin>
 8000892:	0003      	movs	r3, r0
 8000894:	7023      	strb	r3, [r4, #0]

		if(new_s1 != old_s1)
 8000896:	4b2a      	ldr	r3, [pc, #168]	; (8000940 <buttons+0xe0>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	1dfa      	adds	r2, r7, #7
 800089c:	7812      	ldrb	r2, [r2, #0]
 800089e:	429a      	cmp	r2, r3
 80008a0:	d01b      	beq.n	80008da <buttons+0x7a>
		{
			state = NTC;
 80008a2:	4b28      	ldr	r3, [pc, #160]	; (8000944 <buttons+0xe4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
			sct_value(ntc_lookup[HAL_ADC_GetValue(&hadc)]); // Display NTC value
 80008a8:	4b27      	ldr	r3, [pc, #156]	; (8000948 <buttons+0xe8>)
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 fe06 	bl	80014bc <HAL_ADC_GetValue>
 80008b0:	0002      	movs	r2, r0
 80008b2:	4b26      	ldr	r3, [pc, #152]	; (800094c <buttons+0xec>)
 80008b4:	0052      	lsls	r2, r2, #1
 80008b6:	5ed3      	ldrsh	r3, [r2, r3]
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 fa98 	bl	8000df0 <sct_value>
			HAL_Delay(CONVERT_T_DELAY);
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <buttons+0xf0>)
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 fc44 	bl	8001150 <HAL_Delay>

			new_s1 = old_s1;
 80008c8:	1dfb      	adds	r3, r7, #7
 80008ca:	4a1d      	ldr	r2, [pc, #116]	; (8000940 <buttons+0xe0>)
 80008cc:	7812      	ldrb	r2, [r2, #0]
 80008ce:	701a      	strb	r2, [r3, #0]
			debounce = uwTick;
 80008d0:	4b19      	ldr	r3, [pc, #100]	; (8000938 <buttons+0xd8>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <buttons+0xd4>)
 80008d6:	601a      	str	r2, [r3, #0]
			debounce = uwTick;
		}

	}

}
 80008d8:	e027      	b.n	800092a <buttons+0xca>
		else if(new_s2 != old_s2)
 80008da:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <buttons+0xf4>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	1dba      	adds	r2, r7, #6
 80008e0:	7812      	ldrb	r2, [r2, #0]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d021      	beq.n	800092a <buttons+0xca>
			state = TEMP18B20;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <buttons+0xe4>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	701a      	strb	r2, [r3, #0]
			OWConvertAll();
 80008ec:	f7ff ff47 	bl	800077e <OWConvertAll>
		    OWReadTemperature(&temp_ds18b20);		// Read from DS18B20
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <buttons+0xf8>)
 80008f2:	0018      	movs	r0, r3
 80008f4:	f7ff ff4c 	bl	8000790 <OWReadTemperature>
			sct_value(temp_ds18b20 / 10);			// Display the value
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <buttons+0xf8>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	5e9b      	ldrsh	r3, [r3, r2]
 80008fe:	210a      	movs	r1, #10
 8000900:	0018      	movs	r0, r3
 8000902:	f7ff fc8b 	bl	800021c <__divsi3>
 8000906:	0003      	movs	r3, r0
 8000908:	b21b      	sxth	r3, r3
 800090a:	b29b      	uxth	r3, r3
 800090c:	0018      	movs	r0, r3
 800090e:	f000 fa6f 	bl	8000df0 <sct_value>
			HAL_Delay(CONVERT_T_DELAY);
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <buttons+0xf0>)
 8000914:	0018      	movs	r0, r3
 8000916:	f000 fc1b 	bl	8001150 <HAL_Delay>
			new_s2 = old_s2;
 800091a:	1dbb      	adds	r3, r7, #6
 800091c:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <buttons+0xf4>)
 800091e:	7812      	ldrb	r2, [r2, #0]
 8000920:	701a      	strb	r2, [r3, #0]
			debounce = uwTick;
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <buttons+0xd8>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	4b03      	ldr	r3, [pc, #12]	; (8000934 <buttons+0xd4>)
 8000928:	601a      	str	r2, [r3, #0]
}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b003      	add	sp, #12
 8000930:	bd90      	pop	{r4, r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	2000002c 	.word	0x2000002c
 8000938:	200000f4 	.word	0x200000f4
 800093c:	48000800 	.word	0x48000800
 8000940:	20000030 	.word	0x20000030
 8000944:	20000028 	.word	0x20000028
 8000948:	200000b4 	.word	0x200000b4
 800094c:	08002dc0 	.word	0x08002dc0
 8000950:	000002ee 	.word	0x000002ee
 8000954:	20000031 	.word	0x20000031
 8000958:	2000002a 	.word	0x2000002a

0800095c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  HAL_SYSTICK_Config(8000); // period 1 ms
 8000960:	23fa      	movs	r3, #250	; 0xfa
 8000962:	015b      	lsls	r3, r3, #5
 8000964:	0018      	movs	r0, r3
 8000966:	f001 f86c 	bl	8001a42 <HAL_SYSTICK_Config>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096a:	f000 fb8d 	bl	8001088 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096e:	f000 f84b 	bl	8000a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000972:	f000 f923 	bl	8000bbc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000976:	f000 f8f1 	bl	8000b5c <MX_USART2_UART_Init>
  MX_ADC_Init();
 800097a:	f000 f895 	bl	8000aa8 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  sct_init();		// Init the 7-seg display
 800097e:	f000 fa25 	bl	8000dcc <sct_init>

  OWInit();			// Init 1-wire communication with sensor DS18B20
 8000982:	f7ff fd37 	bl	80003f4 <OWInit>

  HAL_ADCEx_Calibration_Start(&hadc);		// ADC init and start
 8000986:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <main+0x98>)
 8000988:	0018      	movs	r0, r3
 800098a:	f000 ff15 	bl	80017b8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc);
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <main+0x98>)
 8000990:	0018      	movs	r0, r3
 8000992:	f000 fd3f 	bl	8001414 <HAL_ADC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  buttons();
 8000996:	f7ff ff63 	bl	8000860 <buttons>

	  if (state == NTC)
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <main+0x9c>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d10c      	bne.n	80009bc <main+0x60>
	  {
		  sct_value(ntc_lookup[HAL_ADC_GetValue(&hadc)]); // Display NTC value
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <main+0x98>)
 80009a4:	0018      	movs	r0, r3
 80009a6:	f000 fd89 	bl	80014bc <HAL_ADC_GetValue>
 80009aa:	0002      	movs	r2, r0
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <main+0xa0>)
 80009ae:	0052      	lsls	r2, r2, #1
 80009b0:	5ed3      	ldrsh	r3, [r2, r3]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	0018      	movs	r0, r3
 80009b6:	f000 fa1b 	bl	8000df0 <sct_value>
 80009ba:	e016      	b.n	80009ea <main+0x8e>
	  }
	  else if (state == TEMP18B20)
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <main+0x9c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d112      	bne.n	80009ea <main+0x8e>
	  {
		  OWConvertAll();
 80009c4:	f7ff fedb 	bl	800077e <OWConvertAll>

		  OWReadTemperature(&temp_ds18b20);		// Read from DS18B20
 80009c8:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <main+0xa4>)
 80009ca:	0018      	movs	r0, r3
 80009cc:	f7ff fee0 	bl	8000790 <OWReadTemperature>

		  sct_value(temp_ds18b20 / 10);			// Display the value
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <main+0xa4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	5e9b      	ldrsh	r3, [r3, r2]
 80009d6:	210a      	movs	r1, #10
 80009d8:	0018      	movs	r0, r3
 80009da:	f7ff fc1f 	bl	800021c <__divsi3>
 80009de:	0003      	movs	r3, r0
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	0018      	movs	r0, r3
 80009e6:	f000 fa03 	bl	8000df0 <sct_value>
	  }

	  HAL_Delay(CONVERT_T_DELAY);
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <main+0xa8>)
 80009ec:	0018      	movs	r0, r3
 80009ee:	f000 fbaf 	bl	8001150 <HAL_Delay>
	  buttons();
 80009f2:	e7d0      	b.n	8000996 <main+0x3a>
 80009f4:	200000b4 	.word	0x200000b4
 80009f8:	20000028 	.word	0x20000028
 80009fc:	08002dc0 	.word	0x08002dc0
 8000a00:	2000002a 	.word	0x2000002a
 8000a04:	000002ee 	.word	0x000002ee

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b091      	sub	sp, #68	; 0x44
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	2410      	movs	r4, #16
 8000a10:	193b      	adds	r3, r7, r4
 8000a12:	0018      	movs	r0, r3
 8000a14:	2330      	movs	r3, #48	; 0x30
 8000a16:	001a      	movs	r2, r3
 8000a18:	2100      	movs	r1, #0
 8000a1a:	f002 f9ad 	bl	8002d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1e:	003b      	movs	r3, r7
 8000a20:	0018      	movs	r0, r3
 8000a22:	2310      	movs	r3, #16
 8000a24:	001a      	movs	r2, r3
 8000a26:	2100      	movs	r1, #0
 8000a28:	f002 f9a6 	bl	8002d78 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000a2c:	0021      	movs	r1, r4
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2212      	movs	r2, #18
 8000a32:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2201      	movs	r2, #1
 8000a38:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2210      	movs	r2, #16
 8000a44:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2210      	movs	r2, #16
 8000a4a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2202      	movs	r2, #2
 8000a50:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2200      	movs	r2, #0
 8000a56:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	22a0      	movs	r2, #160	; 0xa0
 8000a5c:	0392      	lsls	r2, r2, #14
 8000a5e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2200      	movs	r2, #0
 8000a64:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f001 f9a1 	bl	8001db0 <HAL_RCC_OscConfig>
 8000a6e:	1e03      	subs	r3, r0, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a72:	f000 f965 	bl	8000d40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a76:	003b      	movs	r3, r7
 8000a78:	2207      	movs	r2, #7
 8000a7a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7c:	003b      	movs	r3, r7
 8000a7e:	2202      	movs	r2, #2
 8000a80:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a82:	003b      	movs	r3, r7
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a88:	003b      	movs	r3, r7
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a8e:	003b      	movs	r3, r7
 8000a90:	2101      	movs	r1, #1
 8000a92:	0018      	movs	r0, r3
 8000a94:	f001 fca8 	bl	80023e8 <HAL_RCC_ClockConfig>
 8000a98:	1e03      	subs	r3, r0, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a9c:	f000 f950 	bl	8000d40 <Error_Handler>
  }
}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b011      	add	sp, #68	; 0x44
 8000aa6:	bd90      	pop	{r4, r7, pc}

08000aa8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	230c      	movs	r3, #12
 8000ab4:	001a      	movs	r2, r3
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	f002 f95e 	bl	8002d78 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000abc:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <MX_ADC_Init+0xac>)
 8000abe:	4a26      	ldr	r2, [pc, #152]	; (8000b58 <MX_ADC_Init+0xb0>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ac2:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <MX_ADC_Init+0xac>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 8000ac8:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <MX_ADC_Init+0xac>)
 8000aca:	2208      	movs	r2, #8
 8000acc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <MX_ADC_Init+0xac>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <MX_ADC_Init+0xac>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <MX_ADC_Init+0xac>)
 8000adc:	2204      	movs	r2, #4
 8000ade:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <MX_ADC_Init+0xac>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <MX_ADC_Init+0xac>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <MX_ADC_Init+0xac>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_ADC_Init+0xac>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_ADC_Init+0xac>)
 8000afa:	22c2      	movs	r2, #194	; 0xc2
 8000afc:	32ff      	adds	r2, #255	; 0xff
 8000afe:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_ADC_Init+0xac>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <MX_ADC_Init+0xac>)
 8000b08:	2224      	movs	r2, #36	; 0x24
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_ADC_Init+0xac>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_ADC_Init+0xac>)
 8000b16:	0018      	movs	r0, r3
 8000b18:	f000 fb3c 	bl	8001194 <HAL_ADC_Init>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000b20:	f000 f90e 	bl	8000d40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2201      	movs	r2, #1
 8000b28:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2280      	movs	r2, #128	; 0x80
 8000b2e:	0152      	lsls	r2, r2, #5
 8000b30:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2207      	movs	r2, #7
 8000b36:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b38:	1d3a      	adds	r2, r7, #4
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_ADC_Init+0xac>)
 8000b3c:	0011      	movs	r1, r2
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f000 fcc8 	bl	80014d4 <HAL_ADC_ConfigChannel>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d001      	beq.n	8000b4c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000b48:	f000 f8fa 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b004      	add	sp, #16
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200000b4 	.word	0x200000b4
 8000b58:	40012400 	.word	0x40012400

08000b5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b62:	4a15      	ldr	r2, [pc, #84]	; (8000bb8 <MX_USART2_UART_Init+0x5c>)
 8000b64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b68:	2296      	movs	r2, #150	; 0x96
 8000b6a:	0212      	lsls	r2, r2, #8
 8000b6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b9e:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f001 fd73 	bl	800268c <HAL_UART_Init>
 8000ba6:	1e03      	subs	r3, r0, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000baa:	f000 f8c9 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000034 	.word	0x20000034
 8000bb8:	40004400 	.word	0x40004400

08000bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b08b      	sub	sp, #44	; 0x2c
 8000bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	2414      	movs	r4, #20
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	2314      	movs	r3, #20
 8000bca:	001a      	movs	r2, r3
 8000bcc:	2100      	movs	r1, #0
 8000bce:	f002 f8d3 	bl	8002d78 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	4b56      	ldr	r3, [pc, #344]	; (8000d2c <MX_GPIO_Init+0x170>)
 8000bd4:	695a      	ldr	r2, [r3, #20]
 8000bd6:	4b55      	ldr	r3, [pc, #340]	; (8000d2c <MX_GPIO_Init+0x170>)
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	0309      	lsls	r1, r1, #12
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	615a      	str	r2, [r3, #20]
 8000be0:	4b52      	ldr	r3, [pc, #328]	; (8000d2c <MX_GPIO_Init+0x170>)
 8000be2:	695a      	ldr	r2, [r3, #20]
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	031b      	lsls	r3, r3, #12
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bee:	4b4f      	ldr	r3, [pc, #316]	; (8000d2c <MX_GPIO_Init+0x170>)
 8000bf0:	695a      	ldr	r2, [r3, #20]
 8000bf2:	4b4e      	ldr	r3, [pc, #312]	; (8000d2c <MX_GPIO_Init+0x170>)
 8000bf4:	2180      	movs	r1, #128	; 0x80
 8000bf6:	03c9      	lsls	r1, r1, #15
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	615a      	str	r2, [r3, #20]
 8000bfc:	4b4b      	ldr	r3, [pc, #300]	; (8000d2c <MX_GPIO_Init+0x170>)
 8000bfe:	695a      	ldr	r2, [r3, #20]
 8000c00:	2380      	movs	r3, #128	; 0x80
 8000c02:	03db      	lsls	r3, r3, #15
 8000c04:	4013      	ands	r3, r2
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	4b48      	ldr	r3, [pc, #288]	; (8000d2c <MX_GPIO_Init+0x170>)
 8000c0c:	695a      	ldr	r2, [r3, #20]
 8000c0e:	4b47      	ldr	r3, [pc, #284]	; (8000d2c <MX_GPIO_Init+0x170>)
 8000c10:	2180      	movs	r1, #128	; 0x80
 8000c12:	0289      	lsls	r1, r1, #10
 8000c14:	430a      	orrs	r2, r1
 8000c16:	615a      	str	r2, [r3, #20]
 8000c18:	4b44      	ldr	r3, [pc, #272]	; (8000d2c <MX_GPIO_Init+0x170>)
 8000c1a:	695a      	ldr	r2, [r3, #20]
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	029b      	lsls	r3, r3, #10
 8000c20:	4013      	ands	r3, r2
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	4b41      	ldr	r3, [pc, #260]	; (8000d2c <MX_GPIO_Init+0x170>)
 8000c28:	695a      	ldr	r2, [r3, #20]
 8000c2a:	4b40      	ldr	r3, [pc, #256]	; (8000d2c <MX_GPIO_Init+0x170>)
 8000c2c:	2180      	movs	r1, #128	; 0x80
 8000c2e:	02c9      	lsls	r1, r1, #11
 8000c30:	430a      	orrs	r2, r1
 8000c32:	615a      	str	r2, [r3, #20]
 8000c34:	4b3d      	ldr	r3, [pc, #244]	; (8000d2c <MX_GPIO_Init+0x170>)
 8000c36:	695a      	ldr	r2, [r3, #20]
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	02db      	lsls	r3, r3, #11
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c42:	2390      	movs	r3, #144	; 0x90
 8000c44:	05db      	lsls	r3, r3, #23
 8000c46:	2200      	movs	r2, #0
 8000c48:	2130      	movs	r1, #48	; 0x30
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f001 f893 	bl	8001d76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin
 8000c50:	4937      	ldr	r1, [pc, #220]	; (8000d30 <MX_GPIO_Init+0x174>)
 8000c52:	4b38      	ldr	r3, [pc, #224]	; (8000d34 <MX_GPIO_Init+0x178>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	0018      	movs	r0, r3
 8000c58:	f001 f88d 	bl	8001d76 <HAL_GPIO_WritePin>
                          |SCT_NLA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DQ_GPIO_Port, DQ_Pin, GPIO_PIN_SET);
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	00d9      	lsls	r1, r3, #3
 8000c60:	2390      	movs	r3, #144	; 0x90
 8000c62:	05db      	lsls	r3, r3, #23
 8000c64:	2201      	movs	r2, #1
 8000c66:	0018      	movs	r0, r3
 8000c68:	f001 f885 	bl	8001d76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	2280      	movs	r2, #128	; 0x80
 8000c70:	0192      	lsls	r2, r2, #6
 8000c72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	4a30      	ldr	r2, [pc, #192]	; (8000d38 <MX_GPIO_Init+0x17c>)
 8000c78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	193b      	adds	r3, r7, r4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c80:	193b      	adds	r3, r7, r4
 8000c82:	4a2e      	ldr	r2, [pc, #184]	; (8000d3c <MX_GPIO_Init+0x180>)
 8000c84:	0019      	movs	r1, r3
 8000c86:	0010      	movs	r0, r2
 8000c88:	f000 fee8 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S1_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin;
 8000c8c:	193b      	adds	r3, r7, r4
 8000c8e:	2203      	movs	r2, #3
 8000c90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c92:	193b      	adds	r3, r7, r4
 8000c94:	2200      	movs	r2, #0
 8000c96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c98:	193b      	adds	r3, r7, r4
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	4a26      	ldr	r2, [pc, #152]	; (8000d3c <MX_GPIO_Init+0x180>)
 8000ca2:	0019      	movs	r1, r3
 8000ca4:	0010      	movs	r0, r2
 8000ca6:	f000 fed9 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LD2_Pin;
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	2230      	movs	r2, #48	; 0x30
 8000cae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb0:	193b      	adds	r3, r7, r4
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	193b      	adds	r3, r7, r4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	193b      	adds	r3, r7, r4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	193a      	adds	r2, r7, r4
 8000cc4:	2390      	movs	r3, #144	; 0x90
 8000cc6:	05db      	lsls	r3, r3, #23
 8000cc8:	0011      	movs	r1, r2
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f000 fec6 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin SCT_NOE_Pin SCT_CLK_Pin SCT_SDI_Pin
                           SCT_NLA_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin
 8000cd0:	0021      	movs	r1, r4
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	4a16      	ldr	r2, [pc, #88]	; (8000d30 <MX_GPIO_Init+0x174>)
 8000cd6:	601a      	str	r2, [r3, #0]
                          |SCT_NLA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2201      	movs	r2, #1
 8000cdc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cea:	000c      	movs	r4, r1
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	4a11      	ldr	r2, [pc, #68]	; (8000d34 <MX_GPIO_Init+0x178>)
 8000cf0:	0019      	movs	r1, r3
 8000cf2:	0010      	movs	r0, r2
 8000cf4:	f000 feb2 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : DQ_Pin */
  GPIO_InitStruct.Pin = DQ_Pin;
 8000cf8:	0021      	movs	r1, r4
 8000cfa:	187b      	adds	r3, r7, r1
 8000cfc:	2280      	movs	r2, #128	; 0x80
 8000cfe:	00d2      	lsls	r2, r2, #3
 8000d00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	2211      	movs	r2, #17
 8000d06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2200      	movs	r2, #0
 8000d12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DQ_GPIO_Port, &GPIO_InitStruct);
 8000d14:	187a      	adds	r2, r7, r1
 8000d16:	2390      	movs	r3, #144	; 0x90
 8000d18:	05db      	lsls	r3, r3, #23
 8000d1a:	0011      	movs	r1, r2
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f000 fe9d 	bl	8001a5c <HAL_GPIO_Init>

}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b00b      	add	sp, #44	; 0x2c
 8000d28:	bd90      	pop	{r4, r7, pc}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	00000439 	.word	0x00000439
 8000d34:	48000400 	.word	0x48000400
 8000d38:	10210000 	.word	0x10210000
 8000d3c:	48000800 	.word	0x48000800

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <sct_led>:
/*
 * sct_led
 * 	- Set the input variable "value" to SCT
 */
void sct_led(uint32_t value)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < 32; i++)
 8000d54:	230f      	movs	r3, #15
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
 8000d5c:	e01e      	b.n	8000d9c <sct_led+0x50>
	{
		HAL_GPIO_WritePin(SCT_SDI_GPIO_Port, SCT_SDI_Pin, (value & 1)); // Set the LSB
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2201      	movs	r2, #1
 8000d64:	4013      	ands	r3, r2
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	4817      	ldr	r0, [pc, #92]	; (8000dc8 <sct_led+0x7c>)
 8000d6a:	001a      	movs	r2, r3
 8000d6c:	2110      	movs	r1, #16
 8000d6e:	f001 f802 	bl	8001d76 <HAL_GPIO_WritePin>
		value >>= 1;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	085b      	lsrs	r3, r3, #1
 8000d76:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 1);		// Time tick
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <sct_led+0x7c>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2108      	movs	r1, #8
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f000 fff9 	bl	8001d76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 0);
 8000d84:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <sct_led+0x7c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	2108      	movs	r1, #8
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f000 fff3 	bl	8001d76 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < 32; i++)
 8000d90:	210f      	movs	r1, #15
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	781a      	ldrb	r2, [r3, #0]
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	3201      	adds	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b1f      	cmp	r3, #31
 8000da4:	d9db      	bls.n	8000d5e <sct_led+0x12>
	}

	HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 1);			// Latch tick
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <sct_led+0x7c>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	2120      	movs	r1, #32
 8000dac:	0018      	movs	r0, r3
 8000dae:	f000 ffe2 	bl	8001d76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 0);
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <sct_led+0x7c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	2120      	movs	r1, #32
 8000db8:	0018      	movs	r0, r3
 8000dba:	f000 ffdc 	bl	8001d76 <HAL_GPIO_WritePin>
}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b004      	add	sp, #16
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	48000400 	.word	0x48000400

08000dcc <sct_init>:
/*
 * sct_init
 * 	- Initialization for SCT
 */
void sct_init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCT_NOE_GPIO_Port, SCT_NOE_Pin, 0);		// Default values
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	00db      	lsls	r3, r3, #3
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <sct_init+0x20>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	0019      	movs	r1, r3
 8000dda:	f000 ffcc 	bl	8001d76 <HAL_GPIO_WritePin>
	sct_led(0);
 8000dde:	2000      	movs	r0, #0
 8000de0:	f7ff ffb4 	bl	8000d4c <sct_led>
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	48000400 	.word	0x48000400

08000df0 <sct_value>:
/*
 * sct_value
 * 	- Lookup table for 3 digits
 */
void sct_value(uint16_t value)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	0002      	movs	r2, r0
 8000df8:	1dbb      	adds	r3, r7, #6
 8000dfa:	801a      	strh	r2, [r3, #0]
		0b0111000000001111 << 0,
		0b0110000000001111 << 0,
	},
	};

	uint32_t reg = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]

	reg |= reg_values[0][value / 100 % 10]; 	// Hundred
 8000e00:	1dbb      	adds	r3, r7, #6
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	2164      	movs	r1, #100	; 0x64
 8000e06:	0018      	movs	r0, r3
 8000e08:	f7ff f97e 	bl	8000108 <__udivsi3>
 8000e0c:	0003      	movs	r3, r0
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	210a      	movs	r1, #10
 8000e12:	0018      	movs	r0, r3
 8000e14:	f7ff f9fe 	bl	8000214 <__aeabi_uidivmod>
 8000e18:	000b      	movs	r3, r1
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	001a      	movs	r2, r3
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <sct_value+0x98>)
 8000e20:	0092      	lsls	r2, r2, #2
 8000e22:	58d3      	ldr	r3, [r2, r3]
 8000e24:	68fa      	ldr	r2, [r7, #12]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[1][value / 10 % 10];		// Hecade
 8000e2a:	1dbb      	adds	r3, r7, #6
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	210a      	movs	r1, #10
 8000e30:	0018      	movs	r0, r3
 8000e32:	f7ff f969 	bl	8000108 <__udivsi3>
 8000e36:	0003      	movs	r3, r0
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	210a      	movs	r1, #10
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f7ff f9e9 	bl	8000214 <__aeabi_uidivmod>
 8000e42:	000b      	movs	r3, r1
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	001a      	movs	r2, r3
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <sct_value+0x98>)
 8000e4a:	320a      	adds	r2, #10
 8000e4c:	0092      	lsls	r2, r2, #2
 8000e4e:	58d3      	ldr	r3, [r2, r3]
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[2][value / 1 % 10];		// Ones
 8000e56:	1dbb      	adds	r3, r7, #6
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	210a      	movs	r1, #10
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f7ff f9d9 	bl	8000214 <__aeabi_uidivmod>
 8000e62:	000b      	movs	r3, r1
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	001a      	movs	r2, r3
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <sct_value+0x98>)
 8000e6a:	3214      	adds	r2, #20
 8000e6c:	0092      	lsls	r2, r2, #2
 8000e6e:	58d3      	ldr	r3, [r2, r3]
 8000e70:	68fa      	ldr	r2, [r7, #12]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]

	sct_led(reg);	// Set value to SCT
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f7ff ff67 	bl	8000d4c <sct_led>
}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b004      	add	sp, #16
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	080035c0 	.word	0x080035c0

08000e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_MspInit+0x44>)
 8000e94:	699a      	ldr	r2, [r3, #24]
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_MspInit+0x44>)
 8000e98:	2101      	movs	r1, #1
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	619a      	str	r2, [r3, #24]
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_MspInit+0x44>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eac:	69da      	ldr	r2, [r3, #28]
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	0549      	lsls	r1, r1, #21
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	61da      	str	r2, [r3, #28]
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eba:	69da      	ldr	r2, [r3, #28]
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	055b      	lsls	r3, r3, #21
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b002      	add	sp, #8
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	2314      	movs	r3, #20
 8000ede:	18fb      	adds	r3, r7, r3
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	2314      	movs	r3, #20
 8000ee4:	001a      	movs	r2, r3
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	f001 ff46 	bl	8002d78 <memset>
  if(hadc->Instance==ADC1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a19      	ldr	r2, [pc, #100]	; (8000f58 <HAL_ADC_MspInit+0x84>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d12c      	bne.n	8000f50 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <HAL_ADC_MspInit+0x88>)
 8000ef8:	699a      	ldr	r2, [r3, #24]
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <HAL_ADC_MspInit+0x88>)
 8000efc:	2180      	movs	r1, #128	; 0x80
 8000efe:	0089      	lsls	r1, r1, #2
 8000f00:	430a      	orrs	r2, r1
 8000f02:	619a      	str	r2, [r3, #24]
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <HAL_ADC_MspInit+0x88>)
 8000f06:	699a      	ldr	r2, [r3, #24]
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_ADC_MspInit+0x88>)
 8000f14:	695a      	ldr	r2, [r3, #20]
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_ADC_MspInit+0x88>)
 8000f18:	2180      	movs	r1, #128	; 0x80
 8000f1a:	0289      	lsls	r1, r1, #10
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	615a      	str	r2, [r3, #20]
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_ADC_MspInit+0x88>)
 8000f22:	695a      	ldr	r2, [r3, #20]
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	029b      	lsls	r3, r3, #10
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f2e:	2114      	movs	r1, #20
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	2202      	movs	r2, #2
 8000f34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	2203      	movs	r2, #3
 8000f3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	187a      	adds	r2, r7, r1
 8000f44:	2390      	movs	r3, #144	; 0x90
 8000f46:	05db      	lsls	r3, r3, #23
 8000f48:	0011      	movs	r1, r2
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f000 fd86 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b00a      	add	sp, #40	; 0x28
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40012400 	.word	0x40012400
 8000f5c:	40021000 	.word	0x40021000

08000f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	2314      	movs	r3, #20
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	2314      	movs	r3, #20
 8000f70:	001a      	movs	r2, r3
 8000f72:	2100      	movs	r1, #0
 8000f74:	f001 ff00 	bl	8002d78 <memset>
  if(huart->Instance==USART2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a1c      	ldr	r2, [pc, #112]	; (8000ff0 <HAL_UART_MspInit+0x90>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d132      	bne.n	8000fe8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f82:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <HAL_UART_MspInit+0x94>)
 8000f84:	69da      	ldr	r2, [r3, #28]
 8000f86:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <HAL_UART_MspInit+0x94>)
 8000f88:	2180      	movs	r1, #128	; 0x80
 8000f8a:	0289      	lsls	r1, r1, #10
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	61da      	str	r2, [r3, #28]
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <HAL_UART_MspInit+0x94>)
 8000f92:	69da      	ldr	r2, [r3, #28]
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	029b      	lsls	r3, r3, #10
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_UART_MspInit+0x94>)
 8000fa0:	695a      	ldr	r2, [r3, #20]
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <HAL_UART_MspInit+0x94>)
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	0289      	lsls	r1, r1, #10
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	615a      	str	r2, [r3, #20]
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_UART_MspInit+0x94>)
 8000fae:	695a      	ldr	r2, [r3, #20]
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	029b      	lsls	r3, r3, #10
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fba:	2114      	movs	r1, #20
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	187a      	adds	r2, r7, r1
 8000fdc:	2390      	movs	r3, #144	; 0x90
 8000fde:	05db      	lsls	r3, r3, #23
 8000fe0:	0011      	movs	r1, r2
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f000 fd3a 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b00a      	add	sp, #40	; 0x28
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40004400 	.word	0x40004400
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <HardFault_Handler+0x4>

08001008 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800100c:	46c0      	nop			; (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001020:	f000 f87a 	bl	8001118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001036:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001038:	480d      	ldr	r0, [pc, #52]	; (8001070 <LoopForever+0x6>)
  ldr r1, =_edata
 800103a:	490e      	ldr	r1, [pc, #56]	; (8001074 <LoopForever+0xa>)
  ldr r2, =_sidata
 800103c:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <LoopForever+0xe>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a0b      	ldr	r2, [pc, #44]	; (800107c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001050:	4c0b      	ldr	r4, [pc, #44]	; (8001080 <LoopForever+0x16>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800105e:	f7ff ffe4 	bl	800102a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001062:	f001 fe65 	bl	8002d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001066:	f7ff fc79 	bl	800095c <main>

0800106a <LoopForever>:

LoopForever:
    b LoopForever
 800106a:	e7fe      	b.n	800106a <LoopForever>
  ldr   r0, =_estack
 800106c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001074:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001078:	08003658 	.word	0x08003658
  ldr r2, =_sbss
 800107c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001080:	200000f8 	.word	0x200000f8

08001084 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001084:	e7fe      	b.n	8001084 <ADC1_IRQHandler>
	...

08001088 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <HAL_Init+0x24>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_Init+0x24>)
 8001092:	2110      	movs	r1, #16
 8001094:	430a      	orrs	r2, r1
 8001096:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001098:	2000      	movs	r0, #0
 800109a:	f000 f809 	bl	80010b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109e:	f7ff fef5 	bl	8000e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	0018      	movs	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	40022000 	.word	0x40022000

080010b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b8:	4b14      	ldr	r3, [pc, #80]	; (800110c <HAL_InitTick+0x5c>)
 80010ba:	681c      	ldr	r4, [r3, #0]
 80010bc:	4b14      	ldr	r3, [pc, #80]	; (8001110 <HAL_InitTick+0x60>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	0019      	movs	r1, r3
 80010c2:	23fa      	movs	r3, #250	; 0xfa
 80010c4:	0098      	lsls	r0, r3, #2
 80010c6:	f7ff f81f 	bl	8000108 <__udivsi3>
 80010ca:	0003      	movs	r3, r0
 80010cc:	0019      	movs	r1, r3
 80010ce:	0020      	movs	r0, r4
 80010d0:	f7ff f81a 	bl	8000108 <__udivsi3>
 80010d4:	0003      	movs	r3, r0
 80010d6:	0018      	movs	r0, r3
 80010d8:	f000 fcb3 	bl	8001a42 <HAL_SYSTICK_Config>
 80010dc:	1e03      	subs	r3, r0, #0
 80010de:	d001      	beq.n	80010e4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e00f      	b.n	8001104 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d80b      	bhi.n	8001102 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	2301      	movs	r3, #1
 80010ee:	425b      	negs	r3, r3
 80010f0:	2200      	movs	r2, #0
 80010f2:	0018      	movs	r0, r3
 80010f4:	f000 fc90 	bl	8001a18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_InitTick+0x64>)
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
 8001100:	e000      	b.n	8001104 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
}
 8001104:	0018      	movs	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	b003      	add	sp, #12
 800110a:	bd90      	pop	{r4, r7, pc}
 800110c:	20000000 	.word	0x20000000
 8001110:	20000008 	.word	0x20000008
 8001114:	20000004 	.word	0x20000004

08001118 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <HAL_IncTick+0x1c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	001a      	movs	r2, r3
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <HAL_IncTick+0x20>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	18d2      	adds	r2, r2, r3
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <HAL_IncTick+0x20>)
 800112a:	601a      	str	r2, [r3, #0]
}
 800112c:	46c0      	nop			; (mov r8, r8)
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	20000008 	.word	0x20000008
 8001138:	200000f4 	.word	0x200000f4

0800113c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b02      	ldr	r3, [pc, #8]	; (800114c <HAL_GetTick+0x10>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	0018      	movs	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	200000f4 	.word	0x200000f4

08001150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff fff0 	bl	800113c <HAL_GetTick>
 800115c:	0003      	movs	r3, r0
 800115e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3301      	adds	r3, #1
 8001168:	d005      	beq.n	8001176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <HAL_Delay+0x40>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	001a      	movs	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	189b      	adds	r3, r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	f7ff ffe0 	bl	800113c <HAL_GetTick>
 800117c:	0002      	movs	r2, r0
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	429a      	cmp	r2, r3
 8001186:	d8f7      	bhi.n	8001178 <HAL_Delay+0x28>
  {
  }
}
 8001188:	46c0      	nop			; (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	b004      	add	sp, #16
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000008 	.word	0x20000008

08001194 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800119c:	230f      	movs	r3, #15
 800119e:	18fb      	adds	r3, r7, r3
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e125      	b.n	80013fe <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10a      	bne.n	80011d0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2234      	movs	r2, #52	; 0x34
 80011c4:	2100      	movs	r1, #0
 80011c6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	0018      	movs	r0, r3
 80011cc:	f7ff fe82 	bl	8000ed4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011d4:	2210      	movs	r2, #16
 80011d6:	4013      	ands	r3, r2
 80011d8:	d000      	beq.n	80011dc <HAL_ADC_Init+0x48>
 80011da:	e103      	b.n	80013e4 <HAL_ADC_Init+0x250>
 80011dc:	230f      	movs	r3, #15
 80011de:	18fb      	adds	r3, r7, r3
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d000      	beq.n	80011e8 <HAL_ADC_Init+0x54>
 80011e6:	e0fd      	b.n	80013e4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	2204      	movs	r2, #4
 80011f0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80011f2:	d000      	beq.n	80011f6 <HAL_ADC_Init+0x62>
 80011f4:	e0f6      	b.n	80013e4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fa:	4a83      	ldr	r2, [pc, #524]	; (8001408 <HAL_ADC_Init+0x274>)
 80011fc:	4013      	ands	r3, r2
 80011fe:	2202      	movs	r2, #2
 8001200:	431a      	orrs	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2203      	movs	r2, #3
 800120e:	4013      	ands	r3, r2
 8001210:	2b01      	cmp	r3, #1
 8001212:	d112      	bne.n	800123a <HAL_ADC_Init+0xa6>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2201      	movs	r2, #1
 800121c:	4013      	ands	r3, r2
 800121e:	2b01      	cmp	r3, #1
 8001220:	d009      	beq.n	8001236 <HAL_ADC_Init+0xa2>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	401a      	ands	r2, r3
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	429a      	cmp	r2, r3
 8001234:	d101      	bne.n	800123a <HAL_ADC_Init+0xa6>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <HAL_ADC_Init+0xa8>
 800123a:	2300      	movs	r3, #0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d116      	bne.n	800126e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2218      	movs	r2, #24
 8001248:	4393      	bics	r3, r2
 800124a:	0019      	movs	r1, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	430a      	orrs	r2, r1
 8001256:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	0899      	lsrs	r1, r3, #2
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4964      	ldr	r1, [pc, #400]	; (800140c <HAL_ADC_Init+0x278>)
 800127a:	400a      	ands	r2, r1
 800127c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7e1b      	ldrb	r3, [r3, #24]
 8001282:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	7e5b      	ldrb	r3, [r3, #25]
 8001288:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800128a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7e9b      	ldrb	r3, [r3, #26]
 8001290:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001292:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001298:	2b01      	cmp	r3, #1
 800129a:	d002      	beq.n	80012a2 <HAL_ADC_Init+0x10e>
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	015b      	lsls	r3, r3, #5
 80012a0:	e000      	b.n	80012a4 <HAL_ADC_Init+0x110>
 80012a2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80012a4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80012aa:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d101      	bne.n	80012b8 <HAL_ADC_Init+0x124>
 80012b4:	2304      	movs	r3, #4
 80012b6:	e000      	b.n	80012ba <HAL_ADC_Init+0x126>
 80012b8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80012ba:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2124      	movs	r1, #36	; 0x24
 80012c0:	5c5b      	ldrb	r3, [r3, r1]
 80012c2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80012c4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	7edb      	ldrb	r3, [r3, #27]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d115      	bne.n	8001300 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	7e9b      	ldrb	r3, [r3, #26]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d105      	bne.n	80012e8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	2280      	movs	r2, #128	; 0x80
 80012e0:	0252      	lsls	r2, r2, #9
 80012e2:	4313      	orrs	r3, r2
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	e00b      	b.n	8001300 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ec:	2220      	movs	r2, #32
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012f8:	2201      	movs	r2, #1
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69da      	ldr	r2, [r3, #28]
 8001304:	23c2      	movs	r3, #194	; 0xc2
 8001306:	33ff      	adds	r3, #255	; 0xff
 8001308:	429a      	cmp	r2, r3
 800130a:	d007      	beq.n	800131c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001314:	4313      	orrs	r3, r2
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	4313      	orrs	r3, r2
 800131a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	68d9      	ldr	r1, [r3, #12]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	430a      	orrs	r2, r1
 800132a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	055b      	lsls	r3, r3, #21
 8001334:	429a      	cmp	r2, r3
 8001336:	d01b      	beq.n	8001370 <HAL_ADC_Init+0x1dc>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133c:	2b01      	cmp	r3, #1
 800133e:	d017      	beq.n	8001370 <HAL_ADC_Init+0x1dc>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	2b02      	cmp	r3, #2
 8001346:	d013      	beq.n	8001370 <HAL_ADC_Init+0x1dc>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134c:	2b03      	cmp	r3, #3
 800134e:	d00f      	beq.n	8001370 <HAL_ADC_Init+0x1dc>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001354:	2b04      	cmp	r3, #4
 8001356:	d00b      	beq.n	8001370 <HAL_ADC_Init+0x1dc>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	2b05      	cmp	r3, #5
 800135e:	d007      	beq.n	8001370 <HAL_ADC_Init+0x1dc>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001364:	2b06      	cmp	r3, #6
 8001366:	d003      	beq.n	8001370 <HAL_ADC_Init+0x1dc>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136c:	2b07      	cmp	r3, #7
 800136e:	d112      	bne.n	8001396 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2107      	movs	r1, #7
 800137c:	438a      	bics	r2, r1
 800137e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6959      	ldr	r1, [r3, #20]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138a:	2207      	movs	r2, #7
 800138c:	401a      	ands	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <HAL_ADC_Init+0x27c>)
 800139e:	4013      	ands	r3, r2
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d10b      	bne.n	80013be <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b0:	2203      	movs	r2, #3
 80013b2:	4393      	bics	r3, r2
 80013b4:	2201      	movs	r2, #1
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80013bc:	e01c      	b.n	80013f8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c2:	2212      	movs	r2, #18
 80013c4:	4393      	bics	r3, r2
 80013c6:	2210      	movs	r2, #16
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d2:	2201      	movs	r2, #1
 80013d4:	431a      	orrs	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80013da:	230f      	movs	r3, #15
 80013dc:	18fb      	adds	r3, r7, r3
 80013de:	2201      	movs	r2, #1
 80013e0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80013e2:	e009      	b.n	80013f8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e8:	2210      	movs	r2, #16
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80013f0:	230f      	movs	r3, #15
 80013f2:	18fb      	adds	r3, r7, r3
 80013f4:	2201      	movs	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013f8:	230f      	movs	r3, #15
 80013fa:	18fb      	adds	r3, r7, r3
 80013fc:	781b      	ldrb	r3, [r3, #0]
}
 80013fe:	0018      	movs	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	b004      	add	sp, #16
 8001404:	bd80      	pop	{r7, pc}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	fffffefd 	.word	0xfffffefd
 800140c:	fffe0219 	.word	0xfffe0219
 8001410:	833fffe7 	.word	0x833fffe7

08001414 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800141c:	230f      	movs	r3, #15
 800141e:	18fb      	adds	r3, r7, r3
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2204      	movs	r2, #4
 800142c:	4013      	ands	r3, r2
 800142e:	d138      	bne.n	80014a2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2234      	movs	r2, #52	; 0x34
 8001434:	5c9b      	ldrb	r3, [r3, r2]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d101      	bne.n	800143e <HAL_ADC_Start+0x2a>
 800143a:	2302      	movs	r3, #2
 800143c:	e038      	b.n	80014b0 <HAL_ADC_Start+0x9c>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2234      	movs	r2, #52	; 0x34
 8001442:	2101      	movs	r1, #1
 8001444:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	7e5b      	ldrb	r3, [r3, #25]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d007      	beq.n	800145e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800144e:	230f      	movs	r3, #15
 8001450:	18fc      	adds	r4, r7, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	0018      	movs	r0, r3
 8001456:	f000 f933 	bl	80016c0 <ADC_Enable>
 800145a:	0003      	movs	r3, r0
 800145c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800145e:	230f      	movs	r3, #15
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d120      	bne.n	80014aa <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146c:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <HAL_ADC_Start+0xa4>)
 800146e:	4013      	ands	r3, r2
 8001470:	2280      	movs	r2, #128	; 0x80
 8001472:	0052      	lsls	r2, r2, #1
 8001474:	431a      	orrs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2234      	movs	r2, #52	; 0x34
 8001484:	2100      	movs	r1, #0
 8001486:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	221c      	movs	r2, #28
 800148e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2104      	movs	r1, #4
 800149c:	430a      	orrs	r2, r1
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	e003      	b.n	80014aa <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014a2:	230f      	movs	r3, #15
 80014a4:	18fb      	adds	r3, r7, r3
 80014a6:	2202      	movs	r2, #2
 80014a8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014aa:	230f      	movs	r3, #15
 80014ac:	18fb      	adds	r3, r7, r3
 80014ae:	781b      	ldrb	r3, [r3, #0]
}
 80014b0:	0018      	movs	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b005      	add	sp, #20
 80014b6:	bd90      	pop	{r4, r7, pc}
 80014b8:	fffff0fe 	.word	0xfffff0fe

080014bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80014ca:	0018      	movs	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b002      	add	sp, #8
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014de:	230f      	movs	r3, #15
 80014e0:	18fb      	adds	r3, r7, r3
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	055b      	lsls	r3, r3, #21
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d011      	beq.n	800151a <HAL_ADC_ConfigChannel+0x46>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d00d      	beq.n	800151a <HAL_ADC_ConfigChannel+0x46>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	2b02      	cmp	r3, #2
 8001504:	d009      	beq.n	800151a <HAL_ADC_ConfigChannel+0x46>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150a:	2b03      	cmp	r3, #3
 800150c:	d005      	beq.n	800151a <HAL_ADC_ConfigChannel+0x46>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001512:	2b04      	cmp	r3, #4
 8001514:	d001      	beq.n	800151a <HAL_ADC_ConfigChannel+0x46>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2234      	movs	r2, #52	; 0x34
 800151e:	5c9b      	ldrb	r3, [r3, r2]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d101      	bne.n	8001528 <HAL_ADC_ConfigChannel+0x54>
 8001524:	2302      	movs	r3, #2
 8001526:	e0bb      	b.n	80016a0 <HAL_ADC_ConfigChannel+0x1cc>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2234      	movs	r2, #52	; 0x34
 800152c:	2101      	movs	r1, #1
 800152e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	2204      	movs	r2, #4
 8001538:	4013      	ands	r3, r2
 800153a:	d000      	beq.n	800153e <HAL_ADC_ConfigChannel+0x6a>
 800153c:	e09f      	b.n	800167e <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	4a59      	ldr	r2, [pc, #356]	; (80016a8 <HAL_ADC_ConfigChannel+0x1d4>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d100      	bne.n	800154a <HAL_ADC_ConfigChannel+0x76>
 8001548:	e077      	b.n	800163a <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2201      	movs	r2, #1
 8001556:	409a      	lsls	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	055b      	lsls	r3, r3, #21
 8001568:	429a      	cmp	r2, r3
 800156a:	d037      	beq.n	80015dc <HAL_ADC_ConfigChannel+0x108>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	2b01      	cmp	r3, #1
 8001572:	d033      	beq.n	80015dc <HAL_ADC_ConfigChannel+0x108>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	2b02      	cmp	r3, #2
 800157a:	d02f      	beq.n	80015dc <HAL_ADC_ConfigChannel+0x108>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	2b03      	cmp	r3, #3
 8001582:	d02b      	beq.n	80015dc <HAL_ADC_ConfigChannel+0x108>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001588:	2b04      	cmp	r3, #4
 800158a:	d027      	beq.n	80015dc <HAL_ADC_ConfigChannel+0x108>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001590:	2b05      	cmp	r3, #5
 8001592:	d023      	beq.n	80015dc <HAL_ADC_ConfigChannel+0x108>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001598:	2b06      	cmp	r3, #6
 800159a:	d01f      	beq.n	80015dc <HAL_ADC_ConfigChannel+0x108>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a0:	2b07      	cmp	r3, #7
 80015a2:	d01b      	beq.n	80015dc <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	2107      	movs	r1, #7
 80015b0:	400b      	ands	r3, r1
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d012      	beq.n	80015dc <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	695a      	ldr	r2, [r3, #20]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2107      	movs	r1, #7
 80015c2:	438a      	bics	r2, r1
 80015c4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6959      	ldr	r1, [r3, #20]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2207      	movs	r2, #7
 80015d2:	401a      	ands	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	430a      	orrs	r2, r1
 80015da:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b10      	cmp	r3, #16
 80015e2:	d003      	beq.n	80015ec <HAL_ADC_ConfigChannel+0x118>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b11      	cmp	r3, #17
 80015ea:	d152      	bne.n	8001692 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80015ec:	4b2f      	ldr	r3, [pc, #188]	; (80016ac <HAL_ADC_ConfigChannel+0x1d8>)
 80015ee:	6819      	ldr	r1, [r3, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b10      	cmp	r3, #16
 80015f6:	d102      	bne.n	80015fe <HAL_ADC_ConfigChannel+0x12a>
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	041b      	lsls	r3, r3, #16
 80015fc:	e001      	b.n	8001602 <HAL_ADC_ConfigChannel+0x12e>
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	03db      	lsls	r3, r3, #15
 8001602:	4a2a      	ldr	r2, [pc, #168]	; (80016ac <HAL_ADC_ConfigChannel+0x1d8>)
 8001604:	430b      	orrs	r3, r1
 8001606:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b10      	cmp	r3, #16
 800160e:	d140      	bne.n	8001692 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001610:	4b27      	ldr	r3, [pc, #156]	; (80016b0 <HAL_ADC_ConfigChannel+0x1dc>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4927      	ldr	r1, [pc, #156]	; (80016b4 <HAL_ADC_ConfigChannel+0x1e0>)
 8001616:	0018      	movs	r0, r3
 8001618:	f7fe fd76 	bl	8000108 <__udivsi3>
 800161c:	0003      	movs	r3, r0
 800161e:	001a      	movs	r2, r3
 8001620:	0013      	movs	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	189b      	adds	r3, r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800162a:	e002      	b.n	8001632 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	3b01      	subs	r3, #1
 8001630:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f9      	bne.n	800162c <HAL_ADC_ConfigChannel+0x158>
 8001638:	e02b      	b.n	8001692 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2101      	movs	r1, #1
 8001646:	4099      	lsls	r1, r3
 8001648:	000b      	movs	r3, r1
 800164a:	43d9      	mvns	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	400a      	ands	r2, r1
 8001652:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b10      	cmp	r3, #16
 800165a:	d003      	beq.n	8001664 <HAL_ADC_ConfigChannel+0x190>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b11      	cmp	r3, #17
 8001662:	d116      	bne.n	8001692 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_ADC_ConfigChannel+0x1d8>)
 8001666:	6819      	ldr	r1, [r3, #0]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b10      	cmp	r3, #16
 800166e:	d101      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x1a0>
 8001670:	4a11      	ldr	r2, [pc, #68]	; (80016b8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001672:	e000      	b.n	8001676 <HAL_ADC_ConfigChannel+0x1a2>
 8001674:	4a11      	ldr	r2, [pc, #68]	; (80016bc <HAL_ADC_ConfigChannel+0x1e8>)
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <HAL_ADC_ConfigChannel+0x1d8>)
 8001678:	400a      	ands	r2, r1
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	e009      	b.n	8001692 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001682:	2220      	movs	r2, #32
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800168a:	230f      	movs	r3, #15
 800168c:	18fb      	adds	r3, r7, r3
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2234      	movs	r2, #52	; 0x34
 8001696:	2100      	movs	r1, #0
 8001698:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800169a:	230f      	movs	r3, #15
 800169c:	18fb      	adds	r3, r7, r3
 800169e:	781b      	ldrb	r3, [r3, #0]
}
 80016a0:	0018      	movs	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b004      	add	sp, #16
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	00001001 	.word	0x00001001
 80016ac:	40012708 	.word	0x40012708
 80016b0:	20000000 	.word	0x20000000
 80016b4:	000f4240 	.word	0x000f4240
 80016b8:	ff7fffff 	.word	0xff7fffff
 80016bc:	ffbfffff 	.word	0xffbfffff

080016c0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2203      	movs	r2, #3
 80016d8:	4013      	ands	r3, r2
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d112      	bne.n	8001704 <ADC_Enable+0x44>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2201      	movs	r2, #1
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d009      	beq.n	8001700 <ADC_Enable+0x40>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	401a      	ands	r2, r3
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	021b      	lsls	r3, r3, #8
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d101      	bne.n	8001704 <ADC_Enable+0x44>
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <ADC_Enable+0x46>
 8001704:	2300      	movs	r3, #0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d14b      	bne.n	80017a2 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4a26      	ldr	r2, [pc, #152]	; (80017ac <ADC_Enable+0xec>)
 8001712:	4013      	ands	r3, r2
 8001714:	d00d      	beq.n	8001732 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800171a:	2210      	movs	r2, #16
 800171c:	431a      	orrs	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001726:	2201      	movs	r2, #1
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e038      	b.n	80017a4 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2101      	movs	r1, #1
 800173e:	430a      	orrs	r2, r1
 8001740:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001742:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <ADC_Enable+0xf0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	491b      	ldr	r1, [pc, #108]	; (80017b4 <ADC_Enable+0xf4>)
 8001748:	0018      	movs	r0, r3
 800174a:	f7fe fcdd 	bl	8000108 <__udivsi3>
 800174e:	0003      	movs	r3, r0
 8001750:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001752:	e002      	b.n	800175a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	3b01      	subs	r3, #1
 8001758:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1f9      	bne.n	8001754 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001760:	f7ff fcec 	bl	800113c <HAL_GetTick>
 8001764:	0003      	movs	r3, r0
 8001766:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001768:	e014      	b.n	8001794 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800176a:	f7ff fce7 	bl	800113c <HAL_GetTick>
 800176e:	0002      	movs	r2, r0
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d90d      	bls.n	8001794 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177c:	2210      	movs	r2, #16
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001788:	2201      	movs	r2, #1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e007      	b.n	80017a4 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2201      	movs	r2, #1
 800179c:	4013      	ands	r3, r2
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d1e3      	bne.n	800176a <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	0018      	movs	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b004      	add	sp, #16
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	80000017 	.word	0x80000017
 80017b0:	20000000 	.word	0x20000000
 80017b4:	000f4240 	.word	0x000f4240

080017b8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c0:	2317      	movs	r3, #23
 80017c2:	18fb      	adds	r3, r7, r3
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2234      	movs	r2, #52	; 0x34
 80017d4:	5c9b      	ldrb	r3, [r3, r2]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d101      	bne.n	80017de <HAL_ADCEx_Calibration_Start+0x26>
 80017da:	2302      	movs	r3, #2
 80017dc:	e084      	b.n	80018e8 <HAL_ADCEx_Calibration_Start+0x130>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2234      	movs	r2, #52	; 0x34
 80017e2:	2101      	movs	r1, #1
 80017e4:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2203      	movs	r2, #3
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d112      	bne.n	800181a <HAL_ADCEx_Calibration_Start+0x62>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2201      	movs	r2, #1
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d009      	beq.n	8001816 <HAL_ADCEx_Calibration_Start+0x5e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	401a      	ands	r2, r3
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	429a      	cmp	r2, r3
 8001814:	d101      	bne.n	800181a <HAL_ADCEx_Calibration_Start+0x62>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_ADCEx_Calibration_Start+0x64>
 800181a:	2300      	movs	r3, #0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d152      	bne.n	80018c6 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001824:	4a32      	ldr	r2, [pc, #200]	; (80018f0 <HAL_ADCEx_Calibration_Start+0x138>)
 8001826:	4013      	ands	r3, r2
 8001828:	2202      	movs	r2, #2
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	2203      	movs	r2, #3
 8001838:	4013      	ands	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2103      	movs	r1, #3
 8001848:	438a      	bics	r2, r1
 800184a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2180      	movs	r1, #128	; 0x80
 8001858:	0609      	lsls	r1, r1, #24
 800185a:	430a      	orrs	r2, r1
 800185c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800185e:	f7ff fc6d 	bl	800113c <HAL_GetTick>
 8001862:	0003      	movs	r3, r0
 8001864:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001866:	e014      	b.n	8001892 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001868:	f7ff fc68 	bl	800113c <HAL_GetTick>
 800186c:	0002      	movs	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d90d      	bls.n	8001892 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187a:	2212      	movs	r2, #18
 800187c:	4393      	bics	r3, r2
 800187e:	2210      	movs	r2, #16
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2234      	movs	r2, #52	; 0x34
 800188a:	2100      	movs	r1, #0
 800188c:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e02a      	b.n	80018e8 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	0fdb      	lsrs	r3, r3, #31
 800189a:	07da      	lsls	r2, r3, #31
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	061b      	lsls	r3, r3, #24
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d0e1      	beq.n	8001868 <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68d9      	ldr	r1, [r3, #12]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b8:	2203      	movs	r2, #3
 80018ba:	4393      	bics	r3, r2
 80018bc:	2201      	movs	r2, #1
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	639a      	str	r2, [r3, #56]	; 0x38
 80018c4:	e009      	b.n	80018da <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ca:	2220      	movs	r2, #32
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80018d2:	2317      	movs	r3, #23
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	2201      	movs	r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2234      	movs	r2, #52	; 0x34
 80018de:	2100      	movs	r1, #0
 80018e0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80018e2:	2317      	movs	r3, #23
 80018e4:	18fb      	adds	r3, r7, r3
 80018e6:	781b      	ldrb	r3, [r3, #0]
}
 80018e8:	0018      	movs	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b006      	add	sp, #24
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	fffffefd 	.word	0xfffffefd

080018f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	0002      	movs	r2, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	1dfb      	adds	r3, r7, #7
 8001900:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001902:	1dfb      	adds	r3, r7, #7
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b7f      	cmp	r3, #127	; 0x7f
 8001908:	d828      	bhi.n	800195c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800190a:	4a2f      	ldr	r2, [pc, #188]	; (80019c8 <__NVIC_SetPriority+0xd4>)
 800190c:	1dfb      	adds	r3, r7, #7
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	b25b      	sxtb	r3, r3
 8001912:	089b      	lsrs	r3, r3, #2
 8001914:	33c0      	adds	r3, #192	; 0xc0
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	589b      	ldr	r3, [r3, r2]
 800191a:	1dfa      	adds	r2, r7, #7
 800191c:	7812      	ldrb	r2, [r2, #0]
 800191e:	0011      	movs	r1, r2
 8001920:	2203      	movs	r2, #3
 8001922:	400a      	ands	r2, r1
 8001924:	00d2      	lsls	r2, r2, #3
 8001926:	21ff      	movs	r1, #255	; 0xff
 8001928:	4091      	lsls	r1, r2
 800192a:	000a      	movs	r2, r1
 800192c:	43d2      	mvns	r2, r2
 800192e:	401a      	ands	r2, r3
 8001930:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	019b      	lsls	r3, r3, #6
 8001936:	22ff      	movs	r2, #255	; 0xff
 8001938:	401a      	ands	r2, r3
 800193a:	1dfb      	adds	r3, r7, #7
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	0018      	movs	r0, r3
 8001940:	2303      	movs	r3, #3
 8001942:	4003      	ands	r3, r0
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001948:	481f      	ldr	r0, [pc, #124]	; (80019c8 <__NVIC_SetPriority+0xd4>)
 800194a:	1dfb      	adds	r3, r7, #7
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b25b      	sxtb	r3, r3
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	430a      	orrs	r2, r1
 8001954:	33c0      	adds	r3, #192	; 0xc0
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800195a:	e031      	b.n	80019c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800195c:	4a1b      	ldr	r2, [pc, #108]	; (80019cc <__NVIC_SetPriority+0xd8>)
 800195e:	1dfb      	adds	r3, r7, #7
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	0019      	movs	r1, r3
 8001964:	230f      	movs	r3, #15
 8001966:	400b      	ands	r3, r1
 8001968:	3b08      	subs	r3, #8
 800196a:	089b      	lsrs	r3, r3, #2
 800196c:	3306      	adds	r3, #6
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	18d3      	adds	r3, r2, r3
 8001972:	3304      	adds	r3, #4
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	1dfa      	adds	r2, r7, #7
 8001978:	7812      	ldrb	r2, [r2, #0]
 800197a:	0011      	movs	r1, r2
 800197c:	2203      	movs	r2, #3
 800197e:	400a      	ands	r2, r1
 8001980:	00d2      	lsls	r2, r2, #3
 8001982:	21ff      	movs	r1, #255	; 0xff
 8001984:	4091      	lsls	r1, r2
 8001986:	000a      	movs	r2, r1
 8001988:	43d2      	mvns	r2, r2
 800198a:	401a      	ands	r2, r3
 800198c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	019b      	lsls	r3, r3, #6
 8001992:	22ff      	movs	r2, #255	; 0xff
 8001994:	401a      	ands	r2, r3
 8001996:	1dfb      	adds	r3, r7, #7
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	0018      	movs	r0, r3
 800199c:	2303      	movs	r3, #3
 800199e:	4003      	ands	r3, r0
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019a4:	4809      	ldr	r0, [pc, #36]	; (80019cc <__NVIC_SetPriority+0xd8>)
 80019a6:	1dfb      	adds	r3, r7, #7
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	001c      	movs	r4, r3
 80019ac:	230f      	movs	r3, #15
 80019ae:	4023      	ands	r3, r4
 80019b0:	3b08      	subs	r3, #8
 80019b2:	089b      	lsrs	r3, r3, #2
 80019b4:	430a      	orrs	r2, r1
 80019b6:	3306      	adds	r3, #6
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	18c3      	adds	r3, r0, r3
 80019bc:	3304      	adds	r3, #4
 80019be:	601a      	str	r2, [r3, #0]
}
 80019c0:	46c0      	nop			; (mov r8, r8)
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b003      	add	sp, #12
 80019c6:	bd90      	pop	{r4, r7, pc}
 80019c8:	e000e100 	.word	0xe000e100
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	4a0c      	ldr	r2, [pc, #48]	; (8001a10 <SysTick_Config+0x40>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d901      	bls.n	80019e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e2:	2301      	movs	r3, #1
 80019e4:	e010      	b.n	8001a08 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <SysTick_Config+0x44>)
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	3a01      	subs	r2, #1
 80019ec:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ee:	2301      	movs	r3, #1
 80019f0:	425b      	negs	r3, r3
 80019f2:	2103      	movs	r1, #3
 80019f4:	0018      	movs	r0, r3
 80019f6:	f7ff ff7d 	bl	80018f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <SysTick_Config+0x44>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <SysTick_Config+0x44>)
 8001a02:	2207      	movs	r2, #7
 8001a04:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	0018      	movs	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	b002      	add	sp, #8
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	00ffffff 	.word	0x00ffffff
 8001a14:	e000e010 	.word	0xe000e010

08001a18 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	210f      	movs	r1, #15
 8001a24:	187b      	adds	r3, r7, r1
 8001a26:	1c02      	adds	r2, r0, #0
 8001a28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	187b      	adds	r3, r7, r1
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	b25b      	sxtb	r3, r3
 8001a32:	0011      	movs	r1, r2
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7ff ff5d 	bl	80018f4 <__NVIC_SetPriority>
}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b004      	add	sp, #16
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f7ff ffbf 	bl	80019d0 <SysTick_Config>
 8001a52:	0003      	movs	r3, r0
}
 8001a54:	0018      	movs	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b002      	add	sp, #8
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6a:	e14f      	b.n	8001d0c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2101      	movs	r1, #1
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	4091      	lsls	r1, r2
 8001a76:	000a      	movs	r2, r1
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d100      	bne.n	8001a84 <HAL_GPIO_Init+0x28>
 8001a82:	e140      	b.n	8001d06 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d00b      	beq.n	8001aa4 <HAL_GPIO_Init+0x48>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d007      	beq.n	8001aa4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a98:	2b11      	cmp	r3, #17
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b12      	cmp	r3, #18
 8001aa2:	d130      	bne.n	8001b06 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	2203      	movs	r2, #3
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	0013      	movs	r3, r2
 8001ab4:	43da      	mvns	r2, r3
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	0013      	movs	r3, r2
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ada:	2201      	movs	r2, #1
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	0013      	movs	r3, r2
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	091b      	lsrs	r3, r3, #4
 8001af0:	2201      	movs	r2, #1
 8001af2:	401a      	ands	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	409a      	lsls	r2, r3
 8001af8:	0013      	movs	r3, r2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	2203      	movs	r2, #3
 8001b12:	409a      	lsls	r2, r3
 8001b14:	0013      	movs	r3, r2
 8001b16:	43da      	mvns	r2, r3
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	409a      	lsls	r2, r3
 8001b28:	0013      	movs	r3, r2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_Init+0xea>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b12      	cmp	r3, #18
 8001b44:	d123      	bne.n	8001b8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	08da      	lsrs	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3208      	adds	r2, #8
 8001b4e:	0092      	lsls	r2, r2, #2
 8001b50:	58d3      	ldr	r3, [r2, r3]
 8001b52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	2207      	movs	r2, #7
 8001b58:	4013      	ands	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	409a      	lsls	r2, r3
 8001b60:	0013      	movs	r3, r2
 8001b62:	43da      	mvns	r2, r3
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	691a      	ldr	r2, [r3, #16]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2107      	movs	r1, #7
 8001b72:	400b      	ands	r3, r1
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	409a      	lsls	r2, r3
 8001b78:	0013      	movs	r3, r2
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	08da      	lsrs	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3208      	adds	r2, #8
 8001b88:	0092      	lsls	r2, r2, #2
 8001b8a:	6939      	ldr	r1, [r7, #16]
 8001b8c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	2203      	movs	r2, #3
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	0013      	movs	r3, r2
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2203      	movs	r2, #3
 8001bac:	401a      	ands	r2, r3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	0013      	movs	r3, r2
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	055b      	lsls	r3, r3, #21
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d100      	bne.n	8001bd0 <HAL_GPIO_Init+0x174>
 8001bce:	e09a      	b.n	8001d06 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd0:	4b54      	ldr	r3, [pc, #336]	; (8001d24 <HAL_GPIO_Init+0x2c8>)
 8001bd2:	699a      	ldr	r2, [r3, #24]
 8001bd4:	4b53      	ldr	r3, [pc, #332]	; (8001d24 <HAL_GPIO_Init+0x2c8>)
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	619a      	str	r2, [r3, #24]
 8001bdc:	4b51      	ldr	r3, [pc, #324]	; (8001d24 <HAL_GPIO_Init+0x2c8>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	2201      	movs	r2, #1
 8001be2:	4013      	ands	r3, r2
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001be8:	4a4f      	ldr	r2, [pc, #316]	; (8001d28 <HAL_GPIO_Init+0x2cc>)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	3302      	adds	r3, #2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	589b      	ldr	r3, [r3, r2]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	220f      	movs	r2, #15
 8001c00:	409a      	lsls	r2, r3
 8001c02:	0013      	movs	r3, r2
 8001c04:	43da      	mvns	r2, r3
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	2390      	movs	r3, #144	; 0x90
 8001c10:	05db      	lsls	r3, r3, #23
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d013      	beq.n	8001c3e <HAL_GPIO_Init+0x1e2>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a44      	ldr	r2, [pc, #272]	; (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d00d      	beq.n	8001c3a <HAL_GPIO_Init+0x1de>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a43      	ldr	r2, [pc, #268]	; (8001d30 <HAL_GPIO_Init+0x2d4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d007      	beq.n	8001c36 <HAL_GPIO_Init+0x1da>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a42      	ldr	r2, [pc, #264]	; (8001d34 <HAL_GPIO_Init+0x2d8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d101      	bne.n	8001c32 <HAL_GPIO_Init+0x1d6>
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e006      	b.n	8001c40 <HAL_GPIO_Init+0x1e4>
 8001c32:	2305      	movs	r3, #5
 8001c34:	e004      	b.n	8001c40 <HAL_GPIO_Init+0x1e4>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e002      	b.n	8001c40 <HAL_GPIO_Init+0x1e4>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <HAL_GPIO_Init+0x1e4>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	2103      	movs	r1, #3
 8001c44:	400a      	ands	r2, r1
 8001c46:	0092      	lsls	r2, r2, #2
 8001c48:	4093      	lsls	r3, r2
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c50:	4935      	ldr	r1, [pc, #212]	; (8001d28 <HAL_GPIO_Init+0x2cc>)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	089b      	lsrs	r3, r3, #2
 8001c56:	3302      	adds	r3, #2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c5e:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <HAL_GPIO_Init+0x2dc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	43da      	mvns	r2, r3
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	025b      	lsls	r3, r3, #9
 8001c76:	4013      	ands	r3, r2
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c82:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <HAL_GPIO_Init+0x2dc>)
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001c88:	4b2b      	ldr	r3, [pc, #172]	; (8001d38 <HAL_GPIO_Init+0x2dc>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	43da      	mvns	r2, r3
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	029b      	lsls	r3, r3, #10
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cac:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <HAL_GPIO_Init+0x2dc>)
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb2:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <HAL_GPIO_Init+0x2dc>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	035b      	lsls	r3, r3, #13
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cd6:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <HAL_GPIO_Init+0x2dc>)
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001cdc:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <HAL_GPIO_Init+0x2dc>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	43da      	mvns	r2, r3
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	039b      	lsls	r3, r3, #14
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <HAL_GPIO_Init+0x2dc>)
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	40da      	lsrs	r2, r3
 8001d14:	1e13      	subs	r3, r2, #0
 8001d16:	d000      	beq.n	8001d1a <HAL_GPIO_Init+0x2be>
 8001d18:	e6a8      	b.n	8001a6c <HAL_GPIO_Init+0x10>
  } 
}
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b006      	add	sp, #24
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40010000 	.word	0x40010000
 8001d2c:	48000400 	.word	0x48000400
 8001d30:	48000800 	.word	0x48000800
 8001d34:	48000c00 	.word	0x48000c00
 8001d38:	40010400 	.word	0x40010400

08001d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	000a      	movs	r2, r1
 8001d46:	1cbb      	adds	r3, r7, #2
 8001d48:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	1cba      	adds	r2, r7, #2
 8001d50:	8812      	ldrh	r2, [r2, #0]
 8001d52:	4013      	ands	r3, r2
 8001d54:	d004      	beq.n	8001d60 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001d56:	230f      	movs	r3, #15
 8001d58:	18fb      	adds	r3, r7, r3
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	701a      	strb	r2, [r3, #0]
 8001d5e:	e003      	b.n	8001d68 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d60:	230f      	movs	r3, #15
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001d68:	230f      	movs	r3, #15
 8001d6a:	18fb      	adds	r3, r7, r3
 8001d6c:	781b      	ldrb	r3, [r3, #0]
  }
 8001d6e:	0018      	movs	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b004      	add	sp, #16
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	0008      	movs	r0, r1
 8001d80:	0011      	movs	r1, r2
 8001d82:	1cbb      	adds	r3, r7, #2
 8001d84:	1c02      	adds	r2, r0, #0
 8001d86:	801a      	strh	r2, [r3, #0]
 8001d88:	1c7b      	adds	r3, r7, #1
 8001d8a:	1c0a      	adds	r2, r1, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d8e:	1c7b      	adds	r3, r7, #1
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d004      	beq.n	8001da0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d96:	1cbb      	adds	r3, r7, #2
 8001d98:	881a      	ldrh	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d9e:	e003      	b.n	8001da8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001da0:	1cbb      	adds	r3, r7, #2
 8001da2:	881a      	ldrh	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001da8:	46c0      	nop			; (mov r8, r8)
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b002      	add	sp, #8
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e303      	b.n	80023ca <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d100      	bne.n	8001dce <HAL_RCC_OscConfig+0x1e>
 8001dcc:	e08d      	b.n	8001eea <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001dce:	4bc4      	ldr	r3, [pc, #784]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d00e      	beq.n	8001df8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dda:	4bc1      	ldr	r3, [pc, #772]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	220c      	movs	r2, #12
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d116      	bne.n	8001e14 <HAL_RCC_OscConfig+0x64>
 8001de6:	4bbe      	ldr	r3, [pc, #760]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	025b      	lsls	r3, r3, #9
 8001dee:	401a      	ands	r2, r3
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	025b      	lsls	r3, r3, #9
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d10d      	bne.n	8001e14 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df8:	4bb9      	ldr	r3, [pc, #740]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	029b      	lsls	r3, r3, #10
 8001e00:	4013      	ands	r3, r2
 8001e02:	d100      	bne.n	8001e06 <HAL_RCC_OscConfig+0x56>
 8001e04:	e070      	b.n	8001ee8 <HAL_RCC_OscConfig+0x138>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d000      	beq.n	8001e10 <HAL_RCC_OscConfig+0x60>
 8001e0e:	e06b      	b.n	8001ee8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e2da      	b.n	80023ca <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d107      	bne.n	8001e2c <HAL_RCC_OscConfig+0x7c>
 8001e1c:	4bb0      	ldr	r3, [pc, #704]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4baf      	ldr	r3, [pc, #700]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001e22:	2180      	movs	r1, #128	; 0x80
 8001e24:	0249      	lsls	r1, r1, #9
 8001e26:	430a      	orrs	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	e02f      	b.n	8001e8c <HAL_RCC_OscConfig+0xdc>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10c      	bne.n	8001e4e <HAL_RCC_OscConfig+0x9e>
 8001e34:	4baa      	ldr	r3, [pc, #680]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4ba9      	ldr	r3, [pc, #676]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001e3a:	49aa      	ldr	r1, [pc, #680]	; (80020e4 <HAL_RCC_OscConfig+0x334>)
 8001e3c:	400a      	ands	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	4ba7      	ldr	r3, [pc, #668]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4ba6      	ldr	r3, [pc, #664]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001e46:	49a8      	ldr	r1, [pc, #672]	; (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001e48:	400a      	ands	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	e01e      	b.n	8001e8c <HAL_RCC_OscConfig+0xdc>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b05      	cmp	r3, #5
 8001e54:	d10e      	bne.n	8001e74 <HAL_RCC_OscConfig+0xc4>
 8001e56:	4ba2      	ldr	r3, [pc, #648]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	4ba1      	ldr	r3, [pc, #644]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001e5c:	2180      	movs	r1, #128	; 0x80
 8001e5e:	02c9      	lsls	r1, r1, #11
 8001e60:	430a      	orrs	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	4b9e      	ldr	r3, [pc, #632]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b9d      	ldr	r3, [pc, #628]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001e6a:	2180      	movs	r1, #128	; 0x80
 8001e6c:	0249      	lsls	r1, r1, #9
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	e00b      	b.n	8001e8c <HAL_RCC_OscConfig+0xdc>
 8001e74:	4b9a      	ldr	r3, [pc, #616]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b99      	ldr	r3, [pc, #612]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001e7a:	499a      	ldr	r1, [pc, #616]	; (80020e4 <HAL_RCC_OscConfig+0x334>)
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	4b97      	ldr	r3, [pc, #604]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b96      	ldr	r3, [pc, #600]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001e86:	4998      	ldr	r1, [pc, #608]	; (80020e8 <HAL_RCC_OscConfig+0x338>)
 8001e88:	400a      	ands	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d014      	beq.n	8001ebe <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7ff f952 	bl	800113c <HAL_GetTick>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e9e:	f7ff f94d 	bl	800113c <HAL_GetTick>
 8001ea2:	0002      	movs	r2, r0
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b64      	cmp	r3, #100	; 0x64
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e28c      	b.n	80023ca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb0:	4b8b      	ldr	r3, [pc, #556]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	029b      	lsls	r3, r3, #10
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d0f0      	beq.n	8001e9e <HAL_RCC_OscConfig+0xee>
 8001ebc:	e015      	b.n	8001eea <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebe:	f7ff f93d 	bl	800113c <HAL_GetTick>
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec8:	f7ff f938 	bl	800113c <HAL_GetTick>
 8001ecc:	0002      	movs	r2, r0
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b64      	cmp	r3, #100	; 0x64
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e277      	b.n	80023ca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eda:	4b81      	ldr	r3, [pc, #516]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	029b      	lsls	r3, r3, #10
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x118>
 8001ee6:	e000      	b.n	8001eea <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d100      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x146>
 8001ef4:	e069      	b.n	8001fca <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ef6:	4b7a      	ldr	r3, [pc, #488]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	220c      	movs	r2, #12
 8001efc:	4013      	ands	r3, r2
 8001efe:	d00b      	beq.n	8001f18 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f00:	4b77      	ldr	r3, [pc, #476]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	220c      	movs	r2, #12
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d11c      	bne.n	8001f46 <HAL_RCC_OscConfig+0x196>
 8001f0c:	4b74      	ldr	r3, [pc, #464]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	025b      	lsls	r3, r3, #9
 8001f14:	4013      	ands	r3, r2
 8001f16:	d116      	bne.n	8001f46 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f18:	4b71      	ldr	r3, [pc, #452]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d005      	beq.n	8001f2e <HAL_RCC_OscConfig+0x17e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d001      	beq.n	8001f2e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e24d      	b.n	80023ca <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2e:	4b6c      	ldr	r3, [pc, #432]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	22f8      	movs	r2, #248	; 0xf8
 8001f34:	4393      	bics	r3, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	00da      	lsls	r2, r3, #3
 8001f3e:	4b68      	ldr	r3, [pc, #416]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001f40:	430a      	orrs	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f44:	e041      	b.n	8001fca <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d024      	beq.n	8001f98 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f4e:	4b64      	ldr	r3, [pc, #400]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4b63      	ldr	r3, [pc, #396]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001f54:	2101      	movs	r1, #1
 8001f56:	430a      	orrs	r2, r1
 8001f58:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7ff f8ef 	bl	800113c <HAL_GetTick>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f64:	f7ff f8ea 	bl	800113c <HAL_GetTick>
 8001f68:	0002      	movs	r2, r0
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e229      	b.n	80023ca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f76:	4b5a      	ldr	r3, [pc, #360]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d0f1      	beq.n	8001f64 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f80:	4b57      	ldr	r3, [pc, #348]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	22f8      	movs	r2, #248	; 0xf8
 8001f86:	4393      	bics	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	00da      	lsls	r2, r3, #3
 8001f90:	4b53      	ldr	r3, [pc, #332]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001f92:	430a      	orrs	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	e018      	b.n	8001fca <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f98:	4b51      	ldr	r3, [pc, #324]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b50      	ldr	r3, [pc, #320]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	438a      	bics	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7ff f8ca 	bl	800113c <HAL_GetTick>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fae:	f7ff f8c5 	bl	800113c <HAL_GetTick>
 8001fb2:	0002      	movs	r2, r0
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e204      	b.n	80023ca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc0:	4b47      	ldr	r3, [pc, #284]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d1f1      	bne.n	8001fae <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2208      	movs	r2, #8
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d036      	beq.n	8002042 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d019      	beq.n	8002010 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fdc:	4b40      	ldr	r3, [pc, #256]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001fde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fe0:	4b3f      	ldr	r3, [pc, #252]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe8:	f7ff f8a8 	bl	800113c <HAL_GetTick>
 8001fec:	0003      	movs	r3, r0
 8001fee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff2:	f7ff f8a3 	bl	800113c <HAL_GetTick>
 8001ff6:	0002      	movs	r2, r0
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e1e2      	b.n	80023ca <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002004:	4b36      	ldr	r3, [pc, #216]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	2202      	movs	r2, #2
 800200a:	4013      	ands	r3, r2
 800200c:	d0f1      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x242>
 800200e:	e018      	b.n	8002042 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002010:	4b33      	ldr	r3, [pc, #204]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8002012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002014:	4b32      	ldr	r3, [pc, #200]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8002016:	2101      	movs	r1, #1
 8002018:	438a      	bics	r2, r1
 800201a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201c:	f7ff f88e 	bl	800113c <HAL_GetTick>
 8002020:	0003      	movs	r3, r0
 8002022:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002026:	f7ff f889 	bl	800113c <HAL_GetTick>
 800202a:	0002      	movs	r2, r0
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e1c8      	b.n	80023ca <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002038:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	2202      	movs	r2, #2
 800203e:	4013      	ands	r3, r2
 8002040:	d1f1      	bne.n	8002026 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2204      	movs	r2, #4
 8002048:	4013      	ands	r3, r2
 800204a:	d100      	bne.n	800204e <HAL_RCC_OscConfig+0x29e>
 800204c:	e0b6      	b.n	80021bc <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204e:	231f      	movs	r3, #31
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002056:	4b22      	ldr	r3, [pc, #136]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8002058:	69da      	ldr	r2, [r3, #28]
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	055b      	lsls	r3, r3, #21
 800205e:	4013      	ands	r3, r2
 8002060:	d111      	bne.n	8002086 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	4b1f      	ldr	r3, [pc, #124]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8002064:	69da      	ldr	r2, [r3, #28]
 8002066:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8002068:	2180      	movs	r1, #128	; 0x80
 800206a:	0549      	lsls	r1, r1, #21
 800206c:	430a      	orrs	r2, r1
 800206e:	61da      	str	r2, [r3, #28]
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 8002072:	69da      	ldr	r2, [r3, #28]
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	055b      	lsls	r3, r3, #21
 8002078:	4013      	ands	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800207e:	231f      	movs	r3, #31
 8002080:	18fb      	adds	r3, r7, r3
 8002082:	2201      	movs	r2, #1
 8002084:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002086:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_RCC_OscConfig+0x33c>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	2380      	movs	r3, #128	; 0x80
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4013      	ands	r3, r2
 8002090:	d11a      	bne.n	80020c8 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002092:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_RCC_OscConfig+0x33c>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <HAL_RCC_OscConfig+0x33c>)
 8002098:	2180      	movs	r1, #128	; 0x80
 800209a:	0049      	lsls	r1, r1, #1
 800209c:	430a      	orrs	r2, r1
 800209e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a0:	f7ff f84c 	bl	800113c <HAL_GetTick>
 80020a4:	0003      	movs	r3, r0
 80020a6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020aa:	f7ff f847 	bl	800113c <HAL_GetTick>
 80020ae:	0002      	movs	r2, r0
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b64      	cmp	r3, #100	; 0x64
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e186      	b.n	80023ca <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_RCC_OscConfig+0x33c>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4013      	ands	r3, r2
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d10f      	bne.n	80020f0 <HAL_RCC_OscConfig+0x340>
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 80020d2:	6a1a      	ldr	r2, [r3, #32]
 80020d4:	4b02      	ldr	r3, [pc, #8]	; (80020e0 <HAL_RCC_OscConfig+0x330>)
 80020d6:	2101      	movs	r1, #1
 80020d8:	430a      	orrs	r2, r1
 80020da:	621a      	str	r2, [r3, #32]
 80020dc:	e036      	b.n	800214c <HAL_RCC_OscConfig+0x39c>
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	40021000 	.word	0x40021000
 80020e4:	fffeffff 	.word	0xfffeffff
 80020e8:	fffbffff 	.word	0xfffbffff
 80020ec:	40007000 	.word	0x40007000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10c      	bne.n	8002112 <HAL_RCC_OscConfig+0x362>
 80020f8:	4bb6      	ldr	r3, [pc, #728]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 80020fa:	6a1a      	ldr	r2, [r3, #32]
 80020fc:	4bb5      	ldr	r3, [pc, #724]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 80020fe:	2101      	movs	r1, #1
 8002100:	438a      	bics	r2, r1
 8002102:	621a      	str	r2, [r3, #32]
 8002104:	4bb3      	ldr	r3, [pc, #716]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 8002106:	6a1a      	ldr	r2, [r3, #32]
 8002108:	4bb2      	ldr	r3, [pc, #712]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 800210a:	2104      	movs	r1, #4
 800210c:	438a      	bics	r2, r1
 800210e:	621a      	str	r2, [r3, #32]
 8002110:	e01c      	b.n	800214c <HAL_RCC_OscConfig+0x39c>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b05      	cmp	r3, #5
 8002118:	d10c      	bne.n	8002134 <HAL_RCC_OscConfig+0x384>
 800211a:	4bae      	ldr	r3, [pc, #696]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 800211c:	6a1a      	ldr	r2, [r3, #32]
 800211e:	4bad      	ldr	r3, [pc, #692]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 8002120:	2104      	movs	r1, #4
 8002122:	430a      	orrs	r2, r1
 8002124:	621a      	str	r2, [r3, #32]
 8002126:	4bab      	ldr	r3, [pc, #684]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 8002128:	6a1a      	ldr	r2, [r3, #32]
 800212a:	4baa      	ldr	r3, [pc, #680]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 800212c:	2101      	movs	r1, #1
 800212e:	430a      	orrs	r2, r1
 8002130:	621a      	str	r2, [r3, #32]
 8002132:	e00b      	b.n	800214c <HAL_RCC_OscConfig+0x39c>
 8002134:	4ba7      	ldr	r3, [pc, #668]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 8002136:	6a1a      	ldr	r2, [r3, #32]
 8002138:	4ba6      	ldr	r3, [pc, #664]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 800213a:	2101      	movs	r1, #1
 800213c:	438a      	bics	r2, r1
 800213e:	621a      	str	r2, [r3, #32]
 8002140:	4ba4      	ldr	r3, [pc, #656]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 8002142:	6a1a      	ldr	r2, [r3, #32]
 8002144:	4ba3      	ldr	r3, [pc, #652]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 8002146:	2104      	movs	r1, #4
 8002148:	438a      	bics	r2, r1
 800214a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d014      	beq.n	800217e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002154:	f7fe fff2 	bl	800113c <HAL_GetTick>
 8002158:	0003      	movs	r3, r0
 800215a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215c:	e009      	b.n	8002172 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800215e:	f7fe ffed 	bl	800113c <HAL_GetTick>
 8002162:	0002      	movs	r2, r0
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	4a9b      	ldr	r2, [pc, #620]	; (80023d8 <HAL_RCC_OscConfig+0x628>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e12b      	b.n	80023ca <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002172:	4b98      	ldr	r3, [pc, #608]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	2202      	movs	r2, #2
 8002178:	4013      	ands	r3, r2
 800217a:	d0f0      	beq.n	800215e <HAL_RCC_OscConfig+0x3ae>
 800217c:	e013      	b.n	80021a6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217e:	f7fe ffdd 	bl	800113c <HAL_GetTick>
 8002182:	0003      	movs	r3, r0
 8002184:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002186:	e009      	b.n	800219c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002188:	f7fe ffd8 	bl	800113c <HAL_GetTick>
 800218c:	0002      	movs	r2, r0
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	4a91      	ldr	r2, [pc, #580]	; (80023d8 <HAL_RCC_OscConfig+0x628>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e116      	b.n	80023ca <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219c:	4b8d      	ldr	r3, [pc, #564]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	2202      	movs	r2, #2
 80021a2:	4013      	ands	r3, r2
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021a6:	231f      	movs	r3, #31
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d105      	bne.n	80021bc <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b0:	4b88      	ldr	r3, [pc, #544]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 80021b2:	69da      	ldr	r2, [r3, #28]
 80021b4:	4b87      	ldr	r3, [pc, #540]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 80021b6:	4989      	ldr	r1, [pc, #548]	; (80023dc <HAL_RCC_OscConfig+0x62c>)
 80021b8:	400a      	ands	r2, r1
 80021ba:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2210      	movs	r2, #16
 80021c2:	4013      	ands	r3, r2
 80021c4:	d063      	beq.n	800228e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d12a      	bne.n	8002224 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80021ce:	4b81      	ldr	r3, [pc, #516]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 80021d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021d2:	4b80      	ldr	r3, [pc, #512]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 80021d4:	2104      	movs	r1, #4
 80021d6:	430a      	orrs	r2, r1
 80021d8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80021da:	4b7e      	ldr	r3, [pc, #504]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 80021dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021de:	4b7d      	ldr	r3, [pc, #500]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 80021e0:	2101      	movs	r1, #1
 80021e2:	430a      	orrs	r2, r1
 80021e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e6:	f7fe ffa9 	bl	800113c <HAL_GetTick>
 80021ea:	0003      	movs	r3, r0
 80021ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80021f0:	f7fe ffa4 	bl	800113c <HAL_GetTick>
 80021f4:	0002      	movs	r2, r0
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e0e3      	b.n	80023ca <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002202:	4b74      	ldr	r3, [pc, #464]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 8002204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002206:	2202      	movs	r2, #2
 8002208:	4013      	ands	r3, r2
 800220a:	d0f1      	beq.n	80021f0 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800220c:	4b71      	ldr	r3, [pc, #452]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 800220e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002210:	22f8      	movs	r2, #248	; 0xf8
 8002212:	4393      	bics	r3, r2
 8002214:	0019      	movs	r1, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	00da      	lsls	r2, r3, #3
 800221c:	4b6d      	ldr	r3, [pc, #436]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 800221e:	430a      	orrs	r2, r1
 8002220:	635a      	str	r2, [r3, #52]	; 0x34
 8002222:	e034      	b.n	800228e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	3305      	adds	r3, #5
 800222a:	d111      	bne.n	8002250 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800222c:	4b69      	ldr	r3, [pc, #420]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 800222e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002230:	4b68      	ldr	r3, [pc, #416]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 8002232:	2104      	movs	r1, #4
 8002234:	438a      	bics	r2, r1
 8002236:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002238:	4b66      	ldr	r3, [pc, #408]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 800223a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223c:	22f8      	movs	r2, #248	; 0xf8
 800223e:	4393      	bics	r3, r2
 8002240:	0019      	movs	r1, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	00da      	lsls	r2, r3, #3
 8002248:	4b62      	ldr	r3, [pc, #392]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 800224a:	430a      	orrs	r2, r1
 800224c:	635a      	str	r2, [r3, #52]	; 0x34
 800224e:	e01e      	b.n	800228e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002250:	4b60      	ldr	r3, [pc, #384]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 8002252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002254:	4b5f      	ldr	r3, [pc, #380]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 8002256:	2104      	movs	r1, #4
 8002258:	430a      	orrs	r2, r1
 800225a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800225c:	4b5d      	ldr	r3, [pc, #372]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 800225e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002260:	4b5c      	ldr	r3, [pc, #368]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 8002262:	2101      	movs	r1, #1
 8002264:	438a      	bics	r2, r1
 8002266:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002268:	f7fe ff68 	bl	800113c <HAL_GetTick>
 800226c:	0003      	movs	r3, r0
 800226e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002272:	f7fe ff63 	bl	800113c <HAL_GetTick>
 8002276:	0002      	movs	r2, r0
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e0a2      	b.n	80023ca <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002284:	4b53      	ldr	r3, [pc, #332]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 8002286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002288:	2202      	movs	r2, #2
 800228a:	4013      	ands	r3, r2
 800228c:	d1f1      	bne.n	8002272 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d100      	bne.n	8002298 <HAL_RCC_OscConfig+0x4e8>
 8002296:	e097      	b.n	80023c8 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002298:	4b4e      	ldr	r3, [pc, #312]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	220c      	movs	r2, #12
 800229e:	4013      	ands	r3, r2
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d100      	bne.n	80022a6 <HAL_RCC_OscConfig+0x4f6>
 80022a4:	e06b      	b.n	800237e <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d14c      	bne.n	8002348 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ae:	4b49      	ldr	r3, [pc, #292]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4b48      	ldr	r3, [pc, #288]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 80022b4:	494a      	ldr	r1, [pc, #296]	; (80023e0 <HAL_RCC_OscConfig+0x630>)
 80022b6:	400a      	ands	r2, r1
 80022b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7fe ff3f 	bl	800113c <HAL_GetTick>
 80022be:	0003      	movs	r3, r0
 80022c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c4:	f7fe ff3a 	bl	800113c <HAL_GetTick>
 80022c8:	0002      	movs	r2, r0
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e079      	b.n	80023ca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d6:	4b3f      	ldr	r3, [pc, #252]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	049b      	lsls	r3, r3, #18
 80022de:	4013      	ands	r3, r2
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e2:	4b3c      	ldr	r3, [pc, #240]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	220f      	movs	r2, #15
 80022e8:	4393      	bics	r3, r2
 80022ea:	0019      	movs	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f0:	4b38      	ldr	r3, [pc, #224]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 80022f2:	430a      	orrs	r2, r1
 80022f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80022f6:	4b37      	ldr	r3, [pc, #220]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4a3a      	ldr	r2, [pc, #232]	; (80023e4 <HAL_RCC_OscConfig+0x634>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	0019      	movs	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	431a      	orrs	r2, r3
 800230a:	4b32      	ldr	r3, [pc, #200]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 800230c:	430a      	orrs	r2, r1
 800230e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002310:	4b30      	ldr	r3, [pc, #192]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4b2f      	ldr	r3, [pc, #188]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 8002316:	2180      	movs	r1, #128	; 0x80
 8002318:	0449      	lsls	r1, r1, #17
 800231a:	430a      	orrs	r2, r1
 800231c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7fe ff0d 	bl	800113c <HAL_GetTick>
 8002322:	0003      	movs	r3, r0
 8002324:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002328:	f7fe ff08 	bl	800113c <HAL_GetTick>
 800232c:	0002      	movs	r2, r0
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e047      	b.n	80023ca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800233a:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	049b      	lsls	r3, r3, #18
 8002342:	4013      	ands	r3, r2
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x578>
 8002346:	e03f      	b.n	80023c8 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002348:	4b22      	ldr	r3, [pc, #136]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b21      	ldr	r3, [pc, #132]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 800234e:	4924      	ldr	r1, [pc, #144]	; (80023e0 <HAL_RCC_OscConfig+0x630>)
 8002350:	400a      	ands	r2, r1
 8002352:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7fe fef2 	bl	800113c <HAL_GetTick>
 8002358:	0003      	movs	r3, r0
 800235a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800235e:	f7fe feed 	bl	800113c <HAL_GetTick>
 8002362:	0002      	movs	r2, r0
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e02c      	b.n	80023ca <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002370:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	049b      	lsls	r3, r3, #18
 8002378:	4013      	ands	r3, r2
 800237a:	d1f0      	bne.n	800235e <HAL_RCC_OscConfig+0x5ae>
 800237c:	e024      	b.n	80023c8 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e01f      	b.n	80023ca <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800238a:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002390:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <HAL_RCC_OscConfig+0x624>)
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	2380      	movs	r3, #128	; 0x80
 800239a:	025b      	lsls	r3, r3, #9
 800239c:	401a      	ands	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d10e      	bne.n	80023c4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	220f      	movs	r2, #15
 80023aa:	401a      	ands	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d107      	bne.n	80023c4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	23f0      	movs	r3, #240	; 0xf0
 80023b8:	039b      	lsls	r3, r3, #14
 80023ba:	401a      	ands	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	0018      	movs	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b008      	add	sp, #32
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	40021000 	.word	0x40021000
 80023d8:	00001388 	.word	0x00001388
 80023dc:	efffffff 	.word	0xefffffff
 80023e0:	feffffff 	.word	0xfeffffff
 80023e4:	ffc2ffff 	.word	0xffc2ffff

080023e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0b3      	b.n	8002564 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023fc:	4b5b      	ldr	r3, [pc, #364]	; (800256c <HAL_RCC_ClockConfig+0x184>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2201      	movs	r2, #1
 8002402:	4013      	ands	r3, r2
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d911      	bls.n	800242e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240a:	4b58      	ldr	r3, [pc, #352]	; (800256c <HAL_RCC_ClockConfig+0x184>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2201      	movs	r2, #1
 8002410:	4393      	bics	r3, r2
 8002412:	0019      	movs	r1, r3
 8002414:	4b55      	ldr	r3, [pc, #340]	; (800256c <HAL_RCC_ClockConfig+0x184>)
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800241c:	4b53      	ldr	r3, [pc, #332]	; (800256c <HAL_RCC_ClockConfig+0x184>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2201      	movs	r2, #1
 8002422:	4013      	ands	r3, r2
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d001      	beq.n	800242e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e09a      	b.n	8002564 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2202      	movs	r2, #2
 8002434:	4013      	ands	r3, r2
 8002436:	d015      	beq.n	8002464 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2204      	movs	r2, #4
 800243e:	4013      	ands	r3, r2
 8002440:	d006      	beq.n	8002450 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002442:	4b4b      	ldr	r3, [pc, #300]	; (8002570 <HAL_RCC_ClockConfig+0x188>)
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	4b4a      	ldr	r3, [pc, #296]	; (8002570 <HAL_RCC_ClockConfig+0x188>)
 8002448:	21e0      	movs	r1, #224	; 0xe0
 800244a:	00c9      	lsls	r1, r1, #3
 800244c:	430a      	orrs	r2, r1
 800244e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002450:	4b47      	ldr	r3, [pc, #284]	; (8002570 <HAL_RCC_ClockConfig+0x188>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	22f0      	movs	r2, #240	; 0xf0
 8002456:	4393      	bics	r3, r2
 8002458:	0019      	movs	r1, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	4b44      	ldr	r3, [pc, #272]	; (8002570 <HAL_RCC_ClockConfig+0x188>)
 8002460:	430a      	orrs	r2, r1
 8002462:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2201      	movs	r2, #1
 800246a:	4013      	ands	r3, r2
 800246c:	d040      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d107      	bne.n	8002486 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	4b3e      	ldr	r3, [pc, #248]	; (8002570 <HAL_RCC_ClockConfig+0x188>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	029b      	lsls	r3, r3, #10
 800247e:	4013      	ands	r3, r2
 8002480:	d114      	bne.n	80024ac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e06e      	b.n	8002564 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248e:	4b38      	ldr	r3, [pc, #224]	; (8002570 <HAL_RCC_ClockConfig+0x188>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	2380      	movs	r3, #128	; 0x80
 8002494:	049b      	lsls	r3, r3, #18
 8002496:	4013      	ands	r3, r2
 8002498:	d108      	bne.n	80024ac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e062      	b.n	8002564 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249e:	4b34      	ldr	r3, [pc, #208]	; (8002570 <HAL_RCC_ClockConfig+0x188>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2202      	movs	r2, #2
 80024a4:	4013      	ands	r3, r2
 80024a6:	d101      	bne.n	80024ac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e05b      	b.n	8002564 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ac:	4b30      	ldr	r3, [pc, #192]	; (8002570 <HAL_RCC_ClockConfig+0x188>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2203      	movs	r2, #3
 80024b2:	4393      	bics	r3, r2
 80024b4:	0019      	movs	r1, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <HAL_RCC_ClockConfig+0x188>)
 80024bc:	430a      	orrs	r2, r1
 80024be:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c0:	f7fe fe3c 	bl	800113c <HAL_GetTick>
 80024c4:	0003      	movs	r3, r0
 80024c6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c8:	e009      	b.n	80024de <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ca:	f7fe fe37 	bl	800113c <HAL_GetTick>
 80024ce:	0002      	movs	r2, r0
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	4a27      	ldr	r2, [pc, #156]	; (8002574 <HAL_RCC_ClockConfig+0x18c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e042      	b.n	8002564 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	4b24      	ldr	r3, [pc, #144]	; (8002570 <HAL_RCC_ClockConfig+0x188>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	220c      	movs	r2, #12
 80024e4:	401a      	ands	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d1ec      	bne.n	80024ca <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024f0:	4b1e      	ldr	r3, [pc, #120]	; (800256c <HAL_RCC_ClockConfig+0x184>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2201      	movs	r2, #1
 80024f6:	4013      	ands	r3, r2
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d211      	bcs.n	8002522 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b1b      	ldr	r3, [pc, #108]	; (800256c <HAL_RCC_ClockConfig+0x184>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2201      	movs	r2, #1
 8002504:	4393      	bics	r3, r2
 8002506:	0019      	movs	r1, r3
 8002508:	4b18      	ldr	r3, [pc, #96]	; (800256c <HAL_RCC_ClockConfig+0x184>)
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002510:	4b16      	ldr	r3, [pc, #88]	; (800256c <HAL_RCC_ClockConfig+0x184>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2201      	movs	r2, #1
 8002516:	4013      	ands	r3, r2
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d001      	beq.n	8002522 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e020      	b.n	8002564 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2204      	movs	r2, #4
 8002528:	4013      	ands	r3, r2
 800252a:	d009      	beq.n	8002540 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800252c:	4b10      	ldr	r3, [pc, #64]	; (8002570 <HAL_RCC_ClockConfig+0x188>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	4a11      	ldr	r2, [pc, #68]	; (8002578 <HAL_RCC_ClockConfig+0x190>)
 8002532:	4013      	ands	r3, r2
 8002534:	0019      	movs	r1, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <HAL_RCC_ClockConfig+0x188>)
 800253c:	430a      	orrs	r2, r1
 800253e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002540:	f000 f820 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 8002544:	0001      	movs	r1, r0
 8002546:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <HAL_RCC_ClockConfig+0x188>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	091b      	lsrs	r3, r3, #4
 800254c:	220f      	movs	r2, #15
 800254e:	4013      	ands	r3, r2
 8002550:	4a0a      	ldr	r2, [pc, #40]	; (800257c <HAL_RCC_ClockConfig+0x194>)
 8002552:	5cd3      	ldrb	r3, [r2, r3]
 8002554:	000a      	movs	r2, r1
 8002556:	40da      	lsrs	r2, r3
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <HAL_RCC_ClockConfig+0x198>)
 800255a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800255c:	2000      	movs	r0, #0
 800255e:	f7fe fda7 	bl	80010b0 <HAL_InitTick>
  
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	b004      	add	sp, #16
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40022000 	.word	0x40022000
 8002570:	40021000 	.word	0x40021000
 8002574:	00001388 	.word	0x00001388
 8002578:	fffff8ff 	.word	0xfffff8ff
 800257c:	08003638 	.word	0x08003638
 8002580:	20000000 	.word	0x20000000

08002584 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002584:	b590      	push	{r4, r7, lr}
 8002586:	b08f      	sub	sp, #60	; 0x3c
 8002588:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800258a:	2314      	movs	r3, #20
 800258c:	18fb      	adds	r3, r7, r3
 800258e:	4a2b      	ldr	r2, [pc, #172]	; (800263c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002590:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002592:	c313      	stmia	r3!, {r0, r1, r4}
 8002594:	6812      	ldr	r2, [r2, #0]
 8002596:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	4a29      	ldr	r2, [pc, #164]	; (8002640 <HAL_RCC_GetSysClockFreq+0xbc>)
 800259c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800259e:	c313      	stmia	r3!, {r0, r1, r4}
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a8:	2300      	movs	r3, #0
 80025aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ac:	2300      	movs	r3, #0
 80025ae:	637b      	str	r3, [r7, #52]	; 0x34
 80025b0:	2300      	movs	r3, #0
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80025b8:	4b22      	ldr	r3, [pc, #136]	; (8002644 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c0:	220c      	movs	r2, #12
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d002      	beq.n	80025ce <HAL_RCC_GetSysClockFreq+0x4a>
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d003      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0x50>
 80025cc:	e02d      	b.n	800262a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025ce:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025d0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025d2:	e02d      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80025d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d6:	0c9b      	lsrs	r3, r3, #18
 80025d8:	220f      	movs	r2, #15
 80025da:	4013      	ands	r3, r2
 80025dc:	2214      	movs	r2, #20
 80025de:	18ba      	adds	r2, r7, r2
 80025e0:	5cd3      	ldrb	r3, [r2, r3]
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80025e4:	4b17      	ldr	r3, [pc, #92]	; (8002644 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	220f      	movs	r2, #15
 80025ea:	4013      	ands	r3, r2
 80025ec:	1d3a      	adds	r2, r7, #4
 80025ee:	5cd3      	ldrb	r3, [r2, r3]
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80025f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025f4:	2380      	movs	r3, #128	; 0x80
 80025f6:	025b      	lsls	r3, r3, #9
 80025f8:	4013      	ands	r3, r2
 80025fa:	d009      	beq.n	8002610 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025fe:	4812      	ldr	r0, [pc, #72]	; (8002648 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002600:	f7fd fd82 	bl	8000108 <__udivsi3>
 8002604:	0003      	movs	r3, r0
 8002606:	001a      	movs	r2, r3
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	4353      	muls	r3, r2
 800260c:	637b      	str	r3, [r7, #52]	; 0x34
 800260e:	e009      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002610:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002612:	000a      	movs	r2, r1
 8002614:	0152      	lsls	r2, r2, #5
 8002616:	1a52      	subs	r2, r2, r1
 8002618:	0193      	lsls	r3, r2, #6
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	185b      	adds	r3, r3, r1
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002626:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002628:	e002      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800262a:	4b07      	ldr	r3, [pc, #28]	; (8002648 <HAL_RCC_GetSysClockFreq+0xc4>)
 800262c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800262e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002632:	0018      	movs	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	b00f      	add	sp, #60	; 0x3c
 8002638:	bd90      	pop	{r4, r7, pc}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	08002da0 	.word	0x08002da0
 8002640:	08002db0 	.word	0x08002db0
 8002644:	40021000 	.word	0x40021000
 8002648:	007a1200 	.word	0x007a1200

0800264c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002650:	4b02      	ldr	r3, [pc, #8]	; (800265c <HAL_RCC_GetHCLKFreq+0x10>)
 8002652:	681b      	ldr	r3, [r3, #0]
}
 8002654:	0018      	movs	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	20000000 	.word	0x20000000

08002660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002664:	f7ff fff2 	bl	800264c <HAL_RCC_GetHCLKFreq>
 8002668:	0001      	movs	r1, r0
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_RCC_GetPCLK1Freq+0x24>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	0a1b      	lsrs	r3, r3, #8
 8002670:	2207      	movs	r2, #7
 8002672:	4013      	ands	r3, r2
 8002674:	4a04      	ldr	r2, [pc, #16]	; (8002688 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002676:	5cd3      	ldrb	r3, [r2, r3]
 8002678:	40d9      	lsrs	r1, r3
 800267a:	000b      	movs	r3, r1
}    
 800267c:	0018      	movs	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	40021000 	.word	0x40021000
 8002688:	08003648 	.word	0x08003648

0800268c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e044      	b.n	8002728 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d107      	bne.n	80026b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2270      	movs	r2, #112	; 0x70
 80026aa:	2100      	movs	r1, #0
 80026ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	0018      	movs	r0, r3
 80026b2:	f7fe fc55 	bl	8000f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2224      	movs	r2, #36	; 0x24
 80026ba:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2101      	movs	r1, #1
 80026c8:	438a      	bics	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	0018      	movs	r0, r3
 80026d0:	f000 f830 	bl	8002734 <UART_SetConfig>
 80026d4:	0003      	movs	r3, r0
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e024      	b.n	8002728 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	0018      	movs	r0, r3
 80026ea:	f000 f9a9 	bl	8002a40 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	490d      	ldr	r1, [pc, #52]	; (8002730 <HAL_UART_Init+0xa4>)
 80026fa:	400a      	ands	r2, r1
 80026fc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2108      	movs	r1, #8
 800270a:	438a      	bics	r2, r1
 800270c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2101      	movs	r1, #1
 800271a:	430a      	orrs	r2, r1
 800271c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	0018      	movs	r0, r3
 8002722:	f000 fa41 	bl	8002ba8 <UART_CheckIdleState>
 8002726:	0003      	movs	r3, r0
}
 8002728:	0018      	movs	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	b002      	add	sp, #8
 800272e:	bd80      	pop	{r7, pc}
 8002730:	fffff7ff 	.word	0xfffff7ff

08002734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800273c:	2300      	movs	r3, #0
 800273e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002740:	2317      	movs	r3, #23
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4aad      	ldr	r2, [pc, #692]	; (8002a1c <UART_SetConfig+0x2e8>)
 8002768:	4013      	ands	r3, r2
 800276a:	0019      	movs	r1, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	430a      	orrs	r2, r1
 8002774:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4aa8      	ldr	r2, [pc, #672]	; (8002a20 <UART_SetConfig+0x2ec>)
 800277e:	4013      	ands	r3, r2
 8002780:	0019      	movs	r1, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	4a9f      	ldr	r2, [pc, #636]	; (8002a24 <UART_SetConfig+0x2f0>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	0019      	movs	r1, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a9b      	ldr	r2, [pc, #620]	; (8002a28 <UART_SetConfig+0x2f4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d125      	bne.n	800280a <UART_SetConfig+0xd6>
 80027be:	4b9b      	ldr	r3, [pc, #620]	; (8002a2c <UART_SetConfig+0x2f8>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	2203      	movs	r2, #3
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d00f      	beq.n	80027ea <UART_SetConfig+0xb6>
 80027ca:	d304      	bcc.n	80027d6 <UART_SetConfig+0xa2>
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d011      	beq.n	80027f4 <UART_SetConfig+0xc0>
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d005      	beq.n	80027e0 <UART_SetConfig+0xac>
 80027d4:	e013      	b.n	80027fe <UART_SetConfig+0xca>
 80027d6:	231f      	movs	r3, #31
 80027d8:	18fb      	adds	r3, r7, r3
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
 80027de:	e022      	b.n	8002826 <UART_SetConfig+0xf2>
 80027e0:	231f      	movs	r3, #31
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	2202      	movs	r2, #2
 80027e6:	701a      	strb	r2, [r3, #0]
 80027e8:	e01d      	b.n	8002826 <UART_SetConfig+0xf2>
 80027ea:	231f      	movs	r3, #31
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	2204      	movs	r2, #4
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	e018      	b.n	8002826 <UART_SetConfig+0xf2>
 80027f4:	231f      	movs	r3, #31
 80027f6:	18fb      	adds	r3, r7, r3
 80027f8:	2208      	movs	r2, #8
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	e013      	b.n	8002826 <UART_SetConfig+0xf2>
 80027fe:	231f      	movs	r3, #31
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	2210      	movs	r2, #16
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	e00d      	b.n	8002826 <UART_SetConfig+0xf2>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a88      	ldr	r2, [pc, #544]	; (8002a30 <UART_SetConfig+0x2fc>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d104      	bne.n	800281e <UART_SetConfig+0xea>
 8002814:	231f      	movs	r3, #31
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
 800281c:	e003      	b.n	8002826 <UART_SetConfig+0xf2>
 800281e:	231f      	movs	r3, #31
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	2210      	movs	r2, #16
 8002824:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69da      	ldr	r2, [r3, #28]
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	429a      	cmp	r2, r3
 8002830:	d000      	beq.n	8002834 <UART_SetConfig+0x100>
 8002832:	e07d      	b.n	8002930 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8002834:	231f      	movs	r3, #31
 8002836:	18fb      	adds	r3, r7, r3
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d01c      	beq.n	8002878 <UART_SetConfig+0x144>
 800283e:	dc02      	bgt.n	8002846 <UART_SetConfig+0x112>
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <UART_SetConfig+0x11c>
 8002844:	e04b      	b.n	80028de <UART_SetConfig+0x1aa>
 8002846:	2b04      	cmp	r3, #4
 8002848:	d025      	beq.n	8002896 <UART_SetConfig+0x162>
 800284a:	2b08      	cmp	r3, #8
 800284c:	d037      	beq.n	80028be <UART_SetConfig+0x18a>
 800284e:	e046      	b.n	80028de <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002850:	f7ff ff06 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
 8002854:	0003      	movs	r3, r0
 8002856:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	005a      	lsls	r2, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	085b      	lsrs	r3, r3, #1
 8002862:	18d2      	adds	r2, r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	0019      	movs	r1, r3
 800286a:	0010      	movs	r0, r2
 800286c:	f7fd fc4c 	bl	8000108 <__udivsi3>
 8002870:	0003      	movs	r3, r0
 8002872:	b29b      	uxth	r3, r3
 8002874:	61bb      	str	r3, [r7, #24]
        break;
 8002876:	e037      	b.n	80028e8 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	085b      	lsrs	r3, r3, #1
 800287e:	4a6d      	ldr	r2, [pc, #436]	; (8002a34 <UART_SetConfig+0x300>)
 8002880:	189a      	adds	r2, r3, r2
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	0019      	movs	r1, r3
 8002888:	0010      	movs	r0, r2
 800288a:	f7fd fc3d 	bl	8000108 <__udivsi3>
 800288e:	0003      	movs	r3, r0
 8002890:	b29b      	uxth	r3, r3
 8002892:	61bb      	str	r3, [r7, #24]
        break;
 8002894:	e028      	b.n	80028e8 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002896:	f7ff fe75 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 800289a:	0003      	movs	r3, r0
 800289c:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	005a      	lsls	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	085b      	lsrs	r3, r3, #1
 80028a8:	18d2      	adds	r2, r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	0019      	movs	r1, r3
 80028b0:	0010      	movs	r0, r2
 80028b2:	f7fd fc29 	bl	8000108 <__udivsi3>
 80028b6:	0003      	movs	r3, r0
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	61bb      	str	r3, [r7, #24]
        break;
 80028bc:	e014      	b.n	80028e8 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	085b      	lsrs	r3, r3, #1
 80028c4:	2280      	movs	r2, #128	; 0x80
 80028c6:	0252      	lsls	r2, r2, #9
 80028c8:	189a      	adds	r2, r3, r2
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	0019      	movs	r1, r3
 80028d0:	0010      	movs	r0, r2
 80028d2:	f7fd fc19 	bl	8000108 <__udivsi3>
 80028d6:	0003      	movs	r3, r0
 80028d8:	b29b      	uxth	r3, r3
 80028da:	61bb      	str	r3, [r7, #24]
        break;
 80028dc:	e004      	b.n	80028e8 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 80028de:	2317      	movs	r3, #23
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	2201      	movs	r2, #1
 80028e4:	701a      	strb	r2, [r3, #0]
        break;
 80028e6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	2b0f      	cmp	r3, #15
 80028ec:	d91b      	bls.n	8002926 <UART_SetConfig+0x1f2>
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	4a51      	ldr	r2, [pc, #324]	; (8002a38 <UART_SetConfig+0x304>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d817      	bhi.n	8002926 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	200a      	movs	r0, #10
 80028fc:	183b      	adds	r3, r7, r0
 80028fe:	210f      	movs	r1, #15
 8002900:	438a      	bics	r2, r1
 8002902:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	085b      	lsrs	r3, r3, #1
 8002908:	b29b      	uxth	r3, r3
 800290a:	2207      	movs	r2, #7
 800290c:	4013      	ands	r3, r2
 800290e:	b299      	uxth	r1, r3
 8002910:	183b      	adds	r3, r7, r0
 8002912:	183a      	adds	r2, r7, r0
 8002914:	8812      	ldrh	r2, [r2, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	183a      	adds	r2, r7, r0
 8002920:	8812      	ldrh	r2, [r2, #0]
 8002922:	60da      	str	r2, [r3, #12]
 8002924:	e06c      	b.n	8002a00 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8002926:	2317      	movs	r3, #23
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	2201      	movs	r2, #1
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	e067      	b.n	8002a00 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8002930:	231f      	movs	r3, #31
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d01b      	beq.n	8002972 <UART_SetConfig+0x23e>
 800293a:	dc02      	bgt.n	8002942 <UART_SetConfig+0x20e>
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <UART_SetConfig+0x218>
 8002940:	e049      	b.n	80029d6 <UART_SetConfig+0x2a2>
 8002942:	2b04      	cmp	r3, #4
 8002944:	d024      	beq.n	8002990 <UART_SetConfig+0x25c>
 8002946:	2b08      	cmp	r3, #8
 8002948:	d035      	beq.n	80029b6 <UART_SetConfig+0x282>
 800294a:	e044      	b.n	80029d6 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800294c:	f7ff fe88 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
 8002950:	0003      	movs	r3, r0
 8002952:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	085a      	lsrs	r2, r3, #1
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	18d2      	adds	r2, r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	0019      	movs	r1, r3
 8002964:	0010      	movs	r0, r2
 8002966:	f7fd fbcf 	bl	8000108 <__udivsi3>
 800296a:	0003      	movs	r3, r0
 800296c:	b29b      	uxth	r3, r3
 800296e:	61bb      	str	r3, [r7, #24]
        break;
 8002970:	e036      	b.n	80029e0 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	085b      	lsrs	r3, r3, #1
 8002978:	4a30      	ldr	r2, [pc, #192]	; (8002a3c <UART_SetConfig+0x308>)
 800297a:	189a      	adds	r2, r3, r2
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	0019      	movs	r1, r3
 8002982:	0010      	movs	r0, r2
 8002984:	f7fd fbc0 	bl	8000108 <__udivsi3>
 8002988:	0003      	movs	r3, r0
 800298a:	b29b      	uxth	r3, r3
 800298c:	61bb      	str	r3, [r7, #24]
        break;
 800298e:	e027      	b.n	80029e0 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002990:	f7ff fdf8 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 8002994:	0003      	movs	r3, r0
 8002996:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	085a      	lsrs	r2, r3, #1
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	18d2      	adds	r2, r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	0019      	movs	r1, r3
 80029a8:	0010      	movs	r0, r2
 80029aa:	f7fd fbad 	bl	8000108 <__udivsi3>
 80029ae:	0003      	movs	r3, r0
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	61bb      	str	r3, [r7, #24]
        break;
 80029b4:	e014      	b.n	80029e0 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	085b      	lsrs	r3, r3, #1
 80029bc:	2280      	movs	r2, #128	; 0x80
 80029be:	0212      	lsls	r2, r2, #8
 80029c0:	189a      	adds	r2, r3, r2
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	0019      	movs	r1, r3
 80029c8:	0010      	movs	r0, r2
 80029ca:	f7fd fb9d 	bl	8000108 <__udivsi3>
 80029ce:	0003      	movs	r3, r0
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	61bb      	str	r3, [r7, #24]
        break;
 80029d4:	e004      	b.n	80029e0 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 80029d6:	2317      	movs	r3, #23
 80029d8:	18fb      	adds	r3, r7, r3
 80029da:	2201      	movs	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
        break;
 80029de:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	2b0f      	cmp	r3, #15
 80029e4:	d908      	bls.n	80029f8 <UART_SetConfig+0x2c4>
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	4a13      	ldr	r2, [pc, #76]	; (8002a38 <UART_SetConfig+0x304>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d804      	bhi.n	80029f8 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	e003      	b.n	8002a00 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80029f8:	2317      	movs	r3, #23
 80029fa:	18fb      	adds	r3, r7, r3
 80029fc:	2201      	movs	r2, #1
 80029fe:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002a0c:	2317      	movs	r3, #23
 8002a0e:	18fb      	adds	r3, r7, r3
 8002a10:	781b      	ldrb	r3, [r3, #0]
}
 8002a12:	0018      	movs	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b008      	add	sp, #32
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	ffff69f3 	.word	0xffff69f3
 8002a20:	ffffcfff 	.word	0xffffcfff
 8002a24:	fffff4ff 	.word	0xfffff4ff
 8002a28:	40013800 	.word	0x40013800
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40004400 	.word	0x40004400
 8002a34:	00f42400 	.word	0x00f42400
 8002a38:	0000ffff 	.word	0x0000ffff
 8002a3c:	007a1200 	.word	0x007a1200

08002a40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d00b      	beq.n	8002a6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4a4a      	ldr	r2, [pc, #296]	; (8002b84 <UART_AdvFeatureConfig+0x144>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	0019      	movs	r1, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	2202      	movs	r2, #2
 8002a70:	4013      	ands	r3, r2
 8002a72:	d00b      	beq.n	8002a8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	4a43      	ldr	r2, [pc, #268]	; (8002b88 <UART_AdvFeatureConfig+0x148>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	0019      	movs	r1, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	2204      	movs	r2, #4
 8002a92:	4013      	ands	r3, r2
 8002a94:	d00b      	beq.n	8002aae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4a3b      	ldr	r2, [pc, #236]	; (8002b8c <UART_AdvFeatureConfig+0x14c>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	0019      	movs	r1, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	2208      	movs	r2, #8
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d00b      	beq.n	8002ad0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	4a34      	ldr	r2, [pc, #208]	; (8002b90 <UART_AdvFeatureConfig+0x150>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	2210      	movs	r2, #16
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d00b      	beq.n	8002af2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	4a2c      	ldr	r2, [pc, #176]	; (8002b94 <UART_AdvFeatureConfig+0x154>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	0019      	movs	r1, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	2220      	movs	r2, #32
 8002af8:	4013      	ands	r3, r2
 8002afa:	d00b      	beq.n	8002b14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	4a25      	ldr	r2, [pc, #148]	; (8002b98 <UART_AdvFeatureConfig+0x158>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	0019      	movs	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	2240      	movs	r2, #64	; 0x40
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d01d      	beq.n	8002b5a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4a1d      	ldr	r2, [pc, #116]	; (8002b9c <UART_AdvFeatureConfig+0x15c>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	0019      	movs	r1, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b3a:	2380      	movs	r3, #128	; 0x80
 8002b3c:	035b      	lsls	r3, r3, #13
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d10b      	bne.n	8002b5a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4a15      	ldr	r2, [pc, #84]	; (8002ba0 <UART_AdvFeatureConfig+0x160>)
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	0019      	movs	r1, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	2280      	movs	r2, #128	; 0x80
 8002b60:	4013      	ands	r3, r2
 8002b62:	d00b      	beq.n	8002b7c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	4a0e      	ldr	r2, [pc, #56]	; (8002ba4 <UART_AdvFeatureConfig+0x164>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	0019      	movs	r1, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	605a      	str	r2, [r3, #4]
  }
}
 8002b7c:	46c0      	nop			; (mov r8, r8)
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b002      	add	sp, #8
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	fffdffff 	.word	0xfffdffff
 8002b88:	fffeffff 	.word	0xfffeffff
 8002b8c:	fffbffff 	.word	0xfffbffff
 8002b90:	ffff7fff 	.word	0xffff7fff
 8002b94:	ffffefff 	.word	0xffffefff
 8002b98:	ffffdfff 	.word	0xffffdfff
 8002b9c:	ffefffff 	.word	0xffefffff
 8002ba0:	ff9fffff 	.word	0xff9fffff
 8002ba4:	fff7ffff 	.word	0xfff7ffff

08002ba8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002bb6:	f7fe fac1 	bl	800113c <HAL_GetTick>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2208      	movs	r2, #8
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d10d      	bne.n	8002be8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	2380      	movs	r3, #128	; 0x80
 8002bd0:	0399      	lsls	r1, r3, #14
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <UART_CheckIdleState+0x88>)
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	0013      	movs	r3, r2
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f000 f82a 	bl	8002c34 <UART_WaitOnFlagUntilTimeout>
 8002be0:	1e03      	subs	r3, r0, #0
 8002be2:	d001      	beq.n	8002be8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e01f      	b.n	8002c28 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2204      	movs	r2, #4
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d10d      	bne.n	8002c12 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	03d9      	lsls	r1, r3, #15
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <UART_CheckIdleState+0x88>)
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	0013      	movs	r3, r2
 8002c04:	2200      	movs	r2, #0
 8002c06:	f000 f815 	bl	8002c34 <UART_WaitOnFlagUntilTimeout>
 8002c0a:	1e03      	subs	r3, r0, #0
 8002c0c:	d001      	beq.n	8002c12 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e00a      	b.n	8002c28 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2220      	movs	r2, #32
 8002c16:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2270      	movs	r2, #112	; 0x70
 8002c22:	2100      	movs	r1, #0
 8002c24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	0018      	movs	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b004      	add	sp, #16
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	01ffffff 	.word	0x01ffffff

08002c34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	1dfb      	adds	r3, r7, #7
 8002c42:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c44:	e05d      	b.n	8002d02 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	d05a      	beq.n	8002d02 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4c:	f7fe fa76 	bl	800113c <HAL_GetTick>
 8002c50:	0002      	movs	r2, r0
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d302      	bcc.n	8002c62 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d11b      	bne.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	492f      	ldr	r1, [pc, #188]	; (8002d2c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002c6e:	400a      	ands	r2, r1
 8002c70:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	438a      	bics	r2, r1
 8002c80:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2220      	movs	r2, #32
 8002c86:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2270      	movs	r2, #112	; 0x70
 8002c92:	2100      	movs	r1, #0
 8002c94:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e043      	b.n	8002d22 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d02d      	beq.n	8002d02 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	69da      	ldr	r2, [r3, #28]
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	401a      	ands	r2, r3
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d123      	bne.n	8002d02 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2280      	movs	r2, #128	; 0x80
 8002cc0:	0112      	lsls	r2, r2, #4
 8002cc2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4917      	ldr	r1, [pc, #92]	; (8002d2c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2101      	movs	r1, #1
 8002ce0:	438a      	bics	r2, r1
 8002ce2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2220      	movs	r2, #32
 8002cee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2270      	movs	r2, #112	; 0x70
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e00f      	b.n	8002d22 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	425a      	negs	r2, r3
 8002d12:	4153      	adcs	r3, r2
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	001a      	movs	r2, r3
 8002d18:	1dfb      	adds	r3, r7, #7
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d092      	beq.n	8002c46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	0018      	movs	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b004      	add	sp, #16
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	fffffe5f 	.word	0xfffffe5f

08002d30 <__libc_init_array>:
 8002d30:	b570      	push	{r4, r5, r6, lr}
 8002d32:	2600      	movs	r6, #0
 8002d34:	4d0c      	ldr	r5, [pc, #48]	; (8002d68 <__libc_init_array+0x38>)
 8002d36:	4c0d      	ldr	r4, [pc, #52]	; (8002d6c <__libc_init_array+0x3c>)
 8002d38:	1b64      	subs	r4, r4, r5
 8002d3a:	10a4      	asrs	r4, r4, #2
 8002d3c:	42a6      	cmp	r6, r4
 8002d3e:	d109      	bne.n	8002d54 <__libc_init_array+0x24>
 8002d40:	2600      	movs	r6, #0
 8002d42:	f000 f821 	bl	8002d88 <_init>
 8002d46:	4d0a      	ldr	r5, [pc, #40]	; (8002d70 <__libc_init_array+0x40>)
 8002d48:	4c0a      	ldr	r4, [pc, #40]	; (8002d74 <__libc_init_array+0x44>)
 8002d4a:	1b64      	subs	r4, r4, r5
 8002d4c:	10a4      	asrs	r4, r4, #2
 8002d4e:	42a6      	cmp	r6, r4
 8002d50:	d105      	bne.n	8002d5e <__libc_init_array+0x2e>
 8002d52:	bd70      	pop	{r4, r5, r6, pc}
 8002d54:	00b3      	lsls	r3, r6, #2
 8002d56:	58eb      	ldr	r3, [r5, r3]
 8002d58:	4798      	blx	r3
 8002d5a:	3601      	adds	r6, #1
 8002d5c:	e7ee      	b.n	8002d3c <__libc_init_array+0xc>
 8002d5e:	00b3      	lsls	r3, r6, #2
 8002d60:	58eb      	ldr	r3, [r5, r3]
 8002d62:	4798      	blx	r3
 8002d64:	3601      	adds	r6, #1
 8002d66:	e7f2      	b.n	8002d4e <__libc_init_array+0x1e>
 8002d68:	08003650 	.word	0x08003650
 8002d6c:	08003650 	.word	0x08003650
 8002d70:	08003650 	.word	0x08003650
 8002d74:	08003654 	.word	0x08003654

08002d78 <memset>:
 8002d78:	0003      	movs	r3, r0
 8002d7a:	1812      	adds	r2, r2, r0
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d100      	bne.n	8002d82 <memset+0xa>
 8002d80:	4770      	bx	lr
 8002d82:	7019      	strb	r1, [r3, #0]
 8002d84:	3301      	adds	r3, #1
 8002d86:	e7f9      	b.n	8002d7c <memset+0x4>

08002d88 <_init>:
 8002d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d8e:	bc08      	pop	{r3}
 8002d90:	469e      	mov	lr, r3
 8002d92:	4770      	bx	lr

08002d94 <_fini>:
 8002d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d9a:	bc08      	pop	{r3}
 8002d9c:	469e      	mov	lr, r3
 8002d9e:	4770      	bx	lr
