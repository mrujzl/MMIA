
cv_10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018c40  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e040  08018df0  08018df0  00028df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026e30  08026e30  000401f0  2**0
                  CONTENTS
  4 .ARM          00000008  08026e30  08026e30  00036e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026e38  08026e38  000401f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026e38  08026e38  00036e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08026e3c  08026e3c  00036e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08026e40  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f370  200001f0  08027030  000401f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000f560  08027030  0004f560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045aca  00000000  00000000  00040220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007fa1  00000000  00000000  00085cea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022f0  00000000  00000000  0008dc90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002128  00000000  00000000  0008ff80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003622f  00000000  00000000  000920a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002d699  00000000  00000000  000c82d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ffce8  00000000  00000000  000f5970  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f5658  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009634  00000000  00000000  001f56d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08018dd8 	.word	0x08018dd8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	08018dd8 	.word	0x08018dd8

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4a07      	ldr	r2, [pc, #28]	; (80005ec <vApplicationGetIdleTaskMemory+0x2c>)
 80005d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <vApplicationGetIdleTaskMemory+0x30>)
 80005d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	2000020c 	.word	0x2000020c
 80005f0:	20000260 	.word	0x20000260

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b5b0      	push	{r4, r5, r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fe55 	bl	80012a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f81d 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f8af 	bl	8000764 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000606:	f000 f883 	bl	8000710 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <main+0x40>)
 800060c:	1d3c      	adds	r4, r7, #4
 800060e:	461d      	mov	r5, r3
 8000610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000614:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000618:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f004 fa7e 	bl	8004b22 <osThreadCreate>
 8000626:	4602      	mov	r2, r0
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <main+0x44>)
 800062a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800062c:	f004 fa62 	bl	8004af4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0x3c>
 8000632:	bf00      	nop
 8000634:	08018dfc 	.word	0x08018dfc
 8000638:	20008be0 	.word	0x20008be0

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	; 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f017 fc24 	bl	8017e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b28      	ldr	r3, [pc, #160]	; (8000708 <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a27      	ldr	r2, [pc, #156]	; (8000708 <SystemClock_Config+0xcc>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b25      	ldr	r3, [pc, #148]	; (8000708 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a21      	ldr	r2, [pc, #132]	; (800070c <SystemClock_Config+0xd0>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800069c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b0:	23a8      	movs	r3, #168	; 0xa8
 80006b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b8:	2307      	movs	r3, #7
 80006ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 fab9 	bl	8002c38 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006cc:	f000 f93a 	bl	8000944 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2302      	movs	r3, #2
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2105      	movs	r1, #5
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 fd12 	bl	8003118 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fa:	f000 f923 	bl	8000944 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	; 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USART3_UART_Init+0x4c>)
 8000716:	4a12      	ldr	r2, [pc, #72]	; (8000760 <MX_USART3_UART_Init+0x50>)
 8000718:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_USART3_UART_Init+0x4c>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USART3_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USART3_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USART3_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USART3_UART_Init+0x4c>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_USART3_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USART3_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_USART3_UART_Init+0x4c>)
 8000748:	f003 f948 	bl	80039dc <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000752:	f000 f8f7 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20008be4 	.word	0x20008be4
 8000760:	40004800 	.word	0x40004800

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08c      	sub	sp, #48	; 0x30
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	4b5a      	ldr	r3, [pc, #360]	; (80008e8 <MX_GPIO_Init+0x184>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a59      	ldr	r2, [pc, #356]	; (80008e8 <MX_GPIO_Init+0x184>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b57      	ldr	r3, [pc, #348]	; (80008e8 <MX_GPIO_Init+0x184>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	61bb      	str	r3, [r7, #24]
 8000794:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	4b53      	ldr	r3, [pc, #332]	; (80008e8 <MX_GPIO_Init+0x184>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a52      	ldr	r2, [pc, #328]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b50      	ldr	r3, [pc, #320]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b4c      	ldr	r3, [pc, #304]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a4b      	ldr	r2, [pc, #300]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b49      	ldr	r3, [pc, #292]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b45      	ldr	r3, [pc, #276]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a44      	ldr	r2, [pc, #272]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b42      	ldr	r3, [pc, #264]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	4b3e      	ldr	r3, [pc, #248]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a3d      	ldr	r2, [pc, #244]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b3b      	ldr	r3, [pc, #236]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0308 	and.w	r3, r3, #8
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b37      	ldr	r3, [pc, #220]	; (80008e8 <MX_GPIO_Init+0x184>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a36      	ldr	r2, [pc, #216]	; (80008e8 <MX_GPIO_Init+0x184>)
 8000810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b34      	ldr	r3, [pc, #208]	; (80008e8 <MX_GPIO_Init+0x184>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f244 0181 	movw	r1, #16513	; 0x4081
 8000828:	4830      	ldr	r0, [pc, #192]	; (80008ec <MX_GPIO_Init+0x188>)
 800082a:	f002 f9eb 	bl	8002c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2140      	movs	r1, #64	; 0x40
 8000832:	482f      	ldr	r0, [pc, #188]	; (80008f0 <MX_GPIO_Init+0x18c>)
 8000834:	f002 f9e6 	bl	8002c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083e:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <MX_GPIO_Init+0x190>)
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	482a      	ldr	r0, [pc, #168]	; (80008f8 <MX_GPIO_Init+0x194>)
 800084e:	f002 f817 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000852:	f244 0381 	movw	r3, #16513	; 0x4081
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	4820      	ldr	r0, [pc, #128]	; (80008ec <MX_GPIO_Init+0x188>)
 800086c:	f002 f808 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000870:	2340      	movs	r3, #64	; 0x40
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	481a      	ldr	r0, [pc, #104]	; (80008f0 <MX_GPIO_Init+0x18c>)
 8000888:	f001 fffa 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	4814      	ldr	r0, [pc, #80]	; (80008f0 <MX_GPIO_Init+0x18c>)
 80008a0:	f001 ffee 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008a4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008b6:	230a      	movs	r3, #10
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	480e      	ldr	r0, [pc, #56]	; (80008fc <MX_GPIO_Init+0x198>)
 80008c2:	f001 ffdd 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4808      	ldr	r0, [pc, #32]	; (80008fc <MX_GPIO_Init+0x198>)
 80008dc:	f001 ffd0 	bl	8002880 <HAL_GPIO_Init>

}
 80008e0:	bf00      	nop
 80008e2:	3730      	adds	r7, #48	; 0x30
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020400 	.word	0x40020400
 80008f0:	40021800 	.word	0x40021800
 80008f4:	10110000 	.word	0x10110000
 80008f8:	40020800 	.word	0x40020800
 80008fc:	40020000 	.word	0x40020000

08000900 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000908:	f003 fc32 	bl	8004170 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

  /* Initialize tcp echo server */
  tcpecho_init();
 800090c:	f000 fa36 	bl	8000d7c <tcpecho_init>

  /* Initialize telnet server */
  telnet_init();
 8000910:	f000 fc8c 	bl	800122c <telnet_init>

  /* Initialize http server */
  httpd_init();
 8000914:	f00a f95a 	bl	800abcc <httpd_init>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000918:	2001      	movs	r0, #1
 800091a:	f004 f94e 	bl	8004bba <osDelay>
 800091e:	e7fb      	b.n	8000918 <StartDefaultTask+0x18>

08000920 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d101      	bne.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000932:	f000 fcdb 	bl	80012ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40002000 	.word	0x40002000

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
	...

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	4a0f      	ldr	r2, [pc, #60]	; (80009a0 <HAL_MspInit+0x4c>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000968:	6453      	str	r3, [r2, #68]	; 0x44
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <HAL_MspInit+0x4c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_MspInit+0x4c>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <HAL_UART_MspInit+0x84>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d12c      	bne.n	8000a20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009d4:	6413      	str	r3, [r2, #64]	; 0x40
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a10      	ldr	r2, [pc, #64]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009ec:	f043 0308 	orr.w	r3, r3, #8
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0308 	and.w	r3, r3, #8
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a10:	2307      	movs	r3, #7
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <HAL_UART_MspInit+0x8c>)
 8000a1c:	f001 ff30 	bl	8002880 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	; 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40004800 	.word	0x40004800
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020c00 	.word	0x40020c00

08000a34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	202d      	movs	r0, #45	; 0x2d
 8000a4a:	f000 fd49 	bl	80014e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a4e:	202d      	movs	r0, #45	; 0x2d
 8000a50:	f000 fd62 	bl	8001518 <HAL_NVIC_EnableIRQ>
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <HAL_InitTick+0xa4>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	4a1e      	ldr	r2, [pc, #120]	; (8000ad8 <HAL_InitTick+0xa4>)
 8000a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a62:	6413      	str	r3, [r2, #64]	; 0x40
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <HAL_InitTick+0xa4>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a70:	f107 0210 	add.w	r2, r7, #16
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 fd3e 	bl	80034fc <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a80:	f002 fd14 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 8000a84:	4603      	mov	r3, r0
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a8c:	4a13      	ldr	r2, [pc, #76]	; (8000adc <HAL_InitTick+0xa8>)
 8000a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a92:	0c9b      	lsrs	r3, r3, #18
 8000a94:	3b01      	subs	r3, #1
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_InitTick+0xac>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <HAL_InitTick+0xb0>)
 8000a9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <HAL_InitTick+0xac>)
 8000aa0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa4:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000aa6:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <HAL_InitTick+0xac>)
 8000aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aaa:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <HAL_InitTick+0xac>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <HAL_InitTick+0xac>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000ab8:	4809      	ldr	r0, [pc, #36]	; (8000ae0 <HAL_InitTick+0xac>)
 8000aba:	f002 fd51 	bl	8003560 <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d104      	bne.n	8000ace <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000ac4:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <HAL_InitTick+0xac>)
 8000ac6:	f002 fd80 	bl	80035ca <HAL_TIM_Base_Start_IT>
 8000aca:	4603      	mov	r3, r0
 8000acc:	e000      	b.n	8000ad0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3730      	adds	r7, #48	; 0x30
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	431bde83 	.word	0x431bde83
 8000ae0:	20008c24 	.word	0x20008c24
 8000ae4:	40002000 	.word	0x40002000

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <HardFault_Handler+0x4>

08000afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <MemManage_Handler+0x4>

08000b02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000b22:	f002 fd76 	bl	8003612 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20008c24 	.word	0x20008c24

08000b30 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b34:	4802      	ldr	r0, [pc, #8]	; (8000b40 <ETH_IRQHandler+0x10>)
 8000b36:	f001 f8e3 	bl	8001d00 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000a584 	.word	0x2000a584

08000b44 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	e00a      	b.n	8000b6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b56:	f3af 8000 	nop.w
 8000b5a:	4601      	mov	r1, r0
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	60ba      	str	r2, [r7, #8]
 8000b62:	b2ca      	uxtb	r2, r1
 8000b64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697a      	ldr	r2, [r7, #20]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	dbf0      	blt.n	8000b56 <_read+0x12>
	}

return len;
 8000b74:	687b      	ldr	r3, [r7, #4]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	60f8      	str	r0, [r7, #12]
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	e009      	b.n	8000ba4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	60ba      	str	r2, [r7, #8]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	dbf1      	blt.n	8000b90 <_write+0x12>
	}
	return len;
 8000bac:	687b      	ldr	r3, [r7, #4]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <_close>:

int _close(int file)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
	return -1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bde:	605a      	str	r2, [r3, #4]
	return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <_isatty>:

int _isatty(int file)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
	return 1;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b087      	sub	sp, #28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c28:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <_sbrk+0x5c>)
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <_sbrk+0x60>)
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <_sbrk+0x64>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <_sbrk+0x68>)
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d205      	bcs.n	8000c5c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <_sbrk+0x6c>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	e009      	b.n	8000c70 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <_sbrk+0x64>)
 8000c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	371c      	adds	r7, #28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	20030000 	.word	0x20030000
 8000c80:	00000400 	.word	0x00000400
 8000c84:	20000460 	.word	0x20000460
 8000c88:	2000f560 	.word	0x2000f560
 8000c8c:	2000f558 	.word	0x2000f558

08000c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <SystemInit+0x28>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9a:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <SystemInit+0x28>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <SystemInit+0x28>)
 8000ca6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000caa:	609a      	str	r2, [r3, #8]
#endif
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af02      	add	r7, sp, #8
 8000cc2:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2010      	movs	r0, #16
 8000cca:	f006 fe9d 	bl	8007a08 <netconn_new_with_proto_and_callback>
 8000cce:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d04e      	beq.n	8000d74 <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000cd6:	2207      	movs	r2, #7
 8000cd8:	2100      	movs	r1, #0
 8000cda:	69f8      	ldr	r0, [r7, #28]
 8000cdc:	f006 ff4e 	bl	8007b7c <netconn_bind>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000ce4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d13f      	bne.n	8000d6c <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000cec:	21ff      	movs	r1, #255	; 0xff
 8000cee:	69f8      	ldr	r0, [r7, #28]
 8000cf0:	f006 ff7c 	bl	8007bec <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	69f8      	ldr	r0, [r7, #28]
 8000cfc:	f006 ffa2 	bl	8007c44 <netconn_accept>
 8000d00:	4603      	mov	r3, r0
 8000d02:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000d04:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1f3      	bne.n	8000cf4 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000d0c:	e01b      	b.n	8000d46 <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	f107 020a 	add.w	r2, r7, #10
 8000d14:	f107 010c 	add.w	r1, r7, #12
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f008 ff2f 	bl	8009b7c <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	68f9      	ldr	r1, [r7, #12]
 8000d22:	897b      	ldrh	r3, [r7, #10]
 8000d24:	461a      	mov	r2, r3
 8000d26:	2300      	movs	r3, #0
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	f007 fa0c 	bl	8008148 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f008 ff6c 	bl	8009c10 <netbuf_next>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	dae7      	bge.n	8000d0e <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f008 fefb 	bl	8009b3c <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	f107 0210 	add.w	r2, r7, #16
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f007 f980 	bl	8008054 <netconn_recv>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0d9      	beq.n	8000d0e <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f007 faf5 	bl	800834c <netconn_close>
          netconn_delete(newconn);
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f006 feed 	bl	8007b44 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000d6a:	e7c3      	b.n	8000cf4 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f006 fee8 	bl	8007b44 <netconn_delete>
    }
  }
}
 8000d74:	bf00      	nop
 8000d76:	3720      	adds	r7, #32
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000d82:	2304      	movs	r3, #4
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	4903      	ldr	r1, [pc, #12]	; (8000d9c <tcpecho_init+0x20>)
 8000d8e:	4804      	ldr	r0, [pc, #16]	; (8000da0 <tcpecho_init+0x24>)
 8000d90:	f016 ffe0 	bl	8017d54 <sys_thread_new>
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	08000cbd 	.word	0x08000cbd
 8000da0:	08018e18 	.word	0x08018e18

08000da4 <telnet_process_command>:

#define TELNET_THREAD_PRIO  ( tskIDLE_PRIORITY + 4 )
#define CMD_BUFFER_LEN 64

static void telnet_process_command(char *cmd, struct netconn *conn)
{
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b097      	sub	sp, #92	; 0x5c
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
	char s[CMD_BUFFER_LEN];

	char *token;
	char *saveptr;

	token = strtok_r(cmd, " ", &saveptr);
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	461a      	mov	r2, r3
 8000db4:	49bd      	ldr	r1, [pc, #756]	; (80010ac <telnet_process_command+0x308>)
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f017 f929 	bl	801800e <strtok_r>
 8000dbc:	64f8      	str	r0, [r7, #76]	; 0x4c

	if (strcasecmp(token, "HELLO") == 0)		// HELLO command
 8000dbe:	49bc      	ldr	r1, [pc, #752]	; (80010b0 <telnet_process_command+0x30c>)
 8000dc0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000dc2:	f017 f8bd 	bl	8017f40 <strcasecmp>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d119      	bne.n	8000e00 <telnet_process_command+0x5c>
	{
		sprintf(s, "Komunikace OK\n");
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	4ab8      	ldr	r2, [pc, #736]	; (80010b4 <telnet_process_command+0x310>)
 8000dd2:	461c      	mov	r4, r3
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dd8:	c407      	stmia	r4!, {r0, r1, r2}
 8000dda:	8023      	strh	r3, [r4, #0]
 8000ddc:	3402      	adds	r4, #2
 8000dde:	0c1b      	lsrs	r3, r3, #16
 8000de0:	7023      	strb	r3, [r4, #0]
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8000de2:	f107 030c 	add.w	r3, r7, #12
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fa0c 	bl	8000204 <strlen>
 8000dec:	4602      	mov	r2, r0
 8000dee:	f107 010c 	add.w	r1, r7, #12
 8000df2:	2300      	movs	r3, #0
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2301      	movs	r3, #1
 8000df8:	6838      	ldr	r0, [r7, #0]
 8000dfa:	f007 f9a5 	bl	8008148 <netconn_write_partly>
		{
			sprintf(s, "LED3 OFF\n");
			netconn_write(conn, s, strlen(s), NETCONN_COPY);
		}
	}
}
 8000dfe:	e151      	b.n	80010a4 <telnet_process_command+0x300>
	else if (strcasecmp(token, "LED1") == 0) 	// LED1 command
 8000e00:	49ad      	ldr	r1, [pc, #692]	; (80010b8 <telnet_process_command+0x314>)
 8000e02:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e04:	f017 f89c 	bl	8017f40 <strcasecmp>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d133      	bne.n	8000e76 <telnet_process_command+0xd2>
		token = strtok_r(NULL, " ", &saveptr);
 8000e0e:	f107 0308 	add.w	r3, r7, #8
 8000e12:	461a      	mov	r2, r3
 8000e14:	49a5      	ldr	r1, [pc, #660]	; (80010ac <telnet_process_command+0x308>)
 8000e16:	2000      	movs	r0, #0
 8000e18:	f017 f8f9 	bl	801800e <strtok_r>
 8000e1c:	64f8      	str	r0, [r7, #76]	; 0x4c
		if (strcasecmp(token, "ON") == 0)
 8000e1e:	49a7      	ldr	r1, [pc, #668]	; (80010bc <telnet_process_command+0x318>)
 8000e20:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e22:	f017 f88d 	bl	8017f40 <strcasecmp>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d105      	bne.n	8000e38 <telnet_process_command+0x94>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);		// LED1 ON
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2101      	movs	r1, #1
 8000e30:	48a3      	ldr	r0, [pc, #652]	; (80010c0 <telnet_process_command+0x31c>)
 8000e32:	f001 fee7 	bl	8002c04 <HAL_GPIO_WritePin>
 8000e36:	e00b      	b.n	8000e50 <telnet_process_command+0xac>
		else if (strcasecmp(token, "OFF") == 0)
 8000e38:	49a2      	ldr	r1, [pc, #648]	; (80010c4 <telnet_process_command+0x320>)
 8000e3a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e3c:	f017 f880 	bl	8017f40 <strcasecmp>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d104      	bne.n	8000e50 <telnet_process_command+0xac>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET); 	// LED1 OFF
 8000e46:	2200      	movs	r2, #0
 8000e48:	2101      	movs	r1, #1
 8000e4a:	489d      	ldr	r0, [pc, #628]	; (80010c0 <telnet_process_command+0x31c>)
 8000e4c:	f001 feda 	bl	8002c04 <HAL_GPIO_WritePin>
		sprintf(s, "OK\n");
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	4a9c      	ldr	r2, [pc, #624]	; (80010c8 <telnet_process_command+0x324>)
 8000e56:	601a      	str	r2, [r3, #0]
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff f9d1 	bl	8000204 <strlen>
 8000e62:	4602      	mov	r2, r0
 8000e64:	f107 010c 	add.w	r1, r7, #12
 8000e68:	2300      	movs	r3, #0
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	6838      	ldr	r0, [r7, #0]
 8000e70:	f007 f96a 	bl	8008148 <netconn_write_partly>
}
 8000e74:	e116      	b.n	80010a4 <telnet_process_command+0x300>
	else if (strcasecmp(token, "LED2") == 0)	// LED2 command
 8000e76:	4995      	ldr	r1, [pc, #596]	; (80010cc <telnet_process_command+0x328>)
 8000e78:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e7a:	f017 f861 	bl	8017f40 <strcasecmp>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d133      	bne.n	8000eec <telnet_process_command+0x148>
		token = strtok_r(NULL, " ", &saveptr);
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4988      	ldr	r1, [pc, #544]	; (80010ac <telnet_process_command+0x308>)
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f017 f8be 	bl	801800e <strtok_r>
 8000e92:	64f8      	str	r0, [r7, #76]	; 0x4c
		if (strcasecmp(token, "ON") == 0)
 8000e94:	4989      	ldr	r1, [pc, #548]	; (80010bc <telnet_process_command+0x318>)
 8000e96:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e98:	f017 f852 	bl	8017f40 <strcasecmp>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d105      	bne.n	8000eae <telnet_process_command+0x10a>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); 		// LED2 ON
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2180      	movs	r1, #128	; 0x80
 8000ea6:	4886      	ldr	r0, [pc, #536]	; (80010c0 <telnet_process_command+0x31c>)
 8000ea8:	f001 feac 	bl	8002c04 <HAL_GPIO_WritePin>
 8000eac:	e00b      	b.n	8000ec6 <telnet_process_command+0x122>
		else if (strcasecmp(token, "OFF") == 0)
 8000eae:	4985      	ldr	r1, [pc, #532]	; (80010c4 <telnet_process_command+0x320>)
 8000eb0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000eb2:	f017 f845 	bl	8017f40 <strcasecmp>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d104      	bne.n	8000ec6 <telnet_process_command+0x122>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	// LED2 OFF
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2180      	movs	r1, #128	; 0x80
 8000ec0:	487f      	ldr	r0, [pc, #508]	; (80010c0 <telnet_process_command+0x31c>)
 8000ec2:	f001 fe9f 	bl	8002c04 <HAL_GPIO_WritePin>
		sprintf(s, "OK\n");
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	4a7f      	ldr	r2, [pc, #508]	; (80010c8 <telnet_process_command+0x324>)
 8000ecc:	601a      	str	r2, [r3, #0]
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff f996 	bl	8000204 <strlen>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	f107 010c 	add.w	r1, r7, #12
 8000ede:	2300      	movs	r3, #0
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	6838      	ldr	r0, [r7, #0]
 8000ee6:	f007 f92f 	bl	8008148 <netconn_write_partly>
}
 8000eea:	e0db      	b.n	80010a4 <telnet_process_command+0x300>
	else if (strcasecmp(token, "LED3") == 0)	// LED3 command
 8000eec:	4978      	ldr	r1, [pc, #480]	; (80010d0 <telnet_process_command+0x32c>)
 8000eee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000ef0:	f017 f826 	bl	8017f40 <strcasecmp>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d135      	bne.n	8000f66 <telnet_process_command+0x1c2>
		token = strtok_r(NULL, " ", &saveptr);
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	461a      	mov	r2, r3
 8000f00:	496a      	ldr	r1, [pc, #424]	; (80010ac <telnet_process_command+0x308>)
 8000f02:	2000      	movs	r0, #0
 8000f04:	f017 f883 	bl	801800e <strtok_r>
 8000f08:	64f8      	str	r0, [r7, #76]	; 0x4c
		if (strcasecmp(token, "ON") == 0)
 8000f0a:	496c      	ldr	r1, [pc, #432]	; (80010bc <telnet_process_command+0x318>)
 8000f0c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f0e:	f017 f817 	bl	8017f40 <strcasecmp>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d106      	bne.n	8000f26 <telnet_process_command+0x182>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET); 		// LED3 ON
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f1e:	4868      	ldr	r0, [pc, #416]	; (80010c0 <telnet_process_command+0x31c>)
 8000f20:	f001 fe70 	bl	8002c04 <HAL_GPIO_WritePin>
 8000f24:	e00c      	b.n	8000f40 <telnet_process_command+0x19c>
		else if (strcasecmp(token, "OFF") == 0)
 8000f26:	4967      	ldr	r1, [pc, #412]	; (80010c4 <telnet_process_command+0x320>)
 8000f28:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f2a:	f017 f809 	bl	8017f40 <strcasecmp>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d105      	bne.n	8000f40 <telnet_process_command+0x19c>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);	// LED3 OFF
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f3a:	4861      	ldr	r0, [pc, #388]	; (80010c0 <telnet_process_command+0x31c>)
 8000f3c:	f001 fe62 	bl	8002c04 <HAL_GPIO_WritePin>
		sprintf(s, "OK\n");
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	4a60      	ldr	r2, [pc, #384]	; (80010c8 <telnet_process_command+0x324>)
 8000f46:	601a      	str	r2, [r3, #0]
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff f959 	bl	8000204 <strlen>
 8000f52:	4602      	mov	r2, r0
 8000f54:	f107 010c 	add.w	r1, r7, #12
 8000f58:	2300      	movs	r3, #0
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	6838      	ldr	r0, [r7, #0]
 8000f60:	f007 f8f2 	bl	8008148 <netconn_write_partly>
}
 8000f64:	e09e      	b.n	80010a4 <telnet_process_command+0x300>
	else if (strcasecmp(token, "STATUS") == 0)		// STATUS command
 8000f66:	495b      	ldr	r1, [pc, #364]	; (80010d4 <telnet_process_command+0x330>)
 8000f68:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f6a:	f016 ffe9 	bl	8017f40 <strcasecmp>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f040 8097 	bne.w	80010a4 <telnet_process_command+0x300>
		if (HAL_GPIO_ReadPin(LD1_GPIO_Port, LD1_Pin) == 0)
 8000f76:	2101      	movs	r1, #1
 8000f78:	4851      	ldr	r0, [pc, #324]	; (80010c0 <telnet_process_command+0x31c>)
 8000f7a:	f001 fe2b 	bl	8002bd4 <HAL_GPIO_ReadPin>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d114      	bne.n	8000fae <telnet_process_command+0x20a>
			sprintf(s, "LED1 ON, ");
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	4a53      	ldr	r2, [pc, #332]	; (80010d8 <telnet_process_command+0x334>)
 8000f8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f8c:	c303      	stmia	r3!, {r0, r1}
 8000f8e:	801a      	strh	r2, [r3, #0]
			netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff f935 	bl	8000204 <strlen>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	f107 010c 	add.w	r1, r7, #12
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	6838      	ldr	r0, [r7, #0]
 8000fa8:	f007 f8ce 	bl	8008148 <netconn_write_partly>
 8000fac:	e016      	b.n	8000fdc <telnet_process_command+0x238>
			sprintf(s, "LED1 OFF, ");
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	4a4a      	ldr	r2, [pc, #296]	; (80010dc <telnet_process_command+0x338>)
 8000fb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fb6:	c303      	stmia	r3!, {r0, r1}
 8000fb8:	801a      	strh	r2, [r3, #0]
 8000fba:	3302      	adds	r3, #2
 8000fbc:	0c12      	lsrs	r2, r2, #16
 8000fbe:	701a      	strb	r2, [r3, #0]
			netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff f91d 	bl	8000204 <strlen>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	f107 010c 	add.w	r1, r7, #12
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	6838      	ldr	r0, [r7, #0]
 8000fd8:	f007 f8b6 	bl	8008148 <netconn_write_partly>
		if (HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin) == 0)
 8000fdc:	2180      	movs	r1, #128	; 0x80
 8000fde:	4838      	ldr	r0, [pc, #224]	; (80010c0 <telnet_process_command+0x31c>)
 8000fe0:	f001 fdf8 	bl	8002bd4 <HAL_GPIO_ReadPin>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d114      	bne.n	8001014 <telnet_process_command+0x270>
			sprintf(s, "LED2 ON, ");
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	4a3c      	ldr	r2, [pc, #240]	; (80010e0 <telnet_process_command+0x33c>)
 8000ff0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ff2:	c303      	stmia	r3!, {r0, r1}
 8000ff4:	801a      	strh	r2, [r3, #0]
			netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff f902 	bl	8000204 <strlen>
 8001000:	4602      	mov	r2, r0
 8001002:	f107 010c 	add.w	r1, r7, #12
 8001006:	2300      	movs	r3, #0
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	2301      	movs	r3, #1
 800100c:	6838      	ldr	r0, [r7, #0]
 800100e:	f007 f89b 	bl	8008148 <netconn_write_partly>
 8001012:	e016      	b.n	8001042 <telnet_process_command+0x29e>
			sprintf(s, "LED2 OFF, ");
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	4a32      	ldr	r2, [pc, #200]	; (80010e4 <telnet_process_command+0x340>)
 800101a:	ca07      	ldmia	r2, {r0, r1, r2}
 800101c:	c303      	stmia	r3!, {r0, r1}
 800101e:	801a      	strh	r2, [r3, #0]
 8001020:	3302      	adds	r3, #2
 8001022:	0c12      	lsrs	r2, r2, #16
 8001024:	701a      	strb	r2, [r3, #0]
			netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff f8ea 	bl	8000204 <strlen>
 8001030:	4602      	mov	r2, r0
 8001032:	f107 010c 	add.w	r1, r7, #12
 8001036:	2300      	movs	r3, #0
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2301      	movs	r3, #1
 800103c:	6838      	ldr	r0, [r7, #0]
 800103e:	f007 f883 	bl	8008148 <netconn_write_partly>
		if (HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin) == 0)
 8001042:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001046:	481e      	ldr	r0, [pc, #120]	; (80010c0 <telnet_process_command+0x31c>)
 8001048:	f001 fdc4 	bl	8002bd4 <HAL_GPIO_ReadPin>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d114      	bne.n	800107c <telnet_process_command+0x2d8>
			sprintf(s, "LED3 ON\n");
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	4a24      	ldr	r2, [pc, #144]	; (80010e8 <telnet_process_command+0x344>)
 8001058:	ca07      	ldmia	r2, {r0, r1, r2}
 800105a:	c303      	stmia	r3!, {r0, r1}
 800105c:	701a      	strb	r2, [r3, #0]
			netconn_write(conn, s, strlen(s), NETCONN_COPY);
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff f8ce 	bl	8000204 <strlen>
 8001068:	4602      	mov	r2, r0
 800106a:	f107 010c 	add.w	r1, r7, #12
 800106e:	2300      	movs	r3, #0
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2301      	movs	r3, #1
 8001074:	6838      	ldr	r0, [r7, #0]
 8001076:	f007 f867 	bl	8008148 <netconn_write_partly>
}
 800107a:	e013      	b.n	80010a4 <telnet_process_command+0x300>
			sprintf(s, "LED3 OFF\n");
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	4a1a      	ldr	r2, [pc, #104]	; (80010ec <telnet_process_command+0x348>)
 8001082:	ca07      	ldmia	r2, {r0, r1, r2}
 8001084:	c303      	stmia	r3!, {r0, r1}
 8001086:	801a      	strh	r2, [r3, #0]
			netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff f8b9 	bl	8000204 <strlen>
 8001092:	4602      	mov	r2, r0
 8001094:	f107 010c 	add.w	r1, r7, #12
 8001098:	2300      	movs	r3, #0
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	6838      	ldr	r0, [r7, #0]
 80010a0:	f007 f852 	bl	8008148 <netconn_write_partly>
}
 80010a4:	bf00      	nop
 80010a6:	3754      	adds	r7, #84	; 0x54
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd90      	pop	{r4, r7, pc}
 80010ac:	08018e28 	.word	0x08018e28
 80010b0:	08018e2c 	.word	0x08018e2c
 80010b4:	08018e34 	.word	0x08018e34
 80010b8:	08018e44 	.word	0x08018e44
 80010bc:	08018e4c 	.word	0x08018e4c
 80010c0:	40020400 	.word	0x40020400
 80010c4:	08018e50 	.word	0x08018e50
 80010c8:	000a4b4f 	.word	0x000a4b4f
 80010cc:	08018e54 	.word	0x08018e54
 80010d0:	08018e5c 	.word	0x08018e5c
 80010d4:	08018e64 	.word	0x08018e64
 80010d8:	08018e6c 	.word	0x08018e6c
 80010dc:	08018e78 	.word	0x08018e78
 80010e0:	08018e84 	.word	0x08018e84
 80010e4:	08018e90 	.word	0x08018e90
 80010e8:	08018e9c 	.word	0x08018e9c
 80010ec:	08018ea8 	.word	0x08018ea8

080010f0 <telnet_byte_available>:

static void telnet_byte_available(uint8_t c, struct netconn *conn)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];

	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 127)
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <telnet_byte_available+0x64>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	2b3f      	cmp	r3, #63	; 0x3f
 8001102:	d810      	bhi.n	8001126 <telnet_byte_available+0x36>
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	2b1f      	cmp	r3, #31
 8001108:	d90d      	bls.n	8001126 <telnet_byte_available+0x36>
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	db09      	blt.n	8001126 <telnet_byte_available+0x36>
		data[cnt++] = c;
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <telnet_byte_available+0x64>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	b291      	uxth	r1, r2
 800111a:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <telnet_byte_available+0x64>)
 800111c:	8011      	strh	r1, [r2, #0]
 800111e:	4619      	mov	r1, r3
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <telnet_byte_available+0x68>)
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	5453      	strb	r3, [r2, r1]
	if (c == '\n' || c == '\r') {
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b0a      	cmp	r3, #10
 800112a:	d002      	beq.n	8001132 <telnet_byte_available+0x42>
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	2b0d      	cmp	r3, #13
 8001130:	d10c      	bne.n	800114c <telnet_byte_available+0x5c>
		data[cnt] = '\0';
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <telnet_byte_available+0x64>)
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <telnet_byte_available+0x68>)
 800113a:	2100      	movs	r1, #0
 800113c:	5499      	strb	r1, [r3, r2]

	telnet_process_command(data, conn);
 800113e:	6839      	ldr	r1, [r7, #0]
 8001140:	4805      	ldr	r0, [pc, #20]	; (8001158 <telnet_byte_available+0x68>)
 8001142:	f7ff fe2f 	bl	8000da4 <telnet_process_command>
	cnt = 0;
 8001146:	4b03      	ldr	r3, [pc, #12]	; (8001154 <telnet_byte_available+0x64>)
 8001148:	2200      	movs	r2, #0
 800114a:	801a      	strh	r2, [r3, #0]
 }
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000464 	.word	0x20000464
 8001158:	20000468 	.word	0x20000468

0800115c <telnet_thread>:

/*-----------------------------------------------------------------------------------*/
static void telnet_thread(void *arg)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8001164:	2200      	movs	r2, #0
 8001166:	2100      	movs	r1, #0
 8001168:	2010      	movs	r0, #16
 800116a:	f006 fc4d 	bl	8007a08 <netconn_new_with_proto_and_callback>
 800116e:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d055      	beq.n	8001222 <telnet_thread+0xc6>
  {  
    /* Bind connection to well known port number 23. */
    err = netconn_bind(conn, NULL, 23);
 8001176:	2217      	movs	r2, #23
 8001178:	2100      	movs	r1, #0
 800117a:	69f8      	ldr	r0, [r7, #28]
 800117c:	f006 fcfe 	bl	8007b7c <netconn_bind>
 8001180:	4603      	mov	r3, r0
 8001182:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8001184:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d146      	bne.n	800121a <telnet_thread+0xbe>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 800118c:	21ff      	movs	r1, #255	; 0xff
 800118e:	69f8      	ldr	r0, [r7, #28]
 8001190:	f006 fd2c 	bl	8007bec <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	69f8      	ldr	r0, [r7, #28]
 800119c:	f006 fd52 	bl	8007c44 <netconn_accept>
 80011a0:	4603      	mov	r3, r0
 80011a2:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 80011a4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1f3      	bne.n	8001194 <telnet_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 80011ac:	e022      	b.n	80011f4 <telnet_thread+0x98>
          {
            do 
            {
              netbuf_data(buf, (void**)&data, &len);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	f107 020a 	add.w	r2, r7, #10
 80011b4:	f107 010c 	add.w	r1, r7, #12
 80011b8:	4618      	mov	r0, r3
 80011ba:	f008 fcdf 	bl	8009b7c <netbuf_data>

              while (len--)
 80011be:	e008      	b.n	80011d2 <telnet_thread+0x76>
            	  telnet_byte_available(*data++, newconn);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	60fa      	str	r2, [r7, #12]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff8f 	bl	80010f0 <telnet_byte_available>
              while (len--)
 80011d2:	897b      	ldrh	r3, [r7, #10]
 80011d4:	1e5a      	subs	r2, r3, #1
 80011d6:	b292      	uxth	r2, r2
 80011d8:	817a      	strh	r2, [r7, #10]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f0      	bne.n	80011c0 <telnet_thread+0x64>


              //netconn_write(newconn, data, len, NETCONN_COPY);

            } 
            while (netbuf_next(buf) >= 0);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f008 fd15 	bl	8009c10 <netbuf_next>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	dae0      	bge.n	80011ae <telnet_thread+0x52>
          
            netbuf_delete(buf);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f008 fca4 	bl	8009b3c <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f107 0210 	add.w	r2, r7, #16
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f006 ff29 	bl	8008054 <netconn_recv>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0d2      	beq.n	80011ae <telnet_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	4618      	mov	r0, r3
 800120c:	f007 f89e 	bl	800834c <netconn_close>
          netconn_delete(newconn);
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	4618      	mov	r0, r3
 8001214:	f006 fc96 	bl	8007b44 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8001218:	e7bc      	b.n	8001194 <telnet_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	4618      	mov	r0, r3
 800121e:	f006 fc91 	bl	8007b44 <netconn_delete>
    }
  }
}
 8001222:	bf00      	nop
 8001224:	3720      	adds	r7, #32
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <telnet_init>:
/*-----------------------------------------------------------------------------------*/

void telnet_init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af02      	add	r7, sp, #8
  sys_thread_new("telnet_thread", telnet_thread, NULL, DEFAULT_THREAD_STACKSIZE, TELNET_THREAD_PRIO);
 8001232:	2304      	movs	r3, #4
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800123a:	2200      	movs	r2, #0
 800123c:	4903      	ldr	r1, [pc, #12]	; (800124c <telnet_init+0x20>)
 800123e:	4804      	ldr	r0, [pc, #16]	; (8001250 <telnet_init+0x24>)
 8001240:	f016 fd88 	bl	8017d54 <sys_thread_new>
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	0800115d 	.word	0x0800115d
 8001250:	08018eb4 	.word	0x08018eb4

08001254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001254:	f8df d034 	ldr.w	sp, [pc, #52]	; 800128c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001258:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800125a:	e003      	b.n	8001264 <LoopCopyDataInit>

0800125c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800125e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001260:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001262:	3104      	adds	r1, #4

08001264 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001264:	480b      	ldr	r0, [pc, #44]	; (8001294 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001268:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800126a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800126c:	d3f6      	bcc.n	800125c <CopyDataInit>
  ldr  r2, =_sbss
 800126e:	4a0b      	ldr	r2, [pc, #44]	; (800129c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001270:	e002      	b.n	8001278 <LoopFillZerobss>

08001272 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001272:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001274:	f842 3b04 	str.w	r3, [r2], #4

08001278 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800127a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800127c:	d3f9      	bcc.n	8001272 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800127e:	f7ff fd07 	bl	8000c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001282:	f016 fdab 	bl	8017ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001286:	f7ff f9b5 	bl	80005f4 <main>
  bx  lr    
 800128a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800128c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001290:	08026e40 	.word	0x08026e40
  ldr  r0, =_sdata
 8001294:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001298:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 800129c:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 80012a0:	2000f560 	.word	0x2000f560

080012a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a4:	e7fe      	b.n	80012a4 <ADC_IRQHandler>
	...

080012a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <HAL_Init+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <HAL_Init+0x40>)
 80012b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <HAL_Init+0x40>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <HAL_Init+0x40>)
 80012be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <HAL_Init+0x40>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <HAL_Init+0x40>)
 80012ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d0:	2003      	movs	r0, #3
 80012d2:	f000 f8fa 	bl	80014ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff fbac 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012dc:	f7ff fb3a 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023c00 	.word	0x40023c00

080012ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_IncTick+0x20>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_IncTick+0x24>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4413      	add	r3, r2
 80012fc:	4a04      	ldr	r2, [pc, #16]	; (8001310 <HAL_IncTick+0x24>)
 80012fe:	6013      	str	r3, [r2, #0]
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000008 	.word	0x20000008
 8001310:	20008c64 	.word	0x20008c64

08001314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return uwTick;
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <HAL_GetTick+0x14>)
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20008c64 	.word	0x20008c64

0800132c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001334:	f7ff ffee 	bl	8001314 <HAL_GetTick>
 8001338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001344:	d005      	beq.n	8001352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <HAL_Delay+0x40>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4413      	add	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001352:	bf00      	nop
 8001354:	f7ff ffde 	bl	8001314 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	429a      	cmp	r2, r3
 8001362:	d8f7      	bhi.n	8001354 <HAL_Delay+0x28>
  {
  }
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000008 	.word	0x20000008

08001370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800138c:	4013      	ands	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001398:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800139c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a2:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	60d3      	str	r3, [r2, #12]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <__NVIC_GetPriorityGrouping+0x18>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	0a1b      	lsrs	r3, r3, #8
 80013c2:	f003 0307 	and.w	r3, r3, #7
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	db0b      	blt.n	80013fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	f003 021f 	and.w	r2, r3, #31
 80013ec:	4907      	ldr	r1, [pc, #28]	; (800140c <__NVIC_EnableIRQ+0x38>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	095b      	lsrs	r3, r3, #5
 80013f4:	2001      	movs	r0, #1
 80013f6:	fa00 f202 	lsl.w	r2, r0, r2
 80013fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000e100 	.word	0xe000e100

08001410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	2b00      	cmp	r3, #0
 8001422:	db0a      	blt.n	800143a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	490c      	ldr	r1, [pc, #48]	; (800145c <__NVIC_SetPriority+0x4c>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	0112      	lsls	r2, r2, #4
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	440b      	add	r3, r1
 8001434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001438:	e00a      	b.n	8001450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4908      	ldr	r1, [pc, #32]	; (8001460 <__NVIC_SetPriority+0x50>)
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	3b04      	subs	r3, #4
 8001448:	0112      	lsls	r2, r2, #4
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	440b      	add	r3, r1
 800144e:	761a      	strb	r2, [r3, #24]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000e100 	.word	0xe000e100
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001464:	b480      	push	{r7}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f1c3 0307 	rsb	r3, r3, #7
 800147e:	2b04      	cmp	r3, #4
 8001480:	bf28      	it	cs
 8001482:	2304      	movcs	r3, #4
 8001484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3304      	adds	r3, #4
 800148a:	2b06      	cmp	r3, #6
 800148c:	d902      	bls.n	8001494 <NVIC_EncodePriority+0x30>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3b03      	subs	r3, #3
 8001492:	e000      	b.n	8001496 <NVIC_EncodePriority+0x32>
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	f04f 32ff 	mov.w	r2, #4294967295
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	401a      	ands	r2, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ac:	f04f 31ff 	mov.w	r1, #4294967295
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43d9      	mvns	r1, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	4313      	orrs	r3, r2
         );
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3724      	adds	r7, #36	; 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ff4c 	bl	8001370 <__NVIC_SetPriorityGrouping>
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f2:	f7ff ff61 	bl	80013b8 <__NVIC_GetPriorityGrouping>
 80014f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	68b9      	ldr	r1, [r7, #8]
 80014fc:	6978      	ldr	r0, [r7, #20]
 80014fe:	f7ff ffb1 	bl	8001464 <NVIC_EncodePriority>
 8001502:	4602      	mov	r2, r0
 8001504:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ff80 	bl	8001410 <__NVIC_SetPriority>
}
 8001510:	bf00      	nop
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ff54 	bl	80013d4 <__NVIC_EnableIRQ>
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001544:	4baa      	ldr	r3, [pc, #680]	; (80017f0 <HAL_ETH_Init+0x2bc>)
 8001546:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e185      	b.n	8001866 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d106      	bne.n	8001574 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f002 fe6e 	bl	8004250 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	4b9e      	ldr	r3, [pc, #632]	; (80017f4 <HAL_ETH_Init+0x2c0>)
 800157a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157c:	4a9d      	ldr	r2, [pc, #628]	; (80017f4 <HAL_ETH_Init+0x2c0>)
 800157e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001582:	6453      	str	r3, [r2, #68]	; 0x44
 8001584:	4b9b      	ldr	r3, [pc, #620]	; (80017f4 <HAL_ETH_Init+0x2c0>)
 8001586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001590:	4b99      	ldr	r3, [pc, #612]	; (80017f8 <HAL_ETH_Init+0x2c4>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	4a98      	ldr	r2, [pc, #608]	; (80017f8 <HAL_ETH_Init+0x2c4>)
 8001596:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800159a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800159c:	4b96      	ldr	r3, [pc, #600]	; (80017f8 <HAL_ETH_Init+0x2c4>)
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	4994      	ldr	r1, [pc, #592]	; (80017f8 <HAL_ETH_Init+0x2c4>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f042 0201 	orr.w	r2, r2, #1
 80015bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80015c2:	f7ff fea7 	bl	8001314 <HAL_GetTick>
 80015c6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80015c8:	e011      	b.n	80015ee <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80015ca:	f7ff fea3 	bl	8001314 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015d8:	d909      	bls.n	80015ee <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2203      	movs	r2, #3
 80015de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e13b      	b.n	8001866 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1e4      	bne.n	80015ca <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f023 031c 	bic.w	r3, r3, #28
 800160e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001610:	f001 ff40 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 8001614:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	4a78      	ldr	r2, [pc, #480]	; (80017fc <HAL_ETH_Init+0x2c8>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d908      	bls.n	8001630 <HAL_ETH_Init+0xfc>
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	4a77      	ldr	r2, [pc, #476]	; (8001800 <HAL_ETH_Init+0x2cc>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d804      	bhi.n	8001630 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	f043 0308 	orr.w	r3, r3, #8
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	e027      	b.n	8001680 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	4a73      	ldr	r2, [pc, #460]	; (8001800 <HAL_ETH_Init+0x2cc>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d908      	bls.n	800164a <HAL_ETH_Init+0x116>
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	4a72      	ldr	r2, [pc, #456]	; (8001804 <HAL_ETH_Init+0x2d0>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d804      	bhi.n	800164a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f043 030c 	orr.w	r3, r3, #12
 8001646:	61fb      	str	r3, [r7, #28]
 8001648:	e01a      	b.n	8001680 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	4a6d      	ldr	r2, [pc, #436]	; (8001804 <HAL_ETH_Init+0x2d0>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d903      	bls.n	800165a <HAL_ETH_Init+0x126>
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4a6c      	ldr	r2, [pc, #432]	; (8001808 <HAL_ETH_Init+0x2d4>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d911      	bls.n	800167e <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	4a6a      	ldr	r2, [pc, #424]	; (8001808 <HAL_ETH_Init+0x2d4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d908      	bls.n	8001674 <HAL_ETH_Init+0x140>
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	4a69      	ldr	r2, [pc, #420]	; (800180c <HAL_ETH_Init+0x2d8>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d804      	bhi.n	8001674 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	f043 0304 	orr.w	r3, r3, #4
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	e005      	b.n	8001680 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f043 0310 	orr.w	r3, r3, #16
 800167a:	61fb      	str	r3, [r7, #28]
 800167c:	e000      	b.n	8001680 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800167e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	69fa      	ldr	r2, [r7, #28]
 8001686:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001688:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800168c:	2100      	movs	r1, #0
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 fc19 	bl	8001ec6 <HAL_ETH_WritePHYRegister>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00b      	beq.n	80016b2 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800169e:	6939      	ldr	r1, [r7, #16]
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 fdcf 	bl	8002244 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e0d9      	b.n	8001866 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80016b2:	20ff      	movs	r0, #255	; 0xff
 80016b4:	f7ff fe3a 	bl	800132c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 80a7 	beq.w	8001810 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80016c2:	f7ff fe27 	bl	8001314 <HAL_GetTick>
 80016c6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	461a      	mov	r2, r3
 80016ce:	2101      	movs	r1, #1
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 fb90 	bl	8001df6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80016d6:	f7ff fe1d 	bl	8001314 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d90f      	bls.n	8001708 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80016ec:	6939      	ldr	r1, [r7, #16]
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 fda8 	bl	8002244 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e0ae      	b.n	8001866 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0da      	beq.n	80016c8 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001712:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001716:	2100      	movs	r1, #0
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 fbd4 	bl	8001ec6 <HAL_ETH_WritePHYRegister>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00b      	beq.n	800173c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001728:	6939      	ldr	r1, [r7, #16]
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 fd8a 	bl	8002244 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001738:	2301      	movs	r3, #1
 800173a:	e094      	b.n	8001866 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800173c:	f7ff fdea 	bl	8001314 <HAL_GetTick>
 8001740:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001742:	f107 030c 	add.w	r3, r7, #12
 8001746:	461a      	mov	r2, r3
 8001748:	2101      	movs	r1, #1
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 fb53 	bl	8001df6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001750:	f7ff fde0 	bl	8001314 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f241 3288 	movw	r2, #5000	; 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d90f      	bls.n	8001782 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001766:	6939      	ldr	r1, [r7, #16]
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 fd6b 	bl	8002244 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e071      	b.n	8001866 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f003 0320 	and.w	r3, r3, #32
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0da      	beq.n	8001742 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	461a      	mov	r2, r3
 8001792:	211f      	movs	r1, #31
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 fb2e 	bl	8001df6 <HAL_ETH_ReadPHYRegister>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d00b      	beq.n	80017b8 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80017a4:	6939      	ldr	r1, [r7, #16]
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 fd4c 	bl	8002244 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80017b4:	2301      	movs	r3, #1
 80017b6:	e056      	b.n	8001866 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d004      	beq.n	80017cc <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	e002      	b.n	80017d2 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	e037      	b.n	8001854 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	e032      	b.n	8001854 <HAL_ETH_Init+0x320>
 80017ee:	bf00      	nop
 80017f0:	03938700 	.word	0x03938700
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40013800 	.word	0x40013800
 80017fc:	01312cff 	.word	0x01312cff
 8001800:	02160ebf 	.word	0x02160ebf
 8001804:	039386ff 	.word	0x039386ff
 8001808:	05f5e0ff 	.word	0x05f5e0ff
 800180c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	08db      	lsrs	r3, r3, #3
 8001816:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	085b      	lsrs	r3, r3, #1
 800181e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001820:	4313      	orrs	r3, r2
 8001822:	b29b      	uxth	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	2100      	movs	r1, #0
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 fb4c 	bl	8001ec6 <HAL_ETH_WritePHYRegister>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00b      	beq.n	800184c <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001838:	6939      	ldr	r1, [r7, #16]
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 fd02 	bl	8002244 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e00c      	b.n	8001866 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800184c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001850:	f7ff fd6c 	bl	800132c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001854:	6939      	ldr	r1, [r7, #16]
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 fcf4 	bl	8002244 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3720      	adds	r7, #32
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop

08001870 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001870:	b480      	push	{r7}
 8001872:	b087      	sub	sp, #28
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_ETH_DMATxDescListInit+0x20>
 800188c:	2302      	movs	r3, #2
 800188e:	e052      	b.n	8001936 <HAL_ETH_DMATxDescListInit+0xc6>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2202      	movs	r2, #2
 800189c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	e030      	b.n	800190e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	015b      	lsls	r3, r3, #5
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	4413      	add	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018bc:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018c4:	fb02 f303 	mul.w	r3, r2, r3
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	4413      	add	r3, r2
 80018cc:	461a      	mov	r2, r3
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d105      	bne.n	80018e6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d208      	bcs.n	8001902 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	3301      	adds	r3, #1
 80018f4:	015b      	lsls	r3, r3, #5
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	4413      	add	r3, r2
 80018fa:	461a      	mov	r2, r3
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	60da      	str	r2, [r3, #12]
 8001900:	e002      	b.n	8001908 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	3301      	adds	r3, #1
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d3ca      	bcc.n	80018ac <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001920:	3310      	adds	r3, #16
 8001922:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	371c      	adds	r7, #28
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001942:	b480      	push	{r7}
 8001944:	b087      	sub	sp, #28
 8001946:	af00      	add	r7, sp, #0
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800195a:	2b01      	cmp	r3, #1
 800195c:	d101      	bne.n	8001962 <HAL_ETH_DMARxDescListInit+0x20>
 800195e:	2302      	movs	r3, #2
 8001960:	e056      	b.n	8001a10 <HAL_ETH_DMARxDescListInit+0xce>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2202      	movs	r2, #2
 800196e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	68ba      	ldr	r2, [r7, #8]
 8001976:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	e034      	b.n	80019e8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	015b      	lsls	r3, r3, #5
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	4413      	add	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800198e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001996:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800199e:	fb02 f303 	mul.w	r3, r2, r3
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	461a      	mov	r2, r3
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d105      	bne.n	80019c0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d208      	bcs.n	80019dc <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	3301      	adds	r3, #1
 80019ce:	015b      	lsls	r3, r3, #5
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	4413      	add	r3, r2
 80019d4:	461a      	mov	r2, r3
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	e002      	b.n	80019e2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80019dc:	68ba      	ldr	r2, [r7, #8]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	3301      	adds	r3, #1
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d3c6      	bcc.n	800197e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019fa:	330c      	adds	r3, #12
 80019fc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	371c      	adds	r7, #28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_ETH_TransmitFrame+0x24>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e0cd      	b.n	8001bdc <HAL_ETH_TransmitFrame+0x1c0>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d109      	bne.n	8001a6a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001a66:	2301      	movs	r3, #1
 8001a68:	e0b8      	b.n	8001bdc <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	da09      	bge.n	8001a88 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2212      	movs	r2, #18
 8001a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0a9      	b.n	8001bdc <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d915      	bls.n	8001abe <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	4a54      	ldr	r2, [pc, #336]	; (8001be8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	0a9b      	lsrs	r3, r3, #10
 8001a9c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	4b51      	ldr	r3, [pc, #324]	; (8001be8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001aa2:	fba3 1302 	umull	r1, r3, r3, r2
 8001aa6:	0a9b      	lsrs	r3, r3, #10
 8001aa8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001aac:	fb01 f303 	mul.w	r3, r1, r3
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d005      	beq.n	8001ac2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	e001      	b.n	8001ac2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d11c      	bne.n	8001b02 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001ad6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001ae2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001af2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	461a      	mov	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b00:	e04b      	b.n	8001b9a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	e044      	b.n	8001b92 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b12:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b16:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d107      	bne.n	8001b2e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b2c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b32:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b36:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d116      	bne.n	8001b70 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001b50:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	4a25      	ldr	r2, [pc, #148]	; (8001bec <HAL_ETH_TransmitFrame+0x1d0>)
 8001b56:	fb02 f203 	mul.w	r2, r2, r3
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001b62:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001b6e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b7e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	461a      	mov	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d3b6      	bcc.n	8001b08 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba2:	3314      	adds	r3, #20
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00d      	beq.n	8001bca <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb6:	3314      	adds	r3, #20
 8001bb8:	2204      	movs	r2, #4
 8001bba:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	371c      	adds	r7, #28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	ac02b00b 	.word	0xac02b00b
 8001bec:	fffffa0c 	.word	0xfffffa0c

08001bf0 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d101      	bne.n	8001c0a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e074      	b.n	8001cf4 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2202      	movs	r2, #2
 8001c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001c1a:	e05a      	b.n	8001cd2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c30:	d10d      	bne.n	8001c4e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	461a      	mov	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	629a      	str	r2, [r3, #40]	; 0x28
 8001c4c:	e041      	b.n	8001cd2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10b      	bne.n	8001c74 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	629a      	str	r2, [r3, #40]	; 0x28
 8001c72:	e02e      	b.n	8001cd2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d103      	bne.n	8001c96 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	0c1b      	lsrs	r3, r3, #16
 8001c9e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001ca2:	1f1a      	subs	r2, r3, #4
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e010      	b.n	8001cf4 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	db02      	blt.n	8001ce2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d99c      	bls.n	8001c1c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d10:	3314      	adds	r3, #20
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d18:	2b40      	cmp	r3, #64	; 0x40
 8001d1a:	d112      	bne.n	8001d42 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f002 fb65 	bl	80043ec <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d2a:	3314      	adds	r3, #20
 8001d2c:	2240      	movs	r2, #64	; 0x40
 8001d2e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d40:	e01b      	b.n	8001d7a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d4a:	3314      	adds	r3, #20
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d111      	bne.n	8001d7a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f839 	bl	8001dce <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d64:	3314      	adds	r3, #20
 8001d66:	2201      	movs	r2, #1
 8001d68:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d82:	3314      	adds	r3, #20
 8001d84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d88:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d92:	3314      	adds	r3, #20
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d9e:	d112      	bne.n	8001dc6 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f81e 	bl	8001de2 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dae:	3314      	adds	r3, #20
 8001db0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001db4:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b82      	cmp	r3, #130	; 0x82
 8001e16:	d101      	bne.n	8001e1c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e050      	b.n	8001ebe <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2282      	movs	r2, #130	; 0x82
 8001e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f003 031c 	and.w	r3, r3, #28
 8001e32:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8a1b      	ldrh	r3, [r3, #16]
 8001e38:	02db      	lsls	r3, r3, #11
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001e42:	897b      	ldrh	r3, [r7, #10]
 8001e44:	019b      	lsls	r3, r3, #6
 8001e46:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f023 0302 	bic.w	r3, r3, #2
 8001e56:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e68:	f7ff fa54 	bl	8001314 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e6e:	e015      	b.n	8001e9c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001e70:	f7ff fa50 	bl	8001314 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7e:	d309      	bcc.n	8001e94 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e014      	b.n	8001ebe <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1e4      	bne.n	8001e70 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b42      	cmp	r3, #66	; 0x42
 8001ee6:	d101      	bne.n	8001eec <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e04e      	b.n	8001f8a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2242      	movs	r2, #66	; 0x42
 8001ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f003 031c 	and.w	r3, r3, #28
 8001f02:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8a1b      	ldrh	r3, [r3, #16]
 8001f08:	02db      	lsls	r3, r3, #11
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001f12:	897b      	ldrh	r3, [r7, #10]
 8001f14:	019b      	lsls	r3, r3, #6
 8001f16:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f043 0302 	orr.w	r3, r3, #2
 8001f26:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f42:	f7ff f9e7 	bl	8001314 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f48:	e015      	b.n	8001f76 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001f4a:	f7ff f9e3 	bl	8001314 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f58:	d309      	bcc.n	8001f6e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e00d      	b.n	8001f8a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1e4      	bne.n	8001f4a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ETH_Start+0x16>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e01f      	b.n	8001fe8 <HAL_ETH_Start+0x56>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 fb45 	bl	8002648 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 fb7c 	bl	80026bc <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 fc13 	bl	80027f0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 fbb0 	bl	8002730 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 fbdd 	bl	8002790 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <HAL_ETH_Stop+0x16>
 8002002:	2302      	movs	r3, #2
 8002004:	e01f      	b.n	8002046 <HAL_ETH_Stop+0x56>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2202      	movs	r2, #2
 8002012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 fba2 	bl	8002760 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 fbcf 	bl	80027c0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fb67 	bl	80026f6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 fbe1 	bl	80027f0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 fb27 	bl	8002682 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_ETH_ConfigMAC+0x1c>
 8002068:	2302      	movs	r3, #2
 800206a:	e0e4      	b.n	8002236 <HAL_ETH_ConfigMAC+0x1e6>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2202      	movs	r2, #2
 8002078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 80b1 	beq.w	80021e6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4b6c      	ldr	r3, [pc, #432]	; (8002240 <HAL_ETH_ConfigMAC+0x1f0>)
 8002090:	4013      	ands	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800209c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80020a2:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80020a8:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80020ae:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80020b4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80020ba:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80020c0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80020c6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80020cc:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80020d2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80020d8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80020de:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020f6:	2001      	movs	r0, #1
 80020f8:	f7ff f918 	bl	800132c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800210c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002112:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002118:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800211e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002124:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800212a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002136:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002138:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002142:	2001      	movs	r0, #1
 8002144:	f7ff f8f2 	bl	800132c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002158:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002162:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002172:	4013      	ands	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002180:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002186:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800218c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002192:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002198:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80021b0:	2001      	movs	r0, #1
 80021b2:	f7ff f8bb 	bl	800132c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80021d6:	2001      	movs	r0, #1
 80021d8:	f7ff f8a8 	bl	800132c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	61da      	str	r2, [r3, #28]
 80021e4:	e01e      	b.n	8002224 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80021f4:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002216:	2001      	movs	r0, #1
 8002218:	f7ff f888 	bl	800132c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	ff20810f 	.word	0xff20810f

08002244 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b0b0      	sub	sp, #192	; 0xc0
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d007      	beq.n	800226a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002260:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002268:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800226a:	2300      	movs	r3, #0
 800226c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800226e:	2300      	movs	r3, #0
 8002270:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002272:	2300      	movs	r3, #0
 8002274:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002276:	2300      	movs	r3, #0
 8002278:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800227a:	2300      	movs	r3, #0
 800227c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d103      	bne.n	8002292 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800228a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800228e:	663b      	str	r3, [r7, #96]	; 0x60
 8002290:	e001      	b.n	8002296 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002292:	2300      	movs	r3, #0
 8002294:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002296:	f44f 7300 	mov.w	r3, #512	; 0x200
 800229a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800229c:	2300      	movs	r3, #0
 800229e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80022a0:	2300      	movs	r3, #0
 80022a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80022a8:	2300      	movs	r3, #0
 80022aa:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80022b0:	2340      	movs	r3, #64	; 0x40
 80022b2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002302:	2300      	movs	r3, #0
 8002304:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002308:	2300      	movs	r3, #0
 800230a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002318:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800231c:	4bac      	ldr	r3, [pc, #688]	; (80025d0 <ETH_MACDMAConfig+0x38c>)
 800231e:	4013      	ands	r3, r2
 8002320:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002324:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002328:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800232a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800232c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800232e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002330:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002336:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002338:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800233a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800233c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800233e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002344:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002346:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002348:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800234a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800234c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800234e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002350:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002354:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002356:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002358:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800235a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800236c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002378:	2001      	movs	r0, #1
 800237a:	f7fe ffd7 	bl	800132c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002386:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002388:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800238a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800238c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800238e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002390:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002392:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002396:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002398:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800239c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800239e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80023a2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80023a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80023a8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80023ac:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80023b4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80023b6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80023c2:	2001      	movs	r0, #1
 80023c4:	f7fe ffb2 	bl	800132c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023d0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80023da:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80023e4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80023f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023f4:	f64f 7341 	movw	r3, #65345	; 0xff41
 80023f8:	4013      	ands	r3, r2
 80023fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80023fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002402:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002404:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002408:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800240a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800240e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002410:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002414:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800241a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800241c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002420:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002422:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002434:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002440:	2001      	movs	r0, #1
 8002442:	f7fe ff73 	bl	800132c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800244e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002450:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002454:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800246a:	2001      	movs	r0, #1
 800246c:	f7fe ff5e 	bl	800132c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002478:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800247a:	2300      	movs	r3, #0
 800247c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800247e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002482:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002484:	2300      	movs	r3, #0
 8002486:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002488:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800248c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002496:	2300      	movs	r3, #0
 8002498:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800249a:	2300      	movs	r3, #0
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800249e:	2304      	movs	r3, #4
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80024a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80024a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024ac:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80024ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024b2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80024b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024b8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80024c2:	2300      	movs	r3, #0
 80024c4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ce:	3318      	adds	r3, #24
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80024d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024da:	4b3e      	ldr	r3, [pc, #248]	; (80025d4 <ETH_MACDMAConfig+0x390>)
 80024dc:	4013      	ands	r3, r2
 80024de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80024e2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80024e4:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80024e6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80024e8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80024ea:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80024ec:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80024ee:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80024f0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80024f2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80024f4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80024f6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80024f8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80024fa:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80024fe:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002500:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002502:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002504:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002516:	3318      	adds	r3, #24
 8002518:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800251c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002526:	3318      	adds	r3, #24
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800252e:	2001      	movs	r0, #1
 8002530:	f7fe fefc 	bl	800132c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800253c:	3318      	adds	r3, #24
 800253e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002542:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002548:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800254a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800254c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800254e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002550:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002554:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002558:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800255a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800255c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800255e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800256c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800257c:	2001      	movs	r0, #1
 800257e:	f7fe fed5 	bl	800132c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800258a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800258e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d10f      	bne.n	80025b8 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a0:	331c      	adds	r3, #28
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80025ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025b4:	331c      	adds	r3, #28
 80025b6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	461a      	mov	r2, r3
 80025be:	2100      	movs	r1, #0
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f809 	bl	80025d8 <ETH_MACAddressConfig>
}
 80025c6:	bf00      	nop
 80025c8:	37c0      	adds	r7, #192	; 0xc0
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	ff20810f 	.word	0xff20810f
 80025d4:	f8de3f23 	.word	0xf8de3f23

080025d8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80025d8:	b480      	push	{r7}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3305      	adds	r3, #5
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	021b      	lsls	r3, r3, #8
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	3204      	adds	r2, #4
 80025f0:	7812      	ldrb	r2, [r2, #0]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	4b11      	ldr	r3, [pc, #68]	; (8002640 <ETH_MACAddressConfig+0x68>)
 80025fa:	4413      	add	r3, r2
 80025fc:	461a      	mov	r2, r3
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3303      	adds	r3, #3
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	061a      	lsls	r2, r3, #24
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3302      	adds	r3, #2
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	041b      	lsls	r3, r3, #16
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3301      	adds	r3, #1
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	021b      	lsls	r3, r3, #8
 800261c:	4313      	orrs	r3, r2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	7812      	ldrb	r2, [r2, #0]
 8002622:	4313      	orrs	r3, r2
 8002624:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <ETH_MACAddressConfig+0x6c>)
 800262a:	4413      	add	r3, r2
 800262c:	461a      	mov	r2, r3
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	6013      	str	r3, [r2, #0]
}
 8002632:	bf00      	nop
 8002634:	371c      	adds	r7, #28
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40028040 	.word	0x40028040
 8002644:	40028044 	.word	0x40028044

08002648 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0208 	orr.w	r2, r2, #8
 8002662:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800266c:	2001      	movs	r0, #1
 800266e:	f000 f8e9 	bl	8002844 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	601a      	str	r2, [r3, #0]
}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002682:	b580      	push	{r7, lr}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0208 	bic.w	r2, r2, #8
 800269c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80026a6:	2001      	movs	r0, #1
 80026a8:	f000 f8cc 	bl	8002844 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	601a      	str	r2, [r3, #0]
}
 80026b4:	bf00      	nop
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0204 	orr.w	r2, r2, #4
 80026d6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80026e0:	2001      	movs	r0, #1
 80026e2:	f000 f8af 	bl	8002844 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	601a      	str	r2, [r3, #0]
}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0204 	bic.w	r2, r2, #4
 8002710:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800271a:	2001      	movs	r0, #1
 800271c:	f000 f892 	bl	8002844 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	601a      	str	r2, [r3, #0]
}
 8002728:	bf00      	nop
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002740:	3318      	adds	r3, #24
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800274c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002750:	3318      	adds	r3, #24
 8002752:	601a      	str	r2, [r3, #0]
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002770:	3318      	adds	r3, #24
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800277c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002780:	3318      	adds	r3, #24
 8002782:	601a      	str	r2, [r3, #0]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027a0:	3318      	adds	r3, #24
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f042 0202 	orr.w	r2, r2, #2
 80027ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b0:	3318      	adds	r3, #24
 80027b2:	601a      	str	r2, [r3, #0]
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027d0:	3318      	adds	r3, #24
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0202 	bic.w	r2, r2, #2
 80027dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027e0:	3318      	adds	r3, #24
 80027e2:	601a      	str	r2, [r3, #0]
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002804:	3318      	adds	r3, #24
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002814:	3318      	adds	r3, #24
 8002816:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002820:	3318      	adds	r3, #24
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002826:	2001      	movs	r0, #1
 8002828:	f000 f80c 	bl	8002844 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002836:	3318      	adds	r3, #24
 8002838:	601a      	str	r2, [r3, #0]
}
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800284c:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <ETH_Delay+0x34>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0a      	ldr	r2, [pc, #40]	; (800287c <ETH_Delay+0x38>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	0a5b      	lsrs	r3, r3, #9
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	fb02 f303 	mul.w	r3, r2, r3
 800285e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002860:	bf00      	nop
  } 
  while (Delay --);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1e5a      	subs	r2, r3, #1
 8002866:	60fa      	str	r2, [r7, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f9      	bne.n	8002860 <ETH_Delay+0x1c>
}
 800286c:	bf00      	nop
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	20000000 	.word	0x20000000
 800287c:	10624dd3 	.word	0x10624dd3

08002880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
 800289a:	e177      	b.n	8002b8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800289c:	2201      	movs	r2, #1
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	4013      	ands	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	f040 8166 	bne.w	8002b86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d00b      	beq.n	80028da <HAL_GPIO_Init+0x5a>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d007      	beq.n	80028da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028ce:	2b11      	cmp	r3, #17
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b12      	cmp	r3, #18
 80028d8:	d130      	bne.n	800293c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	2203      	movs	r2, #3
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002910:	2201      	movs	r2, #1
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 0201 	and.w	r2, r3, #1
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	2203      	movs	r2, #3
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4013      	ands	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b02      	cmp	r3, #2
 8002972:	d003      	beq.n	800297c <HAL_GPIO_Init+0xfc>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b12      	cmp	r3, #18
 800297a:	d123      	bne.n	80029c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	08da      	lsrs	r2, r3, #3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3208      	adds	r2, #8
 8002984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002988:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	220f      	movs	r2, #15
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	08da      	lsrs	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3208      	adds	r2, #8
 80029be:	69b9      	ldr	r1, [r7, #24]
 80029c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	2203      	movs	r2, #3
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0203 	and.w	r2, r3, #3
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 80c0 	beq.w	8002b86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	4b65      	ldr	r3, [pc, #404]	; (8002ba0 <HAL_GPIO_Init+0x320>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0e:	4a64      	ldr	r2, [pc, #400]	; (8002ba0 <HAL_GPIO_Init+0x320>)
 8002a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a14:	6453      	str	r3, [r2, #68]	; 0x44
 8002a16:	4b62      	ldr	r3, [pc, #392]	; (8002ba0 <HAL_GPIO_Init+0x320>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a22:	4a60      	ldr	r2, [pc, #384]	; (8002ba4 <HAL_GPIO_Init+0x324>)
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	089b      	lsrs	r3, r3, #2
 8002a28:	3302      	adds	r3, #2
 8002a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	220f      	movs	r2, #15
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a57      	ldr	r2, [pc, #348]	; (8002ba8 <HAL_GPIO_Init+0x328>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d037      	beq.n	8002abe <HAL_GPIO_Init+0x23e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a56      	ldr	r2, [pc, #344]	; (8002bac <HAL_GPIO_Init+0x32c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d031      	beq.n	8002aba <HAL_GPIO_Init+0x23a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a55      	ldr	r2, [pc, #340]	; (8002bb0 <HAL_GPIO_Init+0x330>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d02b      	beq.n	8002ab6 <HAL_GPIO_Init+0x236>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a54      	ldr	r2, [pc, #336]	; (8002bb4 <HAL_GPIO_Init+0x334>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d025      	beq.n	8002ab2 <HAL_GPIO_Init+0x232>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a53      	ldr	r2, [pc, #332]	; (8002bb8 <HAL_GPIO_Init+0x338>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d01f      	beq.n	8002aae <HAL_GPIO_Init+0x22e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a52      	ldr	r2, [pc, #328]	; (8002bbc <HAL_GPIO_Init+0x33c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d019      	beq.n	8002aaa <HAL_GPIO_Init+0x22a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a51      	ldr	r2, [pc, #324]	; (8002bc0 <HAL_GPIO_Init+0x340>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d013      	beq.n	8002aa6 <HAL_GPIO_Init+0x226>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a50      	ldr	r2, [pc, #320]	; (8002bc4 <HAL_GPIO_Init+0x344>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00d      	beq.n	8002aa2 <HAL_GPIO_Init+0x222>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a4f      	ldr	r2, [pc, #316]	; (8002bc8 <HAL_GPIO_Init+0x348>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d007      	beq.n	8002a9e <HAL_GPIO_Init+0x21e>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a4e      	ldr	r2, [pc, #312]	; (8002bcc <HAL_GPIO_Init+0x34c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d101      	bne.n	8002a9a <HAL_GPIO_Init+0x21a>
 8002a96:	2309      	movs	r3, #9
 8002a98:	e012      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002a9a:	230a      	movs	r3, #10
 8002a9c:	e010      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002a9e:	2308      	movs	r3, #8
 8002aa0:	e00e      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002aa2:	2307      	movs	r3, #7
 8002aa4:	e00c      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002aa6:	2306      	movs	r3, #6
 8002aa8:	e00a      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002aaa:	2305      	movs	r3, #5
 8002aac:	e008      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002aae:	2304      	movs	r3, #4
 8002ab0:	e006      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e004      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e002      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	f002 0203 	and.w	r2, r2, #3
 8002ac6:	0092      	lsls	r2, r2, #2
 8002ac8:	4093      	lsls	r3, r2
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ad0:	4934      	ldr	r1, [pc, #208]	; (8002ba4 <HAL_GPIO_Init+0x324>)
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	089b      	lsrs	r3, r3, #2
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ade:	4b3c      	ldr	r3, [pc, #240]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b02:	4a33      	ldr	r2, [pc, #204]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b08:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b2c:	4a28      	ldr	r2, [pc, #160]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b32:	4b27      	ldr	r3, [pc, #156]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b56:	4a1e      	ldr	r2, [pc, #120]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b5c:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b80:	4a13      	ldr	r2, [pc, #76]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	61fb      	str	r3, [r7, #28]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	2b0f      	cmp	r3, #15
 8002b90:	f67f ae84 	bls.w	800289c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b94:	bf00      	nop
 8002b96:	3724      	adds	r7, #36	; 0x24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	40013800 	.word	0x40013800
 8002ba8:	40020000 	.word	0x40020000
 8002bac:	40020400 	.word	0x40020400
 8002bb0:	40020800 	.word	0x40020800
 8002bb4:	40020c00 	.word	0x40020c00
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40021400 	.word	0x40021400
 8002bc0:	40021800 	.word	0x40021800
 8002bc4:	40021c00 	.word	0x40021c00
 8002bc8:	40022000 	.word	0x40022000
 8002bcc:	40022400 	.word	0x40022400
 8002bd0:	40013c00 	.word	0x40013c00

08002bd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	887b      	ldrh	r3, [r7, #2]
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d002      	beq.n	8002bf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
 8002bf0:	e001      	b.n	8002bf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	807b      	strh	r3, [r7, #2]
 8002c10:	4613      	mov	r3, r2
 8002c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c14:	787b      	ldrb	r3, [r7, #1]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c1a:	887a      	ldrh	r2, [r7, #2]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c20:	e003      	b.n	8002c2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c22:	887b      	ldrh	r3, [r7, #2]
 8002c24:	041a      	lsls	r2, r3, #16
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	619a      	str	r2, [r3, #24]
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e25b      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d075      	beq.n	8002d42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c56:	4ba3      	ldr	r3, [pc, #652]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d00c      	beq.n	8002c7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c62:	4ba0      	ldr	r3, [pc, #640]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d112      	bne.n	8002c94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c6e:	4b9d      	ldr	r3, [pc, #628]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c7a:	d10b      	bne.n	8002c94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7c:	4b99      	ldr	r3, [pc, #612]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d05b      	beq.n	8002d40 <HAL_RCC_OscConfig+0x108>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d157      	bne.n	8002d40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e236      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9c:	d106      	bne.n	8002cac <HAL_RCC_OscConfig+0x74>
 8002c9e:	4b91      	ldr	r3, [pc, #580]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a90      	ldr	r2, [pc, #576]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	e01d      	b.n	8002ce8 <HAL_RCC_OscConfig+0xb0>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x98>
 8002cb6:	4b8b      	ldr	r3, [pc, #556]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a8a      	ldr	r2, [pc, #552]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	4b88      	ldr	r3, [pc, #544]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a87      	ldr	r2, [pc, #540]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	e00b      	b.n	8002ce8 <HAL_RCC_OscConfig+0xb0>
 8002cd0:	4b84      	ldr	r3, [pc, #528]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a83      	ldr	r2, [pc, #524]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	4b81      	ldr	r3, [pc, #516]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a80      	ldr	r2, [pc, #512]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d013      	beq.n	8002d18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf0:	f7fe fb10 	bl	8001314 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cf8:	f7fe fb0c 	bl	8001314 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	; 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e1fb      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0a:	4b76      	ldr	r3, [pc, #472]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0xc0>
 8002d16:	e014      	b.n	8002d42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7fe fafc 	bl	8001314 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d20:	f7fe faf8 	bl	8001314 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b64      	cmp	r3, #100	; 0x64
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e1e7      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d32:	4b6c      	ldr	r3, [pc, #432]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0xe8>
 8002d3e:	e000      	b.n	8002d42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d063      	beq.n	8002e16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d4e:	4b65      	ldr	r3, [pc, #404]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00b      	beq.n	8002d72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d5a:	4b62      	ldr	r3, [pc, #392]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d11c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d66:	4b5f      	ldr	r3, [pc, #380]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d116      	bne.n	8002da0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d72:	4b5c      	ldr	r3, [pc, #368]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d005      	beq.n	8002d8a <HAL_RCC_OscConfig+0x152>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d001      	beq.n	8002d8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e1bb      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8a:	4b56      	ldr	r3, [pc, #344]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	4952      	ldr	r1, [pc, #328]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d9e:	e03a      	b.n	8002e16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d020      	beq.n	8002dea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da8:	4b4f      	ldr	r3, [pc, #316]	; (8002ee8 <HAL_RCC_OscConfig+0x2b0>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dae:	f7fe fab1 	bl	8001314 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002db6:	f7fe faad 	bl	8001314 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e19c      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc8:	4b46      	ldr	r3, [pc, #280]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0f0      	beq.n	8002db6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd4:	4b43      	ldr	r3, [pc, #268]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	4940      	ldr	r1, [pc, #256]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	600b      	str	r3, [r1, #0]
 8002de8:	e015      	b.n	8002e16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dea:	4b3f      	ldr	r3, [pc, #252]	; (8002ee8 <HAL_RCC_OscConfig+0x2b0>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df0:	f7fe fa90 	bl	8001314 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002df8:	f7fe fa8c 	bl	8001314 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e17b      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e0a:	4b36      	ldr	r3, [pc, #216]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d030      	beq.n	8002e84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d016      	beq.n	8002e58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e2a:	4b30      	ldr	r3, [pc, #192]	; (8002eec <HAL_RCC_OscConfig+0x2b4>)
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e30:	f7fe fa70 	bl	8001314 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e38:	f7fe fa6c 	bl	8001314 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e15b      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e4a:	4b26      	ldr	r3, [pc, #152]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x200>
 8002e56:	e015      	b.n	8002e84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e58:	4b24      	ldr	r3, [pc, #144]	; (8002eec <HAL_RCC_OscConfig+0x2b4>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5e:	f7fe fa59 	bl	8001314 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e66:	f7fe fa55 	bl	8001314 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e144      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e78:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1f0      	bne.n	8002e66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80a0 	beq.w	8002fd2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e92:	2300      	movs	r3, #0
 8002e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10f      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	4a0e      	ldr	r2, [pc, #56]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eba:	60bb      	str	r3, [r7, #8]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_RCC_OscConfig+0x2b8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d121      	bne.n	8002f12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ece:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <HAL_RCC_OscConfig+0x2b8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a07      	ldr	r2, [pc, #28]	; (8002ef0 <HAL_RCC_OscConfig+0x2b8>)
 8002ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eda:	f7fe fa1b 	bl	8001314 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee0:	e011      	b.n	8002f06 <HAL_RCC_OscConfig+0x2ce>
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	42470000 	.word	0x42470000
 8002eec:	42470e80 	.word	0x42470e80
 8002ef0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef4:	f7fe fa0e 	bl	8001314 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e0fd      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f06:	4b81      	ldr	r3, [pc, #516]	; (800310c <HAL_RCC_OscConfig+0x4d4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d106      	bne.n	8002f28 <HAL_RCC_OscConfig+0x2f0>
 8002f1a:	4b7d      	ldr	r3, [pc, #500]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1e:	4a7c      	ldr	r2, [pc, #496]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	6713      	str	r3, [r2, #112]	; 0x70
 8002f26:	e01c      	b.n	8002f62 <HAL_RCC_OscConfig+0x32a>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d10c      	bne.n	8002f4a <HAL_RCC_OscConfig+0x312>
 8002f30:	4b77      	ldr	r3, [pc, #476]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	4a76      	ldr	r2, [pc, #472]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002f36:	f043 0304 	orr.w	r3, r3, #4
 8002f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3c:	4b74      	ldr	r3, [pc, #464]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f40:	4a73      	ldr	r2, [pc, #460]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	6713      	str	r3, [r2, #112]	; 0x70
 8002f48:	e00b      	b.n	8002f62 <HAL_RCC_OscConfig+0x32a>
 8002f4a:	4b71      	ldr	r3, [pc, #452]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4e:	4a70      	ldr	r2, [pc, #448]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002f50:	f023 0301 	bic.w	r3, r3, #1
 8002f54:	6713      	str	r3, [r2, #112]	; 0x70
 8002f56:	4b6e      	ldr	r3, [pc, #440]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5a:	4a6d      	ldr	r2, [pc, #436]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002f5c:	f023 0304 	bic.w	r3, r3, #4
 8002f60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d015      	beq.n	8002f96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6a:	f7fe f9d3 	bl	8001314 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f70:	e00a      	b.n	8002f88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f72:	f7fe f9cf 	bl	8001314 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e0bc      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f88:	4b61      	ldr	r3, [pc, #388]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0ee      	beq.n	8002f72 <HAL_RCC_OscConfig+0x33a>
 8002f94:	e014      	b.n	8002fc0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f96:	f7fe f9bd 	bl	8001314 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9c:	e00a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7fe f9b9 	bl	8001314 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e0a6      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb4:	4b56      	ldr	r3, [pc, #344]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1ee      	bne.n	8002f9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d105      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fc6:	4b52      	ldr	r3, [pc, #328]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	4a51      	ldr	r2, [pc, #324]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 8092 	beq.w	8003100 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fdc:	4b4c      	ldr	r3, [pc, #304]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 030c 	and.w	r3, r3, #12
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d05c      	beq.n	80030a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d141      	bne.n	8003074 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff0:	4b48      	ldr	r3, [pc, #288]	; (8003114 <HAL_RCC_OscConfig+0x4dc>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff6:	f7fe f98d 	bl	8001314 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ffe:	f7fe f989 	bl	8001314 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e078      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003010:	4b3f      	ldr	r3, [pc, #252]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1f0      	bne.n	8002ffe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69da      	ldr	r2, [r3, #28]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	019b      	lsls	r3, r3, #6
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	085b      	lsrs	r3, r3, #1
 8003034:	3b01      	subs	r3, #1
 8003036:	041b      	lsls	r3, r3, #16
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	061b      	lsls	r3, r3, #24
 8003040:	4933      	ldr	r1, [pc, #204]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8003042:	4313      	orrs	r3, r2
 8003044:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003046:	4b33      	ldr	r3, [pc, #204]	; (8003114 <HAL_RCC_OscConfig+0x4dc>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304c:	f7fe f962 	bl	8001314 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003054:	f7fe f95e 	bl	8001314 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e04d      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003066:	4b2a      	ldr	r3, [pc, #168]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x41c>
 8003072:	e045      	b.n	8003100 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003074:	4b27      	ldr	r3, [pc, #156]	; (8003114 <HAL_RCC_OscConfig+0x4dc>)
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307a:	f7fe f94b 	bl	8001314 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003082:	f7fe f947 	bl	8001314 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e036      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003094:	4b1e      	ldr	r3, [pc, #120]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f0      	bne.n	8003082 <HAL_RCC_OscConfig+0x44a>
 80030a0:	e02e      	b.n	8003100 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e029      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030ae:	4b18      	ldr	r3, [pc, #96]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d11c      	bne.n	80030fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d115      	bne.n	80030fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030d6:	4013      	ands	r3, r2
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030dc:	4293      	cmp	r3, r2
 80030de:	d10d      	bne.n	80030fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d106      	bne.n	80030fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d001      	beq.n	8003100 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40007000 	.word	0x40007000
 8003110:	40023800 	.word	0x40023800
 8003114:	42470060 	.word	0x42470060

08003118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0cc      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800312c:	4b68      	ldr	r3, [pc, #416]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d90c      	bls.n	8003154 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313a:	4b65      	ldr	r3, [pc, #404]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003142:	4b63      	ldr	r3, [pc, #396]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d001      	beq.n	8003154 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0b8      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d020      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800316c:	4b59      	ldr	r3, [pc, #356]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	4a58      	ldr	r2, [pc, #352]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003176:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003184:	4b53      	ldr	r3, [pc, #332]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	4a52      	ldr	r2, [pc, #328]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800318e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003190:	4b50      	ldr	r3, [pc, #320]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	494d      	ldr	r1, [pc, #308]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d044      	beq.n	8003238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d107      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b6:	4b47      	ldr	r3, [pc, #284]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d119      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e07f      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d003      	beq.n	80031d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d6:	4b3f      	ldr	r3, [pc, #252]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e06f      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e6:	4b3b      	ldr	r3, [pc, #236]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e067      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031f6:	4b37      	ldr	r3, [pc, #220]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f023 0203 	bic.w	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4934      	ldr	r1, [pc, #208]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	4313      	orrs	r3, r2
 8003206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003208:	f7fe f884 	bl	8001314 <HAL_GetTick>
 800320c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320e:	e00a      	b.n	8003226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003210:	f7fe f880 	bl	8001314 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	; 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e04f      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	4b2b      	ldr	r3, [pc, #172]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 020c 	and.w	r2, r3, #12
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	429a      	cmp	r2, r3
 8003236:	d1eb      	bne.n	8003210 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003238:	4b25      	ldr	r3, [pc, #148]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d20c      	bcs.n	8003260 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324e:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d001      	beq.n	8003260 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e032      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800326c:	4b19      	ldr	r3, [pc, #100]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4916      	ldr	r1, [pc, #88]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d009      	beq.n	800329e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800328a:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	490e      	ldr	r1, [pc, #56]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800329e:	f000 f821 	bl	80032e4 <HAL_RCC_GetSysClockFreq>
 80032a2:	4601      	mov	r1, r0
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	091b      	lsrs	r3, r3, #4
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	4a0a      	ldr	r2, [pc, #40]	; (80032d8 <HAL_RCC_ClockConfig+0x1c0>)
 80032b0:	5cd3      	ldrb	r3, [r2, r3]
 80032b2:	fa21 f303 	lsr.w	r3, r1, r3
 80032b6:	4a09      	ldr	r2, [pc, #36]	; (80032dc <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032ba:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_RCC_ClockConfig+0x1c8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd fbb8 	bl	8000a34 <HAL_InitTick>

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40023c00 	.word	0x40023c00
 80032d4:	40023800 	.word	0x40023800
 80032d8:	0801c9f8 	.word	0x0801c9f8
 80032dc:	20000000 	.word	0x20000000
 80032e0:	20000004 	.word	0x20000004

080032e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	607b      	str	r3, [r7, #4]
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	2300      	movs	r3, #0
 80032f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032fa:	4b63      	ldr	r3, [pc, #396]	; (8003488 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	2b04      	cmp	r3, #4
 8003304:	d007      	beq.n	8003316 <HAL_RCC_GetSysClockFreq+0x32>
 8003306:	2b08      	cmp	r3, #8
 8003308:	d008      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0x38>
 800330a:	2b00      	cmp	r3, #0
 800330c:	f040 80b4 	bne.w	8003478 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003310:	4b5e      	ldr	r3, [pc, #376]	; (800348c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003312:	60bb      	str	r3, [r7, #8]
       break;
 8003314:	e0b3      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003316:	4b5e      	ldr	r3, [pc, #376]	; (8003490 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003318:	60bb      	str	r3, [r7, #8]
      break;
 800331a:	e0b0      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800331c:	4b5a      	ldr	r3, [pc, #360]	; (8003488 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003324:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003326:	4b58      	ldr	r3, [pc, #352]	; (8003488 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d04a      	beq.n	80033c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003332:	4b55      	ldr	r3, [pc, #340]	; (8003488 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	099b      	lsrs	r3, r3, #6
 8003338:	f04f 0400 	mov.w	r4, #0
 800333c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	ea03 0501 	and.w	r5, r3, r1
 8003348:	ea04 0602 	and.w	r6, r4, r2
 800334c:	4629      	mov	r1, r5
 800334e:	4632      	mov	r2, r6
 8003350:	f04f 0300 	mov.w	r3, #0
 8003354:	f04f 0400 	mov.w	r4, #0
 8003358:	0154      	lsls	r4, r2, #5
 800335a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800335e:	014b      	lsls	r3, r1, #5
 8003360:	4619      	mov	r1, r3
 8003362:	4622      	mov	r2, r4
 8003364:	1b49      	subs	r1, r1, r5
 8003366:	eb62 0206 	sbc.w	r2, r2, r6
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	f04f 0400 	mov.w	r4, #0
 8003372:	0194      	lsls	r4, r2, #6
 8003374:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003378:	018b      	lsls	r3, r1, #6
 800337a:	1a5b      	subs	r3, r3, r1
 800337c:	eb64 0402 	sbc.w	r4, r4, r2
 8003380:	f04f 0100 	mov.w	r1, #0
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	00e2      	lsls	r2, r4, #3
 800338a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800338e:	00d9      	lsls	r1, r3, #3
 8003390:	460b      	mov	r3, r1
 8003392:	4614      	mov	r4, r2
 8003394:	195b      	adds	r3, r3, r5
 8003396:	eb44 0406 	adc.w	r4, r4, r6
 800339a:	f04f 0100 	mov.w	r1, #0
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	0262      	lsls	r2, r4, #9
 80033a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80033a8:	0259      	lsls	r1, r3, #9
 80033aa:	460b      	mov	r3, r1
 80033ac:	4614      	mov	r4, r2
 80033ae:	4618      	mov	r0, r3
 80033b0:	4621      	mov	r1, r4
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f04f 0400 	mov.w	r4, #0
 80033b8:	461a      	mov	r2, r3
 80033ba:	4623      	mov	r3, r4
 80033bc:	f7fc ff80 	bl	80002c0 <__aeabi_uldivmod>
 80033c0:	4603      	mov	r3, r0
 80033c2:	460c      	mov	r4, r1
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	e049      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c8:	4b2f      	ldr	r3, [pc, #188]	; (8003488 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	099b      	lsrs	r3, r3, #6
 80033ce:	f04f 0400 	mov.w	r4, #0
 80033d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	ea03 0501 	and.w	r5, r3, r1
 80033de:	ea04 0602 	and.w	r6, r4, r2
 80033e2:	4629      	mov	r1, r5
 80033e4:	4632      	mov	r2, r6
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	f04f 0400 	mov.w	r4, #0
 80033ee:	0154      	lsls	r4, r2, #5
 80033f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033f4:	014b      	lsls	r3, r1, #5
 80033f6:	4619      	mov	r1, r3
 80033f8:	4622      	mov	r2, r4
 80033fa:	1b49      	subs	r1, r1, r5
 80033fc:	eb62 0206 	sbc.w	r2, r2, r6
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	f04f 0400 	mov.w	r4, #0
 8003408:	0194      	lsls	r4, r2, #6
 800340a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800340e:	018b      	lsls	r3, r1, #6
 8003410:	1a5b      	subs	r3, r3, r1
 8003412:	eb64 0402 	sbc.w	r4, r4, r2
 8003416:	f04f 0100 	mov.w	r1, #0
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	00e2      	lsls	r2, r4, #3
 8003420:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003424:	00d9      	lsls	r1, r3, #3
 8003426:	460b      	mov	r3, r1
 8003428:	4614      	mov	r4, r2
 800342a:	195b      	adds	r3, r3, r5
 800342c:	eb44 0406 	adc.w	r4, r4, r6
 8003430:	f04f 0100 	mov.w	r1, #0
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	02a2      	lsls	r2, r4, #10
 800343a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800343e:	0299      	lsls	r1, r3, #10
 8003440:	460b      	mov	r3, r1
 8003442:	4614      	mov	r4, r2
 8003444:	4618      	mov	r0, r3
 8003446:	4621      	mov	r1, r4
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f04f 0400 	mov.w	r4, #0
 800344e:	461a      	mov	r2, r3
 8003450:	4623      	mov	r3, r4
 8003452:	f7fc ff35 	bl	80002c0 <__aeabi_uldivmod>
 8003456:	4603      	mov	r3, r0
 8003458:	460c      	mov	r4, r1
 800345a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800345c:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	0c1b      	lsrs	r3, r3, #16
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	3301      	adds	r3, #1
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	fbb2 f3f3 	udiv	r3, r2, r3
 8003474:	60bb      	str	r3, [r7, #8]
      break;
 8003476:	e002      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003478:	4b04      	ldr	r3, [pc, #16]	; (800348c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800347a:	60bb      	str	r3, [r7, #8]
      break;
 800347c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800347e:	68bb      	ldr	r3, [r7, #8]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003488:	40023800 	.word	0x40023800
 800348c:	00f42400 	.word	0x00f42400
 8003490:	007a1200 	.word	0x007a1200

08003494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003498:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800349a:	681b      	ldr	r3, [r3, #0]
}
 800349c:	4618      	mov	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	20000000 	.word	0x20000000

080034ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034b0:	f7ff fff0 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 80034b4:	4601      	mov	r1, r0
 80034b6:	4b05      	ldr	r3, [pc, #20]	; (80034cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	0a9b      	lsrs	r3, r3, #10
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	4a03      	ldr	r2, [pc, #12]	; (80034d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034c2:	5cd3      	ldrb	r3, [r2, r3]
 80034c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40023800 	.word	0x40023800
 80034d0:	0801ca08 	.word	0x0801ca08

080034d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034d8:	f7ff ffdc 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 80034dc:	4601      	mov	r1, r0
 80034de:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	0b5b      	lsrs	r3, r3, #13
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	4a03      	ldr	r2, [pc, #12]	; (80034f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ea:	5cd3      	ldrb	r3, [r2, r3]
 80034ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40023800 	.word	0x40023800
 80034f8:	0801ca08 	.word	0x0801ca08

080034fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	220f      	movs	r2, #15
 800350a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800350c:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_RCC_GetClockConfig+0x5c>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0203 	and.w	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003518:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <HAL_RCC_GetClockConfig+0x5c>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <HAL_RCC_GetClockConfig+0x5c>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003530:	4b09      	ldr	r3, [pc, #36]	; (8003558 <HAL_RCC_GetClockConfig+0x5c>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	08db      	lsrs	r3, r3, #3
 8003536:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800353e:	4b07      	ldr	r3, [pc, #28]	; (800355c <HAL_RCC_GetClockConfig+0x60>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 020f 	and.w	r2, r3, #15
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	601a      	str	r2, [r3, #0]
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800
 800355c:	40023c00 	.word	0x40023c00

08003560 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e01d      	b.n	80035ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f815 	bl	80035b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3304      	adds	r3, #4
 800359c:	4619      	mov	r1, r3
 800359e:	4610      	mov	r0, r2
 80035a0:	f000 f968 	bl	8003874 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b085      	sub	sp, #20
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 0201 	orr.w	r2, r2, #1
 80035e0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2b06      	cmp	r3, #6
 80035f2:	d007      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b02      	cmp	r3, #2
 8003626:	d122      	bne.n	800366e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b02      	cmp	r3, #2
 8003634:	d11b      	bne.n	800366e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f06f 0202 	mvn.w	r2, #2
 800363e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f8ee 	bl	8003836 <HAL_TIM_IC_CaptureCallback>
 800365a:	e005      	b.n	8003668 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f8e0 	bl	8003822 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f8f1 	bl	800384a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b04      	cmp	r3, #4
 800367a:	d122      	bne.n	80036c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b04      	cmp	r3, #4
 8003688:	d11b      	bne.n	80036c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f06f 0204 	mvn.w	r2, #4
 8003692:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f8c4 	bl	8003836 <HAL_TIM_IC_CaptureCallback>
 80036ae:	e005      	b.n	80036bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f8b6 	bl	8003822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f8c7 	bl	800384a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d122      	bne.n	8003716 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d11b      	bne.n	8003716 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f06f 0208 	mvn.w	r2, #8
 80036e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2204      	movs	r2, #4
 80036ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	f003 0303 	and.w	r3, r3, #3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f89a 	bl	8003836 <HAL_TIM_IC_CaptureCallback>
 8003702:	e005      	b.n	8003710 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f88c 	bl	8003822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f89d 	bl	800384a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	2b10      	cmp	r3, #16
 8003722:	d122      	bne.n	800376a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f003 0310 	and.w	r3, r3, #16
 800372e:	2b10      	cmp	r3, #16
 8003730:	d11b      	bne.n	800376a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f06f 0210 	mvn.w	r2, #16
 800373a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2208      	movs	r2, #8
 8003740:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f870 	bl	8003836 <HAL_TIM_IC_CaptureCallback>
 8003756:	e005      	b.n	8003764 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f862 	bl	8003822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f873 	bl	800384a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b01      	cmp	r3, #1
 8003776:	d10e      	bne.n	8003796 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b01      	cmp	r3, #1
 8003784:	d107      	bne.n	8003796 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f06f 0201 	mvn.w	r2, #1
 800378e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7fd f8c5 	bl	8000920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a0:	2b80      	cmp	r3, #128	; 0x80
 80037a2:	d10e      	bne.n	80037c2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ae:	2b80      	cmp	r3, #128	; 0x80
 80037b0:	d107      	bne.n	80037c2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f903 	bl	80039c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037cc:	2b40      	cmp	r3, #64	; 0x40
 80037ce:	d10e      	bne.n	80037ee <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d107      	bne.n	80037ee <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f838 	bl	800385e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d10e      	bne.n	800381a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b20      	cmp	r3, #32
 8003808:	d107      	bne.n	800381a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f06f 0220 	mvn.w	r2, #32
 8003812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f8cd 	bl	80039b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
	...

08003874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a40      	ldr	r2, [pc, #256]	; (8003988 <TIM_Base_SetConfig+0x114>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d013      	beq.n	80038b4 <TIM_Base_SetConfig+0x40>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003892:	d00f      	beq.n	80038b4 <TIM_Base_SetConfig+0x40>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a3d      	ldr	r2, [pc, #244]	; (800398c <TIM_Base_SetConfig+0x118>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d00b      	beq.n	80038b4 <TIM_Base_SetConfig+0x40>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a3c      	ldr	r2, [pc, #240]	; (8003990 <TIM_Base_SetConfig+0x11c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d007      	beq.n	80038b4 <TIM_Base_SetConfig+0x40>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a3b      	ldr	r2, [pc, #236]	; (8003994 <TIM_Base_SetConfig+0x120>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d003      	beq.n	80038b4 <TIM_Base_SetConfig+0x40>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a3a      	ldr	r2, [pc, #232]	; (8003998 <TIM_Base_SetConfig+0x124>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d108      	bne.n	80038c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a2f      	ldr	r2, [pc, #188]	; (8003988 <TIM_Base_SetConfig+0x114>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d02b      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d4:	d027      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a2c      	ldr	r2, [pc, #176]	; (800398c <TIM_Base_SetConfig+0x118>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d023      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a2b      	ldr	r2, [pc, #172]	; (8003990 <TIM_Base_SetConfig+0x11c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d01f      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a2a      	ldr	r2, [pc, #168]	; (8003994 <TIM_Base_SetConfig+0x120>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d01b      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a29      	ldr	r2, [pc, #164]	; (8003998 <TIM_Base_SetConfig+0x124>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d017      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a28      	ldr	r2, [pc, #160]	; (800399c <TIM_Base_SetConfig+0x128>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d013      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a27      	ldr	r2, [pc, #156]	; (80039a0 <TIM_Base_SetConfig+0x12c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00f      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a26      	ldr	r2, [pc, #152]	; (80039a4 <TIM_Base_SetConfig+0x130>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d00b      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a25      	ldr	r2, [pc, #148]	; (80039a8 <TIM_Base_SetConfig+0x134>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d007      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a24      	ldr	r2, [pc, #144]	; (80039ac <TIM_Base_SetConfig+0x138>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d003      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a23      	ldr	r2, [pc, #140]	; (80039b0 <TIM_Base_SetConfig+0x13c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d108      	bne.n	8003938 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800392c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4313      	orrs	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a0a      	ldr	r2, [pc, #40]	; (8003988 <TIM_Base_SetConfig+0x114>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d003      	beq.n	800396c <TIM_Base_SetConfig+0xf8>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a0c      	ldr	r2, [pc, #48]	; (8003998 <TIM_Base_SetConfig+0x124>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d103      	bne.n	8003974 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	615a      	str	r2, [r3, #20]
}
 800397a:	bf00      	nop
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40010000 	.word	0x40010000
 800398c:	40000400 	.word	0x40000400
 8003990:	40000800 	.word	0x40000800
 8003994:	40000c00 	.word	0x40000c00
 8003998:	40010400 	.word	0x40010400
 800399c:	40014000 	.word	0x40014000
 80039a0:	40014400 	.word	0x40014400
 80039a4:	40014800 	.word	0x40014800
 80039a8:	40001800 	.word	0x40001800
 80039ac:	40001c00 	.word	0x40001c00
 80039b0:	40002000 	.word	0x40002000

080039b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e03f      	b.n	8003a6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7fc ffce 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2224      	movs	r2, #36	; 0x24
 8003a0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f829 	bl	8003a78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695a      	ldr	r2, [r3, #20]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a7c:	b085      	sub	sp, #20
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003aba:	f023 030c 	bic.w	r3, r3, #12
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6812      	ldr	r2, [r2, #0]
 8003ac2:	68f9      	ldr	r1, [r7, #12]
 8003ac4:	430b      	orrs	r3, r1
 8003ac6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699a      	ldr	r2, [r3, #24]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae6:	f040 818b 	bne.w	8003e00 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4ac1      	ldr	r2, [pc, #772]	; (8003df4 <UART_SetConfig+0x37c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d005      	beq.n	8003b00 <UART_SetConfig+0x88>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4abf      	ldr	r2, [pc, #764]	; (8003df8 <UART_SetConfig+0x380>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	f040 80bd 	bne.w	8003c7a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b00:	f7ff fce8 	bl	80034d4 <HAL_RCC_GetPCLK2Freq>
 8003b04:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	461d      	mov	r5, r3
 8003b0a:	f04f 0600 	mov.w	r6, #0
 8003b0e:	46a8      	mov	r8, r5
 8003b10:	46b1      	mov	r9, r6
 8003b12:	eb18 0308 	adds.w	r3, r8, r8
 8003b16:	eb49 0409 	adc.w	r4, r9, r9
 8003b1a:	4698      	mov	r8, r3
 8003b1c:	46a1      	mov	r9, r4
 8003b1e:	eb18 0805 	adds.w	r8, r8, r5
 8003b22:	eb49 0906 	adc.w	r9, r9, r6
 8003b26:	f04f 0100 	mov.w	r1, #0
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b32:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b36:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b3a:	4688      	mov	r8, r1
 8003b3c:	4691      	mov	r9, r2
 8003b3e:	eb18 0005 	adds.w	r0, r8, r5
 8003b42:	eb49 0106 	adc.w	r1, r9, r6
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	461d      	mov	r5, r3
 8003b4c:	f04f 0600 	mov.w	r6, #0
 8003b50:	196b      	adds	r3, r5, r5
 8003b52:	eb46 0406 	adc.w	r4, r6, r6
 8003b56:	461a      	mov	r2, r3
 8003b58:	4623      	mov	r3, r4
 8003b5a:	f7fc fbb1 	bl	80002c0 <__aeabi_uldivmod>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	460c      	mov	r4, r1
 8003b62:	461a      	mov	r2, r3
 8003b64:	4ba5      	ldr	r3, [pc, #660]	; (8003dfc <UART_SetConfig+0x384>)
 8003b66:	fba3 2302 	umull	r2, r3, r3, r2
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	461d      	mov	r5, r3
 8003b74:	f04f 0600 	mov.w	r6, #0
 8003b78:	46a9      	mov	r9, r5
 8003b7a:	46b2      	mov	sl, r6
 8003b7c:	eb19 0309 	adds.w	r3, r9, r9
 8003b80:	eb4a 040a 	adc.w	r4, sl, sl
 8003b84:	4699      	mov	r9, r3
 8003b86:	46a2      	mov	sl, r4
 8003b88:	eb19 0905 	adds.w	r9, r9, r5
 8003b8c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b90:	f04f 0100 	mov.w	r1, #0
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ba0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ba4:	4689      	mov	r9, r1
 8003ba6:	4692      	mov	sl, r2
 8003ba8:	eb19 0005 	adds.w	r0, r9, r5
 8003bac:	eb4a 0106 	adc.w	r1, sl, r6
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	461d      	mov	r5, r3
 8003bb6:	f04f 0600 	mov.w	r6, #0
 8003bba:	196b      	adds	r3, r5, r5
 8003bbc:	eb46 0406 	adc.w	r4, r6, r6
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4623      	mov	r3, r4
 8003bc4:	f7fc fb7c 	bl	80002c0 <__aeabi_uldivmod>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	460c      	mov	r4, r1
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4b8b      	ldr	r3, [pc, #556]	; (8003dfc <UART_SetConfig+0x384>)
 8003bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd4:	095b      	lsrs	r3, r3, #5
 8003bd6:	2164      	movs	r1, #100	; 0x64
 8003bd8:	fb01 f303 	mul.w	r3, r1, r3
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	3332      	adds	r3, #50	; 0x32
 8003be2:	4a86      	ldr	r2, [pc, #536]	; (8003dfc <UART_SetConfig+0x384>)
 8003be4:	fba2 2303 	umull	r2, r3, r2, r3
 8003be8:	095b      	lsrs	r3, r3, #5
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bf0:	4498      	add	r8, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	461d      	mov	r5, r3
 8003bf6:	f04f 0600 	mov.w	r6, #0
 8003bfa:	46a9      	mov	r9, r5
 8003bfc:	46b2      	mov	sl, r6
 8003bfe:	eb19 0309 	adds.w	r3, r9, r9
 8003c02:	eb4a 040a 	adc.w	r4, sl, sl
 8003c06:	4699      	mov	r9, r3
 8003c08:	46a2      	mov	sl, r4
 8003c0a:	eb19 0905 	adds.w	r9, r9, r5
 8003c0e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c12:	f04f 0100 	mov.w	r1, #0
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c26:	4689      	mov	r9, r1
 8003c28:	4692      	mov	sl, r2
 8003c2a:	eb19 0005 	adds.w	r0, r9, r5
 8003c2e:	eb4a 0106 	adc.w	r1, sl, r6
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	461d      	mov	r5, r3
 8003c38:	f04f 0600 	mov.w	r6, #0
 8003c3c:	196b      	adds	r3, r5, r5
 8003c3e:	eb46 0406 	adc.w	r4, r6, r6
 8003c42:	461a      	mov	r2, r3
 8003c44:	4623      	mov	r3, r4
 8003c46:	f7fc fb3b 	bl	80002c0 <__aeabi_uldivmod>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	460c      	mov	r4, r1
 8003c4e:	461a      	mov	r2, r3
 8003c50:	4b6a      	ldr	r3, [pc, #424]	; (8003dfc <UART_SetConfig+0x384>)
 8003c52:	fba3 1302 	umull	r1, r3, r3, r2
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	2164      	movs	r1, #100	; 0x64
 8003c5a:	fb01 f303 	mul.w	r3, r1, r3
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	3332      	adds	r3, #50	; 0x32
 8003c64:	4a65      	ldr	r2, [pc, #404]	; (8003dfc <UART_SetConfig+0x384>)
 8003c66:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	f003 0207 	and.w	r2, r3, #7
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4442      	add	r2, r8
 8003c76:	609a      	str	r2, [r3, #8]
 8003c78:	e26f      	b.n	800415a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c7a:	f7ff fc17 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 8003c7e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	461d      	mov	r5, r3
 8003c84:	f04f 0600 	mov.w	r6, #0
 8003c88:	46a8      	mov	r8, r5
 8003c8a:	46b1      	mov	r9, r6
 8003c8c:	eb18 0308 	adds.w	r3, r8, r8
 8003c90:	eb49 0409 	adc.w	r4, r9, r9
 8003c94:	4698      	mov	r8, r3
 8003c96:	46a1      	mov	r9, r4
 8003c98:	eb18 0805 	adds.w	r8, r8, r5
 8003c9c:	eb49 0906 	adc.w	r9, r9, r6
 8003ca0:	f04f 0100 	mov.w	r1, #0
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003cb0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cb4:	4688      	mov	r8, r1
 8003cb6:	4691      	mov	r9, r2
 8003cb8:	eb18 0005 	adds.w	r0, r8, r5
 8003cbc:	eb49 0106 	adc.w	r1, r9, r6
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	461d      	mov	r5, r3
 8003cc6:	f04f 0600 	mov.w	r6, #0
 8003cca:	196b      	adds	r3, r5, r5
 8003ccc:	eb46 0406 	adc.w	r4, r6, r6
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4623      	mov	r3, r4
 8003cd4:	f7fc faf4 	bl	80002c0 <__aeabi_uldivmod>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	460c      	mov	r4, r1
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4b47      	ldr	r3, [pc, #284]	; (8003dfc <UART_SetConfig+0x384>)
 8003ce0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ce4:	095b      	lsrs	r3, r3, #5
 8003ce6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	461d      	mov	r5, r3
 8003cee:	f04f 0600 	mov.w	r6, #0
 8003cf2:	46a9      	mov	r9, r5
 8003cf4:	46b2      	mov	sl, r6
 8003cf6:	eb19 0309 	adds.w	r3, r9, r9
 8003cfa:	eb4a 040a 	adc.w	r4, sl, sl
 8003cfe:	4699      	mov	r9, r3
 8003d00:	46a2      	mov	sl, r4
 8003d02:	eb19 0905 	adds.w	r9, r9, r5
 8003d06:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d0a:	f04f 0100 	mov.w	r1, #0
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d1e:	4689      	mov	r9, r1
 8003d20:	4692      	mov	sl, r2
 8003d22:	eb19 0005 	adds.w	r0, r9, r5
 8003d26:	eb4a 0106 	adc.w	r1, sl, r6
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	461d      	mov	r5, r3
 8003d30:	f04f 0600 	mov.w	r6, #0
 8003d34:	196b      	adds	r3, r5, r5
 8003d36:	eb46 0406 	adc.w	r4, r6, r6
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	4623      	mov	r3, r4
 8003d3e:	f7fc fabf 	bl	80002c0 <__aeabi_uldivmod>
 8003d42:	4603      	mov	r3, r0
 8003d44:	460c      	mov	r4, r1
 8003d46:	461a      	mov	r2, r3
 8003d48:	4b2c      	ldr	r3, [pc, #176]	; (8003dfc <UART_SetConfig+0x384>)
 8003d4a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	2164      	movs	r1, #100	; 0x64
 8003d52:	fb01 f303 	mul.w	r3, r1, r3
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	3332      	adds	r3, #50	; 0x32
 8003d5c:	4a27      	ldr	r2, [pc, #156]	; (8003dfc <UART_SetConfig+0x384>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d6a:	4498      	add	r8, r3
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	461d      	mov	r5, r3
 8003d70:	f04f 0600 	mov.w	r6, #0
 8003d74:	46a9      	mov	r9, r5
 8003d76:	46b2      	mov	sl, r6
 8003d78:	eb19 0309 	adds.w	r3, r9, r9
 8003d7c:	eb4a 040a 	adc.w	r4, sl, sl
 8003d80:	4699      	mov	r9, r3
 8003d82:	46a2      	mov	sl, r4
 8003d84:	eb19 0905 	adds.w	r9, r9, r5
 8003d88:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d8c:	f04f 0100 	mov.w	r1, #0
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003da0:	4689      	mov	r9, r1
 8003da2:	4692      	mov	sl, r2
 8003da4:	eb19 0005 	adds.w	r0, r9, r5
 8003da8:	eb4a 0106 	adc.w	r1, sl, r6
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	461d      	mov	r5, r3
 8003db2:	f04f 0600 	mov.w	r6, #0
 8003db6:	196b      	adds	r3, r5, r5
 8003db8:	eb46 0406 	adc.w	r4, r6, r6
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4623      	mov	r3, r4
 8003dc0:	f7fc fa7e 	bl	80002c0 <__aeabi_uldivmod>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	460c      	mov	r4, r1
 8003dc8:	461a      	mov	r2, r3
 8003dca:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <UART_SetConfig+0x384>)
 8003dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8003dd0:	095b      	lsrs	r3, r3, #5
 8003dd2:	2164      	movs	r1, #100	; 0x64
 8003dd4:	fb01 f303 	mul.w	r3, r1, r3
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	3332      	adds	r3, #50	; 0x32
 8003dde:	4a07      	ldr	r2, [pc, #28]	; (8003dfc <UART_SetConfig+0x384>)
 8003de0:	fba2 2303 	umull	r2, r3, r2, r3
 8003de4:	095b      	lsrs	r3, r3, #5
 8003de6:	f003 0207 	and.w	r2, r3, #7
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4442      	add	r2, r8
 8003df0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003df2:	e1b2      	b.n	800415a <UART_SetConfig+0x6e2>
 8003df4:	40011000 	.word	0x40011000
 8003df8:	40011400 	.word	0x40011400
 8003dfc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4ad7      	ldr	r2, [pc, #860]	; (8004164 <UART_SetConfig+0x6ec>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d005      	beq.n	8003e16 <UART_SetConfig+0x39e>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4ad6      	ldr	r2, [pc, #856]	; (8004168 <UART_SetConfig+0x6f0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	f040 80d1 	bne.w	8003fb8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e16:	f7ff fb5d 	bl	80034d4 <HAL_RCC_GetPCLK2Freq>
 8003e1a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	469a      	mov	sl, r3
 8003e20:	f04f 0b00 	mov.w	fp, #0
 8003e24:	46d0      	mov	r8, sl
 8003e26:	46d9      	mov	r9, fp
 8003e28:	eb18 0308 	adds.w	r3, r8, r8
 8003e2c:	eb49 0409 	adc.w	r4, r9, r9
 8003e30:	4698      	mov	r8, r3
 8003e32:	46a1      	mov	r9, r4
 8003e34:	eb18 080a 	adds.w	r8, r8, sl
 8003e38:	eb49 090b 	adc.w	r9, r9, fp
 8003e3c:	f04f 0100 	mov.w	r1, #0
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e48:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e4c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e50:	4688      	mov	r8, r1
 8003e52:	4691      	mov	r9, r2
 8003e54:	eb1a 0508 	adds.w	r5, sl, r8
 8003e58:	eb4b 0609 	adc.w	r6, fp, r9
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	4619      	mov	r1, r3
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	f04f 0300 	mov.w	r3, #0
 8003e6a:	f04f 0400 	mov.w	r4, #0
 8003e6e:	0094      	lsls	r4, r2, #2
 8003e70:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e74:	008b      	lsls	r3, r1, #2
 8003e76:	461a      	mov	r2, r3
 8003e78:	4623      	mov	r3, r4
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	4631      	mov	r1, r6
 8003e7e:	f7fc fa1f 	bl	80002c0 <__aeabi_uldivmod>
 8003e82:	4603      	mov	r3, r0
 8003e84:	460c      	mov	r4, r1
 8003e86:	461a      	mov	r2, r3
 8003e88:	4bb8      	ldr	r3, [pc, #736]	; (800416c <UART_SetConfig+0x6f4>)
 8003e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	469b      	mov	fp, r3
 8003e98:	f04f 0c00 	mov.w	ip, #0
 8003e9c:	46d9      	mov	r9, fp
 8003e9e:	46e2      	mov	sl, ip
 8003ea0:	eb19 0309 	adds.w	r3, r9, r9
 8003ea4:	eb4a 040a 	adc.w	r4, sl, sl
 8003ea8:	4699      	mov	r9, r3
 8003eaa:	46a2      	mov	sl, r4
 8003eac:	eb19 090b 	adds.w	r9, r9, fp
 8003eb0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003eb4:	f04f 0100 	mov.w	r1, #0
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ec0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ec4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ec8:	4689      	mov	r9, r1
 8003eca:	4692      	mov	sl, r2
 8003ecc:	eb1b 0509 	adds.w	r5, fp, r9
 8003ed0:	eb4c 060a 	adc.w	r6, ip, sl
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	f04f 0400 	mov.w	r4, #0
 8003ee6:	0094      	lsls	r4, r2, #2
 8003ee8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003eec:	008b      	lsls	r3, r1, #2
 8003eee:	461a      	mov	r2, r3
 8003ef0:	4623      	mov	r3, r4
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	4631      	mov	r1, r6
 8003ef6:	f7fc f9e3 	bl	80002c0 <__aeabi_uldivmod>
 8003efa:	4603      	mov	r3, r0
 8003efc:	460c      	mov	r4, r1
 8003efe:	461a      	mov	r2, r3
 8003f00:	4b9a      	ldr	r3, [pc, #616]	; (800416c <UART_SetConfig+0x6f4>)
 8003f02:	fba3 1302 	umull	r1, r3, r3, r2
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	2164      	movs	r1, #100	; 0x64
 8003f0a:	fb01 f303 	mul.w	r3, r1, r3
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	3332      	adds	r3, #50	; 0x32
 8003f14:	4a95      	ldr	r2, [pc, #596]	; (800416c <UART_SetConfig+0x6f4>)
 8003f16:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f20:	4498      	add	r8, r3
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	469b      	mov	fp, r3
 8003f26:	f04f 0c00 	mov.w	ip, #0
 8003f2a:	46d9      	mov	r9, fp
 8003f2c:	46e2      	mov	sl, ip
 8003f2e:	eb19 0309 	adds.w	r3, r9, r9
 8003f32:	eb4a 040a 	adc.w	r4, sl, sl
 8003f36:	4699      	mov	r9, r3
 8003f38:	46a2      	mov	sl, r4
 8003f3a:	eb19 090b 	adds.w	r9, r9, fp
 8003f3e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f42:	f04f 0100 	mov.w	r1, #0
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f56:	4689      	mov	r9, r1
 8003f58:	4692      	mov	sl, r2
 8003f5a:	eb1b 0509 	adds.w	r5, fp, r9
 8003f5e:	eb4c 060a 	adc.w	r6, ip, sl
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	4619      	mov	r1, r3
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	f04f 0400 	mov.w	r4, #0
 8003f74:	0094      	lsls	r4, r2, #2
 8003f76:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f7a:	008b      	lsls	r3, r1, #2
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4623      	mov	r3, r4
 8003f80:	4628      	mov	r0, r5
 8003f82:	4631      	mov	r1, r6
 8003f84:	f7fc f99c 	bl	80002c0 <__aeabi_uldivmod>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	4b77      	ldr	r3, [pc, #476]	; (800416c <UART_SetConfig+0x6f4>)
 8003f90:	fba3 1302 	umull	r1, r3, r3, r2
 8003f94:	095b      	lsrs	r3, r3, #5
 8003f96:	2164      	movs	r1, #100	; 0x64
 8003f98:	fb01 f303 	mul.w	r3, r1, r3
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	3332      	adds	r3, #50	; 0x32
 8003fa2:	4a72      	ldr	r2, [pc, #456]	; (800416c <UART_SetConfig+0x6f4>)
 8003fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa8:	095b      	lsrs	r3, r3, #5
 8003faa:	f003 020f 	and.w	r2, r3, #15
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4442      	add	r2, r8
 8003fb4:	609a      	str	r2, [r3, #8]
 8003fb6:	e0d0      	b.n	800415a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fb8:	f7ff fa78 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 8003fbc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	469a      	mov	sl, r3
 8003fc2:	f04f 0b00 	mov.w	fp, #0
 8003fc6:	46d0      	mov	r8, sl
 8003fc8:	46d9      	mov	r9, fp
 8003fca:	eb18 0308 	adds.w	r3, r8, r8
 8003fce:	eb49 0409 	adc.w	r4, r9, r9
 8003fd2:	4698      	mov	r8, r3
 8003fd4:	46a1      	mov	r9, r4
 8003fd6:	eb18 080a 	adds.w	r8, r8, sl
 8003fda:	eb49 090b 	adc.w	r9, r9, fp
 8003fde:	f04f 0100 	mov.w	r1, #0
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003fee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ff2:	4688      	mov	r8, r1
 8003ff4:	4691      	mov	r9, r2
 8003ff6:	eb1a 0508 	adds.w	r5, sl, r8
 8003ffa:	eb4b 0609 	adc.w	r6, fp, r9
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	4619      	mov	r1, r3
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	f04f 0400 	mov.w	r4, #0
 8004010:	0094      	lsls	r4, r2, #2
 8004012:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004016:	008b      	lsls	r3, r1, #2
 8004018:	461a      	mov	r2, r3
 800401a:	4623      	mov	r3, r4
 800401c:	4628      	mov	r0, r5
 800401e:	4631      	mov	r1, r6
 8004020:	f7fc f94e 	bl	80002c0 <__aeabi_uldivmod>
 8004024:	4603      	mov	r3, r0
 8004026:	460c      	mov	r4, r1
 8004028:	461a      	mov	r2, r3
 800402a:	4b50      	ldr	r3, [pc, #320]	; (800416c <UART_SetConfig+0x6f4>)
 800402c:	fba3 2302 	umull	r2, r3, r3, r2
 8004030:	095b      	lsrs	r3, r3, #5
 8004032:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	469b      	mov	fp, r3
 800403a:	f04f 0c00 	mov.w	ip, #0
 800403e:	46d9      	mov	r9, fp
 8004040:	46e2      	mov	sl, ip
 8004042:	eb19 0309 	adds.w	r3, r9, r9
 8004046:	eb4a 040a 	adc.w	r4, sl, sl
 800404a:	4699      	mov	r9, r3
 800404c:	46a2      	mov	sl, r4
 800404e:	eb19 090b 	adds.w	r9, r9, fp
 8004052:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004056:	f04f 0100 	mov.w	r1, #0
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004062:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004066:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800406a:	4689      	mov	r9, r1
 800406c:	4692      	mov	sl, r2
 800406e:	eb1b 0509 	adds.w	r5, fp, r9
 8004072:	eb4c 060a 	adc.w	r6, ip, sl
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	4619      	mov	r1, r3
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	f04f 0400 	mov.w	r4, #0
 8004088:	0094      	lsls	r4, r2, #2
 800408a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800408e:	008b      	lsls	r3, r1, #2
 8004090:	461a      	mov	r2, r3
 8004092:	4623      	mov	r3, r4
 8004094:	4628      	mov	r0, r5
 8004096:	4631      	mov	r1, r6
 8004098:	f7fc f912 	bl	80002c0 <__aeabi_uldivmod>
 800409c:	4603      	mov	r3, r0
 800409e:	460c      	mov	r4, r1
 80040a0:	461a      	mov	r2, r3
 80040a2:	4b32      	ldr	r3, [pc, #200]	; (800416c <UART_SetConfig+0x6f4>)
 80040a4:	fba3 1302 	umull	r1, r3, r3, r2
 80040a8:	095b      	lsrs	r3, r3, #5
 80040aa:	2164      	movs	r1, #100	; 0x64
 80040ac:	fb01 f303 	mul.w	r3, r1, r3
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	3332      	adds	r3, #50	; 0x32
 80040b6:	4a2d      	ldr	r2, [pc, #180]	; (800416c <UART_SetConfig+0x6f4>)
 80040b8:	fba2 2303 	umull	r2, r3, r2, r3
 80040bc:	095b      	lsrs	r3, r3, #5
 80040be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040c2:	4498      	add	r8, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	469b      	mov	fp, r3
 80040c8:	f04f 0c00 	mov.w	ip, #0
 80040cc:	46d9      	mov	r9, fp
 80040ce:	46e2      	mov	sl, ip
 80040d0:	eb19 0309 	adds.w	r3, r9, r9
 80040d4:	eb4a 040a 	adc.w	r4, sl, sl
 80040d8:	4699      	mov	r9, r3
 80040da:	46a2      	mov	sl, r4
 80040dc:	eb19 090b 	adds.w	r9, r9, fp
 80040e0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040e4:	f04f 0100 	mov.w	r1, #0
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040f8:	4689      	mov	r9, r1
 80040fa:	4692      	mov	sl, r2
 80040fc:	eb1b 0509 	adds.w	r5, fp, r9
 8004100:	eb4c 060a 	adc.w	r6, ip, sl
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	4619      	mov	r1, r3
 800410a:	f04f 0200 	mov.w	r2, #0
 800410e:	f04f 0300 	mov.w	r3, #0
 8004112:	f04f 0400 	mov.w	r4, #0
 8004116:	0094      	lsls	r4, r2, #2
 8004118:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800411c:	008b      	lsls	r3, r1, #2
 800411e:	461a      	mov	r2, r3
 8004120:	4623      	mov	r3, r4
 8004122:	4628      	mov	r0, r5
 8004124:	4631      	mov	r1, r6
 8004126:	f7fc f8cb 	bl	80002c0 <__aeabi_uldivmod>
 800412a:	4603      	mov	r3, r0
 800412c:	460c      	mov	r4, r1
 800412e:	461a      	mov	r2, r3
 8004130:	4b0e      	ldr	r3, [pc, #56]	; (800416c <UART_SetConfig+0x6f4>)
 8004132:	fba3 1302 	umull	r1, r3, r3, r2
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	2164      	movs	r1, #100	; 0x64
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	3332      	adds	r3, #50	; 0x32
 8004144:	4a09      	ldr	r2, [pc, #36]	; (800416c <UART_SetConfig+0x6f4>)
 8004146:	fba2 2303 	umull	r2, r3, r2, r3
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	f003 020f 	and.w	r2, r3, #15
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4442      	add	r2, r8
 8004156:	609a      	str	r2, [r3, #8]
}
 8004158:	e7ff      	b.n	800415a <UART_SetConfig+0x6e2>
 800415a:	bf00      	nop
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004164:	40011000 	.word	0x40011000
 8004168:	40011400 	.word	0x40011400
 800416c:	51eb851f 	.word	0x51eb851f

08004170 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004170:	b5b0      	push	{r4, r5, r7, lr}
 8004172:	b08e      	sub	sp, #56	; 0x38
 8004174:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004176:	2100      	movs	r1, #0
 8004178:	2000      	movs	r0, #0
 800417a:	f005 fee3 	bl	8009f44 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800417e:	4b2a      	ldr	r3, [pc, #168]	; (8004228 <MX_LWIP_Init+0xb8>)
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004184:	4b29      	ldr	r3, [pc, #164]	; (800422c <MX_LWIP_Init+0xbc>)
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800418a:	4b29      	ldr	r3, [pc, #164]	; (8004230 <MX_LWIP_Init+0xc0>)
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004190:	4b28      	ldr	r3, [pc, #160]	; (8004234 <MX_LWIP_Init+0xc4>)
 8004192:	9302      	str	r3, [sp, #8]
 8004194:	4b28      	ldr	r3, [pc, #160]	; (8004238 <MX_LWIP_Init+0xc8>)
 8004196:	9301      	str	r3, [sp, #4]
 8004198:	2300      	movs	r3, #0
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	4b24      	ldr	r3, [pc, #144]	; (8004230 <MX_LWIP_Init+0xc0>)
 800419e:	4a23      	ldr	r2, [pc, #140]	; (800422c <MX_LWIP_Init+0xbc>)
 80041a0:	4921      	ldr	r1, [pc, #132]	; (8004228 <MX_LWIP_Init+0xb8>)
 80041a2:	4826      	ldr	r0, [pc, #152]	; (800423c <MX_LWIP_Init+0xcc>)
 80041a4:	f007 faa2 	bl	800b6ec <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80041a8:	4824      	ldr	r0, [pc, #144]	; (800423c <MX_LWIP_Init+0xcc>)
 80041aa:	f007 fc59 	bl	800ba60 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80041ae:	4b23      	ldr	r3, [pc, #140]	; (800423c <MX_LWIP_Init+0xcc>)
 80041b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80041b4:	089b      	lsrs	r3, r3, #2
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80041c0:	481e      	ldr	r0, [pc, #120]	; (800423c <MX_LWIP_Init+0xcc>)
 80041c2:	f007 fc5d 	bl	800ba80 <netif_set_up>
 80041c6:	e002      	b.n	80041ce <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80041c8:	481c      	ldr	r0, [pc, #112]	; (800423c <MX_LWIP_Init+0xcc>)
 80041ca:	f007 fcc5 	bl	800bb58 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80041ce:	491c      	ldr	r1, [pc, #112]	; (8004240 <MX_LWIP_Init+0xd0>)
 80041d0:	481a      	ldr	r0, [pc, #104]	; (800423c <MX_LWIP_Init+0xcc>)
 80041d2:	f007 fd5b 	bl	800bc8c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 80041d6:	2300      	movs	r3, #0
 80041d8:	623b      	str	r3, [r7, #32]
 80041da:	2300      	movs	r3, #0
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80041de:	f107 0320 	add.w	r3, r7, #32
 80041e2:	2101      	movs	r1, #1
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 fd99 	bl	8004d1c <osSemaphoreCreate>
 80041ea:	4602      	mov	r2, r0
 80041ec:	4b15      	ldr	r3, [pc, #84]	; (8004244 <MX_LWIP_Init+0xd4>)
 80041ee:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 80041f0:	4b15      	ldr	r3, [pc, #84]	; (8004248 <MX_LWIP_Init+0xd8>)
 80041f2:	4a12      	ldr	r2, [pc, #72]	; (800423c <MX_LWIP_Init+0xcc>)
 80041f4:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80041f6:	4b13      	ldr	r3, [pc, #76]	; (8004244 <MX_LWIP_Init+0xd4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a13      	ldr	r2, [pc, #76]	; (8004248 <MX_LWIP_Init+0xd8>)
 80041fc:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80041fe:	4b13      	ldr	r3, [pc, #76]	; (800424c <MX_LWIP_Init+0xdc>)
 8004200:	1d3c      	adds	r4, r7, #4
 8004202:	461d      	mov	r5, r3
 8004204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004208:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800420c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8004210:	1d3b      	adds	r3, r7, #4
 8004212:	490d      	ldr	r1, [pc, #52]	; (8004248 <MX_LWIP_Init+0xd8>)
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fc84 	bl	8004b22 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800421a:	4808      	ldr	r0, [pc, #32]	; (800423c <MX_LWIP_Init+0xcc>)
 800421c:	f00f fdfa 	bl	8013e14 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004220:	bf00      	nop
 8004222:	3728      	adds	r7, #40	; 0x28
 8004224:	46bd      	mov	sp, r7
 8004226:	bdb0      	pop	{r4, r5, r7, pc}
 8004228:	20008ca8 	.word	0x20008ca8
 800422c:	20008cac 	.word	0x20008cac
 8004230:	20008cb0 	.word	0x20008cb0
 8004234:	08009e55 	.word	0x08009e55
 8004238:	080048b1 	.word	0x080048b1
 800423c:	20008c70 	.word	0x20008c70
 8004240:	08004995 	.word	0x08004995
 8004244:	200004a8 	.word	0x200004a8
 8004248:	20008c68 	.word	0x20008c68
 800424c:	08018ecc 	.word	0x08018ecc

08004250 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08e      	sub	sp, #56	; 0x38
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	605a      	str	r2, [r3, #4]
 8004262:	609a      	str	r2, [r3, #8]
 8004264:	60da      	str	r2, [r3, #12]
 8004266:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a59      	ldr	r2, [pc, #356]	; (80043d4 <HAL_ETH_MspInit+0x184>)
 800426e:	4293      	cmp	r3, r2
 8004270:	f040 80ac 	bne.w	80043cc <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004274:	2300      	movs	r3, #0
 8004276:	623b      	str	r3, [r7, #32]
 8004278:	4b57      	ldr	r3, [pc, #348]	; (80043d8 <HAL_ETH_MspInit+0x188>)
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	4a56      	ldr	r2, [pc, #344]	; (80043d8 <HAL_ETH_MspInit+0x188>)
 800427e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004282:	6313      	str	r3, [r2, #48]	; 0x30
 8004284:	4b54      	ldr	r3, [pc, #336]	; (80043d8 <HAL_ETH_MspInit+0x188>)
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428c:	623b      	str	r3, [r7, #32]
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	2300      	movs	r3, #0
 8004292:	61fb      	str	r3, [r7, #28]
 8004294:	4b50      	ldr	r3, [pc, #320]	; (80043d8 <HAL_ETH_MspInit+0x188>)
 8004296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004298:	4a4f      	ldr	r2, [pc, #316]	; (80043d8 <HAL_ETH_MspInit+0x188>)
 800429a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800429e:	6313      	str	r3, [r2, #48]	; 0x30
 80042a0:	4b4d      	ldr	r3, [pc, #308]	; (80043d8 <HAL_ETH_MspInit+0x188>)
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042a8:	61fb      	str	r3, [r7, #28]
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	2300      	movs	r3, #0
 80042ae:	61bb      	str	r3, [r7, #24]
 80042b0:	4b49      	ldr	r3, [pc, #292]	; (80043d8 <HAL_ETH_MspInit+0x188>)
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	4a48      	ldr	r2, [pc, #288]	; (80043d8 <HAL_ETH_MspInit+0x188>)
 80042b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042ba:	6313      	str	r3, [r2, #48]	; 0x30
 80042bc:	4b46      	ldr	r3, [pc, #280]	; (80043d8 <HAL_ETH_MspInit+0x188>)
 80042be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042c4:	61bb      	str	r3, [r7, #24]
 80042c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	4b42      	ldr	r3, [pc, #264]	; (80043d8 <HAL_ETH_MspInit+0x188>)
 80042ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d0:	4a41      	ldr	r2, [pc, #260]	; (80043d8 <HAL_ETH_MspInit+0x188>)
 80042d2:	f043 0304 	orr.w	r3, r3, #4
 80042d6:	6313      	str	r3, [r2, #48]	; 0x30
 80042d8:	4b3f      	ldr	r3, [pc, #252]	; (80043d8 <HAL_ETH_MspInit+0x188>)
 80042da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	617b      	str	r3, [r7, #20]
 80042e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042e4:	2300      	movs	r3, #0
 80042e6:	613b      	str	r3, [r7, #16]
 80042e8:	4b3b      	ldr	r3, [pc, #236]	; (80043d8 <HAL_ETH_MspInit+0x188>)
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	4a3a      	ldr	r2, [pc, #232]	; (80043d8 <HAL_ETH_MspInit+0x188>)
 80042ee:	f043 0301 	orr.w	r3, r3, #1
 80042f2:	6313      	str	r3, [r2, #48]	; 0x30
 80042f4:	4b38      	ldr	r3, [pc, #224]	; (80043d8 <HAL_ETH_MspInit+0x188>)
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	4b34      	ldr	r3, [pc, #208]	; (80043d8 <HAL_ETH_MspInit+0x188>)
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	4a33      	ldr	r2, [pc, #204]	; (80043d8 <HAL_ETH_MspInit+0x188>)
 800430a:	f043 0302 	orr.w	r3, r3, #2
 800430e:	6313      	str	r3, [r2, #48]	; 0x30
 8004310:	4b31      	ldr	r3, [pc, #196]	; (80043d8 <HAL_ETH_MspInit+0x188>)
 8004312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800431c:	2300      	movs	r3, #0
 800431e:	60bb      	str	r3, [r7, #8]
 8004320:	4b2d      	ldr	r3, [pc, #180]	; (80043d8 <HAL_ETH_MspInit+0x188>)
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004324:	4a2c      	ldr	r2, [pc, #176]	; (80043d8 <HAL_ETH_MspInit+0x188>)
 8004326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800432a:	6313      	str	r3, [r2, #48]	; 0x30
 800432c:	4b2a      	ldr	r3, [pc, #168]	; (80043d8 <HAL_ETH_MspInit+0x188>)
 800432e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004334:	60bb      	str	r3, [r7, #8]
 8004336:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004338:	2332      	movs	r3, #50	; 0x32
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800433c:	2302      	movs	r3, #2
 800433e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004340:	2300      	movs	r3, #0
 8004342:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004344:	2303      	movs	r3, #3
 8004346:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004348:	230b      	movs	r3, #11
 800434a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800434c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004350:	4619      	mov	r1, r3
 8004352:	4822      	ldr	r0, [pc, #136]	; (80043dc <HAL_ETH_MspInit+0x18c>)
 8004354:	f7fe fa94 	bl	8002880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004358:	2386      	movs	r3, #134	; 0x86
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800435c:	2302      	movs	r3, #2
 800435e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004360:	2300      	movs	r3, #0
 8004362:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004364:	2303      	movs	r3, #3
 8004366:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004368:	230b      	movs	r3, #11
 800436a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800436c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004370:	4619      	mov	r1, r3
 8004372:	481b      	ldr	r0, [pc, #108]	; (80043e0 <HAL_ETH_MspInit+0x190>)
 8004374:	f7fe fa84 	bl	8002880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800437e:	2302      	movs	r3, #2
 8004380:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004382:	2300      	movs	r3, #0
 8004384:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004386:	2303      	movs	r3, #3
 8004388:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800438a:	230b      	movs	r3, #11
 800438c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800438e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004392:	4619      	mov	r1, r3
 8004394:	4813      	ldr	r0, [pc, #76]	; (80043e4 <HAL_ETH_MspInit+0x194>)
 8004396:	f7fe fa73 	bl	8002880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800439a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800439e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a0:	2302      	movs	r3, #2
 80043a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043a8:	2303      	movs	r3, #3
 80043aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80043ac:	230b      	movs	r3, #11
 80043ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80043b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043b4:	4619      	mov	r1, r3
 80043b6:	480c      	ldr	r0, [pc, #48]	; (80043e8 <HAL_ETH_MspInit+0x198>)
 80043b8:	f7fe fa62 	bl	8002880 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80043bc:	2200      	movs	r2, #0
 80043be:	2100      	movs	r1, #0
 80043c0:	203d      	movs	r0, #61	; 0x3d
 80043c2:	f7fd f88d 	bl	80014e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80043c6:	203d      	movs	r0, #61	; 0x3d
 80043c8:	f7fd f8a6 	bl	8001518 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80043cc:	bf00      	nop
 80043ce:	3738      	adds	r7, #56	; 0x38
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40028000 	.word	0x40028000
 80043d8:	40023800 	.word	0x40023800
 80043dc:	40020800 	.word	0x40020800
 80043e0:	40020000 	.word	0x40020000
 80043e4:	40020400 	.word	0x40020400
 80043e8:	40021800 	.word	0x40021800

080043ec <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80043f4:	4b04      	ldr	r3, [pc, #16]	; (8004408 <HAL_ETH_RxCpltCallback+0x1c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 fd11 	bl	8004e20 <osSemaphoreRelease>
}
 80043fe:	bf00      	nop
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	200004ac 	.word	0x200004ac

0800440c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800440c:	b5b0      	push	{r4, r5, r7, lr}
 800440e:	b090      	sub	sp, #64	; 0x40
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004418:	4b5c      	ldr	r3, [pc, #368]	; (800458c <low_level_init+0x180>)
 800441a:	4a5d      	ldr	r2, [pc, #372]	; (8004590 <low_level_init+0x184>)
 800441c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800441e:	4b5b      	ldr	r3, [pc, #364]	; (800458c <low_level_init+0x180>)
 8004420:	2201      	movs	r2, #1
 8004422:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004424:	4b59      	ldr	r3, [pc, #356]	; (800458c <low_level_init+0x180>)
 8004426:	2200      	movs	r2, #0
 8004428:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800442a:	2300      	movs	r3, #0
 800442c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8004430:	2380      	movs	r3, #128	; 0x80
 8004432:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8004436:	23e1      	movs	r3, #225	; 0xe1
 8004438:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0xFE;
 800443c:	23fe      	movs	r3, #254	; 0xfe
 800443e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0xEC;
 8004442:	23ec      	movs	r3, #236	; 0xec
 8004444:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x71;
 8004448:	2371      	movs	r3, #113	; 0x71
 800444a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800444e:	4a4f      	ldr	r2, [pc, #316]	; (800458c <low_level_init+0x180>)
 8004450:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004454:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8004456:	4b4d      	ldr	r3, [pc, #308]	; (800458c <low_level_init+0x180>)
 8004458:	2201      	movs	r2, #1
 800445a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800445c:	4b4b      	ldr	r3, [pc, #300]	; (800458c <low_level_init+0x180>)
 800445e:	2200      	movs	r2, #0
 8004460:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004462:	4b4a      	ldr	r3, [pc, #296]	; (800458c <low_level_init+0x180>)
 8004464:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004468:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800446a:	4848      	ldr	r0, [pc, #288]	; (800458c <low_level_init+0x180>)
 800446c:	f7fd f862 	bl	8001534 <HAL_ETH_Init>
 8004470:	4603      	mov	r3, r0
 8004472:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8004476:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800447a:	2b00      	cmp	r3, #0
 800447c:	d108      	bne.n	8004490 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004484:	f043 0304 	orr.w	r3, r3, #4
 8004488:	b2da      	uxtb	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004490:	2304      	movs	r3, #4
 8004492:	4a40      	ldr	r2, [pc, #256]	; (8004594 <low_level_init+0x188>)
 8004494:	4940      	ldr	r1, [pc, #256]	; (8004598 <low_level_init+0x18c>)
 8004496:	483d      	ldr	r0, [pc, #244]	; (800458c <low_level_init+0x180>)
 8004498:	f7fd f9ea 	bl	8001870 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800449c:	2304      	movs	r3, #4
 800449e:	4a3f      	ldr	r2, [pc, #252]	; (800459c <low_level_init+0x190>)
 80044a0:	493f      	ldr	r1, [pc, #252]	; (80045a0 <low_level_init+0x194>)
 80044a2:	483a      	ldr	r0, [pc, #232]	; (800458c <low_level_init+0x180>)
 80044a4:	f7fd fa4d 	bl	8001942 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2206      	movs	r2, #6
 80044ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80044b0:	4b36      	ldr	r3, [pc, #216]	; (800458c <low_level_init+0x180>)
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	781a      	ldrb	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80044bc:	4b33      	ldr	r3, [pc, #204]	; (800458c <low_level_init+0x180>)
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	785a      	ldrb	r2, [r3, #1]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80044c8:	4b30      	ldr	r3, [pc, #192]	; (800458c <low_level_init+0x180>)
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	789a      	ldrb	r2, [r3, #2]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80044d4:	4b2d      	ldr	r3, [pc, #180]	; (800458c <low_level_init+0x180>)
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	78da      	ldrb	r2, [r3, #3]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80044e0:	4b2a      	ldr	r3, [pc, #168]	; (800458c <low_level_init+0x180>)
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	791a      	ldrb	r2, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80044ec:	4b27      	ldr	r3, [pc, #156]	; (800458c <low_level_init+0x180>)
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	795a      	ldrb	r2, [r3, #5]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80044fe:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004506:	f043 030a 	orr.w	r3, r3, #10
 800450a:	b2da      	uxtb	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8004512:	2300      	movs	r3, #0
 8004514:	62bb      	str	r3, [r7, #40]	; 0x28
 8004516:	2300      	movs	r3, #0
 8004518:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800451a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800451e:	2101      	movs	r1, #1
 8004520:	4618      	mov	r0, r3
 8004522:	f000 fbfb 	bl	8004d1c <osSemaphoreCreate>
 8004526:	4602      	mov	r2, r0
 8004528:	4b1e      	ldr	r3, [pc, #120]	; (80045a4 <low_level_init+0x198>)
 800452a:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800452c:	4b1e      	ldr	r3, [pc, #120]	; (80045a8 <low_level_init+0x19c>)
 800452e:	f107 040c 	add.w	r4, r7, #12
 8004532:	461d      	mov	r5, r3
 8004534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004538:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800453c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004540:	f107 030c 	add.w	r3, r7, #12
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	4618      	mov	r0, r3
 8004548:	f000 faeb 	bl	8004b22 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800454c:	480f      	ldr	r0, [pc, #60]	; (800458c <low_level_init+0x180>)
 800454e:	f7fd fd20 	bl	8001f92 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004552:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004556:	461a      	mov	r2, r3
 8004558:	211d      	movs	r1, #29
 800455a:	480c      	ldr	r0, [pc, #48]	; (800458c <low_level_init+0x180>)
 800455c:	f7fd fc4b 	bl	8001df6 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004562:	f043 030b 	orr.w	r3, r3, #11
 8004566:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456a:	461a      	mov	r2, r3
 800456c:	211d      	movs	r1, #29
 800456e:	4807      	ldr	r0, [pc, #28]	; (800458c <low_level_init+0x180>)
 8004570:	f7fd fca9 	bl	8001ec6 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004574:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004578:	461a      	mov	r2, r3
 800457a:	211d      	movs	r1, #29
 800457c:	4803      	ldr	r0, [pc, #12]	; (800458c <low_level_init+0x180>)
 800457e:	f7fd fc3a 	bl	8001df6 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004582:	bf00      	nop
 8004584:	3740      	adds	r7, #64	; 0x40
 8004586:	46bd      	mov	sp, r7
 8004588:	bdb0      	pop	{r4, r5, r7, pc}
 800458a:	bf00      	nop
 800458c:	2000a584 	.word	0x2000a584
 8004590:	40028000 	.word	0x40028000
 8004594:	2000a5cc 	.word	0x2000a5cc
 8004598:	20008cb4 	.word	0x20008cb4
 800459c:	20008d34 	.word	0x20008d34
 80045a0:	2000a504 	.word	0x2000a504
 80045a4:	200004ac 	.word	0x200004ac
 80045a8:	08018ef0 	.word	0x08018ef0

080045ac <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	; 0x28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80045b6:	4b4b      	ldr	r3, [pc, #300]	; (80046e4 <low_level_output+0x138>)
 80045b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80045c2:	2300      	movs	r3, #0
 80045c4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80045c6:	2300      	movs	r3, #0
 80045c8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80045ca:	2300      	movs	r3, #0
 80045cc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80045ce:	4b45      	ldr	r3, [pc, #276]	; (80046e4 <low_level_output+0x138>)
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	623b      	str	r3, [r7, #32]
 80045dc:	e05a      	b.n	8004694 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	da03      	bge.n	80045ee <low_level_output+0x42>
      {
        errval = ERR_USE;
 80045e6:	23f8      	movs	r3, #248	; 0xf8
 80045e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80045ec:	e05c      	b.n	80046a8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	895b      	ldrh	r3, [r3, #10]
 80045f2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80045f8:	e02f      	b.n	800465a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80045fa:	69fa      	ldr	r2, [r7, #28]
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	18d0      	adds	r0, r2, r3
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	18d1      	adds	r1, r2, r3
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800460e:	3304      	adds	r3, #4
 8004610:	461a      	mov	r2, r3
 8004612:	f013 fc36 	bl	8017e82 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	da03      	bge.n	800462c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004624:	23f8      	movs	r3, #248	; 0xf8
 8004626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800462a:	e03d      	b.n	80046a8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4413      	add	r3, r2
 8004638:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800463c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004648:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004654:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004656:	2300      	movs	r3, #0
 8004658:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	4413      	add	r3, r2
 8004660:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004664:	4293      	cmp	r3, r2
 8004666:	d8c8      	bhi.n	80045fa <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004668:	69fa      	ldr	r2, [r7, #28]
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	18d0      	adds	r0, r2, r3
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4413      	add	r3, r2
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4619      	mov	r1, r3
 800467a:	f013 fc02 	bl	8017e82 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4413      	add	r3, r2
 800468c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	623b      	str	r3, [r7, #32]
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1a1      	bne.n	80045de <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800469a:	6979      	ldr	r1, [r7, #20]
 800469c:	4811      	ldr	r0, [pc, #68]	; (80046e4 <low_level_output+0x138>)
 800469e:	f7fd f9bd 	bl	8001a1c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80046a8:	4b0e      	ldr	r3, [pc, #56]	; (80046e4 <low_level_output+0x138>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b0:	3314      	adds	r3, #20
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0320 	and.w	r3, r3, #32
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00d      	beq.n	80046d8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80046bc:	4b09      	ldr	r3, [pc, #36]	; (80046e4 <low_level_output+0x138>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c4:	3314      	adds	r3, #20
 80046c6:	2220      	movs	r2, #32
 80046c8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80046ca:	4b06      	ldr	r3, [pc, #24]	; (80046e4 <low_level_output+0x138>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d2:	3304      	adds	r3, #4
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80046d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3728      	adds	r7, #40	; 0x28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	2000a584 	.word	0x2000a584

080046e8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08c      	sub	sp, #48	; 0x30
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80046fc:	2300      	movs	r3, #0
 80046fe:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004700:	2300      	movs	r3, #0
 8004702:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004708:	2300      	movs	r3, #0
 800470a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800470c:	484f      	ldr	r0, [pc, #316]	; (800484c <low_level_input+0x164>)
 800470e:	f7fd fa6f 	bl	8001bf0 <HAL_ETH_GetReceivedFrame_IT>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <low_level_input+0x34>

    return NULL;
 8004718:	2300      	movs	r3, #0
 800471a:	e092      	b.n	8004842 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800471c:	4b4b      	ldr	r3, [pc, #300]	; (800484c <low_level_input+0x164>)
 800471e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004720:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004722:	4b4a      	ldr	r3, [pc, #296]	; (800484c <low_level_input+0x164>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004728:	89fb      	ldrh	r3, [r7, #14]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d007      	beq.n	800473e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800472e:	89fb      	ldrh	r3, [r7, #14]
 8004730:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004734:	4619      	mov	r1, r3
 8004736:	2000      	movs	r0, #0
 8004738:	f007 fb72 	bl	800be20 <pbuf_alloc>
 800473c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800473e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004740:	2b00      	cmp	r3, #0
 8004742:	d04b      	beq.n	80047dc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004744:	4b41      	ldr	r3, [pc, #260]	; (800484c <low_level_input+0x164>)
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800474a:	2300      	movs	r3, #0
 800474c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	62bb      	str	r3, [r7, #40]	; 0x28
 8004752:	e040      	b.n	80047d6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	895b      	ldrh	r3, [r3, #10]
 8004758:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800475a:	2300      	movs	r3, #0
 800475c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800475e:	e021      	b.n	80047a4 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	18d0      	adds	r0, r2, r3
 8004768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	18d1      	adds	r1, r2, r3
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004774:	3304      	adds	r3, #4
 8004776:	461a      	mov	r2, r3
 8004778:	f013 fb83 	bl	8017e82 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004788:	69fa      	ldr	r2, [r7, #28]
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	4413      	add	r3, r2
 800478e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004792:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800479e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	4413      	add	r3, r2
 80047aa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d8d6      	bhi.n	8004760 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80047b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	18d0      	adds	r0, r2, r3
 80047ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	4413      	add	r3, r2
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4619      	mov	r1, r3
 80047c4:	f013 fb5d 	bl	8017e82 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80047c8:	69fa      	ldr	r2, [r7, #28]
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	4413      	add	r3, r2
 80047ce:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1bb      	bne.n	8004754 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80047dc:	4b1b      	ldr	r3, [pc, #108]	; (800484c <low_level_input+0x164>)
 80047de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80047e2:	2300      	movs	r3, #0
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	e00b      	b.n	8004800 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	3301      	adds	r3, #1
 80047fe:	613b      	str	r3, [r7, #16]
 8004800:	4b12      	ldr	r3, [pc, #72]	; (800484c <low_level_input+0x164>)
 8004802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	429a      	cmp	r2, r3
 8004808:	d3ee      	bcc.n	80047e8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800480a:	4b10      	ldr	r3, [pc, #64]	; (800484c <low_level_input+0x164>)
 800480c:	2200      	movs	r2, #0
 800480e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004810:	4b0e      	ldr	r3, [pc, #56]	; (800484c <low_level_input+0x164>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004818:	3314      	adds	r3, #20
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00d      	beq.n	8004840 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004824:	4b09      	ldr	r3, [pc, #36]	; (800484c <low_level_input+0x164>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800482c:	3314      	adds	r3, #20
 800482e:	2280      	movs	r2, #128	; 0x80
 8004830:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004832:	4b06      	ldr	r3, [pc, #24]	; (800484c <low_level_input+0x164>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800483a:	3308      	adds	r3, #8
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004842:	4618      	mov	r0, r3
 8004844:	3730      	adds	r7, #48	; 0x30
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	2000a584 	.word	0x2000a584

08004850 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800485c:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <ethernetif_input+0x58>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f04f 31ff 	mov.w	r1, #4294967295
 8004864:	4618      	mov	r0, r3
 8004866:	f000 fa8d 	bl	8004d84 <osSemaphoreWait>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1f5      	bne.n	800485c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8004870:	480e      	ldr	r0, [pc, #56]	; (80048ac <ethernetif_input+0x5c>)
 8004872:	f013 fa53 	bl	8017d1c <sys_mutex_lock>
        p = low_level_input( netif );
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f7ff ff36 	bl	80046e8 <low_level_input>
 800487c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	68f9      	ldr	r1, [r7, #12]
 800488a:	68b8      	ldr	r0, [r7, #8]
 800488c:	4798      	blx	r3
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004894:	68b8      	ldr	r0, [r7, #8]
 8004896:	f007 fda3 	bl	800c3e0 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800489a:	4804      	ldr	r0, [pc, #16]	; (80048ac <ethernetif_input+0x5c>)
 800489c:	f013 fa4d 	bl	8017d3a <sys_mutex_unlock>
      } while(p!=NULL);
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1e4      	bne.n	8004870 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80048a6:	e7d9      	b.n	800485c <ethernetif_input+0xc>
 80048a8:	200004ac 	.word	0x200004ac
 80048ac:	2000bddc 	.word	0x2000bddc

080048b0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <ethernetif_init+0x1c>
 80048be:	4b0e      	ldr	r3, [pc, #56]	; (80048f8 <ethernetif_init+0x48>)
 80048c0:	f240 2233 	movw	r2, #563	; 0x233
 80048c4:	490d      	ldr	r1, [pc, #52]	; (80048fc <ethernetif_init+0x4c>)
 80048c6:	480e      	ldr	r0, [pc, #56]	; (8004900 <ethernetif_init+0x50>)
 80048c8:	f013 faee 	bl	8017ea8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2273      	movs	r2, #115	; 0x73
 80048d0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2274      	movs	r2, #116	; 0x74
 80048d8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a09      	ldr	r2, [pc, #36]	; (8004904 <ethernetif_init+0x54>)
 80048e0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a08      	ldr	r2, [pc, #32]	; (8004908 <ethernetif_init+0x58>)
 80048e6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7ff fd8f 	bl	800440c <low_level_init>

  return ERR_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	08018f0c 	.word	0x08018f0c
 80048fc:	08018f28 	.word	0x08018f28
 8004900:	08018f38 	.word	0x08018f38
 8004904:	08015d01 	.word	0x08015d01
 8004908:	080045ad 	.word	0x080045ad

0800490c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004910:	f7fc fd00 	bl	8001314 <HAL_GetTick>
 8004914:	4603      	mov	r3, r0
}
 8004916:	4618      	mov	r0, r3
 8004918:	bd80      	pop	{r7, pc}
	...

0800491c <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004924:	2300      	movs	r3, #0
 8004926:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800492c:	f107 0308 	add.w	r3, r7, #8
 8004930:	461a      	mov	r2, r3
 8004932:	2101      	movs	r1, #1
 8004934:	4816      	ldr	r0, [pc, #88]	; (8004990 <ethernetif_set_link+0x74>)
 8004936:	f7fd fa5e 	bl	8001df6 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800494a:	f003 0304 	and.w	r3, r3, #4
 800494e:	2b00      	cmp	r3, #0
 8004950:	d108      	bne.n	8004964 <ethernetif_set_link+0x48>
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d005      	beq.n	8004964 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4618      	mov	r0, r3
 800495e:	f007 f92d 	bl	800bbbc <netif_set_link_up>
 8004962:	e011      	b.n	8004988 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800496c:	089b      	lsrs	r3, r3, #2
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d007      	beq.n	8004988 <ethernetif_set_link+0x6c>
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d104      	bne.n	8004988 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f007 f952 	bl	800bc2c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8004988:	20c8      	movs	r0, #200	; 0xc8
 800498a:	f000 f916 	bl	8004bba <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800498e:	e7cd      	b.n	800492c <ethernetif_set_link+0x10>
 8004990:	2000a584 	.word	0x2000a584

08004994 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80049aa:	089b      	lsrs	r3, r3, #2
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d05d      	beq.n	8004a72 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80049b6:	4b34      	ldr	r3, [pc, #208]	; (8004a88 <ethernetif_update_config+0xf4>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d03f      	beq.n	8004a3e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80049be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80049c2:	2100      	movs	r1, #0
 80049c4:	4830      	ldr	r0, [pc, #192]	; (8004a88 <ethernetif_update_config+0xf4>)
 80049c6:	f7fd fa7e 	bl	8001ec6 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80049ca:	f7fc fca3 	bl	8001314 <HAL_GetTick>
 80049ce:	4603      	mov	r3, r0
 80049d0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80049d2:	f107 0308 	add.w	r3, r7, #8
 80049d6:	461a      	mov	r2, r3
 80049d8:	2101      	movs	r1, #1
 80049da:	482b      	ldr	r0, [pc, #172]	; (8004a88 <ethernetif_update_config+0xf4>)
 80049dc:	f7fd fa0b 	bl	8001df6 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80049e0:	f7fc fc98 	bl	8001314 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049ee:	d828      	bhi.n	8004a42 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0eb      	beq.n	80049d2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80049fa:	f107 0308 	add.w	r3, r7, #8
 80049fe:	461a      	mov	r2, r3
 8004a00:	211f      	movs	r1, #31
 8004a02:	4821      	ldr	r0, [pc, #132]	; (8004a88 <ethernetif_update_config+0xf4>)
 8004a04:	f7fd f9f7 	bl	8001df6 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f003 0310 	and.w	r3, r3, #16
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d004      	beq.n	8004a1c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004a12:	4b1d      	ldr	r3, [pc, #116]	; (8004a88 <ethernetif_update_config+0xf4>)
 8004a14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a18:	60da      	str	r2, [r3, #12]
 8004a1a:	e002      	b.n	8004a22 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004a1c:	4b1a      	ldr	r3, [pc, #104]	; (8004a88 <ethernetif_update_config+0xf4>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004a2c:	4b16      	ldr	r3, [pc, #88]	; (8004a88 <ethernetif_update_config+0xf4>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	609a      	str	r2, [r3, #8]
 8004a32:	e016      	b.n	8004a62 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004a34:	4b14      	ldr	r3, [pc, #80]	; (8004a88 <ethernetif_update_config+0xf4>)
 8004a36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a3a:	609a      	str	r2, [r3, #8]
 8004a3c:	e011      	b.n	8004a62 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004a3e:	bf00      	nop
 8004a40:	e000      	b.n	8004a44 <ethernetif_update_config+0xb0>
          goto error;
 8004a42:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004a44:	4b10      	ldr	r3, [pc, #64]	; (8004a88 <ethernetif_update_config+0xf4>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	08db      	lsrs	r3, r3, #3
 8004a4a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004a4c:	4b0e      	ldr	r3, [pc, #56]	; (8004a88 <ethernetif_update_config+0xf4>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	085b      	lsrs	r3, r3, #1
 8004a52:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004a54:	4313      	orrs	r3, r2
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	461a      	mov	r2, r3
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	480a      	ldr	r0, [pc, #40]	; (8004a88 <ethernetif_update_config+0xf4>)
 8004a5e:	f7fd fa32 	bl	8001ec6 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004a62:	2100      	movs	r1, #0
 8004a64:	4808      	ldr	r0, [pc, #32]	; (8004a88 <ethernetif_update_config+0xf4>)
 8004a66:	f7fd faf3 	bl	8002050 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004a6a:	4807      	ldr	r0, [pc, #28]	; (8004a88 <ethernetif_update_config+0xf4>)
 8004a6c:	f7fd fa91 	bl	8001f92 <HAL_ETH_Start>
 8004a70:	e002      	b.n	8004a78 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004a72:	4805      	ldr	r0, [pc, #20]	; (8004a88 <ethernetif_update_config+0xf4>)
 8004a74:	f7fd fabc 	bl	8001ff0 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f807 	bl	8004a8c <ethernetif_notify_conn_changed>
}
 8004a7e:	bf00      	nop
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	2000a584 	.word	0x2000a584

08004a8c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ab2:	2b84      	cmp	r3, #132	; 0x84
 8004ab4:	d005      	beq.n	8004ac2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004ab6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4413      	add	r3, r2
 8004abe:	3303      	adds	r3, #3
 8004ac0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ad6:	f3ef 8305 	mrs	r3, IPSR
 8004ada:	607b      	str	r3, [r7, #4]
  return(result);
 8004adc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	bf14      	ite	ne
 8004ae2:	2301      	movne	r3, #1
 8004ae4:	2300      	moveq	r3, #0
 8004ae6:	b2db      	uxtb	r3, r3
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004af8:	f001 fd08 	bl	800650c <vTaskStartScheduler>
  
  return osOK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004b06:	f7ff ffe3 	bl	8004ad0 <inHandlerMode>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004b10:	f001 fe14 	bl	800673c <xTaskGetTickCountFromISR>
 8004b14:	4603      	mov	r3, r0
 8004b16:	e002      	b.n	8004b1e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004b18:	f001 fe00 	bl	800671c <xTaskGetTickCount>
 8004b1c:	4603      	mov	r3, r0
  }
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004b22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b24:	b089      	sub	sp, #36	; 0x24
 8004b26:	af04      	add	r7, sp, #16
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d020      	beq.n	8004b76 <osThreadCreate+0x54>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d01c      	beq.n	8004b76 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685c      	ldr	r4, [r3, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681d      	ldr	r5, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691e      	ldr	r6, [r3, #16]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff ffa6 	bl	8004aa0 <makeFreeRtosPriority>
 8004b54:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b5e:	9202      	str	r2, [sp, #8]
 8004b60:	9301      	str	r3, [sp, #4]
 8004b62:	9100      	str	r1, [sp, #0]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	4632      	mov	r2, r6
 8004b68:	4629      	mov	r1, r5
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	f001 fb0a 	bl	8006184 <xTaskCreateStatic>
 8004b70:	4603      	mov	r3, r0
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	e01c      	b.n	8004bb0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685c      	ldr	r4, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b82:	b29e      	uxth	r6, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff ff88 	bl	8004aa0 <makeFreeRtosPriority>
 8004b90:	4602      	mov	r2, r0
 8004b92:	f107 030c 	add.w	r3, r7, #12
 8004b96:	9301      	str	r3, [sp, #4]
 8004b98:	9200      	str	r2, [sp, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	4632      	mov	r2, r6
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f001 fb49 	bl	8006238 <xTaskCreate>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d001      	beq.n	8004bb0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004bac:	2300      	movs	r3, #0
 8004bae:	e000      	b.n	8004bb2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <osDelay+0x16>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	e000      	b.n	8004bd2 <osDelay+0x18>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f001 fc66 	bl	80064a4 <vTaskDelay>
  
  return osOK;
 8004bd8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d007      	beq.n	8004c02 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	2001      	movs	r0, #1
 8004bfa:	f000 fc80 	bl	80054fe <xQueueCreateMutexStatic>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	e003      	b.n	8004c0a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004c02:	2001      	movs	r0, #1
 8004c04:	f000 fc63 	bl	80054ce <xQueueCreateMutex>
 8004c08:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
	...

08004c14 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <osMutexWait+0x18>
    return osErrorParameter;
 8004c28:	2380      	movs	r3, #128	; 0x80
 8004c2a:	e03a      	b.n	8004ca2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c36:	d103      	bne.n	8004c40 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004c38:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	e009      	b.n	8004c54 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d006      	beq.n	8004c54 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <osMutexWait+0x40>
      ticks = 1;
 8004c50:	2301      	movs	r3, #1
 8004c52:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004c54:	f7ff ff3c 	bl	8004ad0 <inHandlerMode>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d017      	beq.n	8004c8e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004c5e:	f107 0308 	add.w	r3, r7, #8
 8004c62:	461a      	mov	r2, r3
 8004c64:	2100      	movs	r1, #0
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f001 f860 	bl	8005d2c <xQueueReceiveFromISR>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d001      	beq.n	8004c76 <osMutexWait+0x62>
      return osErrorOS;
 8004c72:	23ff      	movs	r3, #255	; 0xff
 8004c74:	e015      	b.n	8004ca2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d011      	beq.n	8004ca0 <osMutexWait+0x8c>
 8004c7c:	4b0b      	ldr	r3, [pc, #44]	; (8004cac <osMutexWait+0x98>)
 8004c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	e008      	b.n	8004ca0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004c8e:	68f9      	ldr	r1, [r7, #12]
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 ff43 	bl	8005b1c <xQueueSemaphoreTake>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d001      	beq.n	8004ca0 <osMutexWait+0x8c>
    return osErrorOS;
 8004c9c:	23ff      	movs	r3, #255	; 0xff
 8004c9e:	e000      	b.n	8004ca2 <osMutexWait+0x8e>
  }
  
  return osOK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	e000ed04 	.word	0xe000ed04

08004cb0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004cc0:	f7ff ff06 	bl	8004ad0 <inHandlerMode>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d016      	beq.n	8004cf8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004cca:	f107 0308 	add.w	r3, r7, #8
 8004cce:	4619      	mov	r1, r3
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 fdbd 	bl	8005850 <xQueueGiveFromISR>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d001      	beq.n	8004ce0 <osMutexRelease+0x30>
      return osErrorOS;
 8004cdc:	23ff      	movs	r3, #255	; 0xff
 8004cde:	e017      	b.n	8004d10 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d013      	beq.n	8004d0e <osMutexRelease+0x5e>
 8004ce6:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <osMutexRelease+0x68>)
 8004ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	e00a      	b.n	8004d0e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 fc18 	bl	8005534 <xQueueGenericSend>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d001      	beq.n	8004d0e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004d0a:	23ff      	movs	r3, #255	; 0xff
 8004d0c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	e000ed04 	.word	0xe000ed04

08004d1c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d010      	beq.n	8004d50 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d10b      	bne.n	8004d4c <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	2303      	movs	r3, #3
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	2200      	movs	r2, #0
 8004d40:	2100      	movs	r1, #0
 8004d42:	2001      	movs	r0, #1
 8004d44:	f000 fad8 	bl	80052f8 <xQueueGenericCreateStatic>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	e016      	b.n	8004d7a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	e014      	b.n	8004d7a <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d110      	bne.n	8004d78 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8004d56:	2203      	movs	r2, #3
 8004d58:	2100      	movs	r1, #0
 8004d5a:	2001      	movs	r0, #1
 8004d5c:	f000 fb3f 	bl	80053de <xQueueGenericCreate>
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <osSemaphoreCreate+0x58>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 fbe0 	bl	8005534 <xQueueGenericSend>
      return sema;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	e000      	b.n	8004d7a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004d78:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
	...

08004d84 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004d98:	2380      	movs	r3, #128	; 0x80
 8004d9a:	e03a      	b.n	8004e12 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da6:	d103      	bne.n	8004db0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004da8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	e009      	b.n	8004dc4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d006      	beq.n	8004dc4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <osSemaphoreWait+0x40>
      ticks = 1;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004dc4:	f7ff fe84 	bl	8004ad0 <inHandlerMode>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d017      	beq.n	8004dfe <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004dce:	f107 0308 	add.w	r3, r7, #8
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 ffa8 	bl	8005d2c <xQueueReceiveFromISR>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d001      	beq.n	8004de6 <osSemaphoreWait+0x62>
      return osErrorOS;
 8004de2:	23ff      	movs	r3, #255	; 0xff
 8004de4:	e015      	b.n	8004e12 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d011      	beq.n	8004e10 <osSemaphoreWait+0x8c>
 8004dec:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <osSemaphoreWait+0x98>)
 8004dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	e008      	b.n	8004e10 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004dfe:	68f9      	ldr	r1, [r7, #12]
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 fe8b 	bl	8005b1c <xQueueSemaphoreTake>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d001      	beq.n	8004e10 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004e0c:	23ff      	movs	r3, #255	; 0xff
 8004e0e:	e000      	b.n	8004e12 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	e000ed04 	.word	0xe000ed04

08004e20 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004e30:	f7ff fe4e 	bl	8004ad0 <inHandlerMode>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d016      	beq.n	8004e68 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004e3a:	f107 0308 	add.w	r3, r7, #8
 8004e3e:	4619      	mov	r1, r3
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fd05 	bl	8005850 <xQueueGiveFromISR>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d001      	beq.n	8004e50 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004e4c:	23ff      	movs	r3, #255	; 0xff
 8004e4e:	e017      	b.n	8004e80 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d013      	beq.n	8004e7e <osSemaphoreRelease+0x5e>
 8004e56:	4b0c      	ldr	r3, [pc, #48]	; (8004e88 <osSemaphoreRelease+0x68>)
 8004e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	e00a      	b.n	8004e7e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004e68:	2300      	movs	r3, #0
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fb60 	bl	8005534 <xQueueGenericSend>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d001      	beq.n	8004e7e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004e7a:	23ff      	movs	r3, #255	; 0xff
 8004e7c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	e000ed04 	.word	0xe000ed04

08004e8c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004e94:	f7ff fe1c 	bl	8004ad0 <inHandlerMode>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8004e9e:	2382      	movs	r3, #130	; 0x82
 8004ea0:	e003      	b.n	8004eaa <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fff9 	bl	8005e9a <vQueueDelete>

  return osOK; 
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004eb2:	b590      	push	{r4, r7, lr}
 8004eb4:	b085      	sub	sp, #20
 8004eb6:	af02      	add	r7, sp, #8
 8004eb8:	6078      	str	r0, [r7, #4]
 8004eba:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d012      	beq.n	8004eea <osMessageCreate+0x38>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00e      	beq.n	8004eea <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6859      	ldr	r1, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68dc      	ldr	r4, [r3, #12]
 8004edc:	2300      	movs	r3, #0
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	4623      	mov	r3, r4
 8004ee2:	f000 fa09 	bl	80052f8 <xQueueGenericCreateStatic>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	e008      	b.n	8004efc <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6818      	ldr	r0, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	f000 fa72 	bl	80053de <xQueueGenericCreate>
 8004efa:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd90      	pop	{r4, r7, pc}

08004f04 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004f10:	2300      	movs	r3, #0
 8004f12:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <osMessagePut+0x1e>
    ticks = 1;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004f22:	f7ff fdd5 	bl	8004ad0 <inHandlerMode>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d018      	beq.n	8004f5e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004f2c:	f107 0210 	add.w	r2, r7, #16
 8004f30:	f107 0108 	add.w	r1, r7, #8
 8004f34:	2300      	movs	r3, #0
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 fbf6 	bl	8005728 <xQueueGenericSendFromISR>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d001      	beq.n	8004f46 <osMessagePut+0x42>
      return osErrorOS;
 8004f42:	23ff      	movs	r3, #255	; 0xff
 8004f44:	e018      	b.n	8004f78 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d014      	beq.n	8004f76 <osMessagePut+0x72>
 8004f4c:	4b0c      	ldr	r3, [pc, #48]	; (8004f80 <osMessagePut+0x7c>)
 8004f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	e00b      	b.n	8004f76 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004f5e:	f107 0108 	add.w	r1, r7, #8
 8004f62:	2300      	movs	r3, #0
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 fae4 	bl	8005534 <xQueueGenericSend>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d001      	beq.n	8004f76 <osMessagePut+0x72>
      return osErrorOS;
 8004f72:	23ff      	movs	r3, #255	; 0xff
 8004f74:	e000      	b.n	8004f78 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	e000ed04 	.word	0xe000ed04

08004f84 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004f84:	b590      	push	{r4, r7, lr}
 8004f86:	b08b      	sub	sp, #44	; 0x2c
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10a      	bne.n	8004fb4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004f9e:	2380      	movs	r3, #128	; 0x80
 8004fa0:	617b      	str	r3, [r7, #20]
    return event;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	461c      	mov	r4, r3
 8004fa6:	f107 0314 	add.w	r3, r7, #20
 8004faa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004fae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004fb2:	e054      	b.n	800505e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc2:	d103      	bne.n	8004fcc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fca:	e009      	b.n	8004fe0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d006      	beq.n	8004fe0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <osMessageGet+0x5c>
      ticks = 1;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004fe0:	f7ff fd76 	bl	8004ad0 <inHandlerMode>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d01c      	beq.n	8005024 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004fea:	f107 0220 	add.w	r2, r7, #32
 8004fee:	f107 0314 	add.w	r3, r7, #20
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	68b8      	ldr	r0, [r7, #8]
 8004ff8:	f000 fe98 	bl	8005d2c <xQueueReceiveFromISR>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d102      	bne.n	8005008 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005002:	2310      	movs	r3, #16
 8005004:	617b      	str	r3, [r7, #20]
 8005006:	e001      	b.n	800500c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005008:	2300      	movs	r3, #0
 800500a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d01d      	beq.n	800504e <osMessageGet+0xca>
 8005012:	4b15      	ldr	r3, [pc, #84]	; (8005068 <osMessageGet+0xe4>)
 8005014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	e014      	b.n	800504e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005024:	f107 0314 	add.w	r3, r7, #20
 8005028:	3304      	adds	r3, #4
 800502a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800502c:	4619      	mov	r1, r3
 800502e:	68b8      	ldr	r0, [r7, #8]
 8005030:	f000 fc98 	bl	8005964 <xQueueReceive>
 8005034:	4603      	mov	r3, r0
 8005036:	2b01      	cmp	r3, #1
 8005038:	d102      	bne.n	8005040 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800503a:	2310      	movs	r3, #16
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	e006      	b.n	800504e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <osMessageGet+0xc6>
 8005046:	2300      	movs	r3, #0
 8005048:	e000      	b.n	800504c <osMessageGet+0xc8>
 800504a:	2340      	movs	r3, #64	; 0x40
 800504c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	461c      	mov	r4, r3
 8005052:	f107 0314 	add.w	r3, r7, #20
 8005056:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800505a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	372c      	adds	r7, #44	; 0x2c
 8005062:	46bd      	mov	sp, r7
 8005064:	bd90      	pop	{r4, r7, pc}
 8005066:	bf00      	nop
 8005068:	e000ed04 	.word	0xe000ed04

0800506c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005074:	f7ff fd2c 	bl	8004ad0 <inHandlerMode>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d004      	beq.n	8005088 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 feee 	bl	8005e60 <uxQueueMessagesWaitingFromISR>
 8005084:	4603      	mov	r3, r0
 8005086:	e003      	b.n	8005090 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 fecc 	bl	8005e26 <uxQueueMessagesWaiting>
 800508e:	4603      	mov	r3, r0
  }
}
 8005090:	4618      	mov	r0, r3
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80050a0:	f7ff fd16 	bl	8004ad0 <inHandlerMode>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <osMessageDelete+0x16>
    return osErrorISR;
 80050aa:	2382      	movs	r3, #130	; 0x82
 80050ac:	e003      	b.n	80050b6 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fef3 	bl	8005e9a <vQueueDelete>

  return osOK; 
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f103 0208 	add.w	r2, r3, #8
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f04f 32ff 	mov.w	r2, #4294967295
 80050d6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f103 0208 	add.w	r2, r3, #8
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f103 0208 	add.w	r2, r3, #8
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	601a      	str	r2, [r3, #0]
}
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005176:	d103      	bne.n	8005180 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	e00c      	b.n	800519a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3308      	adds	r3, #8
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	e002      	b.n	800518e <vListInsert+0x2e>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	429a      	cmp	r2, r3
 8005198:	d2f6      	bcs.n	8005188 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	601a      	str	r2, [r3, #0]
}
 80051c6:	bf00      	nop
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051d2:	b480      	push	{r7}
 80051d4:	b085      	sub	sp, #20
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6892      	ldr	r2, [r2, #8]
 80051e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6852      	ldr	r2, [r2, #4]
 80051f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d103      	bne.n	8005206 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	1e5a      	subs	r2, r3, #1
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
	...

08005228 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d109      	bne.n	8005250 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	60bb      	str	r3, [r7, #8]
 800524e:	e7fe      	b.n	800524e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005250:	f002 f8cc 	bl	80073ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525c:	68f9      	ldr	r1, [r7, #12]
 800525e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005260:	fb01 f303 	mul.w	r3, r1, r3
 8005264:	441a      	add	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005280:	3b01      	subs	r3, #1
 8005282:	68f9      	ldr	r1, [r7, #12]
 8005284:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005286:	fb01 f303 	mul.w	r3, r1, r3
 800528a:	441a      	add	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	22ff      	movs	r2, #255	; 0xff
 8005294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	22ff      	movs	r2, #255	; 0xff
 800529c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d114      	bne.n	80052d0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d01a      	beq.n	80052e4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	3310      	adds	r3, #16
 80052b2:	4618      	mov	r0, r3
 80052b4:	f001 fb8a 	bl	80069cc <xTaskRemoveFromEventList>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d012      	beq.n	80052e4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80052be:	4b0d      	ldr	r3, [pc, #52]	; (80052f4 <xQueueGenericReset+0xcc>)
 80052c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	e009      	b.n	80052e4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	3310      	adds	r3, #16
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff fef2 	bl	80050be <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	3324      	adds	r3, #36	; 0x24
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff feed 	bl	80050be <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80052e4:	f002 f8b0 	bl	8007448 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80052e8:	2301      	movs	r3, #1
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	e000ed04 	.word	0xe000ed04

080052f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08e      	sub	sp, #56	; 0x38
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d109      	bne.n	8005320 <xQueueGenericCreateStatic+0x28>
 800530c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	62bb      	str	r3, [r7, #40]	; 0x28
 800531e:	e7fe      	b.n	800531e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d109      	bne.n	800533a <xQueueGenericCreateStatic+0x42>
 8005326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	627b      	str	r3, [r7, #36]	; 0x24
 8005338:	e7fe      	b.n	8005338 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <xQueueGenericCreateStatic+0x4e>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <xQueueGenericCreateStatic+0x52>
 8005346:	2301      	movs	r3, #1
 8005348:	e000      	b.n	800534c <xQueueGenericCreateStatic+0x54>
 800534a:	2300      	movs	r3, #0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d109      	bne.n	8005364 <xQueueGenericCreateStatic+0x6c>
 8005350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	623b      	str	r3, [r7, #32]
 8005362:	e7fe      	b.n	8005362 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d102      	bne.n	8005370 <xQueueGenericCreateStatic+0x78>
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <xQueueGenericCreateStatic+0x7c>
 8005370:	2301      	movs	r3, #1
 8005372:	e000      	b.n	8005376 <xQueueGenericCreateStatic+0x7e>
 8005374:	2300      	movs	r3, #0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d109      	bne.n	800538e <xQueueGenericCreateStatic+0x96>
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	61fb      	str	r3, [r7, #28]
 800538c:	e7fe      	b.n	800538c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800538e:	2348      	movs	r3, #72	; 0x48
 8005390:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2b48      	cmp	r3, #72	; 0x48
 8005396:	d009      	beq.n	80053ac <xQueueGenericCreateStatic+0xb4>
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	61bb      	str	r3, [r7, #24]
 80053aa:	e7fe      	b.n	80053aa <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80053ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80053b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00d      	beq.n	80053d4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80053b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053c0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80053c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	4613      	mov	r3, r2
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	68b9      	ldr	r1, [r7, #8]
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 f844 	bl	800545c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80053d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3730      	adds	r7, #48	; 0x30
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b08a      	sub	sp, #40	; 0x28
 80053e2:	af02      	add	r7, sp, #8
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	4613      	mov	r3, r2
 80053ea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d109      	bne.n	8005406 <xQueueGenericCreate+0x28>
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	e7fe      	b.n	8005404 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d102      	bne.n	8005412 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800540c:	2300      	movs	r3, #0
 800540e:	61fb      	str	r3, [r7, #28]
 8005410:	e004      	b.n	800541c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	fb02 f303 	mul.w	r3, r2, r3
 800541a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	3348      	adds	r3, #72	; 0x48
 8005420:	4618      	mov	r0, r3
 8005422:	f002 f8fd 	bl	8007620 <pvPortMalloc>
 8005426:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d011      	beq.n	8005452 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	3348      	adds	r3, #72	; 0x48
 8005436:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005440:	79fa      	ldrb	r2, [r7, #7]
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	4613      	mov	r3, r2
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	68b9      	ldr	r1, [r7, #8]
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f805 	bl	800545c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005452:	69bb      	ldr	r3, [r7, #24]
	}
 8005454:	4618      	mov	r0, r3
 8005456:	3720      	adds	r7, #32
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
 8005468:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d103      	bne.n	8005478 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	e002      	b.n	800547e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800548a:	2101      	movs	r1, #1
 800548c:	69b8      	ldr	r0, [r7, #24]
 800548e:	f7ff fecb 	bl	8005228 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005492:	bf00      	nop
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800549a:	b580      	push	{r7, lr}
 800549c:	b082      	sub	sp, #8
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00e      	beq.n	80054c6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80054ba:	2300      	movs	r3, #0
 80054bc:	2200      	movs	r2, #0
 80054be:	2100      	movs	r1, #0
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f837 	bl	8005534 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80054c6:	bf00      	nop
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b086      	sub	sp, #24
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	4603      	mov	r3, r0
 80054d6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80054d8:	2301      	movs	r3, #1
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	2300      	movs	r3, #0
 80054de:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80054e0:	79fb      	ldrb	r3, [r7, #7]
 80054e2:	461a      	mov	r2, r3
 80054e4:	6939      	ldr	r1, [r7, #16]
 80054e6:	6978      	ldr	r0, [r7, #20]
 80054e8:	f7ff ff79 	bl	80053de <xQueueGenericCreate>
 80054ec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f7ff ffd3 	bl	800549a <prvInitialiseMutex>

		return xNewQueue;
 80054f4:	68fb      	ldr	r3, [r7, #12]
	}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b088      	sub	sp, #32
 8005502:	af02      	add	r7, sp, #8
 8005504:	4603      	mov	r3, r0
 8005506:	6039      	str	r1, [r7, #0]
 8005508:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800550a:	2301      	movs	r3, #1
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	2300      	movs	r3, #0
 8005510:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005512:	79fb      	ldrb	r3, [r7, #7]
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2200      	movs	r2, #0
 800551a:	6939      	ldr	r1, [r7, #16]
 800551c:	6978      	ldr	r0, [r7, #20]
 800551e:	f7ff feeb 	bl	80052f8 <xQueueGenericCreateStatic>
 8005522:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f7ff ffb8 	bl	800549a <prvInitialiseMutex>

		return xNewQueue;
 800552a:	68fb      	ldr	r3, [r7, #12]
	}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b08e      	sub	sp, #56	; 0x38
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
 8005540:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005542:	2300      	movs	r3, #0
 8005544:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	2b00      	cmp	r3, #0
 800554e:	d109      	bne.n	8005564 <xQueueGenericSend+0x30>
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	62bb      	str	r3, [r7, #40]	; 0x28
 8005562:	e7fe      	b.n	8005562 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d103      	bne.n	8005572 <xQueueGenericSend+0x3e>
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <xQueueGenericSend+0x42>
 8005572:	2301      	movs	r3, #1
 8005574:	e000      	b.n	8005578 <xQueueGenericSend+0x44>
 8005576:	2300      	movs	r3, #0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d109      	bne.n	8005590 <xQueueGenericSend+0x5c>
 800557c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	627b      	str	r3, [r7, #36]	; 0x24
 800558e:	e7fe      	b.n	800558e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	2b02      	cmp	r3, #2
 8005594:	d103      	bne.n	800559e <xQueueGenericSend+0x6a>
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559a:	2b01      	cmp	r3, #1
 800559c:	d101      	bne.n	80055a2 <xQueueGenericSend+0x6e>
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <xQueueGenericSend+0x70>
 80055a2:	2300      	movs	r3, #0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d109      	bne.n	80055bc <xQueueGenericSend+0x88>
 80055a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ac:	f383 8811 	msr	BASEPRI, r3
 80055b0:	f3bf 8f6f 	isb	sy
 80055b4:	f3bf 8f4f 	dsb	sy
 80055b8:	623b      	str	r3, [r7, #32]
 80055ba:	e7fe      	b.n	80055ba <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055bc:	f001 fbbc 	bl	8006d38 <xTaskGetSchedulerState>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d102      	bne.n	80055cc <xQueueGenericSend+0x98>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <xQueueGenericSend+0x9c>
 80055cc:	2301      	movs	r3, #1
 80055ce:	e000      	b.n	80055d2 <xQueueGenericSend+0x9e>
 80055d0:	2300      	movs	r3, #0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d109      	bne.n	80055ea <xQueueGenericSend+0xb6>
 80055d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055da:	f383 8811 	msr	BASEPRI, r3
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f3bf 8f4f 	dsb	sy
 80055e6:	61fb      	str	r3, [r7, #28]
 80055e8:	e7fe      	b.n	80055e8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055ea:	f001 feff 	bl	80073ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d302      	bcc.n	8005600 <xQueueGenericSend+0xcc>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d129      	bne.n	8005654 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	68b9      	ldr	r1, [r7, #8]
 8005604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005606:	f000 fc82 	bl	8005f0e <prvCopyDataToQueue>
 800560a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800560c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	2b00      	cmp	r3, #0
 8005612:	d010      	beq.n	8005636 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005616:	3324      	adds	r3, #36	; 0x24
 8005618:	4618      	mov	r0, r3
 800561a:	f001 f9d7 	bl	80069cc <xTaskRemoveFromEventList>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d013      	beq.n	800564c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005624:	4b3f      	ldr	r3, [pc, #252]	; (8005724 <xQueueGenericSend+0x1f0>)
 8005626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	e00a      	b.n	800564c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005638:	2b00      	cmp	r3, #0
 800563a:	d007      	beq.n	800564c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800563c:	4b39      	ldr	r3, [pc, #228]	; (8005724 <xQueueGenericSend+0x1f0>)
 800563e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800564c:	f001 fefc 	bl	8007448 <vPortExitCritical>
				return pdPASS;
 8005650:	2301      	movs	r3, #1
 8005652:	e063      	b.n	800571c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d103      	bne.n	8005662 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800565a:	f001 fef5 	bl	8007448 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800565e:	2300      	movs	r3, #0
 8005660:	e05c      	b.n	800571c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005664:	2b00      	cmp	r3, #0
 8005666:	d106      	bne.n	8005676 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005668:	f107 0314 	add.w	r3, r7, #20
 800566c:	4618      	mov	r0, r3
 800566e:	f001 fa0f 	bl	8006a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005672:	2301      	movs	r3, #1
 8005674:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005676:	f001 fee7 	bl	8007448 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800567a:	f000 ffa5 	bl	80065c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800567e:	f001 feb5 	bl	80073ec <vPortEnterCritical>
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005688:	b25b      	sxtb	r3, r3
 800568a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568e:	d103      	bne.n	8005698 <xQueueGenericSend+0x164>
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800569e:	b25b      	sxtb	r3, r3
 80056a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a4:	d103      	bne.n	80056ae <xQueueGenericSend+0x17a>
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056ae:	f001 fecb 	bl	8007448 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056b2:	1d3a      	adds	r2, r7, #4
 80056b4:	f107 0314 	add.w	r3, r7, #20
 80056b8:	4611      	mov	r1, r2
 80056ba:	4618      	mov	r0, r3
 80056bc:	f001 f9fe 	bl	8006abc <xTaskCheckForTimeOut>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d124      	bne.n	8005710 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80056c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056c8:	f000 fd19 	bl	80060fe <prvIsQueueFull>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d018      	beq.n	8005704 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d4:	3310      	adds	r3, #16
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	4611      	mov	r1, r2
 80056da:	4618      	mov	r0, r3
 80056dc:	f001 f952 	bl	8006984 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80056e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056e2:	f000 fca4 	bl	800602e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80056e6:	f000 ff7d 	bl	80065e4 <xTaskResumeAll>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f47f af7c 	bne.w	80055ea <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80056f2:	4b0c      	ldr	r3, [pc, #48]	; (8005724 <xQueueGenericSend+0x1f0>)
 80056f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	e772      	b.n	80055ea <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005706:	f000 fc92 	bl	800602e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800570a:	f000 ff6b 	bl	80065e4 <xTaskResumeAll>
 800570e:	e76c      	b.n	80055ea <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005712:	f000 fc8c 	bl	800602e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005716:	f000 ff65 	bl	80065e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800571a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800571c:	4618      	mov	r0, r3
 800571e:	3738      	adds	r7, #56	; 0x38
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	e000ed04 	.word	0xe000ed04

08005728 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08e      	sub	sp, #56	; 0x38
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	2b00      	cmp	r3, #0
 800573e:	d109      	bne.n	8005754 <xQueueGenericSendFromISR+0x2c>
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	627b      	str	r3, [r7, #36]	; 0x24
 8005752:	e7fe      	b.n	8005752 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d103      	bne.n	8005762 <xQueueGenericSendFromISR+0x3a>
 800575a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <xQueueGenericSendFromISR+0x3e>
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <xQueueGenericSendFromISR+0x40>
 8005766:	2300      	movs	r3, #0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d109      	bne.n	8005780 <xQueueGenericSendFromISR+0x58>
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	623b      	str	r3, [r7, #32]
 800577e:	e7fe      	b.n	800577e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2b02      	cmp	r3, #2
 8005784:	d103      	bne.n	800578e <xQueueGenericSendFromISR+0x66>
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578a:	2b01      	cmp	r3, #1
 800578c:	d101      	bne.n	8005792 <xQueueGenericSendFromISR+0x6a>
 800578e:	2301      	movs	r3, #1
 8005790:	e000      	b.n	8005794 <xQueueGenericSendFromISR+0x6c>
 8005792:	2300      	movs	r3, #0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d109      	bne.n	80057ac <xQueueGenericSendFromISR+0x84>
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	61fb      	str	r3, [r7, #28]
 80057aa:	e7fe      	b.n	80057aa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057ac:	f001 fefa 	bl	80075a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80057b0:	f3ef 8211 	mrs	r2, BASEPRI
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	61ba      	str	r2, [r7, #24]
 80057c6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80057c8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d302      	bcc.n	80057de <xQueueGenericSendFromISR+0xb6>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d12c      	bne.n	8005838 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	68b9      	ldr	r1, [r7, #8]
 80057ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ee:	f000 fb8e 	bl	8005f0e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057f2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80057f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fa:	d112      	bne.n	8005822 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	2b00      	cmp	r3, #0
 8005802:	d016      	beq.n	8005832 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005806:	3324      	adds	r3, #36	; 0x24
 8005808:	4618      	mov	r0, r3
 800580a:	f001 f8df 	bl	80069cc <xTaskRemoveFromEventList>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00e      	beq.n	8005832 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00b      	beq.n	8005832 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	601a      	str	r2, [r3, #0]
 8005820:	e007      	b.n	8005832 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005822:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005826:	3301      	adds	r3, #1
 8005828:	b2db      	uxtb	r3, r3
 800582a:	b25a      	sxtb	r2, r3
 800582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005832:	2301      	movs	r3, #1
 8005834:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005836:	e001      	b.n	800583c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005838:	2300      	movs	r3, #0
 800583a:	637b      	str	r3, [r7, #52]	; 0x34
 800583c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005848:	4618      	mov	r0, r3
 800584a:	3738      	adds	r7, #56	; 0x38
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b08e      	sub	sp, #56	; 0x38
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	2b00      	cmp	r3, #0
 8005862:	d109      	bne.n	8005878 <xQueueGiveFromISR+0x28>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	623b      	str	r3, [r7, #32]
 8005876:	e7fe      	b.n	8005876 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587c:	2b00      	cmp	r3, #0
 800587e:	d009      	beq.n	8005894 <xQueueGiveFromISR+0x44>
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	61fb      	str	r3, [r7, #28]
 8005892:	e7fe      	b.n	8005892 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d103      	bne.n	80058a4 <xQueueGiveFromISR+0x54>
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <xQueueGiveFromISR+0x58>
 80058a4:	2301      	movs	r3, #1
 80058a6:	e000      	b.n	80058aa <xQueueGiveFromISR+0x5a>
 80058a8:	2300      	movs	r3, #0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d109      	bne.n	80058c2 <xQueueGiveFromISR+0x72>
 80058ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	61bb      	str	r3, [r7, #24]
 80058c0:	e7fe      	b.n	80058c0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058c2:	f001 fe6f 	bl	80075a4 <vPortValidateInterruptPriority>
	__asm volatile
 80058c6:	f3ef 8211 	mrs	r2, BASEPRI
 80058ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ce:	f383 8811 	msr	BASEPRI, r3
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	617a      	str	r2, [r7, #20]
 80058dc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80058de:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80058e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d22b      	bcs.n	800594a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005902:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005904:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590c:	d112      	bne.n	8005934 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800590e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	2b00      	cmp	r3, #0
 8005914:	d016      	beq.n	8005944 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	3324      	adds	r3, #36	; 0x24
 800591a:	4618      	mov	r0, r3
 800591c:	f001 f856 	bl	80069cc <xTaskRemoveFromEventList>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00e      	beq.n	8005944 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00b      	beq.n	8005944 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2201      	movs	r2, #1
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	e007      	b.n	8005944 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005938:	3301      	adds	r3, #1
 800593a:	b2db      	uxtb	r3, r3
 800593c:	b25a      	sxtb	r2, r3
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005944:	2301      	movs	r3, #1
 8005946:	637b      	str	r3, [r7, #52]	; 0x34
 8005948:	e001      	b.n	800594e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800594a:	2300      	movs	r3, #0
 800594c:	637b      	str	r3, [r7, #52]	; 0x34
 800594e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005950:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800595a:	4618      	mov	r0, r3
 800595c:	3738      	adds	r7, #56	; 0x38
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
	...

08005964 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b08c      	sub	sp, #48	; 0x30
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005970:	2300      	movs	r3, #0
 8005972:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	2b00      	cmp	r3, #0
 800597c:	d109      	bne.n	8005992 <xQueueReceive+0x2e>
	__asm volatile
 800597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	623b      	str	r3, [r7, #32]
 8005990:	e7fe      	b.n	8005990 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d103      	bne.n	80059a0 <xQueueReceive+0x3c>
 8005998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <xQueueReceive+0x40>
 80059a0:	2301      	movs	r3, #1
 80059a2:	e000      	b.n	80059a6 <xQueueReceive+0x42>
 80059a4:	2300      	movs	r3, #0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d109      	bne.n	80059be <xQueueReceive+0x5a>
 80059aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	61fb      	str	r3, [r7, #28]
 80059bc:	e7fe      	b.n	80059bc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059be:	f001 f9bb 	bl	8006d38 <xTaskGetSchedulerState>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d102      	bne.n	80059ce <xQueueReceive+0x6a>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <xQueueReceive+0x6e>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <xQueueReceive+0x70>
 80059d2:	2300      	movs	r3, #0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d109      	bne.n	80059ec <xQueueReceive+0x88>
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	61bb      	str	r3, [r7, #24]
 80059ea:	e7fe      	b.n	80059ea <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059ec:	f001 fcfe 	bl	80073ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01f      	beq.n	8005a3c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059fc:	68b9      	ldr	r1, [r7, #8]
 80059fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a00:	f000 faef 	bl	8005fe2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	1e5a      	subs	r2, r3, #1
 8005a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00f      	beq.n	8005a34 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	3310      	adds	r3, #16
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 ffd7 	bl	80069cc <xTaskRemoveFromEventList>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d007      	beq.n	8005a34 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a24:	4b3c      	ldr	r3, [pc, #240]	; (8005b18 <xQueueReceive+0x1b4>)
 8005a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a34:	f001 fd08 	bl	8007448 <vPortExitCritical>
				return pdPASS;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e069      	b.n	8005b10 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d103      	bne.n	8005a4a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a42:	f001 fd01 	bl	8007448 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a46:	2300      	movs	r3, #0
 8005a48:	e062      	b.n	8005b10 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d106      	bne.n	8005a5e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a50:	f107 0310 	add.w	r3, r7, #16
 8005a54:	4618      	mov	r0, r3
 8005a56:	f001 f81b 	bl	8006a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a5e:	f001 fcf3 	bl	8007448 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a62:	f000 fdb1 	bl	80065c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a66:	f001 fcc1 	bl	80073ec <vPortEnterCritical>
 8005a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a70:	b25b      	sxtb	r3, r3
 8005a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a76:	d103      	bne.n	8005a80 <xQueueReceive+0x11c>
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a86:	b25b      	sxtb	r3, r3
 8005a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8c:	d103      	bne.n	8005a96 <xQueueReceive+0x132>
 8005a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a96:	f001 fcd7 	bl	8007448 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a9a:	1d3a      	adds	r2, r7, #4
 8005a9c:	f107 0310 	add.w	r3, r7, #16
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f001 f80a 	bl	8006abc <xTaskCheckForTimeOut>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d123      	bne.n	8005af6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005aae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ab0:	f000 fb0f 	bl	80060d2 <prvIsQueueEmpty>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d017      	beq.n	8005aea <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abc:	3324      	adds	r3, #36	; 0x24
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 ff5e 	bl	8006984 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aca:	f000 fab0 	bl	800602e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ace:	f000 fd89 	bl	80065e4 <xTaskResumeAll>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d189      	bne.n	80059ec <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005ad8:	4b0f      	ldr	r3, [pc, #60]	; (8005b18 <xQueueReceive+0x1b4>)
 8005ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	e780      	b.n	80059ec <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aec:	f000 fa9f 	bl	800602e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005af0:	f000 fd78 	bl	80065e4 <xTaskResumeAll>
 8005af4:	e77a      	b.n	80059ec <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005af8:	f000 fa99 	bl	800602e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005afc:	f000 fd72 	bl	80065e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b02:	f000 fae6 	bl	80060d2 <prvIsQueueEmpty>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f43f af6f 	beq.w	80059ec <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3730      	adds	r7, #48	; 0x30
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	e000ed04 	.word	0xe000ed04

08005b1c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08e      	sub	sp, #56	; 0x38
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b26:	2300      	movs	r3, #0
 8005b28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d109      	bne.n	8005b4c <xQueueSemaphoreTake+0x30>
 8005b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	623b      	str	r3, [r7, #32]
 8005b4a:	e7fe      	b.n	8005b4a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d009      	beq.n	8005b68 <xQueueSemaphoreTake+0x4c>
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	61fb      	str	r3, [r7, #28]
 8005b66:	e7fe      	b.n	8005b66 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b68:	f001 f8e6 	bl	8006d38 <xTaskGetSchedulerState>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d102      	bne.n	8005b78 <xQueueSemaphoreTake+0x5c>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <xQueueSemaphoreTake+0x60>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e000      	b.n	8005b7e <xQueueSemaphoreTake+0x62>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d109      	bne.n	8005b96 <xQueueSemaphoreTake+0x7a>
 8005b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b86:	f383 8811 	msr	BASEPRI, r3
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	61bb      	str	r3, [r7, #24]
 8005b94:	e7fe      	b.n	8005b94 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b96:	f001 fc29 	bl	80073ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d024      	beq.n	8005bf0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba8:	1e5a      	subs	r2, r3, #1
 8005baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bac:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d104      	bne.n	8005bc0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005bb6:	f001 fa79 	bl	80070ac <pvTaskIncrementMutexHeldCount>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00f      	beq.n	8005be8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bca:	3310      	adds	r3, #16
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 fefd 	bl	80069cc <xTaskRemoveFromEventList>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d007      	beq.n	8005be8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bd8:	4b53      	ldr	r3, [pc, #332]	; (8005d28 <xQueueSemaphoreTake+0x20c>)
 8005bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005be8:	f001 fc2e 	bl	8007448 <vPortExitCritical>
				return pdPASS;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e096      	b.n	8005d1e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d110      	bne.n	8005c18 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d009      	beq.n	8005c10 <xQueueSemaphoreTake+0xf4>
 8005bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c00:	f383 8811 	msr	BASEPRI, r3
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	617b      	str	r3, [r7, #20]
 8005c0e:	e7fe      	b.n	8005c0e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005c10:	f001 fc1a 	bl	8007448 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c14:	2300      	movs	r3, #0
 8005c16:	e082      	b.n	8005d1e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d106      	bne.n	8005c2c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c1e:	f107 030c 	add.w	r3, r7, #12
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 ff34 	bl	8006a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c2c:	f001 fc0c 	bl	8007448 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c30:	f000 fcca 	bl	80065c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c34:	f001 fbda 	bl	80073ec <vPortEnterCritical>
 8005c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c3e:	b25b      	sxtb	r3, r3
 8005c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c44:	d103      	bne.n	8005c4e <xQueueSemaphoreTake+0x132>
 8005c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c54:	b25b      	sxtb	r3, r3
 8005c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5a:	d103      	bne.n	8005c64 <xQueueSemaphoreTake+0x148>
 8005c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c64:	f001 fbf0 	bl	8007448 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c68:	463a      	mov	r2, r7
 8005c6a:	f107 030c 	add.w	r3, r7, #12
 8005c6e:	4611      	mov	r1, r2
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 ff23 	bl	8006abc <xTaskCheckForTimeOut>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d132      	bne.n	8005ce2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c7e:	f000 fa28 	bl	80060d2 <prvIsQueueEmpty>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d026      	beq.n	8005cd6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d109      	bne.n	8005ca4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8005c90:	f001 fbac 	bl	80073ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f001 f86b 	bl	8006d74 <xTaskPriorityInherit>
 8005c9e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005ca0:	f001 fbd2 	bl	8007448 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca6:	3324      	adds	r3, #36	; 0x24
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	4611      	mov	r1, r2
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 fe69 	bl	8006984 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cb4:	f000 f9bb 	bl	800602e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cb8:	f000 fc94 	bl	80065e4 <xTaskResumeAll>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f47f af69 	bne.w	8005b96 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005cc4:	4b18      	ldr	r3, [pc, #96]	; (8005d28 <xQueueSemaphoreTake+0x20c>)
 8005cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	e75f      	b.n	8005b96 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005cd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cd8:	f000 f9a9 	bl	800602e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cdc:	f000 fc82 	bl	80065e4 <xTaskResumeAll>
 8005ce0:	e759      	b.n	8005b96 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005ce2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ce4:	f000 f9a3 	bl	800602e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ce8:	f000 fc7c 	bl	80065e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cee:	f000 f9f0 	bl	80060d2 <prvIsQueueEmpty>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f43f af4e 	beq.w	8005b96 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00d      	beq.n	8005d1c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005d00:	f001 fb74 	bl	80073ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005d04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d06:	f000 f8ea 	bl	8005ede <prvGetDisinheritPriorityAfterTimeout>
 8005d0a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d12:	4618      	mov	r0, r3
 8005d14:	f001 f932 	bl	8006f7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005d18:	f001 fb96 	bl	8007448 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3738      	adds	r7, #56	; 0x38
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	e000ed04 	.word	0xe000ed04

08005d2c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08e      	sub	sp, #56	; 0x38
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d109      	bne.n	8005d56 <xQueueReceiveFromISR+0x2a>
 8005d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	623b      	str	r3, [r7, #32]
 8005d54:	e7fe      	b.n	8005d54 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d103      	bne.n	8005d64 <xQueueReceiveFromISR+0x38>
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <xQueueReceiveFromISR+0x3c>
 8005d64:	2301      	movs	r3, #1
 8005d66:	e000      	b.n	8005d6a <xQueueReceiveFromISR+0x3e>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d109      	bne.n	8005d82 <xQueueReceiveFromISR+0x56>
 8005d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	61fb      	str	r3, [r7, #28]
 8005d80:	e7fe      	b.n	8005d80 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d82:	f001 fc0f 	bl	80075a4 <vPortValidateInterruptPriority>
	__asm volatile
 8005d86:	f3ef 8211 	mrs	r2, BASEPRI
 8005d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	61ba      	str	r2, [r7, #24]
 8005d9c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005d9e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005da0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d02f      	beq.n	8005e0e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dbc:	f000 f911 	bl	8005fe2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc2:	1e5a      	subs	r2, r3, #1
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005dc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd0:	d112      	bne.n	8005df8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d016      	beq.n	8005e08 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	3310      	adds	r3, #16
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fdf4 	bl	80069cc <xTaskRemoveFromEventList>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00e      	beq.n	8005e08 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00b      	beq.n	8005e08 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	e007      	b.n	8005e08 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005df8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	b25a      	sxtb	r2, r3
 8005e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e0c:	e001      	b.n	8005e12 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	637b      	str	r3, [r7, #52]	; 0x34
 8005e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e14:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3738      	adds	r7, #56	; 0x38
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d109      	bne.n	8005e48 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8005e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	60bb      	str	r3, [r7, #8]
 8005e46:	e7fe      	b.n	8005e46 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8005e48:	f001 fad0 	bl	80073ec <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e50:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005e52:	f001 faf9 	bl	8007448 <vPortExitCritical>

	return uxReturn;
 8005e56:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d109      	bne.n	8005e86 <uxQueueMessagesWaitingFromISR+0x26>
 8005e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	e7fe      	b.n	8005e84 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8a:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005e8c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e8e:	4618      	mov	r0, r3
 8005e90:	371c      	adds	r7, #28
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d109      	bne.n	8005ec0 <vQueueDelete+0x26>
 8005eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	60bb      	str	r3, [r7, #8]
 8005ebe:	e7fe      	b.n	8005ebe <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 f935 	bl	8006130 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d102      	bne.n	8005ed6 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f001 fc67 	bl	80077a4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005ed6:	bf00      	nop
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005ede:	b480      	push	{r7}
 8005ee0:	b085      	sub	sp, #20
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d006      	beq.n	8005efc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f1c3 0307 	rsb	r3, r3, #7
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	e001      	b.n	8005f00 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005efc:	2300      	movs	r3, #0
 8005efe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005f00:	68fb      	ldr	r3, [r7, #12]
	}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b086      	sub	sp, #24
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	60f8      	str	r0, [r7, #12]
 8005f16:	60b9      	str	r1, [r7, #8]
 8005f18:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f22:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10d      	bne.n	8005f48 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d14d      	bne.n	8005fd0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 ff9b 	bl	8006e74 <xTaskPriorityDisinherit>
 8005f3e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	609a      	str	r2, [r3, #8]
 8005f46:	e043      	b.n	8005fd0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d119      	bne.n	8005f82 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6858      	ldr	r0, [r3, #4]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	461a      	mov	r2, r3
 8005f58:	68b9      	ldr	r1, [r7, #8]
 8005f5a:	f011 ff92 	bl	8017e82 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	441a      	add	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d32b      	bcc.n	8005fd0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	605a      	str	r2, [r3, #4]
 8005f80:	e026      	b.n	8005fd0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	68d8      	ldr	r0, [r3, #12]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	68b9      	ldr	r1, [r7, #8]
 8005f8e:	f011 ff78 	bl	8017e82 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	425b      	negs	r3, r3
 8005f9c:	441a      	add	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d207      	bcs.n	8005fbe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	689a      	ldr	r2, [r3, #8]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	425b      	negs	r3, r3
 8005fb8:	441a      	add	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d105      	bne.n	8005fd0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005fd8:	697b      	ldr	r3, [r7, #20]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b082      	sub	sp, #8
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d018      	beq.n	8006026 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffc:	441a      	add	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68da      	ldr	r2, [r3, #12]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	429a      	cmp	r2, r3
 800600c:	d303      	bcc.n	8006016 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68d9      	ldr	r1, [r3, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	461a      	mov	r2, r3
 8006020:	6838      	ldr	r0, [r7, #0]
 8006022:	f011 ff2e 	bl	8017e82 <memcpy>
	}
}
 8006026:	bf00      	nop
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b084      	sub	sp, #16
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006036:	f001 f9d9 	bl	80073ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006040:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006042:	e011      	b.n	8006068 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	2b00      	cmp	r3, #0
 800604a:	d012      	beq.n	8006072 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	3324      	adds	r3, #36	; 0x24
 8006050:	4618      	mov	r0, r3
 8006052:	f000 fcbb 	bl	80069cc <xTaskRemoveFromEventList>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800605c:	f000 fd8e 	bl	8006b7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006060:	7bfb      	ldrb	r3, [r7, #15]
 8006062:	3b01      	subs	r3, #1
 8006064:	b2db      	uxtb	r3, r3
 8006066:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800606c:	2b00      	cmp	r3, #0
 800606e:	dce9      	bgt.n	8006044 <prvUnlockQueue+0x16>
 8006070:	e000      	b.n	8006074 <prvUnlockQueue+0x46>
					break;
 8006072:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	22ff      	movs	r2, #255	; 0xff
 8006078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800607c:	f001 f9e4 	bl	8007448 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006080:	f001 f9b4 	bl	80073ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800608a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800608c:	e011      	b.n	80060b2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d012      	beq.n	80060bc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3310      	adds	r3, #16
 800609a:	4618      	mov	r0, r3
 800609c:	f000 fc96 	bl	80069cc <xTaskRemoveFromEventList>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80060a6:	f000 fd69 	bl	8006b7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80060aa:	7bbb      	ldrb	r3, [r7, #14]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	dce9      	bgt.n	800608e <prvUnlockQueue+0x60>
 80060ba:	e000      	b.n	80060be <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80060bc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	22ff      	movs	r2, #255	; 0xff
 80060c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80060c6:	f001 f9bf 	bl	8007448 <vPortExitCritical>
}
 80060ca:	bf00      	nop
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060da:	f001 f987 	bl	80073ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d102      	bne.n	80060ec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060e6:	2301      	movs	r3, #1
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	e001      	b.n	80060f0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060ec:	2300      	movs	r3, #0
 80060ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060f0:	f001 f9aa 	bl	8007448 <vPortExitCritical>

	return xReturn;
 80060f4:	68fb      	ldr	r3, [r7, #12]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b084      	sub	sp, #16
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006106:	f001 f971 	bl	80073ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006112:	429a      	cmp	r2, r3
 8006114:	d102      	bne.n	800611c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006116:	2301      	movs	r3, #1
 8006118:	60fb      	str	r3, [r7, #12]
 800611a:	e001      	b.n	8006120 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800611c:	2300      	movs	r3, #0
 800611e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006120:	f001 f992 	bl	8007448 <vPortExitCritical>

	return xReturn;
 8006124:	68fb      	ldr	r3, [r7, #12]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006138:	2300      	movs	r3, #0
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	e016      	b.n	800616c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800613e:	4a10      	ldr	r2, [pc, #64]	; (8006180 <vQueueUnregisterQueue+0x50>)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	4413      	add	r3, r2
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	429a      	cmp	r2, r3
 800614c:	d10b      	bne.n	8006166 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800614e:	4a0c      	ldr	r2, [pc, #48]	; (8006180 <vQueueUnregisterQueue+0x50>)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2100      	movs	r1, #0
 8006154:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006158:	4a09      	ldr	r2, [pc, #36]	; (8006180 <vQueueUnregisterQueue+0x50>)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	4413      	add	r3, r2
 8006160:	2200      	movs	r2, #0
 8006162:	605a      	str	r2, [r3, #4]
				break;
 8006164:	e005      	b.n	8006172 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	3301      	adds	r3, #1
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2b07      	cmp	r3, #7
 8006170:	d9e5      	bls.n	800613e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006172:	bf00      	nop
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	2000bd9c 	.word	0x2000bd9c

08006184 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006184:	b580      	push	{r7, lr}
 8006186:	b08e      	sub	sp, #56	; 0x38
 8006188:	af04      	add	r7, sp, #16
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
 8006190:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006194:	2b00      	cmp	r3, #0
 8006196:	d109      	bne.n	80061ac <xTaskCreateStatic+0x28>
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	623b      	str	r3, [r7, #32]
 80061aa:	e7fe      	b.n	80061aa <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80061ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d109      	bne.n	80061c6 <xTaskCreateStatic+0x42>
 80061b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	61fb      	str	r3, [r7, #28]
 80061c4:	e7fe      	b.n	80061c4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80061c6:	2354      	movs	r3, #84	; 0x54
 80061c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	2b54      	cmp	r3, #84	; 0x54
 80061ce:	d009      	beq.n	80061e4 <xTaskCreateStatic+0x60>
 80061d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	61bb      	str	r3, [r7, #24]
 80061e2:	e7fe      	b.n	80061e2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80061e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d01e      	beq.n	800622a <xTaskCreateStatic+0xa6>
 80061ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d01b      	beq.n	800622a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061fa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006204:	2300      	movs	r3, #0
 8006206:	9303      	str	r3, [sp, #12]
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	9302      	str	r3, [sp, #8]
 800620c:	f107 0314 	add.w	r3, r7, #20
 8006210:	9301      	str	r3, [sp, #4]
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	68b9      	ldr	r1, [r7, #8]
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 f850 	bl	80062c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006222:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006224:	f000 f8d4 	bl	80063d0 <prvAddNewTaskToReadyList>
 8006228:	e001      	b.n	800622e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800622a:	2300      	movs	r3, #0
 800622c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800622e:	697b      	ldr	r3, [r7, #20]
	}
 8006230:	4618      	mov	r0, r3
 8006232:	3728      	adds	r7, #40	; 0x28
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08c      	sub	sp, #48	; 0x30
 800623c:	af04      	add	r7, sp, #16
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	603b      	str	r3, [r7, #0]
 8006244:	4613      	mov	r3, r2
 8006246:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006248:	88fb      	ldrh	r3, [r7, #6]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4618      	mov	r0, r3
 800624e:	f001 f9e7 	bl	8007620 <pvPortMalloc>
 8006252:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00e      	beq.n	8006278 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800625a:	2054      	movs	r0, #84	; 0x54
 800625c:	f001 f9e0 	bl	8007620 <pvPortMalloc>
 8006260:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	631a      	str	r2, [r3, #48]	; 0x30
 800626e:	e005      	b.n	800627c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006270:	6978      	ldr	r0, [r7, #20]
 8006272:	f001 fa97 	bl	80077a4 <vPortFree>
 8006276:	e001      	b.n	800627c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006278:	2300      	movs	r3, #0
 800627a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d017      	beq.n	80062b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800628a:	88fa      	ldrh	r2, [r7, #6]
 800628c:	2300      	movs	r3, #0
 800628e:	9303      	str	r3, [sp, #12]
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	9302      	str	r3, [sp, #8]
 8006294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006296:	9301      	str	r3, [sp, #4]
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 f80e 	bl	80062c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062a6:	69f8      	ldr	r0, [r7, #28]
 80062a8:	f000 f892 	bl	80063d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062ac:	2301      	movs	r3, #1
 80062ae:	61bb      	str	r3, [r7, #24]
 80062b0:	e002      	b.n	80062b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062b2:	f04f 33ff 	mov.w	r3, #4294967295
 80062b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80062b8:	69bb      	ldr	r3, [r7, #24]
	}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3720      	adds	r7, #32
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b088      	sub	sp, #32
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	60f8      	str	r0, [r7, #12]
 80062ca:	60b9      	str	r1, [r7, #8]
 80062cc:	607a      	str	r2, [r7, #4]
 80062ce:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062da:	3b01      	subs	r3, #1
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	f023 0307 	bic.w	r3, r3, #7
 80062e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	f003 0307 	and.w	r3, r3, #7
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d009      	beq.n	8006308 <prvInitialiseNewTask+0x46>
 80062f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	e7fe      	b.n	8006306 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d01f      	beq.n	800634e <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800630e:	2300      	movs	r3, #0
 8006310:	61fb      	str	r3, [r7, #28]
 8006312:	e012      	b.n	800633a <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	4413      	add	r3, r2
 800631a:	7819      	ldrb	r1, [r3, #0]
 800631c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	4413      	add	r3, r2
 8006322:	3334      	adds	r3, #52	; 0x34
 8006324:	460a      	mov	r2, r1
 8006326:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	4413      	add	r3, r2
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d006      	beq.n	8006342 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	3301      	adds	r3, #1
 8006338:	61fb      	str	r3, [r7, #28]
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	2b0f      	cmp	r3, #15
 800633e:	d9e9      	bls.n	8006314 <prvInitialiseNewTask+0x52>
 8006340:	e000      	b.n	8006344 <prvInitialiseNewTask+0x82>
			{
				break;
 8006342:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800634c:	e003      	b.n	8006356 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006358:	2b06      	cmp	r3, #6
 800635a:	d901      	bls.n	8006360 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800635c:	2306      	movs	r3, #6
 800635e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006364:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800636a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	2200      	movs	r2, #0
 8006370:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	3304      	adds	r3, #4
 8006376:	4618      	mov	r0, r3
 8006378:	f7fe fec1 	bl	80050fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	3318      	adds	r3, #24
 8006380:	4618      	mov	r0, r3
 8006382:	f7fe febc 	bl	80050fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800638a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	f1c3 0207 	rsb	r2, r3, #7
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800639a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800639c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639e:	2200      	movs	r2, #0
 80063a0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	68f9      	ldr	r1, [r7, #12]
 80063ae:	69b8      	ldr	r0, [r7, #24]
 80063b0:	f000 fef6 	bl	80071a0 <pxPortInitialiseStack>
 80063b4:	4602      	mov	r2, r0
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d002      	beq.n	80063c6 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063c6:	bf00      	nop
 80063c8:	3720      	adds	r7, #32
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
	...

080063d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063d8:	f001 f808 	bl	80073ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063dc:	4b2a      	ldr	r3, [pc, #168]	; (8006488 <prvAddNewTaskToReadyList+0xb8>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3301      	adds	r3, #1
 80063e2:	4a29      	ldr	r2, [pc, #164]	; (8006488 <prvAddNewTaskToReadyList+0xb8>)
 80063e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063e6:	4b29      	ldr	r3, [pc, #164]	; (800648c <prvAddNewTaskToReadyList+0xbc>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d109      	bne.n	8006402 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063ee:	4a27      	ldr	r2, [pc, #156]	; (800648c <prvAddNewTaskToReadyList+0xbc>)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063f4:	4b24      	ldr	r3, [pc, #144]	; (8006488 <prvAddNewTaskToReadyList+0xb8>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d110      	bne.n	800641e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063fc:	f000 fbe2 	bl	8006bc4 <prvInitialiseTaskLists>
 8006400:	e00d      	b.n	800641e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006402:	4b23      	ldr	r3, [pc, #140]	; (8006490 <prvAddNewTaskToReadyList+0xc0>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d109      	bne.n	800641e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800640a:	4b20      	ldr	r3, [pc, #128]	; (800648c <prvAddNewTaskToReadyList+0xbc>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	429a      	cmp	r2, r3
 8006416:	d802      	bhi.n	800641e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006418:	4a1c      	ldr	r2, [pc, #112]	; (800648c <prvAddNewTaskToReadyList+0xbc>)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800641e:	4b1d      	ldr	r3, [pc, #116]	; (8006494 <prvAddNewTaskToReadyList+0xc4>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3301      	adds	r3, #1
 8006424:	4a1b      	ldr	r2, [pc, #108]	; (8006494 <prvAddNewTaskToReadyList+0xc4>)
 8006426:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	2201      	movs	r2, #1
 800642e:	409a      	lsls	r2, r3
 8006430:	4b19      	ldr	r3, [pc, #100]	; (8006498 <prvAddNewTaskToReadyList+0xc8>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4313      	orrs	r3, r2
 8006436:	4a18      	ldr	r2, [pc, #96]	; (8006498 <prvAddNewTaskToReadyList+0xc8>)
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643e:	4613      	mov	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4a15      	ldr	r2, [pc, #84]	; (800649c <prvAddNewTaskToReadyList+0xcc>)
 8006448:	441a      	add	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	3304      	adds	r3, #4
 800644e:	4619      	mov	r1, r3
 8006450:	4610      	mov	r0, r2
 8006452:	f7fe fe61 	bl	8005118 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006456:	f000 fff7 	bl	8007448 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800645a:	4b0d      	ldr	r3, [pc, #52]	; (8006490 <prvAddNewTaskToReadyList+0xc0>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00e      	beq.n	8006480 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006462:	4b0a      	ldr	r3, [pc, #40]	; (800648c <prvAddNewTaskToReadyList+0xbc>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646c:	429a      	cmp	r2, r3
 800646e:	d207      	bcs.n	8006480 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006470:	4b0b      	ldr	r3, [pc, #44]	; (80064a0 <prvAddNewTaskToReadyList+0xd0>)
 8006472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006480:	bf00      	nop
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	200005b0 	.word	0x200005b0
 800648c:	200004b0 	.word	0x200004b0
 8006490:	200005bc 	.word	0x200005bc
 8006494:	200005cc 	.word	0x200005cc
 8006498:	200005b8 	.word	0x200005b8
 800649c:	200004b4 	.word	0x200004b4
 80064a0:	e000ed04 	.word	0xe000ed04

080064a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064ac:	2300      	movs	r3, #0
 80064ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d016      	beq.n	80064e4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064b6:	4b13      	ldr	r3, [pc, #76]	; (8006504 <vTaskDelay+0x60>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d009      	beq.n	80064d2 <vTaskDelay+0x2e>
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	60bb      	str	r3, [r7, #8]
 80064d0:	e7fe      	b.n	80064d0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80064d2:	f000 f879 	bl	80065c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064d6:	2100      	movs	r1, #0
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fdfb 	bl	80070d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064de:	f000 f881 	bl	80065e4 <xTaskResumeAll>
 80064e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d107      	bne.n	80064fa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80064ea:	4b07      	ldr	r3, [pc, #28]	; (8006508 <vTaskDelay+0x64>)
 80064ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064fa:	bf00      	nop
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	200005d8 	.word	0x200005d8
 8006508:	e000ed04 	.word	0xe000ed04

0800650c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b08a      	sub	sp, #40	; 0x28
 8006510:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006512:	2300      	movs	r3, #0
 8006514:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006516:	2300      	movs	r3, #0
 8006518:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800651a:	463a      	mov	r2, r7
 800651c:	1d39      	adds	r1, r7, #4
 800651e:	f107 0308 	add.w	r3, r7, #8
 8006522:	4618      	mov	r0, r3
 8006524:	f7fa f84c 	bl	80005c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	9202      	str	r2, [sp, #8]
 8006530:	9301      	str	r3, [sp, #4]
 8006532:	2300      	movs	r3, #0
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	2300      	movs	r3, #0
 8006538:	460a      	mov	r2, r1
 800653a:	491d      	ldr	r1, [pc, #116]	; (80065b0 <vTaskStartScheduler+0xa4>)
 800653c:	481d      	ldr	r0, [pc, #116]	; (80065b4 <vTaskStartScheduler+0xa8>)
 800653e:	f7ff fe21 	bl	8006184 <xTaskCreateStatic>
 8006542:	4602      	mov	r2, r0
 8006544:	4b1c      	ldr	r3, [pc, #112]	; (80065b8 <vTaskStartScheduler+0xac>)
 8006546:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006548:	4b1b      	ldr	r3, [pc, #108]	; (80065b8 <vTaskStartScheduler+0xac>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006550:	2301      	movs	r3, #1
 8006552:	617b      	str	r3, [r7, #20]
 8006554:	e001      	b.n	800655a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006556:	2300      	movs	r3, #0
 8006558:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d115      	bne.n	800658c <vTaskStartScheduler+0x80>
 8006560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006572:	4b12      	ldr	r3, [pc, #72]	; (80065bc <vTaskStartScheduler+0xb0>)
 8006574:	f04f 32ff 	mov.w	r2, #4294967295
 8006578:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800657a:	4b11      	ldr	r3, [pc, #68]	; (80065c0 <vTaskStartScheduler+0xb4>)
 800657c:	2201      	movs	r2, #1
 800657e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006580:	4b10      	ldr	r3, [pc, #64]	; (80065c4 <vTaskStartScheduler+0xb8>)
 8006582:	2200      	movs	r2, #0
 8006584:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006586:	f000 fe93 	bl	80072b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800658a:	e00d      	b.n	80065a8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006592:	d109      	bne.n	80065a8 <vTaskStartScheduler+0x9c>
 8006594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	60fb      	str	r3, [r7, #12]
 80065a6:	e7fe      	b.n	80065a6 <vTaskStartScheduler+0x9a>
}
 80065a8:	bf00      	nop
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	08018f60 	.word	0x08018f60
 80065b4:	08006b95 	.word	0x08006b95
 80065b8:	200005d4 	.word	0x200005d4
 80065bc:	200005d0 	.word	0x200005d0
 80065c0:	200005bc 	.word	0x200005bc
 80065c4:	200005b4 	.word	0x200005b4

080065c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065c8:	b480      	push	{r7}
 80065ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80065cc:	4b04      	ldr	r3, [pc, #16]	; (80065e0 <vTaskSuspendAll+0x18>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3301      	adds	r3, #1
 80065d2:	4a03      	ldr	r2, [pc, #12]	; (80065e0 <vTaskSuspendAll+0x18>)
 80065d4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80065d6:	bf00      	nop
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	200005d8 	.word	0x200005d8

080065e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065f2:	4b41      	ldr	r3, [pc, #260]	; (80066f8 <xTaskResumeAll+0x114>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d109      	bne.n	800660e <xTaskResumeAll+0x2a>
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	603b      	str	r3, [r7, #0]
 800660c:	e7fe      	b.n	800660c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800660e:	f000 feed 	bl	80073ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006612:	4b39      	ldr	r3, [pc, #228]	; (80066f8 <xTaskResumeAll+0x114>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3b01      	subs	r3, #1
 8006618:	4a37      	ldr	r2, [pc, #220]	; (80066f8 <xTaskResumeAll+0x114>)
 800661a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800661c:	4b36      	ldr	r3, [pc, #216]	; (80066f8 <xTaskResumeAll+0x114>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d161      	bne.n	80066e8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006624:	4b35      	ldr	r3, [pc, #212]	; (80066fc <xTaskResumeAll+0x118>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d05d      	beq.n	80066e8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800662c:	e02e      	b.n	800668c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800662e:	4b34      	ldr	r3, [pc, #208]	; (8006700 <xTaskResumeAll+0x11c>)
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3318      	adds	r3, #24
 800663a:	4618      	mov	r0, r3
 800663c:	f7fe fdc9 	bl	80051d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	3304      	adds	r3, #4
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe fdc4 	bl	80051d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664e:	2201      	movs	r2, #1
 8006650:	409a      	lsls	r2, r3
 8006652:	4b2c      	ldr	r3, [pc, #176]	; (8006704 <xTaskResumeAll+0x120>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4313      	orrs	r3, r2
 8006658:	4a2a      	ldr	r2, [pc, #168]	; (8006704 <xTaskResumeAll+0x120>)
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006660:	4613      	mov	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4a27      	ldr	r2, [pc, #156]	; (8006708 <xTaskResumeAll+0x124>)
 800666a:	441a      	add	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	3304      	adds	r3, #4
 8006670:	4619      	mov	r1, r3
 8006672:	4610      	mov	r0, r2
 8006674:	f7fe fd50 	bl	8005118 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667c:	4b23      	ldr	r3, [pc, #140]	; (800670c <xTaskResumeAll+0x128>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006682:	429a      	cmp	r2, r3
 8006684:	d302      	bcc.n	800668c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006686:	4b22      	ldr	r3, [pc, #136]	; (8006710 <xTaskResumeAll+0x12c>)
 8006688:	2201      	movs	r2, #1
 800668a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800668c:	4b1c      	ldr	r3, [pc, #112]	; (8006700 <xTaskResumeAll+0x11c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1cc      	bne.n	800662e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800669a:	f000 fb2d 	bl	8006cf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800669e:	4b1d      	ldr	r3, [pc, #116]	; (8006714 <xTaskResumeAll+0x130>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d010      	beq.n	80066cc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066aa:	f000 f859 	bl	8006760 <xTaskIncrementTick>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d002      	beq.n	80066ba <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80066b4:	4b16      	ldr	r3, [pc, #88]	; (8006710 <xTaskResumeAll+0x12c>)
 80066b6:	2201      	movs	r2, #1
 80066b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3b01      	subs	r3, #1
 80066be:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1f1      	bne.n	80066aa <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80066c6:	4b13      	ldr	r3, [pc, #76]	; (8006714 <xTaskResumeAll+0x130>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066cc:	4b10      	ldr	r3, [pc, #64]	; (8006710 <xTaskResumeAll+0x12c>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d009      	beq.n	80066e8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066d4:	2301      	movs	r3, #1
 80066d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066d8:	4b0f      	ldr	r3, [pc, #60]	; (8006718 <xTaskResumeAll+0x134>)
 80066da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066e8:	f000 feae 	bl	8007448 <vPortExitCritical>

	return xAlreadyYielded;
 80066ec:	68bb      	ldr	r3, [r7, #8]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	200005d8 	.word	0x200005d8
 80066fc:	200005b0 	.word	0x200005b0
 8006700:	20000570 	.word	0x20000570
 8006704:	200005b8 	.word	0x200005b8
 8006708:	200004b4 	.word	0x200004b4
 800670c:	200004b0 	.word	0x200004b0
 8006710:	200005c4 	.word	0x200005c4
 8006714:	200005c0 	.word	0x200005c0
 8006718:	e000ed04 	.word	0xe000ed04

0800671c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006722:	4b05      	ldr	r3, [pc, #20]	; (8006738 <xTaskGetTickCount+0x1c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006728:	687b      	ldr	r3, [r7, #4]
}
 800672a:	4618      	mov	r0, r3
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	200005b4 	.word	0x200005b4

0800673c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006742:	f000 ff2f 	bl	80075a4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006746:	2300      	movs	r3, #0
 8006748:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800674a:	4b04      	ldr	r3, [pc, #16]	; (800675c <xTaskGetTickCountFromISR+0x20>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006750:	683b      	ldr	r3, [r7, #0]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	200005b4 	.word	0x200005b4

08006760 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006766:	2300      	movs	r3, #0
 8006768:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800676a:	4b4e      	ldr	r3, [pc, #312]	; (80068a4 <xTaskIncrementTick+0x144>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	f040 8087 	bne.w	8006882 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006774:	4b4c      	ldr	r3, [pc, #304]	; (80068a8 <xTaskIncrementTick+0x148>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3301      	adds	r3, #1
 800677a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800677c:	4a4a      	ldr	r2, [pc, #296]	; (80068a8 <xTaskIncrementTick+0x148>)
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d11f      	bne.n	80067c8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006788:	4b48      	ldr	r3, [pc, #288]	; (80068ac <xTaskIncrementTick+0x14c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d009      	beq.n	80067a6 <xTaskIncrementTick+0x46>
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	603b      	str	r3, [r7, #0]
 80067a4:	e7fe      	b.n	80067a4 <xTaskIncrementTick+0x44>
 80067a6:	4b41      	ldr	r3, [pc, #260]	; (80068ac <xTaskIncrementTick+0x14c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60fb      	str	r3, [r7, #12]
 80067ac:	4b40      	ldr	r3, [pc, #256]	; (80068b0 <xTaskIncrementTick+0x150>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a3e      	ldr	r2, [pc, #248]	; (80068ac <xTaskIncrementTick+0x14c>)
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	4a3e      	ldr	r2, [pc, #248]	; (80068b0 <xTaskIncrementTick+0x150>)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6013      	str	r3, [r2, #0]
 80067ba:	4b3e      	ldr	r3, [pc, #248]	; (80068b4 <xTaskIncrementTick+0x154>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3301      	adds	r3, #1
 80067c0:	4a3c      	ldr	r2, [pc, #240]	; (80068b4 <xTaskIncrementTick+0x154>)
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	f000 fa98 	bl	8006cf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067c8:	4b3b      	ldr	r3, [pc, #236]	; (80068b8 <xTaskIncrementTick+0x158>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d348      	bcc.n	8006864 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067d2:	4b36      	ldr	r3, [pc, #216]	; (80068ac <xTaskIncrementTick+0x14c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d104      	bne.n	80067e6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067dc:	4b36      	ldr	r3, [pc, #216]	; (80068b8 <xTaskIncrementTick+0x158>)
 80067de:	f04f 32ff 	mov.w	r2, #4294967295
 80067e2:	601a      	str	r2, [r3, #0]
					break;
 80067e4:	e03e      	b.n	8006864 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067e6:	4b31      	ldr	r3, [pc, #196]	; (80068ac <xTaskIncrementTick+0x14c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d203      	bcs.n	8006806 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067fe:	4a2e      	ldr	r2, [pc, #184]	; (80068b8 <xTaskIncrementTick+0x158>)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006804:	e02e      	b.n	8006864 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	3304      	adds	r3, #4
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe fce1 	bl	80051d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006814:	2b00      	cmp	r3, #0
 8006816:	d004      	beq.n	8006822 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	3318      	adds	r3, #24
 800681c:	4618      	mov	r0, r3
 800681e:	f7fe fcd8 	bl	80051d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006826:	2201      	movs	r2, #1
 8006828:	409a      	lsls	r2, r3
 800682a:	4b24      	ldr	r3, [pc, #144]	; (80068bc <xTaskIncrementTick+0x15c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4313      	orrs	r3, r2
 8006830:	4a22      	ldr	r2, [pc, #136]	; (80068bc <xTaskIncrementTick+0x15c>)
 8006832:	6013      	str	r3, [r2, #0]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006838:	4613      	mov	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4a1f      	ldr	r2, [pc, #124]	; (80068c0 <xTaskIncrementTick+0x160>)
 8006842:	441a      	add	r2, r3
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	3304      	adds	r3, #4
 8006848:	4619      	mov	r1, r3
 800684a:	4610      	mov	r0, r2
 800684c:	f7fe fc64 	bl	8005118 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006854:	4b1b      	ldr	r3, [pc, #108]	; (80068c4 <xTaskIncrementTick+0x164>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685a:	429a      	cmp	r2, r3
 800685c:	d3b9      	bcc.n	80067d2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800685e:	2301      	movs	r3, #1
 8006860:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006862:	e7b6      	b.n	80067d2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006864:	4b17      	ldr	r3, [pc, #92]	; (80068c4 <xTaskIncrementTick+0x164>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800686a:	4915      	ldr	r1, [pc, #84]	; (80068c0 <xTaskIncrementTick+0x160>)
 800686c:	4613      	mov	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	440b      	add	r3, r1
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d907      	bls.n	800688c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800687c:	2301      	movs	r3, #1
 800687e:	617b      	str	r3, [r7, #20]
 8006880:	e004      	b.n	800688c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006882:	4b11      	ldr	r3, [pc, #68]	; (80068c8 <xTaskIncrementTick+0x168>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3301      	adds	r3, #1
 8006888:	4a0f      	ldr	r2, [pc, #60]	; (80068c8 <xTaskIncrementTick+0x168>)
 800688a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800688c:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <xTaskIncrementTick+0x16c>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8006894:	2301      	movs	r3, #1
 8006896:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006898:	697b      	ldr	r3, [r7, #20]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3718      	adds	r7, #24
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	200005d8 	.word	0x200005d8
 80068a8:	200005b4 	.word	0x200005b4
 80068ac:	20000568 	.word	0x20000568
 80068b0:	2000056c 	.word	0x2000056c
 80068b4:	200005c8 	.word	0x200005c8
 80068b8:	200005d0 	.word	0x200005d0
 80068bc:	200005b8 	.word	0x200005b8
 80068c0:	200004b4 	.word	0x200004b4
 80068c4:	200004b0 	.word	0x200004b0
 80068c8:	200005c0 	.word	0x200005c0
 80068cc:	200005c4 	.word	0x200005c4

080068d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068d0:	b480      	push	{r7}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068d6:	4b26      	ldr	r3, [pc, #152]	; (8006970 <vTaskSwitchContext+0xa0>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068de:	4b25      	ldr	r3, [pc, #148]	; (8006974 <vTaskSwitchContext+0xa4>)
 80068e0:	2201      	movs	r2, #1
 80068e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068e4:	e03e      	b.n	8006964 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80068e6:	4b23      	ldr	r3, [pc, #140]	; (8006974 <vTaskSwitchContext+0xa4>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068ec:	4b22      	ldr	r3, [pc, #136]	; (8006978 <vTaskSwitchContext+0xa8>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	fab3 f383 	clz	r3, r3
 80068f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80068fa:	7afb      	ldrb	r3, [r7, #11]
 80068fc:	f1c3 031f 	rsb	r3, r3, #31
 8006900:	617b      	str	r3, [r7, #20]
 8006902:	491e      	ldr	r1, [pc, #120]	; (800697c <vTaskSwitchContext+0xac>)
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	4613      	mov	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	440b      	add	r3, r1
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d109      	bne.n	800692a <vTaskSwitchContext+0x5a>
	__asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	607b      	str	r3, [r7, #4]
 8006928:	e7fe      	b.n	8006928 <vTaskSwitchContext+0x58>
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	4613      	mov	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4a11      	ldr	r2, [pc, #68]	; (800697c <vTaskSwitchContext+0xac>)
 8006936:	4413      	add	r3, r2
 8006938:	613b      	str	r3, [r7, #16]
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	605a      	str	r2, [r3, #4]
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	3308      	adds	r3, #8
 800694c:	429a      	cmp	r2, r3
 800694e:	d104      	bne.n	800695a <vTaskSwitchContext+0x8a>
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	605a      	str	r2, [r3, #4]
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	4a07      	ldr	r2, [pc, #28]	; (8006980 <vTaskSwitchContext+0xb0>)
 8006962:	6013      	str	r3, [r2, #0]
}
 8006964:	bf00      	nop
 8006966:	371c      	adds	r7, #28
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	200005d8 	.word	0x200005d8
 8006974:	200005c4 	.word	0x200005c4
 8006978:	200005b8 	.word	0x200005b8
 800697c:	200004b4 	.word	0x200004b4
 8006980:	200004b0 	.word	0x200004b0

08006984 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d109      	bne.n	80069a8 <vTaskPlaceOnEventList+0x24>
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	e7fe      	b.n	80069a6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069a8:	4b07      	ldr	r3, [pc, #28]	; (80069c8 <vTaskPlaceOnEventList+0x44>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3318      	adds	r3, #24
 80069ae:	4619      	mov	r1, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7fe fbd5 	bl	8005160 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069b6:	2101      	movs	r1, #1
 80069b8:	6838      	ldr	r0, [r7, #0]
 80069ba:	f000 fb8b 	bl	80070d4 <prvAddCurrentTaskToDelayedList>
}
 80069be:	bf00      	nop
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	200004b0 	.word	0x200004b0

080069cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d109      	bne.n	80069f6 <xTaskRemoveFromEventList+0x2a>
 80069e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	60fb      	str	r3, [r7, #12]
 80069f4:	e7fe      	b.n	80069f4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	3318      	adds	r3, #24
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7fe fbe9 	bl	80051d2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a00:	4b1d      	ldr	r3, [pc, #116]	; (8006a78 <xTaskRemoveFromEventList+0xac>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d11c      	bne.n	8006a42 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fe fbe0 	bl	80051d2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a16:	2201      	movs	r2, #1
 8006a18:	409a      	lsls	r2, r3
 8006a1a:	4b18      	ldr	r3, [pc, #96]	; (8006a7c <xTaskRemoveFromEventList+0xb0>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	4a16      	ldr	r2, [pc, #88]	; (8006a7c <xTaskRemoveFromEventList+0xb0>)
 8006a22:	6013      	str	r3, [r2, #0]
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a28:	4613      	mov	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4a13      	ldr	r2, [pc, #76]	; (8006a80 <xTaskRemoveFromEventList+0xb4>)
 8006a32:	441a      	add	r2, r3
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	3304      	adds	r3, #4
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	f7fe fb6c 	bl	8005118 <vListInsertEnd>
 8006a40:	e005      	b.n	8006a4e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	3318      	adds	r3, #24
 8006a46:	4619      	mov	r1, r3
 8006a48:	480e      	ldr	r0, [pc, #56]	; (8006a84 <xTaskRemoveFromEventList+0xb8>)
 8006a4a:	f7fe fb65 	bl	8005118 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a52:	4b0d      	ldr	r3, [pc, #52]	; (8006a88 <xTaskRemoveFromEventList+0xbc>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d905      	bls.n	8006a68 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a60:	4b0a      	ldr	r3, [pc, #40]	; (8006a8c <xTaskRemoveFromEventList+0xc0>)
 8006a62:	2201      	movs	r2, #1
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	e001      	b.n	8006a6c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a6c:	697b      	ldr	r3, [r7, #20]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3718      	adds	r7, #24
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	200005d8 	.word	0x200005d8
 8006a7c:	200005b8 	.word	0x200005b8
 8006a80:	200004b4 	.word	0x200004b4
 8006a84:	20000570 	.word	0x20000570
 8006a88:	200004b0 	.word	0x200004b0
 8006a8c:	200005c4 	.word	0x200005c4

08006a90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a98:	4b06      	ldr	r3, [pc, #24]	; (8006ab4 <vTaskInternalSetTimeOutState+0x24>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006aa0:	4b05      	ldr	r3, [pc, #20]	; (8006ab8 <vTaskInternalSetTimeOutState+0x28>)
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	605a      	str	r2, [r3, #4]
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	200005c8 	.word	0x200005c8
 8006ab8:	200005b4 	.word	0x200005b4

08006abc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b088      	sub	sp, #32
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d109      	bne.n	8006ae0 <xTaskCheckForTimeOut+0x24>
 8006acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	613b      	str	r3, [r7, #16]
 8006ade:	e7fe      	b.n	8006ade <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d109      	bne.n	8006afa <xTaskCheckForTimeOut+0x3e>
 8006ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	e7fe      	b.n	8006af8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006afa:	f000 fc77 	bl	80073ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006afe:	4b1d      	ldr	r3, [pc, #116]	; (8006b74 <xTaskCheckForTimeOut+0xb8>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b16:	d102      	bne.n	8006b1e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	61fb      	str	r3, [r7, #28]
 8006b1c:	e023      	b.n	8006b66 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	4b15      	ldr	r3, [pc, #84]	; (8006b78 <xTaskCheckForTimeOut+0xbc>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d007      	beq.n	8006b3a <xTaskCheckForTimeOut+0x7e>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d302      	bcc.n	8006b3a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b34:	2301      	movs	r3, #1
 8006b36:	61fb      	str	r3, [r7, #28]
 8006b38:	e015      	b.n	8006b66 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d20b      	bcs.n	8006b5c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	1ad2      	subs	r2, r2, r3
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7ff ff9d 	bl	8006a90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b56:	2300      	movs	r3, #0
 8006b58:	61fb      	str	r3, [r7, #28]
 8006b5a:	e004      	b.n	8006b66 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b62:	2301      	movs	r3, #1
 8006b64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b66:	f000 fc6f 	bl	8007448 <vPortExitCritical>

	return xReturn;
 8006b6a:	69fb      	ldr	r3, [r7, #28]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3720      	adds	r7, #32
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	200005b4 	.word	0x200005b4
 8006b78:	200005c8 	.word	0x200005c8

08006b7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b80:	4b03      	ldr	r3, [pc, #12]	; (8006b90 <vTaskMissedYield+0x14>)
 8006b82:	2201      	movs	r2, #1
 8006b84:	601a      	str	r2, [r3, #0]
}
 8006b86:	bf00      	nop
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	200005c4 	.word	0x200005c4

08006b94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b9c:	f000 f852 	bl	8006c44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ba0:	4b06      	ldr	r3, [pc, #24]	; (8006bbc <prvIdleTask+0x28>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d9f9      	bls.n	8006b9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ba8:	4b05      	ldr	r3, [pc, #20]	; (8006bc0 <prvIdleTask+0x2c>)
 8006baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bae:	601a      	str	r2, [r3, #0]
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bb8:	e7f0      	b.n	8006b9c <prvIdleTask+0x8>
 8006bba:	bf00      	nop
 8006bbc:	200004b4 	.word	0x200004b4
 8006bc0:	e000ed04 	.word	0xe000ed04

08006bc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bca:	2300      	movs	r3, #0
 8006bcc:	607b      	str	r3, [r7, #4]
 8006bce:	e00c      	b.n	8006bea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4a12      	ldr	r2, [pc, #72]	; (8006c24 <prvInitialiseTaskLists+0x60>)
 8006bdc:	4413      	add	r3, r2
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fe fa6d 	bl	80050be <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	3301      	adds	r3, #1
 8006be8:	607b      	str	r3, [r7, #4]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b06      	cmp	r3, #6
 8006bee:	d9ef      	bls.n	8006bd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006bf0:	480d      	ldr	r0, [pc, #52]	; (8006c28 <prvInitialiseTaskLists+0x64>)
 8006bf2:	f7fe fa64 	bl	80050be <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006bf6:	480d      	ldr	r0, [pc, #52]	; (8006c2c <prvInitialiseTaskLists+0x68>)
 8006bf8:	f7fe fa61 	bl	80050be <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006bfc:	480c      	ldr	r0, [pc, #48]	; (8006c30 <prvInitialiseTaskLists+0x6c>)
 8006bfe:	f7fe fa5e 	bl	80050be <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c02:	480c      	ldr	r0, [pc, #48]	; (8006c34 <prvInitialiseTaskLists+0x70>)
 8006c04:	f7fe fa5b 	bl	80050be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c08:	480b      	ldr	r0, [pc, #44]	; (8006c38 <prvInitialiseTaskLists+0x74>)
 8006c0a:	f7fe fa58 	bl	80050be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c0e:	4b0b      	ldr	r3, [pc, #44]	; (8006c3c <prvInitialiseTaskLists+0x78>)
 8006c10:	4a05      	ldr	r2, [pc, #20]	; (8006c28 <prvInitialiseTaskLists+0x64>)
 8006c12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c14:	4b0a      	ldr	r3, [pc, #40]	; (8006c40 <prvInitialiseTaskLists+0x7c>)
 8006c16:	4a05      	ldr	r2, [pc, #20]	; (8006c2c <prvInitialiseTaskLists+0x68>)
 8006c18:	601a      	str	r2, [r3, #0]
}
 8006c1a:	bf00      	nop
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	200004b4 	.word	0x200004b4
 8006c28:	20000540 	.word	0x20000540
 8006c2c:	20000554 	.word	0x20000554
 8006c30:	20000570 	.word	0x20000570
 8006c34:	20000584 	.word	0x20000584
 8006c38:	2000059c 	.word	0x2000059c
 8006c3c:	20000568 	.word	0x20000568
 8006c40:	2000056c 	.word	0x2000056c

08006c44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c4a:	e019      	b.n	8006c80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c4c:	f000 fbce 	bl	80073ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c50:	4b0f      	ldr	r3, [pc, #60]	; (8006c90 <prvCheckTasksWaitingTermination+0x4c>)
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe fab8 	bl	80051d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c62:	4b0c      	ldr	r3, [pc, #48]	; (8006c94 <prvCheckTasksWaitingTermination+0x50>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3b01      	subs	r3, #1
 8006c68:	4a0a      	ldr	r2, [pc, #40]	; (8006c94 <prvCheckTasksWaitingTermination+0x50>)
 8006c6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c6c:	4b0a      	ldr	r3, [pc, #40]	; (8006c98 <prvCheckTasksWaitingTermination+0x54>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	4a09      	ldr	r2, [pc, #36]	; (8006c98 <prvCheckTasksWaitingTermination+0x54>)
 8006c74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c76:	f000 fbe7 	bl	8007448 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f80e 	bl	8006c9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c80:	4b05      	ldr	r3, [pc, #20]	; (8006c98 <prvCheckTasksWaitingTermination+0x54>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1e1      	bne.n	8006c4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c88:	bf00      	nop
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	20000584 	.word	0x20000584
 8006c94:	200005b0 	.word	0x200005b0
 8006c98:	20000598 	.word	0x20000598

08006c9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d108      	bne.n	8006cc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 fd76 	bl	80077a4 <vPortFree>
				vPortFree( pxTCB );
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 fd73 	bl	80077a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006cbe:	e017      	b.n	8006cf0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d103      	bne.n	8006cd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fd6a 	bl	80077a4 <vPortFree>
	}
 8006cd0:	e00e      	b.n	8006cf0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d009      	beq.n	8006cf0 <prvDeleteTCB+0x54>
 8006cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce0:	f383 8811 	msr	BASEPRI, r3
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	e7fe      	b.n	8006cee <prvDeleteTCB+0x52>
	}
 8006cf0:	bf00      	nop
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cfe:	4b0c      	ldr	r3, [pc, #48]	; (8006d30 <prvResetNextTaskUnblockTime+0x38>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d104      	bne.n	8006d12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d08:	4b0a      	ldr	r3, [pc, #40]	; (8006d34 <prvResetNextTaskUnblockTime+0x3c>)
 8006d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d10:	e008      	b.n	8006d24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d12:	4b07      	ldr	r3, [pc, #28]	; (8006d30 <prvResetNextTaskUnblockTime+0x38>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	4a04      	ldr	r2, [pc, #16]	; (8006d34 <prvResetNextTaskUnblockTime+0x3c>)
 8006d22:	6013      	str	r3, [r2, #0]
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	20000568 	.word	0x20000568
 8006d34:	200005d0 	.word	0x200005d0

08006d38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d3e:	4b0b      	ldr	r3, [pc, #44]	; (8006d6c <xTaskGetSchedulerState+0x34>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d102      	bne.n	8006d4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d46:	2301      	movs	r3, #1
 8006d48:	607b      	str	r3, [r7, #4]
 8006d4a:	e008      	b.n	8006d5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d4c:	4b08      	ldr	r3, [pc, #32]	; (8006d70 <xTaskGetSchedulerState+0x38>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d102      	bne.n	8006d5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d54:	2302      	movs	r3, #2
 8006d56:	607b      	str	r3, [r7, #4]
 8006d58:	e001      	b.n	8006d5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d5e:	687b      	ldr	r3, [r7, #4]
	}
 8006d60:	4618      	mov	r0, r3
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	200005bc 	.word	0x200005bc
 8006d70:	200005d8 	.word	0x200005d8

08006d74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006d80:	2300      	movs	r3, #0
 8006d82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d069      	beq.n	8006e5e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d8e:	4b36      	ldr	r3, [pc, #216]	; (8006e68 <xTaskPriorityInherit+0xf4>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d259      	bcs.n	8006e4c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	db06      	blt.n	8006dae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006da0:	4b31      	ldr	r3, [pc, #196]	; (8006e68 <xTaskPriorityInherit+0xf4>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da6:	f1c3 0207 	rsb	r2, r3, #7
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	6959      	ldr	r1, [r3, #20]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db6:	4613      	mov	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4a2b      	ldr	r2, [pc, #172]	; (8006e6c <xTaskPriorityInherit+0xf8>)
 8006dc0:	4413      	add	r3, r2
 8006dc2:	4299      	cmp	r1, r3
 8006dc4:	d13a      	bne.n	8006e3c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	3304      	adds	r3, #4
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fe fa01 	bl	80051d2 <uxListRemove>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d115      	bne.n	8006e02 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dda:	4924      	ldr	r1, [pc, #144]	; (8006e6c <xTaskPriorityInherit+0xf8>)
 8006ddc:	4613      	mov	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	440b      	add	r3, r1
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10a      	bne.n	8006e02 <xTaskPriorityInherit+0x8e>
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df0:	2201      	movs	r2, #1
 8006df2:	fa02 f303 	lsl.w	r3, r2, r3
 8006df6:	43da      	mvns	r2, r3
 8006df8:	4b1d      	ldr	r3, [pc, #116]	; (8006e70 <xTaskPriorityInherit+0xfc>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	4a1c      	ldr	r2, [pc, #112]	; (8006e70 <xTaskPriorityInherit+0xfc>)
 8006e00:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e02:	4b19      	ldr	r3, [pc, #100]	; (8006e68 <xTaskPriorityInherit+0xf4>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e10:	2201      	movs	r2, #1
 8006e12:	409a      	lsls	r2, r3
 8006e14:	4b16      	ldr	r3, [pc, #88]	; (8006e70 <xTaskPriorityInherit+0xfc>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	4a15      	ldr	r2, [pc, #84]	; (8006e70 <xTaskPriorityInherit+0xfc>)
 8006e1c:	6013      	str	r3, [r2, #0]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e22:	4613      	mov	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4a10      	ldr	r2, [pc, #64]	; (8006e6c <xTaskPriorityInherit+0xf8>)
 8006e2c:	441a      	add	r2, r3
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	3304      	adds	r3, #4
 8006e32:	4619      	mov	r1, r3
 8006e34:	4610      	mov	r0, r2
 8006e36:	f7fe f96f 	bl	8005118 <vListInsertEnd>
 8006e3a:	e004      	b.n	8006e46 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e3c:	4b0a      	ldr	r3, [pc, #40]	; (8006e68 <xTaskPriorityInherit+0xf4>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006e46:	2301      	movs	r3, #1
 8006e48:	60fb      	str	r3, [r7, #12]
 8006e4a:	e008      	b.n	8006e5e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e50:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <xTaskPriorityInherit+0xf4>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d201      	bcs.n	8006e5e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
	}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	200004b0 	.word	0x200004b0
 8006e6c:	200004b4 	.word	0x200004b4
 8006e70:	200005b8 	.word	0x200005b8

08006e74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e80:	2300      	movs	r3, #0
 8006e82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d06c      	beq.n	8006f64 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e8a:	4b39      	ldr	r3, [pc, #228]	; (8006f70 <xTaskPriorityDisinherit+0xfc>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d009      	beq.n	8006ea8 <xTaskPriorityDisinherit+0x34>
 8006e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	e7fe      	b.n	8006ea6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d109      	bne.n	8006ec4 <xTaskPriorityDisinherit+0x50>
 8006eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	60bb      	str	r3, [r7, #8]
 8006ec2:	e7fe      	b.n	8006ec2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ec8:	1e5a      	subs	r2, r3, #1
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d044      	beq.n	8006f64 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d140      	bne.n	8006f64 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fe f973 	bl	80051d2 <uxListRemove>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d115      	bne.n	8006f1e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef6:	491f      	ldr	r1, [pc, #124]	; (8006f74 <xTaskPriorityDisinherit+0x100>)
 8006ef8:	4613      	mov	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	440b      	add	r3, r1
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10a      	bne.n	8006f1e <xTaskPriorityDisinherit+0xaa>
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f12:	43da      	mvns	r2, r3
 8006f14:	4b18      	ldr	r3, [pc, #96]	; (8006f78 <xTaskPriorityDisinherit+0x104>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4013      	ands	r3, r2
 8006f1a:	4a17      	ldr	r2, [pc, #92]	; (8006f78 <xTaskPriorityDisinherit+0x104>)
 8006f1c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2a:	f1c3 0207 	rsb	r2, r3, #7
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f36:	2201      	movs	r2, #1
 8006f38:	409a      	lsls	r2, r3
 8006f3a:	4b0f      	ldr	r3, [pc, #60]	; (8006f78 <xTaskPriorityDisinherit+0x104>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	4a0d      	ldr	r2, [pc, #52]	; (8006f78 <xTaskPriorityDisinherit+0x104>)
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f48:	4613      	mov	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4413      	add	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4a08      	ldr	r2, [pc, #32]	; (8006f74 <xTaskPriorityDisinherit+0x100>)
 8006f52:	441a      	add	r2, r3
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	3304      	adds	r3, #4
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	f7fe f8dc 	bl	8005118 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f60:	2301      	movs	r3, #1
 8006f62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f64:	697b      	ldr	r3, [r7, #20]
	}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	200004b0 	.word	0x200004b0
 8006f74:	200004b4 	.word	0x200004b4
 8006f78:	200005b8 	.word	0x200005b8

08006f7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f000 8081 	beq.w	8007098 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d109      	bne.n	8006fb2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8006f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	60fb      	str	r3, [r7, #12]
 8006fb0:	e7fe      	b.n	8006fb0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d902      	bls.n	8006fc2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	61fb      	str	r3, [r7, #28]
 8006fc0:	e002      	b.n	8006fc8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fcc:	69fa      	ldr	r2, [r7, #28]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d062      	beq.n	8007098 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d15d      	bne.n	8007098 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006fdc:	4b30      	ldr	r3, [pc, #192]	; (80070a0 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d109      	bne.n	8006ffa <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8006fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	60bb      	str	r3, [r7, #8]
 8006ff8:	e7fe      	b.n	8006ff8 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffe:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	69fa      	ldr	r2, [r7, #28]
 8007004:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	2b00      	cmp	r3, #0
 800700c:	db04      	blt.n	8007018 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	f1c3 0207 	rsb	r2, r3, #7
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	6959      	ldr	r1, [r3, #20]
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	4613      	mov	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4a1f      	ldr	r2, [pc, #124]	; (80070a4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007028:	4413      	add	r3, r2
 800702a:	4299      	cmp	r1, r3
 800702c:	d134      	bne.n	8007098 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	3304      	adds	r3, #4
 8007032:	4618      	mov	r0, r3
 8007034:	f7fe f8cd 	bl	80051d2 <uxListRemove>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d115      	bne.n	800706a <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007042:	4918      	ldr	r1, [pc, #96]	; (80070a4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007044:	4613      	mov	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	440b      	add	r3, r1
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10a      	bne.n	800706a <vTaskPriorityDisinheritAfterTimeout+0xee>
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007058:	2201      	movs	r2, #1
 800705a:	fa02 f303 	lsl.w	r3, r2, r3
 800705e:	43da      	mvns	r2, r3
 8007060:	4b11      	ldr	r3, [pc, #68]	; (80070a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4013      	ands	r3, r2
 8007066:	4a10      	ldr	r2, [pc, #64]	; (80070a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007068:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706e:	2201      	movs	r2, #1
 8007070:	409a      	lsls	r2, r3
 8007072:	4b0d      	ldr	r3, [pc, #52]	; (80070a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4313      	orrs	r3, r2
 8007078:	4a0b      	ldr	r2, [pc, #44]	; (80070a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800707a:	6013      	str	r3, [r2, #0]
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007080:	4613      	mov	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4a06      	ldr	r2, [pc, #24]	; (80070a4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800708a:	441a      	add	r2, r3
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	3304      	adds	r3, #4
 8007090:	4619      	mov	r1, r3
 8007092:	4610      	mov	r0, r2
 8007094:	f7fe f840 	bl	8005118 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007098:	bf00      	nop
 800709a:	3720      	adds	r7, #32
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	200004b0 	.word	0x200004b0
 80070a4:	200004b4 	.word	0x200004b4
 80070a8:	200005b8 	.word	0x200005b8

080070ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80070ac:	b480      	push	{r7}
 80070ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80070b0:	4b07      	ldr	r3, [pc, #28]	; (80070d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d004      	beq.n	80070c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80070b8:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070be:	3201      	adds	r2, #1
 80070c0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80070c2:	4b03      	ldr	r3, [pc, #12]	; (80070d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80070c4:	681b      	ldr	r3, [r3, #0]
	}
 80070c6:	4618      	mov	r0, r3
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	200004b0 	.word	0x200004b0

080070d4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070de:	4b29      	ldr	r3, [pc, #164]	; (8007184 <prvAddCurrentTaskToDelayedList+0xb0>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070e4:	4b28      	ldr	r3, [pc, #160]	; (8007188 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3304      	adds	r3, #4
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fe f871 	bl	80051d2 <uxListRemove>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10b      	bne.n	800710e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80070f6:	4b24      	ldr	r3, [pc, #144]	; (8007188 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fc:	2201      	movs	r2, #1
 80070fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007102:	43da      	mvns	r2, r3
 8007104:	4b21      	ldr	r3, [pc, #132]	; (800718c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4013      	ands	r3, r2
 800710a:	4a20      	ldr	r2, [pc, #128]	; (800718c <prvAddCurrentTaskToDelayedList+0xb8>)
 800710c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007114:	d10a      	bne.n	800712c <prvAddCurrentTaskToDelayedList+0x58>
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d007      	beq.n	800712c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800711c:	4b1a      	ldr	r3, [pc, #104]	; (8007188 <prvAddCurrentTaskToDelayedList+0xb4>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3304      	adds	r3, #4
 8007122:	4619      	mov	r1, r3
 8007124:	481a      	ldr	r0, [pc, #104]	; (8007190 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007126:	f7fd fff7 	bl	8005118 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800712a:	e026      	b.n	800717a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4413      	add	r3, r2
 8007132:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007134:	4b14      	ldr	r3, [pc, #80]	; (8007188 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	429a      	cmp	r2, r3
 8007142:	d209      	bcs.n	8007158 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007144:	4b13      	ldr	r3, [pc, #76]	; (8007194 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	4b0f      	ldr	r3, [pc, #60]	; (8007188 <prvAddCurrentTaskToDelayedList+0xb4>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	3304      	adds	r3, #4
 800714e:	4619      	mov	r1, r3
 8007150:	4610      	mov	r0, r2
 8007152:	f7fe f805 	bl	8005160 <vListInsert>
}
 8007156:	e010      	b.n	800717a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007158:	4b0f      	ldr	r3, [pc, #60]	; (8007198 <prvAddCurrentTaskToDelayedList+0xc4>)
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	4b0a      	ldr	r3, [pc, #40]	; (8007188 <prvAddCurrentTaskToDelayedList+0xb4>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	3304      	adds	r3, #4
 8007162:	4619      	mov	r1, r3
 8007164:	4610      	mov	r0, r2
 8007166:	f7fd fffb 	bl	8005160 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800716a:	4b0c      	ldr	r3, [pc, #48]	; (800719c <prvAddCurrentTaskToDelayedList+0xc8>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	429a      	cmp	r2, r3
 8007172:	d202      	bcs.n	800717a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007174:	4a09      	ldr	r2, [pc, #36]	; (800719c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	6013      	str	r3, [r2, #0]
}
 800717a:	bf00      	nop
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	200005b4 	.word	0x200005b4
 8007188:	200004b0 	.word	0x200004b0
 800718c:	200005b8 	.word	0x200005b8
 8007190:	2000059c 	.word	0x2000059c
 8007194:	2000056c 	.word	0x2000056c
 8007198:	20000568 	.word	0x20000568
 800719c:	200005d0 	.word	0x200005d0

080071a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	3b04      	subs	r3, #4
 80071b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80071b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	3b04      	subs	r3, #4
 80071be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	f023 0201 	bic.w	r2, r3, #1
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	3b04      	subs	r3, #4
 80071ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071d0:	4a0c      	ldr	r2, [pc, #48]	; (8007204 <pxPortInitialiseStack+0x64>)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	3b14      	subs	r3, #20
 80071da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3b04      	subs	r3, #4
 80071e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f06f 0202 	mvn.w	r2, #2
 80071ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3b20      	subs	r3, #32
 80071f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80071f6:	68fb      	ldr	r3, [r7, #12]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr
 8007204:	08007209 	.word	0x08007209

08007208 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007212:	4b11      	ldr	r3, [pc, #68]	; (8007258 <prvTaskExitError+0x50>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721a:	d009      	beq.n	8007230 <prvTaskExitError+0x28>
 800721c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007220:	f383 8811 	msr	BASEPRI, r3
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	e7fe      	b.n	800722e <prvTaskExitError+0x26>
 8007230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007242:	bf00      	nop
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d0fc      	beq.n	8007244 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800724a:	bf00      	nop
 800724c:	3714      	adds	r7, #20
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	2000000c 	.word	0x2000000c
 800725c:	00000000 	.word	0x00000000

08007260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007260:	4b07      	ldr	r3, [pc, #28]	; (8007280 <pxCurrentTCBConst2>)
 8007262:	6819      	ldr	r1, [r3, #0]
 8007264:	6808      	ldr	r0, [r1, #0]
 8007266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726a:	f380 8809 	msr	PSP, r0
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f04f 0000 	mov.w	r0, #0
 8007276:	f380 8811 	msr	BASEPRI, r0
 800727a:	4770      	bx	lr
 800727c:	f3af 8000 	nop.w

08007280 <pxCurrentTCBConst2>:
 8007280:	200004b0 	.word	0x200004b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007284:	bf00      	nop
 8007286:	bf00      	nop

08007288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007288:	4808      	ldr	r0, [pc, #32]	; (80072ac <prvPortStartFirstTask+0x24>)
 800728a:	6800      	ldr	r0, [r0, #0]
 800728c:	6800      	ldr	r0, [r0, #0]
 800728e:	f380 8808 	msr	MSP, r0
 8007292:	f04f 0000 	mov.w	r0, #0
 8007296:	f380 8814 	msr	CONTROL, r0
 800729a:	b662      	cpsie	i
 800729c:	b661      	cpsie	f
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	f3bf 8f6f 	isb	sy
 80072a6:	df00      	svc	0
 80072a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80072aa:	bf00      	nop
 80072ac:	e000ed08 	.word	0xe000ed08

080072b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80072b6:	4b44      	ldr	r3, [pc, #272]	; (80073c8 <xPortStartScheduler+0x118>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a44      	ldr	r2, [pc, #272]	; (80073cc <xPortStartScheduler+0x11c>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d109      	bne.n	80072d4 <xPortStartScheduler+0x24>
 80072c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	613b      	str	r3, [r7, #16]
 80072d2:	e7fe      	b.n	80072d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80072d4:	4b3c      	ldr	r3, [pc, #240]	; (80073c8 <xPortStartScheduler+0x118>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a3d      	ldr	r2, [pc, #244]	; (80073d0 <xPortStartScheduler+0x120>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d109      	bne.n	80072f2 <xPortStartScheduler+0x42>
 80072de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e2:	f383 8811 	msr	BASEPRI, r3
 80072e6:	f3bf 8f6f 	isb	sy
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	e7fe      	b.n	80072f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80072f2:	4b38      	ldr	r3, [pc, #224]	; (80073d4 <xPortStartScheduler+0x124>)
 80072f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	22ff      	movs	r2, #255	; 0xff
 8007302:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	b2db      	uxtb	r3, r3
 800730a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800730c:	78fb      	ldrb	r3, [r7, #3]
 800730e:	b2db      	uxtb	r3, r3
 8007310:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007314:	b2da      	uxtb	r2, r3
 8007316:	4b30      	ldr	r3, [pc, #192]	; (80073d8 <xPortStartScheduler+0x128>)
 8007318:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800731a:	4b30      	ldr	r3, [pc, #192]	; (80073dc <xPortStartScheduler+0x12c>)
 800731c:	2207      	movs	r2, #7
 800731e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007320:	e009      	b.n	8007336 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007322:	4b2e      	ldr	r3, [pc, #184]	; (80073dc <xPortStartScheduler+0x12c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	3b01      	subs	r3, #1
 8007328:	4a2c      	ldr	r2, [pc, #176]	; (80073dc <xPortStartScheduler+0x12c>)
 800732a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800732c:	78fb      	ldrb	r3, [r7, #3]
 800732e:	b2db      	uxtb	r3, r3
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	b2db      	uxtb	r3, r3
 8007334:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007336:	78fb      	ldrb	r3, [r7, #3]
 8007338:	b2db      	uxtb	r3, r3
 800733a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800733e:	2b80      	cmp	r3, #128	; 0x80
 8007340:	d0ef      	beq.n	8007322 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007342:	4b26      	ldr	r3, [pc, #152]	; (80073dc <xPortStartScheduler+0x12c>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f1c3 0307 	rsb	r3, r3, #7
 800734a:	2b04      	cmp	r3, #4
 800734c:	d009      	beq.n	8007362 <xPortStartScheduler+0xb2>
 800734e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	60bb      	str	r3, [r7, #8]
 8007360:	e7fe      	b.n	8007360 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007362:	4b1e      	ldr	r3, [pc, #120]	; (80073dc <xPortStartScheduler+0x12c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	021b      	lsls	r3, r3, #8
 8007368:	4a1c      	ldr	r2, [pc, #112]	; (80073dc <xPortStartScheduler+0x12c>)
 800736a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800736c:	4b1b      	ldr	r3, [pc, #108]	; (80073dc <xPortStartScheduler+0x12c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007374:	4a19      	ldr	r2, [pc, #100]	; (80073dc <xPortStartScheduler+0x12c>)
 8007376:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	b2da      	uxtb	r2, r3
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007380:	4b17      	ldr	r3, [pc, #92]	; (80073e0 <xPortStartScheduler+0x130>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a16      	ldr	r2, [pc, #88]	; (80073e0 <xPortStartScheduler+0x130>)
 8007386:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800738a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800738c:	4b14      	ldr	r3, [pc, #80]	; (80073e0 <xPortStartScheduler+0x130>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a13      	ldr	r2, [pc, #76]	; (80073e0 <xPortStartScheduler+0x130>)
 8007392:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007396:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007398:	f000 f8d6 	bl	8007548 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800739c:	4b11      	ldr	r3, [pc, #68]	; (80073e4 <xPortStartScheduler+0x134>)
 800739e:	2200      	movs	r2, #0
 80073a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80073a2:	f000 f8f5 	bl	8007590 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80073a6:	4b10      	ldr	r3, [pc, #64]	; (80073e8 <xPortStartScheduler+0x138>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a0f      	ldr	r2, [pc, #60]	; (80073e8 <xPortStartScheduler+0x138>)
 80073ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80073b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80073b2:	f7ff ff69 	bl	8007288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80073b6:	f7ff fa8b 	bl	80068d0 <vTaskSwitchContext>
	prvTaskExitError();
 80073ba:	f7ff ff25 	bl	8007208 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3718      	adds	r7, #24
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	e000ed00 	.word	0xe000ed00
 80073cc:	410fc271 	.word	0x410fc271
 80073d0:	410fc270 	.word	0x410fc270
 80073d4:	e000e400 	.word	0xe000e400
 80073d8:	200005dc 	.word	0x200005dc
 80073dc:	200005e0 	.word	0x200005e0
 80073e0:	e000ed20 	.word	0xe000ed20
 80073e4:	2000000c 	.word	0x2000000c
 80073e8:	e000ef34 	.word	0xe000ef34

080073ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007404:	4b0e      	ldr	r3, [pc, #56]	; (8007440 <vPortEnterCritical+0x54>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3301      	adds	r3, #1
 800740a:	4a0d      	ldr	r2, [pc, #52]	; (8007440 <vPortEnterCritical+0x54>)
 800740c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800740e:	4b0c      	ldr	r3, [pc, #48]	; (8007440 <vPortEnterCritical+0x54>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d10e      	bne.n	8007434 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007416:	4b0b      	ldr	r3, [pc, #44]	; (8007444 <vPortEnterCritical+0x58>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d009      	beq.n	8007434 <vPortEnterCritical+0x48>
 8007420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	603b      	str	r3, [r7, #0]
 8007432:	e7fe      	b.n	8007432 <vPortEnterCritical+0x46>
	}
}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	2000000c 	.word	0x2000000c
 8007444:	e000ed04 	.word	0xe000ed04

08007448 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800744e:	4b11      	ldr	r3, [pc, #68]	; (8007494 <vPortExitCritical+0x4c>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d109      	bne.n	800746a <vPortExitCritical+0x22>
 8007456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	607b      	str	r3, [r7, #4]
 8007468:	e7fe      	b.n	8007468 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800746a:	4b0a      	ldr	r3, [pc, #40]	; (8007494 <vPortExitCritical+0x4c>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	3b01      	subs	r3, #1
 8007470:	4a08      	ldr	r2, [pc, #32]	; (8007494 <vPortExitCritical+0x4c>)
 8007472:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007474:	4b07      	ldr	r3, [pc, #28]	; (8007494 <vPortExitCritical+0x4c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d104      	bne.n	8007486 <vPortExitCritical+0x3e>
 800747c:	2300      	movs	r3, #0
 800747e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007486:	bf00      	nop
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	2000000c 	.word	0x2000000c
	...

080074a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80074a0:	f3ef 8009 	mrs	r0, PSP
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	4b15      	ldr	r3, [pc, #84]	; (8007500 <pxCurrentTCBConst>)
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	f01e 0f10 	tst.w	lr, #16
 80074b0:	bf08      	it	eq
 80074b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80074b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ba:	6010      	str	r0, [r2, #0]
 80074bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80074c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80074c4:	f380 8811 	msr	BASEPRI, r0
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f7ff f9fe 	bl	80068d0 <vTaskSwitchContext>
 80074d4:	f04f 0000 	mov.w	r0, #0
 80074d8:	f380 8811 	msr	BASEPRI, r0
 80074dc:	bc09      	pop	{r0, r3}
 80074de:	6819      	ldr	r1, [r3, #0]
 80074e0:	6808      	ldr	r0, [r1, #0]
 80074e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e6:	f01e 0f10 	tst.w	lr, #16
 80074ea:	bf08      	it	eq
 80074ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80074f0:	f380 8809 	msr	PSP, r0
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	f3af 8000 	nop.w

08007500 <pxCurrentTCBConst>:
 8007500:	200004b0 	.word	0x200004b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007504:	bf00      	nop
 8007506:	bf00      	nop

08007508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007520:	f7ff f91e 	bl	8006760 <xTaskIncrementTick>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800752a:	4b06      	ldr	r3, [pc, #24]	; (8007544 <SysTick_Handler+0x3c>)
 800752c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	2300      	movs	r3, #0
 8007534:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800753c:	bf00      	nop
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	e000ed04 	.word	0xe000ed04

08007548 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007548:	b480      	push	{r7}
 800754a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800754c:	4b0b      	ldr	r3, [pc, #44]	; (800757c <vPortSetupTimerInterrupt+0x34>)
 800754e:	2200      	movs	r2, #0
 8007550:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007552:	4b0b      	ldr	r3, [pc, #44]	; (8007580 <vPortSetupTimerInterrupt+0x38>)
 8007554:	2200      	movs	r2, #0
 8007556:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007558:	4b0a      	ldr	r3, [pc, #40]	; (8007584 <vPortSetupTimerInterrupt+0x3c>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a0a      	ldr	r2, [pc, #40]	; (8007588 <vPortSetupTimerInterrupt+0x40>)
 800755e:	fba2 2303 	umull	r2, r3, r2, r3
 8007562:	099b      	lsrs	r3, r3, #6
 8007564:	4a09      	ldr	r2, [pc, #36]	; (800758c <vPortSetupTimerInterrupt+0x44>)
 8007566:	3b01      	subs	r3, #1
 8007568:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800756a:	4b04      	ldr	r3, [pc, #16]	; (800757c <vPortSetupTimerInterrupt+0x34>)
 800756c:	2207      	movs	r2, #7
 800756e:	601a      	str	r2, [r3, #0]
}
 8007570:	bf00      	nop
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	e000e010 	.word	0xe000e010
 8007580:	e000e018 	.word	0xe000e018
 8007584:	20000000 	.word	0x20000000
 8007588:	10624dd3 	.word	0x10624dd3
 800758c:	e000e014 	.word	0xe000e014

08007590 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007590:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80075a0 <vPortEnableVFP+0x10>
 8007594:	6801      	ldr	r1, [r0, #0]
 8007596:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800759a:	6001      	str	r1, [r0, #0]
 800759c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800759e:	bf00      	nop
 80075a0:	e000ed88 	.word	0xe000ed88

080075a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80075aa:	f3ef 8305 	mrs	r3, IPSR
 80075ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2b0f      	cmp	r3, #15
 80075b4:	d913      	bls.n	80075de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80075b6:	4a16      	ldr	r2, [pc, #88]	; (8007610 <vPortValidateInterruptPriority+0x6c>)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4413      	add	r3, r2
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80075c0:	4b14      	ldr	r3, [pc, #80]	; (8007614 <vPortValidateInterruptPriority+0x70>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	7afa      	ldrb	r2, [r7, #11]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d209      	bcs.n	80075de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	607b      	str	r3, [r7, #4]
 80075dc:	e7fe      	b.n	80075dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80075de:	4b0e      	ldr	r3, [pc, #56]	; (8007618 <vPortValidateInterruptPriority+0x74>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80075e6:	4b0d      	ldr	r3, [pc, #52]	; (800761c <vPortValidateInterruptPriority+0x78>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d909      	bls.n	8007602 <vPortValidateInterruptPriority+0x5e>
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	603b      	str	r3, [r7, #0]
 8007600:	e7fe      	b.n	8007600 <vPortValidateInterruptPriority+0x5c>
	}
 8007602:	bf00      	nop
 8007604:	3714      	adds	r7, #20
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	e000e3f0 	.word	0xe000e3f0
 8007614:	200005dc 	.word	0x200005dc
 8007618:	e000ed0c 	.word	0xe000ed0c
 800761c:	200005e0 	.word	0x200005e0

08007620 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b08a      	sub	sp, #40	; 0x28
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007628:	2300      	movs	r3, #0
 800762a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800762c:	f7fe ffcc 	bl	80065c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007630:	4b57      	ldr	r3, [pc, #348]	; (8007790 <pvPortMalloc+0x170>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007638:	f000 f90c 	bl	8007854 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800763c:	4b55      	ldr	r3, [pc, #340]	; (8007794 <pvPortMalloc+0x174>)
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4013      	ands	r3, r2
 8007644:	2b00      	cmp	r3, #0
 8007646:	f040 808c 	bne.w	8007762 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d01c      	beq.n	800768a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007650:	2208      	movs	r2, #8
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4413      	add	r3, r2
 8007656:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f003 0307 	and.w	r3, r3, #7
 800765e:	2b00      	cmp	r3, #0
 8007660:	d013      	beq.n	800768a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f023 0307 	bic.w	r3, r3, #7
 8007668:	3308      	adds	r3, #8
 800766a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f003 0307 	and.w	r3, r3, #7
 8007672:	2b00      	cmp	r3, #0
 8007674:	d009      	beq.n	800768a <pvPortMalloc+0x6a>
 8007676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767a:	f383 8811 	msr	BASEPRI, r3
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	617b      	str	r3, [r7, #20]
 8007688:	e7fe      	b.n	8007688 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d068      	beq.n	8007762 <pvPortMalloc+0x142>
 8007690:	4b41      	ldr	r3, [pc, #260]	; (8007798 <pvPortMalloc+0x178>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	429a      	cmp	r2, r3
 8007698:	d863      	bhi.n	8007762 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800769a:	4b40      	ldr	r3, [pc, #256]	; (800779c <pvPortMalloc+0x17c>)
 800769c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800769e:	4b3f      	ldr	r3, [pc, #252]	; (800779c <pvPortMalloc+0x17c>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076a4:	e004      	b.n	80076b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80076a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d903      	bls.n	80076c2 <pvPortMalloc+0xa2>
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1f1      	bne.n	80076a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80076c2:	4b33      	ldr	r3, [pc, #204]	; (8007790 <pvPortMalloc+0x170>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d04a      	beq.n	8007762 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80076cc:	6a3b      	ldr	r3, [r7, #32]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2208      	movs	r2, #8
 80076d2:	4413      	add	r3, r2
 80076d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80076d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	685a      	ldr	r2, [r3, #4]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	1ad2      	subs	r2, r2, r3
 80076e6:	2308      	movs	r3, #8
 80076e8:	005b      	lsls	r3, r3, #1
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d91e      	bls.n	800772c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80076ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4413      	add	r3, r2
 80076f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	f003 0307 	and.w	r3, r3, #7
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d009      	beq.n	8007714 <pvPortMalloc+0xf4>
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	613b      	str	r3, [r7, #16]
 8007712:	e7fe      	b.n	8007712 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	1ad2      	subs	r2, r2, r3
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007726:	69b8      	ldr	r0, [r7, #24]
 8007728:	f000 f8f6 	bl	8007918 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800772c:	4b1a      	ldr	r3, [pc, #104]	; (8007798 <pvPortMalloc+0x178>)
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	4a18      	ldr	r2, [pc, #96]	; (8007798 <pvPortMalloc+0x178>)
 8007738:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800773a:	4b17      	ldr	r3, [pc, #92]	; (8007798 <pvPortMalloc+0x178>)
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	4b18      	ldr	r3, [pc, #96]	; (80077a0 <pvPortMalloc+0x180>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	429a      	cmp	r2, r3
 8007744:	d203      	bcs.n	800774e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007746:	4b14      	ldr	r3, [pc, #80]	; (8007798 <pvPortMalloc+0x178>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a15      	ldr	r2, [pc, #84]	; (80077a0 <pvPortMalloc+0x180>)
 800774c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007750:	685a      	ldr	r2, [r3, #4]
 8007752:	4b10      	ldr	r3, [pc, #64]	; (8007794 <pvPortMalloc+0x174>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	431a      	orrs	r2, r3
 8007758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800775c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775e:	2200      	movs	r2, #0
 8007760:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007762:	f7fe ff3f 	bl	80065e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	f003 0307 	and.w	r3, r3, #7
 800776c:	2b00      	cmp	r3, #0
 800776e:	d009      	beq.n	8007784 <pvPortMalloc+0x164>
 8007770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	60fb      	str	r3, [r7, #12]
 8007782:	e7fe      	b.n	8007782 <pvPortMalloc+0x162>
	return pvReturn;
 8007784:	69fb      	ldr	r3, [r7, #28]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3728      	adds	r7, #40	; 0x28
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	200085ec 	.word	0x200085ec
 8007794:	200085f8 	.word	0x200085f8
 8007798:	200085f0 	.word	0x200085f0
 800779c:	200085e4 	.word	0x200085e4
 80077a0:	200085f4 	.word	0x200085f4

080077a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b086      	sub	sp, #24
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d046      	beq.n	8007844 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80077b6:	2308      	movs	r3, #8
 80077b8:	425b      	negs	r3, r3
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	4413      	add	r3, r2
 80077be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	685a      	ldr	r2, [r3, #4]
 80077c8:	4b20      	ldr	r3, [pc, #128]	; (800784c <vPortFree+0xa8>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4013      	ands	r3, r2
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d109      	bne.n	80077e6 <vPortFree+0x42>
 80077d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	e7fe      	b.n	80077e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d009      	beq.n	8007802 <vPortFree+0x5e>
 80077ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f2:	f383 8811 	msr	BASEPRI, r3
 80077f6:	f3bf 8f6f 	isb	sy
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	60bb      	str	r3, [r7, #8]
 8007800:	e7fe      	b.n	8007800 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	4b11      	ldr	r3, [pc, #68]	; (800784c <vPortFree+0xa8>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4013      	ands	r3, r2
 800780c:	2b00      	cmp	r3, #0
 800780e:	d019      	beq.n	8007844 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d115      	bne.n	8007844 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	4b0b      	ldr	r3, [pc, #44]	; (800784c <vPortFree+0xa8>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	43db      	mvns	r3, r3
 8007822:	401a      	ands	r2, r3
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007828:	f7fe fece 	bl	80065c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	4b07      	ldr	r3, [pc, #28]	; (8007850 <vPortFree+0xac>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4413      	add	r3, r2
 8007836:	4a06      	ldr	r2, [pc, #24]	; (8007850 <vPortFree+0xac>)
 8007838:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800783a:	6938      	ldr	r0, [r7, #16]
 800783c:	f000 f86c 	bl	8007918 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007840:	f7fe fed0 	bl	80065e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007844:	bf00      	nop
 8007846:	3718      	adds	r7, #24
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	200085f8 	.word	0x200085f8
 8007850:	200085f0 	.word	0x200085f0

08007854 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800785a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800785e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007860:	4b27      	ldr	r3, [pc, #156]	; (8007900 <prvHeapInit+0xac>)
 8007862:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00c      	beq.n	8007888 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	3307      	adds	r3, #7
 8007872:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f023 0307 	bic.w	r3, r3, #7
 800787a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	4a1f      	ldr	r2, [pc, #124]	; (8007900 <prvHeapInit+0xac>)
 8007884:	4413      	add	r3, r2
 8007886:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800788c:	4a1d      	ldr	r2, [pc, #116]	; (8007904 <prvHeapInit+0xb0>)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007892:	4b1c      	ldr	r3, [pc, #112]	; (8007904 <prvHeapInit+0xb0>)
 8007894:	2200      	movs	r2, #0
 8007896:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	4413      	add	r3, r2
 800789e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80078a0:	2208      	movs	r2, #8
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	1a9b      	subs	r3, r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f023 0307 	bic.w	r3, r3, #7
 80078ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	4a15      	ldr	r2, [pc, #84]	; (8007908 <prvHeapInit+0xb4>)
 80078b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80078b6:	4b14      	ldr	r3, [pc, #80]	; (8007908 <prvHeapInit+0xb4>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2200      	movs	r2, #0
 80078bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80078be:	4b12      	ldr	r3, [pc, #72]	; (8007908 <prvHeapInit+0xb4>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2200      	movs	r2, #0
 80078c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	1ad2      	subs	r2, r2, r3
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078d4:	4b0c      	ldr	r3, [pc, #48]	; (8007908 <prvHeapInit+0xb4>)
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	4a0a      	ldr	r2, [pc, #40]	; (800790c <prvHeapInit+0xb8>)
 80078e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	4a09      	ldr	r2, [pc, #36]	; (8007910 <prvHeapInit+0xbc>)
 80078ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078ec:	4b09      	ldr	r3, [pc, #36]	; (8007914 <prvHeapInit+0xc0>)
 80078ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80078f2:	601a      	str	r2, [r3, #0]
}
 80078f4:	bf00      	nop
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	200005e4 	.word	0x200005e4
 8007904:	200085e4 	.word	0x200085e4
 8007908:	200085ec 	.word	0x200085ec
 800790c:	200085f4 	.word	0x200085f4
 8007910:	200085f0 	.word	0x200085f0
 8007914:	200085f8 	.word	0x200085f8

08007918 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007920:	4b28      	ldr	r3, [pc, #160]	; (80079c4 <prvInsertBlockIntoFreeList+0xac>)
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	e002      	b.n	800792c <prvInsertBlockIntoFreeList+0x14>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	60fb      	str	r3, [r7, #12]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	429a      	cmp	r2, r3
 8007934:	d8f7      	bhi.n	8007926 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	4413      	add	r3, r2
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	429a      	cmp	r2, r3
 8007946:	d108      	bne.n	800795a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	441a      	add	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	441a      	add	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	429a      	cmp	r2, r3
 800796c:	d118      	bne.n	80079a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	4b15      	ldr	r3, [pc, #84]	; (80079c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	429a      	cmp	r2, r3
 8007978:	d00d      	beq.n	8007996 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	441a      	add	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	e008      	b.n	80079a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007996:	4b0c      	ldr	r3, [pc, #48]	; (80079c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	e003      	b.n	80079a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d002      	beq.n	80079b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079b6:	bf00      	nop
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	200085e4 	.word	0x200085e4
 80079c8:	200085ec 	.word	0x200085ec

080079cc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	330c      	adds	r3, #12
 80079dc:	461a      	mov	r2, r3
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f002 fa99 	bl	8009f18 <tcpip_send_msg_wait_sem>
 80079e6:	4603      	mov	r3, r0
 80079e8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80079ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d103      	bne.n	80079fa <netconn_apimsg+0x2e>
    return apimsg->err;
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80079f8:	e001      	b.n	80079fe <netconn_apimsg+0x32>
  }
  return err;
 80079fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08c      	sub	sp, #48	; 0x30
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	4603      	mov	r3, r0
 8007a10:	603a      	str	r2, [r7, #0]
 8007a12:	71fb      	strb	r3, [r7, #7]
 8007a14:	460b      	mov	r3, r1
 8007a16:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007a18:	79fb      	ldrb	r3, [r7, #7]
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f001 f91f 	bl	8008c60 <netconn_alloc>
 8007a22:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8007a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d054      	beq.n	8007ad4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007a2a:	79bb      	ldrb	r3, [r7, #6]
 8007a2c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8007a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a30:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007a32:	f107 0308 	add.w	r3, r7, #8
 8007a36:	4619      	mov	r1, r3
 8007a38:	4829      	ldr	r0, [pc, #164]	; (8007ae0 <netconn_new_with_proto_and_callback+0xd8>)
 8007a3a:	f7ff ffc7 	bl	80079cc <netconn_apimsg>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8007a44:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d043      	beq.n	8007ad4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d005      	beq.n	8007a60 <netconn_new_with_proto_and_callback+0x58>
 8007a54:	4b23      	ldr	r3, [pc, #140]	; (8007ae4 <netconn_new_with_proto_and_callback+0xdc>)
 8007a56:	22a3      	movs	r2, #163	; 0xa3
 8007a58:	4923      	ldr	r1, [pc, #140]	; (8007ae8 <netconn_new_with_proto_and_callback+0xe0>)
 8007a5a:	4824      	ldr	r0, [pc, #144]	; (8007aec <netconn_new_with_proto_and_callback+0xe4>)
 8007a5c:	f010 fa24 	bl	8017ea8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a62:	3310      	adds	r3, #16
 8007a64:	4618      	mov	r0, r3
 8007a66:	f010 f880 	bl	8017b6a <sys_mbox_valid>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d105      	bne.n	8007a7c <netconn_new_with_proto_and_callback+0x74>
 8007a70:	4b1c      	ldr	r3, [pc, #112]	; (8007ae4 <netconn_new_with_proto_and_callback+0xdc>)
 8007a72:	22a4      	movs	r2, #164	; 0xa4
 8007a74:	491e      	ldr	r1, [pc, #120]	; (8007af0 <netconn_new_with_proto_and_callback+0xe8>)
 8007a76:	481d      	ldr	r0, [pc, #116]	; (8007aec <netconn_new_with_proto_and_callback+0xe4>)
 8007a78:	f010 fa16 	bl	8017ea8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7e:	3314      	adds	r3, #20
 8007a80:	4618      	mov	r0, r3
 8007a82:	f010 f872 	bl	8017b6a <sys_mbox_valid>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d005      	beq.n	8007a98 <netconn_new_with_proto_and_callback+0x90>
 8007a8c:	4b15      	ldr	r3, [pc, #84]	; (8007ae4 <netconn_new_with_proto_and_callback+0xdc>)
 8007a8e:	22a6      	movs	r2, #166	; 0xa6
 8007a90:	4918      	ldr	r1, [pc, #96]	; (8007af4 <netconn_new_with_proto_and_callback+0xec>)
 8007a92:	4816      	ldr	r0, [pc, #88]	; (8007aec <netconn_new_with_proto_and_callback+0xe4>)
 8007a94:	f010 fa08 	bl	8017ea8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9a:	330c      	adds	r3, #12
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f010 f8f5 	bl	8017c8c <sys_sem_valid>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d105      	bne.n	8007ab4 <netconn_new_with_proto_and_callback+0xac>
 8007aa8:	4b0e      	ldr	r3, [pc, #56]	; (8007ae4 <netconn_new_with_proto_and_callback+0xdc>)
 8007aaa:	22a9      	movs	r2, #169	; 0xa9
 8007aac:	4912      	ldr	r1, [pc, #72]	; (8007af8 <netconn_new_with_proto_and_callback+0xf0>)
 8007aae:	480f      	ldr	r0, [pc, #60]	; (8007aec <netconn_new_with_proto_and_callback+0xe4>)
 8007ab0:	f010 f9fa 	bl	8017ea8 <iprintf>
      sys_sem_free(&conn->op_completed);
 8007ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab6:	330c      	adds	r3, #12
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f010 f8da 	bl	8017c72 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8007abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac0:	3310      	adds	r3, #16
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f00f ffca 	bl	8017a5c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007ac8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007aca:	2007      	movs	r0, #7
 8007acc:	f003 fddc 	bl	800b688 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	e000      	b.n	8007ad6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3730      	adds	r7, #48	; 0x30
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	08008c35 	.word	0x08008c35
 8007ae4:	08018f68 	.word	0x08018f68
 8007ae8:	08018f9c 	.word	0x08018f9c
 8007aec:	08018fc0 	.word	0x08018fc0
 8007af0:	08018fe8 	.word	0x08018fe8
 8007af4:	08019000 	.word	0x08019000
 8007af8:	08019024 	.word	0x08019024

08007afc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b08c      	sub	sp, #48	; 0x30
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d101      	bne.n	8007b0e <netconn_prepare_delete+0x12>
    return ERR_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	e014      	b.n	8007b38 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007b12:	2329      	movs	r3, #41	; 0x29
 8007b14:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007b16:	f107 030c 	add.w	r3, r7, #12
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4808      	ldr	r0, [pc, #32]	; (8007b40 <netconn_prepare_delete+0x44>)
 8007b1e:	f7ff ff55 	bl	80079cc <netconn_apimsg>
 8007b22:	4603      	mov	r3, r0
 8007b24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007b28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d002      	beq.n	8007b36 <netconn_prepare_delete+0x3a>
    return err;
 8007b30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007b34:	e000      	b.n	8007b38 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3730      	adds	r7, #48	; 0x30
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	08009199 	.word	0x08009199

08007b44 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <netconn_delete+0x12>
    return ERR_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	e00d      	b.n	8007b72 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7ff ffd0 	bl	8007afc <netconn_prepare_delete>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8007b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d102      	bne.n	8007b6e <netconn_delete+0x2a>
    netconn_free(conn);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f001 f8e7 	bl	8008d3c <netconn_free>
  }
  return err;
 8007b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b08e      	sub	sp, #56	; 0x38
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	4613      	mov	r3, r2
 8007b88:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d109      	bne.n	8007ba4 <netconn_bind+0x28>
 8007b90:	4b11      	ldr	r3, [pc, #68]	; (8007bd8 <netconn_bind+0x5c>)
 8007b92:	f44f 729c 	mov.w	r2, #312	; 0x138
 8007b96:	4911      	ldr	r1, [pc, #68]	; (8007bdc <netconn_bind+0x60>)
 8007b98:	4811      	ldr	r0, [pc, #68]	; (8007be0 <netconn_bind+0x64>)
 8007b9a:	f010 f985 	bl	8017ea8 <iprintf>
 8007b9e:	f06f 030f 	mvn.w	r3, #15
 8007ba2:	e015      	b.n	8007bd0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8007baa:	4b0e      	ldr	r3, [pc, #56]	; (8007be4 <netconn_bind+0x68>)
 8007bac:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007bb6:	88fb      	ldrh	r3, [r7, #6]
 8007bb8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007bba:	f107 0314 	add.w	r3, r7, #20
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	4809      	ldr	r0, [pc, #36]	; (8007be8 <netconn_bind+0x6c>)
 8007bc2:	f7ff ff03 	bl	80079cc <netconn_apimsg>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8007bcc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3738      	adds	r7, #56	; 0x38
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	08018f68 	.word	0x08018f68
 8007bdc:	080190a0 	.word	0x080190a0
 8007be0:	08018fc0 	.word	0x08018fc0
 8007be4:	08026c6c 	.word	0x08026c6c
 8007be8:	08009361 	.word	0x08009361

08007bec <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b08c      	sub	sp, #48	; 0x30
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d109      	bne.n	8007c12 <netconn_listen_with_backlog+0x26>
 8007bfe:	4b0d      	ldr	r3, [pc, #52]	; (8007c34 <netconn_listen_with_backlog+0x48>)
 8007c00:	f240 12bb 	movw	r2, #443	; 0x1bb
 8007c04:	490c      	ldr	r1, [pc, #48]	; (8007c38 <netconn_listen_with_backlog+0x4c>)
 8007c06:	480d      	ldr	r0, [pc, #52]	; (8007c3c <netconn_listen_with_backlog+0x50>)
 8007c08:	f010 f94e 	bl	8017ea8 <iprintf>
 8007c0c:	f06f 030f 	mvn.w	r3, #15
 8007c10:	e00c      	b.n	8007c2c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8007c16:	f107 030c 	add.w	r3, r7, #12
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	4808      	ldr	r0, [pc, #32]	; (8007c40 <netconn_listen_with_backlog+0x54>)
 8007c1e:	f7ff fed5 	bl	80079cc <netconn_apimsg>
 8007c22:	4603      	mov	r3, r0
 8007c24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007c28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3730      	adds	r7, #48	; 0x30
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	08018f68 	.word	0x08018f68
 8007c38:	08019120 	.word	0x08019120
 8007c3c:	08018fc0 	.word	0x08018fc0
 8007c40:	080093d9 	.word	0x080093d9

08007c44 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d109      	bne.n	8007c68 <netconn_accept+0x24>
 8007c54:	4b3d      	ldr	r3, [pc, #244]	; (8007d4c <netconn_accept+0x108>)
 8007c56:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007c5a:	493d      	ldr	r1, [pc, #244]	; (8007d50 <netconn_accept+0x10c>)
 8007c5c:	483d      	ldr	r0, [pc, #244]	; (8007d54 <netconn_accept+0x110>)
 8007c5e:	f010 f923 	bl	8017ea8 <iprintf>
 8007c62:	f06f 030f 	mvn.w	r3, #15
 8007c66:	e06c      	b.n	8007d42 <netconn_accept+0xfe>
  *new_conn = NULL;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d109      	bne.n	8007c88 <netconn_accept+0x44>
 8007c74:	4b35      	ldr	r3, [pc, #212]	; (8007d4c <netconn_accept+0x108>)
 8007c76:	f240 12e3 	movw	r2, #483	; 0x1e3
 8007c7a:	4937      	ldr	r1, [pc, #220]	; (8007d58 <netconn_accept+0x114>)
 8007c7c:	4835      	ldr	r0, [pc, #212]	; (8007d54 <netconn_accept+0x110>)
 8007c7e:	f010 f913 	bl	8017ea8 <iprintf>
 8007c82:	f06f 030f 	mvn.w	r3, #15
 8007c86:	e05c      	b.n	8007d42 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fb6c 	bl	8008366 <netconn_err>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8007c92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d002      	beq.n	8007ca0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8007c9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007c9e:	e050      	b.n	8007d42 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	3314      	adds	r3, #20
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f00f ff60 	bl	8017b6a <sys_mbox_valid>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d005      	beq.n	8007cbc <netconn_accept+0x78>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	7f1b      	ldrb	r3, [r3, #28]
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d002      	beq.n	8007cc2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8007cbc:	f06f 030e 	mvn.w	r3, #14
 8007cc0:	e03f      	b.n	8007d42 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	7f1b      	ldrb	r3, [r3, #28]
 8007cc6:	f003 0302 	and.w	r3, r3, #2
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00e      	beq.n	8007cec <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	3314      	adds	r3, #20
 8007cd2:	f107 020c 	add.w	r2, r7, #12
 8007cd6:	4611      	mov	r1, r2
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f00f ff2a 	bl	8017b32 <sys_arch_mbox_tryfetch>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce4:	d10a      	bne.n	8007cfc <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8007ce6:	f06f 0306 	mvn.w	r3, #6
 8007cea:	e02a      	b.n	8007d42 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	3314      	adds	r3, #20
 8007cf0:	f107 010c 	add.w	r1, r7, #12
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f00f fedc 	bl	8017ab4 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d005      	beq.n	8007d10 <netconn_accept+0xcc>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f107 0213 	add.w	r2, r7, #19
 8007d16:	4611      	mov	r1, r2
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 fb71 	bl	8008400 <lwip_netconn_is_err_msg>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d002      	beq.n	8007d2a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8007d24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007d28:	e00b      	b.n	8007d42 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d102      	bne.n	8007d36 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8007d30:	f06f 030e 	mvn.w	r3, #14
 8007d34:	e005      	b.n	8007d42 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007d40:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3718      	adds	r7, #24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	08018f68 	.word	0x08018f68
 8007d50:	08019140 	.word	0x08019140
 8007d54:	08018fc0 	.word	0x08018fc0
 8007d58:	08019160 	.word	0x08019160

08007d5c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b088      	sub	sp, #32
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	4613      	mov	r3, r2
 8007d68:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d109      	bne.n	8007d88 <netconn_recv_data+0x2c>
 8007d74:	4b58      	ldr	r3, [pc, #352]	; (8007ed8 <netconn_recv_data+0x17c>)
 8007d76:	f44f 7212 	mov.w	r2, #584	; 0x248
 8007d7a:	4958      	ldr	r1, [pc, #352]	; (8007edc <netconn_recv_data+0x180>)
 8007d7c:	4858      	ldr	r0, [pc, #352]	; (8007ee0 <netconn_recv_data+0x184>)
 8007d7e:	f010 f893 	bl	8017ea8 <iprintf>
 8007d82:	f06f 030f 	mvn.w	r3, #15
 8007d86:	e0a2      	b.n	8007ece <netconn_recv_data+0x172>
  *new_buf = NULL;
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d109      	bne.n	8007da8 <netconn_recv_data+0x4c>
 8007d94:	4b50      	ldr	r3, [pc, #320]	; (8007ed8 <netconn_recv_data+0x17c>)
 8007d96:	f240 224a 	movw	r2, #586	; 0x24a
 8007d9a:	4952      	ldr	r1, [pc, #328]	; (8007ee4 <netconn_recv_data+0x188>)
 8007d9c:	4850      	ldr	r0, [pc, #320]	; (8007ee0 <netconn_recv_data+0x184>)
 8007d9e:	f010 f883 	bl	8017ea8 <iprintf>
 8007da2:	f06f 030f 	mvn.w	r3, #15
 8007da6:	e092      	b.n	8007ece <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3310      	adds	r3, #16
 8007dac:	4618      	mov	r0, r3
 8007dae:	f00f fedc 	bl	8017b6a <sys_mbox_valid>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10e      	bne.n	8007dd6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f000 fad4 	bl	8008366 <netconn_err>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8007dc2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8007dca:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007dce:	e07e      	b.n	8007ece <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8007dd0:	f06f 030a 	mvn.w	r3, #10
 8007dd4:	e07b      	b.n	8007ece <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	7f1b      	ldrb	r3, [r3, #28]
 8007dda:	f003 0302 	and.w	r3, r3, #2
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d10f      	bne.n	8007e02 <netconn_recv_data+0xa6>
 8007de2:	79fb      	ldrb	r3, [r7, #7]
 8007de4:	f003 0304 	and.w	r3, r3, #4
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10a      	bne.n	8007e02 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	7f1b      	ldrb	r3, [r3, #28]
 8007df0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d104      	bne.n	8007e02 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d023      	beq.n	8007e4a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	3310      	adds	r3, #16
 8007e06:	f107 0218 	add.w	r2, r7, #24
 8007e0a:	4611      	mov	r1, r2
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f00f fe90 	bl	8017b32 <sys_arch_mbox_tryfetch>
 8007e12:	4603      	mov	r3, r0
 8007e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e18:	d11f      	bne.n	8007e5a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f000 faa3 	bl	8008366 <netconn_err>
 8007e20:	4603      	mov	r3, r0
 8007e22:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8007e24:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d002      	beq.n	8007e32 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8007e2c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007e30:	e04d      	b.n	8007ece <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	7f1b      	ldrb	r3, [r3, #28]
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d002      	beq.n	8007e44 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8007e3e:	f06f 030a 	mvn.w	r3, #10
 8007e42:	e044      	b.n	8007ece <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8007e44:	f06f 0306 	mvn.w	r3, #6
 8007e48:	e041      	b.n	8007ece <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	3310      	adds	r3, #16
 8007e4e:	f107 0118 	add.w	r1, r7, #24
 8007e52:	2200      	movs	r2, #0
 8007e54:	4618      	mov	r0, r3
 8007e56:	f00f fe2d 	bl	8017ab4 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e62:	2b10      	cmp	r3, #16
 8007e64:	d117      	bne.n	8007e96 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	f107 0217 	add.w	r2, r7, #23
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 fac6 	bl	8008400 <lwip_netconn_is_err_msg>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d009      	beq.n	8007e8e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8007e7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e7e:	f113 0f0f 	cmn.w	r3, #15
 8007e82:	d101      	bne.n	8007e88 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8007e84:	2300      	movs	r3, #0
 8007e86:	e022      	b.n	8007ece <netconn_recv_data+0x172>
      }
      return err;
 8007e88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e8c:	e01f      	b.n	8007ece <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	891b      	ldrh	r3, [r3, #8]
 8007e92:	83fb      	strh	r3, [r7, #30]
 8007e94:	e00d      	b.n	8007eb2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d106      	bne.n	8007eaa <netconn_recv_data+0x14e>
 8007e9c:	4b0e      	ldr	r3, [pc, #56]	; (8007ed8 <netconn_recv_data+0x17c>)
 8007e9e:	f240 2291 	movw	r2, #657	; 0x291
 8007ea2:	4911      	ldr	r1, [pc, #68]	; (8007ee8 <netconn_recv_data+0x18c>)
 8007ea4:	480e      	ldr	r0, [pc, #56]	; (8007ee0 <netconn_recv_data+0x184>)
 8007ea6:	f00f ffff 	bl	8017ea8 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	891b      	ldrh	r3, [r3, #8]
 8007eb0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d005      	beq.n	8007ec6 <netconn_recv_data+0x16a>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebe:	8bfa      	ldrh	r2, [r7, #30]
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8007ec6:	69ba      	ldr	r2, [r7, #24]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3720      	adds	r7, #32
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	08018f68 	.word	0x08018f68
 8007edc:	08019180 	.word	0x08019180
 8007ee0:	08018fc0 	.word	0x08018fc0
 8007ee4:	080191a0 	.word	0x080191a0
 8007ee8:	080191bc 	.word	0x080191bc

08007eec <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d005      	beq.n	8007f0a <netconn_tcp_recvd_msg+0x1e>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f06:	2b10      	cmp	r3, #16
 8007f08:	d009      	beq.n	8007f1e <netconn_tcp_recvd_msg+0x32>
 8007f0a:	4b0c      	ldr	r3, [pc, #48]	; (8007f3c <netconn_tcp_recvd_msg+0x50>)
 8007f0c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8007f10:	490b      	ldr	r1, [pc, #44]	; (8007f40 <netconn_tcp_recvd_msg+0x54>)
 8007f12:	480c      	ldr	r0, [pc, #48]	; (8007f44 <netconn_tcp_recvd_msg+0x58>)
 8007f14:	f00f ffc8 	bl	8017ea8 <iprintf>
 8007f18:	f06f 030f 	mvn.w	r3, #15
 8007f1c:	e00a      	b.n	8007f34 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8007f2a:	6879      	ldr	r1, [r7, #4]
 8007f2c:	4806      	ldr	r0, [pc, #24]	; (8007f48 <netconn_tcp_recvd_msg+0x5c>)
 8007f2e:	f7ff fd4d 	bl	80079cc <netconn_apimsg>
 8007f32:	4603      	mov	r3, r0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	08018f68 	.word	0x08018f68
 8007f40:	080191c8 	.word	0x080191c8
 8007f44:	08018fc0 	.word	0x08018fc0
 8007f48:	08009509 	.word	0x08009509

08007f4c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b090      	sub	sp, #64	; 0x40
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	4613      	mov	r3, r2
 8007f58:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	3310      	adds	r3, #16
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f00f fe03 	bl	8017b6a <sys_mbox_valid>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d102      	bne.n	8007f70 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8007f6a:	f06f 030a 	mvn.w	r3, #10
 8007f6e:	e06d      	b.n	800804c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	7f1b      	ldrb	r3, [r3, #28]
 8007f74:	b25b      	sxtb	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	da07      	bge.n	8007f8a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	7f1b      	ldrb	r3, [r3, #28]
 8007f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8007f88:	e039      	b.n	8007ffe <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8007f8a:	79fb      	ldrb	r3, [r7, #7]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	68b9      	ldr	r1, [r7, #8]
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f7ff fee3 	bl	8007d5c <netconn_recv_data>
 8007f96:	4603      	mov	r3, r0
 8007f98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8007f9c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d002      	beq.n	8007faa <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8007fa4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007fa8:	e050      	b.n	800804c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8007fb0:	79fb      	ldrb	r3, [r7, #7]
 8007fb2:	f003 0308 	and.w	r3, r3, #8
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10e      	bne.n	8007fd8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8007fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <netconn_recv_data_tcp+0x7a>
 8007fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc2:	891b      	ldrh	r3, [r3, #8]
 8007fc4:	e000      	b.n	8007fc8 <netconn_recv_data_tcp+0x7c>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8007fca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007fcc:	f107 0214 	add.w	r2, r7, #20
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f7ff ff8a 	bl	8007eec <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d134      	bne.n	8008048 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8007fde:	79fb      	ldrb	r3, [r7, #7]
 8007fe0:	f003 0310 	and.w	r3, r3, #16
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d009      	beq.n	8007ffc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	7f1b      	ldrb	r3, [r3, #28]
 8007fec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8007ff6:	f06f 0306 	mvn.w	r3, #6
 8007ffa:	e027      	b.n	800804c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8007ffc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008002:	2b00      	cmp	r3, #0
 8008004:	d005      	beq.n	8008012 <netconn_recv_data_tcp+0xc6>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800a:	2200      	movs	r2, #0
 800800c:	2101      	movs	r1, #1
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10f      	bne.n	800803a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f000 f9a3 	bl	8008366 <netconn_err>
 8008020:	4603      	mov	r3, r0
 8008022:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008026:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800802a:	2b00      	cmp	r3, #0
 800802c:	d002      	beq.n	8008034 <netconn_recv_data_tcp+0xe8>
          return err;
 800802e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008032:	e00b      	b.n	800804c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008034:	f06f 030d 	mvn.w	r3, #13
 8008038:	e008      	b.n	800804c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800803a:	2101      	movs	r1, #1
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f000 f955 	bl	80082ec <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008042:	f06f 030e 	mvn.w	r3, #14
 8008046:	e001      	b.n	800804c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008048:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800804c:	4618      	mov	r0, r3
 800804e:	3740      	adds	r7, #64	; 0x40
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800805e:	2300      	movs	r3, #0
 8008060:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d109      	bne.n	800807c <netconn_recv+0x28>
 8008068:	4b32      	ldr	r3, [pc, #200]	; (8008134 <netconn_recv+0xe0>)
 800806a:	f240 3263 	movw	r2, #867	; 0x363
 800806e:	4932      	ldr	r1, [pc, #200]	; (8008138 <netconn_recv+0xe4>)
 8008070:	4832      	ldr	r0, [pc, #200]	; (800813c <netconn_recv+0xe8>)
 8008072:	f00f ff19 	bl	8017ea8 <iprintf>
 8008076:	f06f 030f 	mvn.w	r3, #15
 800807a:	e056      	b.n	800812a <netconn_recv+0xd6>
  *new_buf = NULL;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	2200      	movs	r2, #0
 8008080:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d109      	bne.n	800809c <netconn_recv+0x48>
 8008088:	4b2a      	ldr	r3, [pc, #168]	; (8008134 <netconn_recv+0xe0>)
 800808a:	f240 3265 	movw	r2, #869	; 0x365
 800808e:	492c      	ldr	r1, [pc, #176]	; (8008140 <netconn_recv+0xec>)
 8008090:	482a      	ldr	r0, [pc, #168]	; (800813c <netconn_recv+0xe8>)
 8008092:	f00f ff09 	bl	8017ea8 <iprintf>
 8008096:	f06f 030f 	mvn.w	r3, #15
 800809a:	e046      	b.n	800812a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080a4:	2b10      	cmp	r3, #16
 80080a6:	d13a      	bne.n	800811e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80080a8:	2300      	movs	r3, #0
 80080aa:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80080ac:	2006      	movs	r0, #6
 80080ae:	f003 fa99 	bl	800b5e4 <memp_malloc>
 80080b2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d102      	bne.n	80080c0 <netconn_recv+0x6c>
      return ERR_MEM;
 80080ba:	f04f 33ff 	mov.w	r3, #4294967295
 80080be:	e034      	b.n	800812a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80080c0:	f107 030c 	add.w	r3, r7, #12
 80080c4:	2200      	movs	r2, #0
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7ff ff3f 	bl	8007f4c <netconn_recv_data_tcp>
 80080ce:	4603      	mov	r3, r0
 80080d0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80080d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d006      	beq.n	80080e8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80080da:	6979      	ldr	r1, [r7, #20]
 80080dc:	2006      	movs	r0, #6
 80080de:	f003 fad3 	bl	800b688 <memp_free>
      return err;
 80080e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80080e6:	e020      	b.n	800812a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d106      	bne.n	80080fc <netconn_recv+0xa8>
 80080ee:	4b11      	ldr	r3, [pc, #68]	; (8008134 <netconn_recv+0xe0>)
 80080f0:	f240 3279 	movw	r2, #889	; 0x379
 80080f4:	4913      	ldr	r1, [pc, #76]	; (8008144 <netconn_recv+0xf0>)
 80080f6:	4811      	ldr	r0, [pc, #68]	; (800813c <netconn_recv+0xe8>)
 80080f8:	f00f fed6 	bl	8017ea8 <iprintf>

    buf->p = p;
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	2200      	movs	r2, #0
 800810c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2200      	movs	r2, #0
 8008112:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	e005      	b.n	800812a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800811e:	2200      	movs	r2, #0
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f7ff fe1a 	bl	8007d5c <netconn_recv_data>
 8008128:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800812a:	4618      	mov	r0, r3
 800812c:	3718      	adds	r7, #24
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	08018f68 	.word	0x08018f68
 8008138:	08019180 	.word	0x08019180
 800813c:	08018fc0 	.word	0x08018fc0
 8008140:	080191a0 	.word	0x080191a0
 8008144:	08019218 	.word	0x08019218

08008148 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b088      	sub	sp, #32
 800814c:	af02      	add	r7, sp, #8
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800815e:	78fa      	ldrb	r2, [r7, #3]
 8008160:	f107 0110 	add.w	r1, r7, #16
 8008164:	6a3b      	ldr	r3, [r7, #32]
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	4613      	mov	r3, r2
 800816a:	2201      	movs	r2, #1
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f000 f805 	bl	800817c <netconn_write_vectors_partly>
 8008172:	4603      	mov	r3, r0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b092      	sub	sp, #72	; 0x48
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	4611      	mov	r1, r2
 8008188:	461a      	mov	r2, r3
 800818a:	460b      	mov	r3, r1
 800818c:	80fb      	strh	r3, [r7, #6]
 800818e:	4613      	mov	r3, r2
 8008190:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d109      	bne.n	80081ac <netconn_write_vectors_partly+0x30>
 8008198:	4b4e      	ldr	r3, [pc, #312]	; (80082d4 <netconn_write_vectors_partly+0x158>)
 800819a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800819e:	494e      	ldr	r1, [pc, #312]	; (80082d8 <netconn_write_vectors_partly+0x15c>)
 80081a0:	484e      	ldr	r0, [pc, #312]	; (80082dc <netconn_write_vectors_partly+0x160>)
 80081a2:	f00f fe81 	bl	8017ea8 <iprintf>
 80081a6:	f06f 030f 	mvn.w	r3, #15
 80081aa:	e08e      	b.n	80082ca <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081b4:	2b10      	cmp	r3, #16
 80081b6:	d009      	beq.n	80081cc <netconn_write_vectors_partly+0x50>
 80081b8:	4b46      	ldr	r3, [pc, #280]	; (80082d4 <netconn_write_vectors_partly+0x158>)
 80081ba:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80081be:	4948      	ldr	r1, [pc, #288]	; (80082e0 <netconn_write_vectors_partly+0x164>)
 80081c0:	4846      	ldr	r0, [pc, #280]	; (80082dc <netconn_write_vectors_partly+0x160>)
 80081c2:	f00f fe71 	bl	8017ea8 <iprintf>
 80081c6:	f06f 0305 	mvn.w	r3, #5
 80081ca:	e07e      	b.n	80082ca <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	7f1b      	ldrb	r3, [r3, #28]
 80081d0:	f003 0302 	and.w	r3, r3, #2
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d104      	bne.n	80081e2 <netconn_write_vectors_partly+0x66>
 80081d8:	797b      	ldrb	r3, [r7, #5]
 80081da:	f003 0304 	and.w	r3, r3, #4
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d001      	beq.n	80081e6 <netconn_write_vectors_partly+0x6a>
 80081e2:	2301      	movs	r3, #1
 80081e4:	e000      	b.n	80081e8 <netconn_write_vectors_partly+0x6c>
 80081e6:	2300      	movs	r3, #0
 80081e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80081ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d005      	beq.n	8008200 <netconn_write_vectors_partly+0x84>
 80081f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d102      	bne.n	8008200 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80081fa:	f06f 0305 	mvn.w	r3, #5
 80081fe:	e064      	b.n	80082ca <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008200:	2300      	movs	r3, #0
 8008202:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008204:	2300      	movs	r3, #0
 8008206:	643b      	str	r3, [r7, #64]	; 0x40
 8008208:	e015      	b.n	8008236 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800820a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800820c:	00db      	lsls	r3, r3, #3
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	4413      	add	r3, r2
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008216:	4413      	add	r3, r2
 8008218:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800821a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800821c:	00db      	lsls	r3, r3, #3
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	4413      	add	r3, r2
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008226:	429a      	cmp	r2, r3
 8008228:	d202      	bcs.n	8008230 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800822a:	f06f 0305 	mvn.w	r3, #5
 800822e:	e04c      	b.n	80082ca <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008232:	3301      	adds	r3, #1
 8008234:	643b      	str	r3, [r7, #64]	; 0x40
 8008236:	88fb      	ldrh	r3, [r7, #6]
 8008238:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800823a:	429a      	cmp	r2, r3
 800823c:	dbe5      	blt.n	800820a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800823e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008240:	2b00      	cmp	r3, #0
 8008242:	d101      	bne.n	8008248 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	e040      	b.n	80082ca <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800824a:	2b00      	cmp	r3, #0
 800824c:	da0a      	bge.n	8008264 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800824e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008250:	2b00      	cmp	r3, #0
 8008252:	d102      	bne.n	800825a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008254:	f06f 0305 	mvn.w	r3, #5
 8008258:	e037      	b.n	80082ca <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800825a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800825e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008262:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800826c:	88fb      	ldrh	r3, [r7, #6]
 800826e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008270:	2300      	movs	r3, #0
 8008272:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008274:	797b      	ldrb	r3, [r7, #5]
 8008276:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800827a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800827c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800827e:	2300      	movs	r3, #0
 8008280:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008282:	f107 0314 	add.w	r3, r7, #20
 8008286:	4619      	mov	r1, r3
 8008288:	4816      	ldr	r0, [pc, #88]	; (80082e4 <netconn_write_vectors_partly+0x168>)
 800828a:	f7ff fb9f 	bl	80079cc <netconn_apimsg>
 800828e:	4603      	mov	r3, r0
 8008290:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8008294:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008298:	2b00      	cmp	r3, #0
 800829a:	d114      	bne.n	80082c6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800829c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d002      	beq.n	80082a8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80082a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082a6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80082a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d10a      	bne.n	80082c6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80082b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d006      	beq.n	80082c6 <netconn_write_vectors_partly+0x14a>
 80082b8:	4b06      	ldr	r3, [pc, #24]	; (80082d4 <netconn_write_vectors_partly+0x158>)
 80082ba:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80082be:	490a      	ldr	r1, [pc, #40]	; (80082e8 <netconn_write_vectors_partly+0x16c>)
 80082c0:	4806      	ldr	r0, [pc, #24]	; (80082dc <netconn_write_vectors_partly+0x160>)
 80082c2:	f00f fdf1 	bl	8017ea8 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80082c6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3748      	adds	r7, #72	; 0x48
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	08018f68 	.word	0x08018f68
 80082d8:	08019240 	.word	0x08019240
 80082dc:	08018fc0 	.word	0x08018fc0
 80082e0:	0801925c 	.word	0x0801925c
 80082e4:	0800990d 	.word	0x0800990d
 80082e8:	08019280 	.word	0x08019280

080082ec <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b08c      	sub	sp, #48	; 0x30
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	460b      	mov	r3, r1
 80082f6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d109      	bne.n	8008312 <netconn_close_shutdown+0x26>
 80082fe:	4b0f      	ldr	r3, [pc, #60]	; (800833c <netconn_close_shutdown+0x50>)
 8008300:	f240 4247 	movw	r2, #1095	; 0x447
 8008304:	490e      	ldr	r1, [pc, #56]	; (8008340 <netconn_close_shutdown+0x54>)
 8008306:	480f      	ldr	r0, [pc, #60]	; (8008344 <netconn_close_shutdown+0x58>)
 8008308:	f00f fdce 	bl	8017ea8 <iprintf>
 800830c:	f06f 030f 	mvn.w	r3, #15
 8008310:	e010      	b.n	8008334 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008316:	78fb      	ldrb	r3, [r7, #3]
 8008318:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800831a:	2329      	movs	r3, #41	; 0x29
 800831c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800831e:	f107 030c 	add.w	r3, r7, #12
 8008322:	4619      	mov	r1, r3
 8008324:	4808      	ldr	r0, [pc, #32]	; (8008348 <netconn_close_shutdown+0x5c>)
 8008326:	f7ff fb51 	bl	80079cc <netconn_apimsg>
 800832a:	4603      	mov	r3, r0
 800832c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008330:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008334:	4618      	mov	r0, r3
 8008336:	3730      	adds	r7, #48	; 0x30
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	08018f68 	.word	0x08018f68
 8008340:	080192a4 	.word	0x080192a4
 8008344:	08018fc0 	.word	0x08018fc0
 8008348:	08009a25 	.word	0x08009a25

0800834c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008354:	2103      	movs	r1, #3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7ff ffc8 	bl	80082ec <netconn_close_shutdown>
 800835c:	4603      	mov	r3, r0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b084      	sub	sp, #16
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <netconn_err+0x12>
    return ERR_OK;
 8008374:	2300      	movs	r3, #0
 8008376:	e00d      	b.n	8008394 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008378:	f00f fd12 	bl	8017da0 <sys_arch_protect>
 800837c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	7a1b      	ldrb	r3, [r3, #8]
 8008382:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f00f fd16 	bl	8017dbc <sys_arch_unprotect>
  return err;
 8008390:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3710      	adds	r7, #16
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	4603      	mov	r3, r0
 80083a4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80083a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083aa:	f113 0f0e 	cmn.w	r3, #14
 80083ae:	d008      	beq.n	80083c2 <lwip_netconn_err_to_msg+0x26>
 80083b0:	f113 0f0d 	cmn.w	r3, #13
 80083b4:	d003      	beq.n	80083be <lwip_netconn_err_to_msg+0x22>
 80083b6:	f113 0f0f 	cmn.w	r3, #15
 80083ba:	d004      	beq.n	80083c6 <lwip_netconn_err_to_msg+0x2a>
 80083bc:	e005      	b.n	80083ca <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80083be:	4b0a      	ldr	r3, [pc, #40]	; (80083e8 <lwip_netconn_err_to_msg+0x4c>)
 80083c0:	e00e      	b.n	80083e0 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80083c2:	4b0a      	ldr	r3, [pc, #40]	; (80083ec <lwip_netconn_err_to_msg+0x50>)
 80083c4:	e00c      	b.n	80083e0 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80083c6:	4b0a      	ldr	r3, [pc, #40]	; (80083f0 <lwip_netconn_err_to_msg+0x54>)
 80083c8:	e00a      	b.n	80083e0 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80083ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d005      	beq.n	80083de <lwip_netconn_err_to_msg+0x42>
 80083d2:	4b08      	ldr	r3, [pc, #32]	; (80083f4 <lwip_netconn_err_to_msg+0x58>)
 80083d4:	227d      	movs	r2, #125	; 0x7d
 80083d6:	4908      	ldr	r1, [pc, #32]	; (80083f8 <lwip_netconn_err_to_msg+0x5c>)
 80083d8:	4808      	ldr	r0, [pc, #32]	; (80083fc <lwip_netconn_err_to_msg+0x60>)
 80083da:	f00f fd65 	bl	8017ea8 <iprintf>
      return NULL;
 80083de:	2300      	movs	r3, #0
  }
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	0801ca10 	.word	0x0801ca10
 80083ec:	0801ca11 	.word	0x0801ca11
 80083f0:	0801ca12 	.word	0x0801ca12
 80083f4:	080192c0 	.word	0x080192c0
 80083f8:	080192f4 	.word	0x080192f4
 80083fc:	08019304 	.word	0x08019304

08008400 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d105      	bne.n	800841c <lwip_netconn_is_err_msg+0x1c>
 8008410:	4b12      	ldr	r3, [pc, #72]	; (800845c <lwip_netconn_is_err_msg+0x5c>)
 8008412:	2285      	movs	r2, #133	; 0x85
 8008414:	4912      	ldr	r1, [pc, #72]	; (8008460 <lwip_netconn_is_err_msg+0x60>)
 8008416:	4813      	ldr	r0, [pc, #76]	; (8008464 <lwip_netconn_is_err_msg+0x64>)
 8008418:	f00f fd46 	bl	8017ea8 <iprintf>

  if (msg == &netconn_aborted) {
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a12      	ldr	r2, [pc, #72]	; (8008468 <lwip_netconn_is_err_msg+0x68>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d104      	bne.n	800842e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	22f3      	movs	r2, #243	; 0xf3
 8008428:	701a      	strb	r2, [r3, #0]
    return 1;
 800842a:	2301      	movs	r3, #1
 800842c:	e012      	b.n	8008454 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a0e      	ldr	r2, [pc, #56]	; (800846c <lwip_netconn_is_err_msg+0x6c>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d104      	bne.n	8008440 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	22f2      	movs	r2, #242	; 0xf2
 800843a:	701a      	strb	r2, [r3, #0]
    return 1;
 800843c:	2301      	movs	r3, #1
 800843e:	e009      	b.n	8008454 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a0b      	ldr	r2, [pc, #44]	; (8008470 <lwip_netconn_is_err_msg+0x70>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d104      	bne.n	8008452 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	22f1      	movs	r2, #241	; 0xf1
 800844c:	701a      	strb	r2, [r3, #0]
    return 1;
 800844e:	2301      	movs	r3, #1
 8008450:	e000      	b.n	8008454 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	080192c0 	.word	0x080192c0
 8008460:	0801932c 	.word	0x0801932c
 8008464:	08019304 	.word	0x08019304
 8008468:	0801ca10 	.word	0x0801ca10
 800846c:	0801ca11 	.word	0x0801ca11
 8008470:	0801ca12 	.word	0x0801ca12

08008474 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b088      	sub	sp, #32
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
 8008480:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d105      	bne.n	8008494 <recv_udp+0x20>
 8008488:	4b34      	ldr	r3, [pc, #208]	; (800855c <recv_udp+0xe8>)
 800848a:	22e5      	movs	r2, #229	; 0xe5
 800848c:	4934      	ldr	r1, [pc, #208]	; (8008560 <recv_udp+0xec>)
 800848e:	4835      	ldr	r0, [pc, #212]	; (8008564 <recv_udp+0xf0>)
 8008490:	f00f fd0a 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d105      	bne.n	80084a6 <recv_udp+0x32>
 800849a:	4b30      	ldr	r3, [pc, #192]	; (800855c <recv_udp+0xe8>)
 800849c:	22e6      	movs	r2, #230	; 0xe6
 800849e:	4932      	ldr	r1, [pc, #200]	; (8008568 <recv_udp+0xf4>)
 80084a0:	4830      	ldr	r0, [pc, #192]	; (8008564 <recv_udp+0xf0>)
 80084a2:	f00f fd01 	bl	8017ea8 <iprintf>
  conn = (struct netconn *)arg;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d103      	bne.n	80084b8 <recv_udp+0x44>
    pbuf_free(p);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f003 ff95 	bl	800c3e0 <pbuf_free>
    return;
 80084b6:	e04d      	b.n	8008554 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d005      	beq.n	80084ce <recv_udp+0x5a>
 80084c2:	4b26      	ldr	r3, [pc, #152]	; (800855c <recv_udp+0xe8>)
 80084c4:	22ee      	movs	r2, #238	; 0xee
 80084c6:	4929      	ldr	r1, [pc, #164]	; (800856c <recv_udp+0xf8>)
 80084c8:	4826      	ldr	r0, [pc, #152]	; (8008564 <recv_udp+0xf0>)
 80084ca:	f00f fced 	bl	8017ea8 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	3310      	adds	r3, #16
 80084d2:	4618      	mov	r0, r3
 80084d4:	f00f fb49 	bl	8017b6a <sys_mbox_valid>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d103      	bne.n	80084e6 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f003 ff7e 	bl	800c3e0 <pbuf_free>
    return;
 80084e4:	e036      	b.n	8008554 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80084e6:	2006      	movs	r0, #6
 80084e8:	f003 f87c 	bl	800b5e4 <memp_malloc>
 80084ec:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d103      	bne.n	80084fc <recv_udp+0x88>
    pbuf_free(p);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f003 ff73 	bl	800c3e0 <pbuf_free>
    return;
 80084fa:	e02b      	b.n	8008554 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d002      	beq.n	8008514 <recv_udp+0xa0>
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	e000      	b.n	8008516 <recv_udp+0xa2>
 8008514:	2300      	movs	r3, #0
 8008516:	69ba      	ldr	r2, [r7, #24]
 8008518:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800851e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	891b      	ldrh	r3, [r3, #8]
 8008524:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	3310      	adds	r3, #16
 800852a:	69b9      	ldr	r1, [r7, #24]
 800852c:	4618      	mov	r0, r3
 800852e:	f00f faa7 	bl	8017a80 <sys_mbox_trypost>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d003      	beq.n	8008540 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008538:	69b8      	ldr	r0, [r7, #24]
 800853a:	f001 faff 	bl	8009b3c <netbuf_delete>
    return;
 800853e:	e009      	b.n	8008554 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008544:	2b00      	cmp	r3, #0
 8008546:	d005      	beq.n	8008554 <recv_udp+0xe0>
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854c:	8afa      	ldrh	r2, [r7, #22]
 800854e:	2100      	movs	r1, #0
 8008550:	69f8      	ldr	r0, [r7, #28]
 8008552:	4798      	blx	r3
  }
}
 8008554:	3720      	adds	r7, #32
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	080192c0 	.word	0x080192c0
 8008560:	08019338 	.word	0x08019338
 8008564:	08019304 	.word	0x08019304
 8008568:	0801935c 	.word	0x0801935c
 800856c:	0801937c 	.word	0x0801937c

08008570 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b088      	sub	sp, #32
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
 800857c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d106      	bne.n	8008592 <recv_tcp+0x22>
 8008584:	4b36      	ldr	r3, [pc, #216]	; (8008660 <recv_tcp+0xf0>)
 8008586:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800858a:	4936      	ldr	r1, [pc, #216]	; (8008664 <recv_tcp+0xf4>)
 800858c:	4836      	ldr	r0, [pc, #216]	; (8008668 <recv_tcp+0xf8>)
 800858e:	f00f fc8b 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d106      	bne.n	80085a6 <recv_tcp+0x36>
 8008598:	4b31      	ldr	r3, [pc, #196]	; (8008660 <recv_tcp+0xf0>)
 800859a:	f240 122d 	movw	r2, #301	; 0x12d
 800859e:	4933      	ldr	r1, [pc, #204]	; (800866c <recv_tcp+0xfc>)
 80085a0:	4831      	ldr	r0, [pc, #196]	; (8008668 <recv_tcp+0xf8>)
 80085a2:	f00f fc81 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80085a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d006      	beq.n	80085bc <recv_tcp+0x4c>
 80085ae:	4b2c      	ldr	r3, [pc, #176]	; (8008660 <recv_tcp+0xf0>)
 80085b0:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80085b4:	492e      	ldr	r1, [pc, #184]	; (8008670 <recv_tcp+0x100>)
 80085b6:	482c      	ldr	r0, [pc, #176]	; (8008668 <recv_tcp+0xf8>)
 80085b8:	f00f fc76 	bl	8017ea8 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d102      	bne.n	80085cc <recv_tcp+0x5c>
    return ERR_VAL;
 80085c6:	f06f 0305 	mvn.w	r3, #5
 80085ca:	e045      	b.n	8008658 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d006      	beq.n	80085e4 <recv_tcp+0x74>
 80085d6:	4b22      	ldr	r3, [pc, #136]	; (8008660 <recv_tcp+0xf0>)
 80085d8:	f240 1235 	movw	r2, #309	; 0x135
 80085dc:	4925      	ldr	r1, [pc, #148]	; (8008674 <recv_tcp+0x104>)
 80085de:	4822      	ldr	r0, [pc, #136]	; (8008668 <recv_tcp+0xf8>)
 80085e0:	f00f fc62 	bl	8017ea8 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	3310      	adds	r3, #16
 80085e8:	4618      	mov	r0, r3
 80085ea:	f00f fabe 	bl	8017b6a <sys_mbox_valid>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10d      	bne.n	8008610 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d008      	beq.n	800860c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	891b      	ldrh	r3, [r3, #8]
 80085fe:	4619      	mov	r1, r3
 8008600:	68b8      	ldr	r0, [r7, #8]
 8008602:	f004 febd 	bl	800d380 <tcp_recved>
      pbuf_free(p);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f003 feea 	bl	800c3e0 <pbuf_free>
    }
    return ERR_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	e023      	b.n	8008658 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d005      	beq.n	8008622 <recv_tcp+0xb2>
    msg = p;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	891b      	ldrh	r3, [r3, #8]
 800861e:	83fb      	strh	r3, [r7, #30]
 8008620:	e003      	b.n	800862a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008622:	4b15      	ldr	r3, [pc, #84]	; (8008678 <recv_tcp+0x108>)
 8008624:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008626:	2300      	movs	r3, #0
 8008628:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	3310      	adds	r3, #16
 800862e:	69b9      	ldr	r1, [r7, #24]
 8008630:	4618      	mov	r0, r3
 8008632:	f00f fa25 	bl	8017a80 <sys_mbox_trypost>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d002      	beq.n	8008642 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800863c:	f04f 33ff 	mov.w	r3, #4294967295
 8008640:	e00a      	b.n	8008658 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008646:	2b00      	cmp	r3, #0
 8008648:	d005      	beq.n	8008656 <recv_tcp+0xe6>
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864e:	8bfa      	ldrh	r2, [r7, #30]
 8008650:	2100      	movs	r1, #0
 8008652:	6978      	ldr	r0, [r7, #20]
 8008654:	4798      	blx	r3
  }

  return ERR_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3720      	adds	r7, #32
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	080192c0 	.word	0x080192c0
 8008664:	0801939c 	.word	0x0801939c
 8008668:	08019304 	.word	0x08019304
 800866c:	080193c0 	.word	0x080193c0
 8008670:	080193e0 	.word	0x080193e0
 8008674:	080193f8 	.word	0x080193f8
 8008678:	0801ca12 	.word	0x0801ca12

0800867c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d106      	bne.n	800869e <poll_tcp+0x22>
 8008690:	4b29      	ldr	r3, [pc, #164]	; (8008738 <poll_tcp+0xbc>)
 8008692:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008696:	4929      	ldr	r1, [pc, #164]	; (800873c <poll_tcp+0xc0>)
 8008698:	4829      	ldr	r0, [pc, #164]	; (8008740 <poll_tcp+0xc4>)
 800869a:	f00f fc05 	bl	8017ea8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	785b      	ldrb	r3, [r3, #1]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d104      	bne.n	80086b0 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80086a6:	2101      	movs	r1, #1
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f000 ff63 	bl	8009574 <lwip_netconn_do_writemore>
 80086ae:	e016      	b.n	80086de <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	785b      	ldrb	r3, [r3, #1]
 80086b4:	2b04      	cmp	r3, #4
 80086b6:	d112      	bne.n	80086de <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6a1b      	ldr	r3, [r3, #32]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00a      	beq.n	80086d6 <poll_tcp+0x5a>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6a1b      	ldr	r3, [r3, #32]
 80086c4:	7a5b      	ldrb	r3, [r3, #9]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d005      	beq.n	80086d6 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6a1b      	ldr	r3, [r3, #32]
 80086ce:	7a5a      	ldrb	r2, [r3, #9]
 80086d0:	3a01      	subs	r2, #1
 80086d2:	b2d2      	uxtb	r2, r2
 80086d4:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80086d6:	2101      	movs	r1, #1
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f000 fbf7 	bl	8008ecc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	7f1b      	ldrb	r3, [r3, #28]
 80086e2:	f003 0310 	and.w	r3, r3, #16
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d021      	beq.n	800872e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d01d      	beq.n	800872e <poll_tcp+0xb2>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80086fa:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80086fe:	d316      	bcc.n	800872e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008708:	2b04      	cmp	r3, #4
 800870a:	d810      	bhi.n	800872e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	7f1b      	ldrb	r3, [r3, #28]
 8008710:	f023 0310 	bic.w	r3, r3, #16
 8008714:	b2da      	uxtb	r2, r3
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871e:	2b00      	cmp	r3, #0
 8008720:	d005      	beq.n	800872e <poll_tcp+0xb2>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008726:	2200      	movs	r2, #0
 8008728:	2102      	movs	r1, #2
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	080192c0 	.word	0x080192c0
 800873c:	08019418 	.word	0x08019418
 8008740:	08019304 	.word	0x08019304

08008744 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b086      	sub	sp, #24
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	4613      	mov	r3, r2
 8008750:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d106      	bne.n	800876a <sent_tcp+0x26>
 800875c:	4b20      	ldr	r3, [pc, #128]	; (80087e0 <sent_tcp+0x9c>)
 800875e:	f240 1293 	movw	r2, #403	; 0x193
 8008762:	4920      	ldr	r1, [pc, #128]	; (80087e4 <sent_tcp+0xa0>)
 8008764:	4820      	ldr	r0, [pc, #128]	; (80087e8 <sent_tcp+0xa4>)
 8008766:	f00f fb9f 	bl	8017ea8 <iprintf>

  if (conn) {
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d032      	beq.n	80087d6 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	785b      	ldrb	r3, [r3, #1]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d104      	bne.n	8008782 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008778:	2101      	movs	r1, #1
 800877a:	6978      	ldr	r0, [r7, #20]
 800877c:	f000 fefa 	bl	8009574 <lwip_netconn_do_writemore>
 8008780:	e007      	b.n	8008792 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	785b      	ldrb	r3, [r3, #1]
 8008786:	2b04      	cmp	r3, #4
 8008788:	d103      	bne.n	8008792 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800878a:	2101      	movs	r1, #1
 800878c:	6978      	ldr	r0, [r7, #20]
 800878e:	f000 fb9d 	bl	8008ecc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d01d      	beq.n	80087d6 <sent_tcp+0x92>
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80087a2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80087a6:	d316      	bcc.n	80087d6 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80087b0:	2b04      	cmp	r3, #4
 80087b2:	d810      	bhi.n	80087d6 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	7f1b      	ldrb	r3, [r3, #28]
 80087b8:	f023 0310 	bic.w	r3, r3, #16
 80087bc:	b2da      	uxtb	r2, r3
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d005      	beq.n	80087d6 <sent_tcp+0x92>
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ce:	88fa      	ldrh	r2, [r7, #6]
 80087d0:	2102      	movs	r1, #2
 80087d2:	6978      	ldr	r0, [r7, #20]
 80087d4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3718      	adds	r7, #24
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	080192c0 	.word	0x080192c0
 80087e4:	08019418 	.word	0x08019418
 80087e8:	08019304 	.word	0x08019304

080087ec <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b088      	sub	sp, #32
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	460b      	mov	r3, r1
 80087f6:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d106      	bne.n	8008810 <err_tcp+0x24>
 8008802:	4b5f      	ldr	r3, [pc, #380]	; (8008980 <err_tcp+0x194>)
 8008804:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008808:	495e      	ldr	r1, [pc, #376]	; (8008984 <err_tcp+0x198>)
 800880a:	485f      	ldr	r0, [pc, #380]	; (8008988 <err_tcp+0x19c>)
 800880c:	f00f fb4c 	bl	8017ea8 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008810:	f00f fac6 	bl	8017da0 <sys_arch_protect>
 8008814:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	2200      	movs	r2, #0
 800881a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	78fa      	ldrb	r2, [r7, #3]
 8008820:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	7f1b      	ldrb	r3, [r3, #28]
 8008826:	f043 0301 	orr.w	r3, r3, #1
 800882a:	b2da      	uxtb	r2, r3
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	785b      	ldrb	r3, [r3, #1]
 8008834:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	2200      	movs	r2, #0
 800883a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800883c:	69b8      	ldr	r0, [r7, #24]
 800883e:	f00f fabd 	bl	8017dbc <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008846:	2b00      	cmp	r3, #0
 8008848:	d005      	beq.n	8008856 <err_tcp+0x6a>
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884e:	2200      	movs	r2, #0
 8008850:	2104      	movs	r1, #4
 8008852:	69f8      	ldr	r0, [r7, #28]
 8008854:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885a:	2b00      	cmp	r3, #0
 800885c:	d005      	beq.n	800886a <err_tcp+0x7e>
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008862:	2200      	movs	r2, #0
 8008864:	2100      	movs	r1, #0
 8008866:	69f8      	ldr	r0, [r7, #28]
 8008868:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886e:	2b00      	cmp	r3, #0
 8008870:	d005      	beq.n	800887e <err_tcp+0x92>
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008876:	2200      	movs	r2, #0
 8008878:	2102      	movs	r1, #2
 800887a:	69f8      	ldr	r0, [r7, #28]
 800887c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800887e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008882:	4618      	mov	r0, r3
 8008884:	f7ff fd8a 	bl	800839c <lwip_netconn_err_to_msg>
 8008888:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	3310      	adds	r3, #16
 800888e:	4618      	mov	r0, r3
 8008890:	f00f f96b 	bl	8017b6a <sys_mbox_valid>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d005      	beq.n	80088a6 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	3310      	adds	r3, #16
 800889e:	6939      	ldr	r1, [r7, #16]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f00f f8ed 	bl	8017a80 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	3314      	adds	r3, #20
 80088aa:	4618      	mov	r0, r3
 80088ac:	f00f f95d 	bl	8017b6a <sys_mbox_valid>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d005      	beq.n	80088c2 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	3314      	adds	r3, #20
 80088ba:	6939      	ldr	r1, [r7, #16]
 80088bc:	4618      	mov	r0, r3
 80088be:	f00f f8df 	bl	8017a80 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80088c2:	7dfb      	ldrb	r3, [r7, #23]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d005      	beq.n	80088d4 <err_tcp+0xe8>
 80088c8:	7dfb      	ldrb	r3, [r7, #23]
 80088ca:	2b04      	cmp	r3, #4
 80088cc:	d002      	beq.n	80088d4 <err_tcp+0xe8>
 80088ce:	7dfb      	ldrb	r3, [r7, #23]
 80088d0:	2b03      	cmp	r3, #3
 80088d2:	d143      	bne.n	800895c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	7f1b      	ldrb	r3, [r3, #28]
 80088d8:	f003 0304 	and.w	r3, r3, #4
 80088dc:	2b00      	cmp	r3, #0
 80088de:	bf14      	ite	ne
 80088e0:	2301      	movne	r3, #1
 80088e2:	2300      	moveq	r3, #0
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	7f1b      	ldrb	r3, [r3, #28]
 80088ec:	f023 0304 	bic.w	r3, r3, #4
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d13b      	bne.n	8008974 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	6a1b      	ldr	r3, [r3, #32]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d106      	bne.n	8008912 <err_tcp+0x126>
 8008904:	4b1e      	ldr	r3, [pc, #120]	; (8008980 <err_tcp+0x194>)
 8008906:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800890a:	4920      	ldr	r1, [pc, #128]	; (800898c <err_tcp+0x1a0>)
 800890c:	481e      	ldr	r0, [pc, #120]	; (8008988 <err_tcp+0x19c>)
 800890e:	f00f facb 	bl	8017ea8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8008912:	7dfb      	ldrb	r3, [r7, #23]
 8008914:	2b04      	cmp	r3, #4
 8008916:	d104      	bne.n	8008922 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	6a1b      	ldr	r3, [r3, #32]
 800891c:	2200      	movs	r2, #0
 800891e:	711a      	strb	r2, [r3, #4]
 8008920:	e003      	b.n	800892a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	78fa      	ldrb	r2, [r7, #3]
 8008928:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	330c      	adds	r3, #12
 8008932:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008934:	68b8      	ldr	r0, [r7, #8]
 8008936:	f00f f9a9 	bl	8017c8c <sys_sem_valid>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d106      	bne.n	800894e <err_tcp+0x162>
 8008940:	4b0f      	ldr	r3, [pc, #60]	; (8008980 <err_tcp+0x194>)
 8008942:	f240 12ef 	movw	r2, #495	; 0x1ef
 8008946:	4912      	ldr	r1, [pc, #72]	; (8008990 <err_tcp+0x1a4>)
 8008948:	480f      	ldr	r0, [pc, #60]	; (8008988 <err_tcp+0x19c>)
 800894a:	f00f faad 	bl	8017ea8 <iprintf>
      conn->current_msg = NULL;
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	2200      	movs	r2, #0
 8008952:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8008954:	68b8      	ldr	r0, [r7, #8]
 8008956:	f00f f97f 	bl	8017c58 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800895a:	e00b      	b.n	8008974 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	6a1b      	ldr	r3, [r3, #32]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d008      	beq.n	8008976 <err_tcp+0x18a>
 8008964:	4b06      	ldr	r3, [pc, #24]	; (8008980 <err_tcp+0x194>)
 8008966:	f240 12f7 	movw	r2, #503	; 0x1f7
 800896a:	490a      	ldr	r1, [pc, #40]	; (8008994 <err_tcp+0x1a8>)
 800896c:	4806      	ldr	r0, [pc, #24]	; (8008988 <err_tcp+0x19c>)
 800896e:	f00f fa9b 	bl	8017ea8 <iprintf>
  }
}
 8008972:	e000      	b.n	8008976 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8008974:	bf00      	nop
}
 8008976:	bf00      	nop
 8008978:	3720      	adds	r7, #32
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	080192c0 	.word	0x080192c0
 8008984:	08019418 	.word	0x08019418
 8008988:	08019304 	.word	0x08019304
 800898c:	08019428 	.word	0x08019428
 8008990:	08019444 	.word	0x08019444
 8008994:	08019460 	.word	0x08019460

08008998 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80089a6:	6879      	ldr	r1, [r7, #4]
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f005 fbc9 	bl	800e140 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80089ae:	490a      	ldr	r1, [pc, #40]	; (80089d8 <setup_tcp+0x40>)
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f005 fbd7 	bl	800e164 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80089b6:	4909      	ldr	r1, [pc, #36]	; (80089dc <setup_tcp+0x44>)
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f005 fbf5 	bl	800e1a8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80089be:	2202      	movs	r2, #2
 80089c0:	4907      	ldr	r1, [pc, #28]	; (80089e0 <setup_tcp+0x48>)
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f005 fc4c 	bl	800e260 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80089c8:	4906      	ldr	r1, [pc, #24]	; (80089e4 <setup_tcp+0x4c>)
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f005 fc0e 	bl	800e1ec <tcp_err>
}
 80089d0:	bf00      	nop
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	08008571 	.word	0x08008571
 80089dc:	08008745 	.word	0x08008745
 80089e0:	0800867d 	.word	0x0800867d
 80089e4:	080087ed 	.word	0x080087ed

080089e8 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80089e8:	b590      	push	{r4, r7, lr}
 80089ea:	b089      	sub	sp, #36	; 0x24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	4613      	mov	r3, r2
 80089f4:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d102      	bne.n	8008a06 <accept_function+0x1e>
    return ERR_VAL;
 8008a00:	f06f 0305 	mvn.w	r3, #5
 8008a04:	e0a1      	b.n	8008b4a <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	3314      	adds	r3, #20
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f00f f8ad 	bl	8017b6a <sys_mbox_valid>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d102      	bne.n	8008a1c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8008a16:	f06f 0305 	mvn.w	r3, #5
 8008a1a:	e096      	b.n	8008b4a <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d11b      	bne.n	8008a5a <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	f103 0414 	add.w	r4, r3, #20
 8008a28:	f06f 000c 	mvn.w	r0, #12
 8008a2c:	f7ff fcb6 	bl	800839c <lwip_netconn_err_to_msg>
 8008a30:	4603      	mov	r3, r0
 8008a32:	4619      	mov	r1, r3
 8008a34:	4620      	mov	r0, r4
 8008a36:	f00f f823 	bl	8017a80 <sys_mbox_trypost>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d109      	bne.n	8008a54 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d005      	beq.n	8008a54 <accept_function+0x6c>
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	2100      	movs	r1, #0
 8008a50:	69f8      	ldr	r0, [r7, #28]
 8008a52:	4798      	blx	r3
    }
    return ERR_VAL;
 8008a54:	f06f 0305 	mvn.w	r3, #5
 8008a58:	e077      	b.n	8008b4a <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8008a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d006      	beq.n	8008a70 <accept_function+0x88>
 8008a62:	4b3c      	ldr	r3, [pc, #240]	; (8008b54 <accept_function+0x16c>)
 8008a64:	f240 222a 	movw	r2, #554	; 0x22a
 8008a68:	493b      	ldr	r1, [pc, #236]	; (8008b58 <accept_function+0x170>)
 8008a6a:	483c      	ldr	r0, [pc, #240]	; (8008b5c <accept_function+0x174>)
 8008a6c:	f00f fa1c 	bl	8017ea8 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	781a      	ldrb	r2, [r3, #0]
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a78:	4619      	mov	r1, r3
 8008a7a:	4610      	mov	r0, r2
 8008a7c:	f000 f8f0 	bl	8008c60 <netconn_alloc>
 8008a80:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d11b      	bne.n	8008ac0 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	f103 0414 	add.w	r4, r3, #20
 8008a8e:	f06f 000c 	mvn.w	r0, #12
 8008a92:	f7ff fc83 	bl	800839c <lwip_netconn_err_to_msg>
 8008a96:	4603      	mov	r3, r0
 8008a98:	4619      	mov	r1, r3
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	f00e fff0 	bl	8017a80 <sys_mbox_trypost>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d109      	bne.n	8008aba <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d005      	beq.n	8008aba <accept_function+0xd2>
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	69f8      	ldr	r0, [r7, #28]
 8008ab8:	4798      	blx	r3
    }
    return ERR_MEM;
 8008aba:	f04f 33ff 	mov.w	r3, #4294967295
 8008abe:	e044      	b.n	8008b4a <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8008ac6:	69b8      	ldr	r0, [r7, #24]
 8008ac8:	f7ff ff66 	bl	8008998 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	3314      	adds	r3, #20
 8008ad0:	69b9      	ldr	r1, [r7, #24]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f00e ffd4 	bl	8017a80 <sys_mbox_trypost>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d02a      	beq.n	8008b34 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	6978      	ldr	r0, [r7, #20]
 8008ae8:	f005 fb2a 	bl	800e140 <tcp_arg>
    tcp_recv(pcb, NULL);
 8008aec:	2100      	movs	r1, #0
 8008aee:	6978      	ldr	r0, [r7, #20]
 8008af0:	f005 fb38 	bl	800e164 <tcp_recv>
    tcp_sent(pcb, NULL);
 8008af4:	2100      	movs	r1, #0
 8008af6:	6978      	ldr	r0, [r7, #20]
 8008af8:	f005 fb56 	bl	800e1a8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8008afc:	2200      	movs	r2, #0
 8008afe:	2100      	movs	r1, #0
 8008b00:	6978      	ldr	r0, [r7, #20]
 8008b02:	f005 fbad 	bl	800e260 <tcp_poll>
    tcp_err(pcb, NULL);
 8008b06:	2100      	movs	r1, #0
 8008b08:	6978      	ldr	r0, [r7, #20]
 8008b0a:	f005 fb6f 	bl	800e1ec <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	2200      	movs	r2, #0
 8008b12:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	3310      	adds	r3, #16
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f00e ff9f 	bl	8017a5c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	3310      	adds	r3, #16
 8008b22:	4618      	mov	r0, r3
 8008b24:	f00f f832 	bl	8017b8c <sys_mbox_set_invalid>
    netconn_free(newconn);
 8008b28:	69b8      	ldr	r0, [r7, #24]
 8008b2a:	f000 f907 	bl	8008d3c <netconn_free>
    return ERR_MEM;
 8008b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b32:	e00a      	b.n	8008b4a <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d005      	beq.n	8008b48 <accept_function+0x160>
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b40:	2200      	movs	r2, #0
 8008b42:	2100      	movs	r1, #0
 8008b44:	69f8      	ldr	r0, [r7, #28]
 8008b46:	4798      	blx	r3
  }

  return ERR_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3724      	adds	r7, #36	; 0x24
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd90      	pop	{r4, r7, pc}
 8008b52:	bf00      	nop
 8008b54:	080192c0 	.word	0x080192c0
 8008b58:	0801947c 	.word	0x0801947c
 8008b5c:	08019304 	.word	0x08019304

08008b60 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008b60:	b590      	push	{r4, r7, lr}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d006      	beq.n	8008b84 <pcb_new+0x24>
 8008b76:	4b2b      	ldr	r3, [pc, #172]	; (8008c24 <pcb_new+0xc4>)
 8008b78:	f240 2265 	movw	r2, #613	; 0x265
 8008b7c:	492a      	ldr	r1, [pc, #168]	; (8008c28 <pcb_new+0xc8>)
 8008b7e:	482b      	ldr	r0, [pc, #172]	; (8008c2c <pcb_new+0xcc>)
 8008b80:	f00f f992 	bl	8017ea8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b8e:	2b10      	cmp	r3, #16
 8008b90:	d022      	beq.n	8008bd8 <pcb_new+0x78>
 8008b92:	2b20      	cmp	r3, #32
 8008b94:	d133      	bne.n	8008bfe <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681c      	ldr	r4, [r3, #0]
 8008b9a:	7bfb      	ldrb	r3, [r7, #15]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f00a fd80 	bl	80136a2 <udp_new_ip_type>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d02a      	beq.n	8008c06 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	2b22      	cmp	r3, #34	; 0x22
 8008bb8:	d104      	bne.n	8008bc4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	6858      	ldr	r0, [r3, #4]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	461a      	mov	r2, r3
 8008bd0:	4917      	ldr	r1, [pc, #92]	; (8008c30 <pcb_new+0xd0>)
 8008bd2:	f00a fced 	bl	80135b0 <udp_recv>
      }
      break;
 8008bd6:	e016      	b.n	8008c06 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681c      	ldr	r4, [r3, #0]
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f005 faa0 	bl	800e124 <tcp_new_ip_type>
 8008be4:	4603      	mov	r3, r0
 8008be6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00b      	beq.n	8008c0a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7ff fece 	bl	8008998 <setup_tcp>
      }
      break;
 8008bfc:	e005      	b.n	8008c0a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	22fa      	movs	r2, #250	; 0xfa
 8008c02:	711a      	strb	r2, [r3, #4]
      return;
 8008c04:	e00a      	b.n	8008c1c <pcb_new+0xbc>
      break;
 8008c06:	bf00      	nop
 8008c08:	e000      	b.n	8008c0c <pcb_new+0xac>
      break;
 8008c0a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d102      	bne.n	8008c1c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	22ff      	movs	r2, #255	; 0xff
 8008c1a:	711a      	strb	r2, [r3, #4]
  }
}
 8008c1c:	3714      	adds	r7, #20
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd90      	pop	{r4, r7, pc}
 8008c22:	bf00      	nop
 8008c24:	080192c0 	.word	0x080192c0
 8008c28:	080194a4 	.word	0x080194a4
 8008c2c:	08019304 	.word	0x08019304
 8008c30:	08008475 	.word	0x08008475

08008c34 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d102      	bne.n	8008c56 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f7ff ff85 	bl	8008b60 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8008c56:	bf00      	nop
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
	...

08008c60 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	4603      	mov	r3, r0
 8008c68:	6039      	str	r1, [r7, #0]
 8008c6a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008c70:	2007      	movs	r0, #7
 8008c72:	f002 fcb7 	bl	800b5e4 <memp_malloc>
 8008c76:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d101      	bne.n	8008c82 <netconn_alloc+0x22>
    return NULL;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	e052      	b.n	8008d28 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2200      	movs	r2, #0
 8008c86:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	79fa      	ldrb	r2, [r7, #7]
 8008c8c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8008c94:	79fb      	ldrb	r3, [r7, #7]
 8008c96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c9a:	2b10      	cmp	r3, #16
 8008c9c:	d004      	beq.n	8008ca8 <netconn_alloc+0x48>
 8008c9e:	2b20      	cmp	r3, #32
 8008ca0:	d105      	bne.n	8008cae <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008ca2:	2306      	movs	r3, #6
 8008ca4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8008ca6:	e00a      	b.n	8008cbe <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008ca8:	2306      	movs	r3, #6
 8008caa:	617b      	str	r3, [r7, #20]
      break;
 8008cac:	e007      	b.n	8008cbe <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008cae:	4b20      	ldr	r3, [pc, #128]	; (8008d30 <netconn_alloc+0xd0>)
 8008cb0:	f240 22e5 	movw	r2, #741	; 0x2e5
 8008cb4:	491f      	ldr	r1, [pc, #124]	; (8008d34 <netconn_alloc+0xd4>)
 8008cb6:	4820      	ldr	r0, [pc, #128]	; (8008d38 <netconn_alloc+0xd8>)
 8008cb8:	f00f f8f6 	bl	8017ea8 <iprintf>
      goto free_and_return;
 8008cbc:	e02f      	b.n	8008d1e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	3310      	adds	r3, #16
 8008cc2:	6979      	ldr	r1, [r7, #20]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f00e fea7 	bl	8017a18 <sys_mbox_new>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d125      	bne.n	8008d1c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	330c      	adds	r3, #12
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f00e ff65 	bl	8017ba6 <sys_sem_new>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d005      	beq.n	8008cee <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	3310      	adds	r3, #16
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f00e feb8 	bl	8017a5c <sys_mbox_free>
    goto free_and_return;
 8008cec:	e017      	b.n	8008d1e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	3314      	adds	r3, #20
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f00e ff4a 	bl	8017b8c <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f04f 32ff 	mov.w	r2, #4294967295
 8008d04:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	683a      	ldr	r2, [r7, #0]
 8008d0a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	7cfa      	ldrb	r2, [r7, #19]
 8008d16:	771a      	strb	r2, [r3, #28]
  return conn;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	e005      	b.n	8008d28 <netconn_alloc+0xc8>
    goto free_and_return;
 8008d1c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8008d1e:	68f9      	ldr	r1, [r7, #12]
 8008d20:	2007      	movs	r0, #7
 8008d22:	f002 fcb1 	bl	800b688 <memp_free>
  return NULL;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3718      	adds	r7, #24
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	080192c0 	.word	0x080192c0
 8008d34:	080194c4 	.word	0x080194c4
 8008d38:	08019304 	.word	0x08019304

08008d3c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d006      	beq.n	8008d5a <netconn_free+0x1e>
 8008d4c:	4b1b      	ldr	r3, [pc, #108]	; (8008dbc <netconn_free+0x80>)
 8008d4e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008d52:	491b      	ldr	r1, [pc, #108]	; (8008dc0 <netconn_free+0x84>)
 8008d54:	481b      	ldr	r0, [pc, #108]	; (8008dc4 <netconn_free+0x88>)
 8008d56:	f00f f8a7 	bl	8017ea8 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	3310      	adds	r3, #16
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f00e ff03 	bl	8017b6a <sys_mbox_valid>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d006      	beq.n	8008d78 <netconn_free+0x3c>
 8008d6a:	4b14      	ldr	r3, [pc, #80]	; (8008dbc <netconn_free+0x80>)
 8008d6c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8008d70:	4915      	ldr	r1, [pc, #84]	; (8008dc8 <netconn_free+0x8c>)
 8008d72:	4814      	ldr	r0, [pc, #80]	; (8008dc4 <netconn_free+0x88>)
 8008d74:	f00f f898 	bl	8017ea8 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	3314      	adds	r3, #20
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f00e fef4 	bl	8017b6a <sys_mbox_valid>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d006      	beq.n	8008d96 <netconn_free+0x5a>
 8008d88:	4b0c      	ldr	r3, [pc, #48]	; (8008dbc <netconn_free+0x80>)
 8008d8a:	f240 3227 	movw	r2, #807	; 0x327
 8008d8e:	490f      	ldr	r1, [pc, #60]	; (8008dcc <netconn_free+0x90>)
 8008d90:	480c      	ldr	r0, [pc, #48]	; (8008dc4 <netconn_free+0x88>)
 8008d92:	f00f f889 	bl	8017ea8 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	330c      	adds	r3, #12
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f00e ff69 	bl	8017c72 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	330c      	adds	r3, #12
 8008da4:	4618      	mov	r0, r3
 8008da6:	f00e ff82 	bl	8017cae <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8008daa:	6879      	ldr	r1, [r7, #4]
 8008dac:	2007      	movs	r0, #7
 8008dae:	f002 fc6b 	bl	800b688 <memp_free>
}
 8008db2:	bf00      	nop
 8008db4:	3708      	adds	r7, #8
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	080192c0 	.word	0x080192c0
 8008dc0:	080194ec 	.word	0x080194ec
 8008dc4:	08019304 	.word	0x08019304
 8008dc8:	0801951c 	.word	0x0801951c
 8008dcc:	08019558 	.word	0x08019558

08008dd0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	3310      	adds	r3, #16
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f00e fec4 	bl	8017b6a <sys_mbox_valid>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d02f      	beq.n	8008e48 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008de8:	e018      	b.n	8008e1c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008df2:	2b10      	cmp	r3, #16
 8008df4:	d10e      	bne.n	8008e14 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	f107 020f 	add.w	r2, r7, #15
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7ff fafe 	bl	8008400 <lwip_netconn_is_err_msg>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d108      	bne.n	8008e1c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f003 fae7 	bl	800c3e0 <pbuf_free>
 8008e12:	e003      	b.n	8008e1c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 fe90 	bl	8009b3c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	3310      	adds	r3, #16
 8008e20:	f107 0210 	add.w	r2, r7, #16
 8008e24:	4611      	mov	r1, r2
 8008e26:	4618      	mov	r0, r3
 8008e28:	f00e fe83 	bl	8017b32 <sys_arch_mbox_tryfetch>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e32:	d1da      	bne.n	8008dea <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	3310      	adds	r3, #16
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f00e fe0f 	bl	8017a5c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	3310      	adds	r3, #16
 8008e42:	4618      	mov	r0, r3
 8008e44:	f00e fea2 	bl	8017b8c <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	3314      	adds	r3, #20
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f00e fe8c 	bl	8017b6a <sys_mbox_valid>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d034      	beq.n	8008ec2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008e58:	e01d      	b.n	8008e96 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	f107 020e 	add.w	r2, r7, #14
 8008e60:	4611      	mov	r1, r2
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7ff facc 	bl	8008400 <lwip_netconn_is_err_msg>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d113      	bne.n	8008e96 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8008e72:	6978      	ldr	r0, [r7, #20]
 8008e74:	f7ff ffac 	bl	8008dd0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d007      	beq.n	8008e90 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	4618      	mov	r0, r3
 8008e86:	f004 f8a1 	bl	800cfcc <tcp_abort>
            newconn->pcb.tcp = NULL;
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8008e90:	6978      	ldr	r0, [r7, #20]
 8008e92:	f7ff ff53 	bl	8008d3c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	3314      	adds	r3, #20
 8008e9a:	f107 0210 	add.w	r2, r7, #16
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f00e fe46 	bl	8017b32 <sys_arch_mbox_tryfetch>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eac:	d1d5      	bne.n	8008e5a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	3314      	adds	r3, #20
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f00e fdd2 	bl	8017a5c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	3314      	adds	r3, #20
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f00e fe65 	bl	8017b8c <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8008ec2:	bf00      	nop
 8008ec4:	3718      	adds	r7, #24
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
	...

08008ecc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d106      	bne.n	8008ef0 <lwip_netconn_do_close_internal+0x24>
 8008ee2:	4ba1      	ldr	r3, [pc, #644]	; (8009168 <lwip_netconn_do_close_internal+0x29c>)
 8008ee4:	f240 32a2 	movw	r2, #930	; 0x3a2
 8008ee8:	49a0      	ldr	r1, [pc, #640]	; (800916c <lwip_netconn_do_close_internal+0x2a0>)
 8008eea:	48a1      	ldr	r0, [pc, #644]	; (8009170 <lwip_netconn_do_close_internal+0x2a4>)
 8008eec:	f00e ffdc 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ef8:	2b10      	cmp	r3, #16
 8008efa:	d006      	beq.n	8008f0a <lwip_netconn_do_close_internal+0x3e>
 8008efc:	4b9a      	ldr	r3, [pc, #616]	; (8009168 <lwip_netconn_do_close_internal+0x29c>)
 8008efe:	f240 32a3 	movw	r2, #931	; 0x3a3
 8008f02:	499c      	ldr	r1, [pc, #624]	; (8009174 <lwip_netconn_do_close_internal+0x2a8>)
 8008f04:	489a      	ldr	r0, [pc, #616]	; (8009170 <lwip_netconn_do_close_internal+0x2a4>)
 8008f06:	f00e ffcf 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	785b      	ldrb	r3, [r3, #1]
 8008f0e:	2b04      	cmp	r3, #4
 8008f10:	d006      	beq.n	8008f20 <lwip_netconn_do_close_internal+0x54>
 8008f12:	4b95      	ldr	r3, [pc, #596]	; (8009168 <lwip_netconn_do_close_internal+0x29c>)
 8008f14:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8008f18:	4997      	ldr	r1, [pc, #604]	; (8009178 <lwip_netconn_do_close_internal+0x2ac>)
 8008f1a:	4895      	ldr	r0, [pc, #596]	; (8009170 <lwip_netconn_do_close_internal+0x2a4>)
 8008f1c:	f00e ffc4 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d106      	bne.n	8008f36 <lwip_netconn_do_close_internal+0x6a>
 8008f28:	4b8f      	ldr	r3, [pc, #572]	; (8009168 <lwip_netconn_do_close_internal+0x29c>)
 8008f2a:	f240 32a5 	movw	r2, #933	; 0x3a5
 8008f2e:	4993      	ldr	r1, [pc, #588]	; (800917c <lwip_netconn_do_close_internal+0x2b0>)
 8008f30:	488f      	ldr	r0, [pc, #572]	; (8009170 <lwip_netconn_do_close_internal+0x2a4>)
 8008f32:	f00e ffb9 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a1b      	ldr	r3, [r3, #32]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d106      	bne.n	8008f4c <lwip_netconn_do_close_internal+0x80>
 8008f3e:	4b8a      	ldr	r3, [pc, #552]	; (8009168 <lwip_netconn_do_close_internal+0x29c>)
 8008f40:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008f44:	498e      	ldr	r1, [pc, #568]	; (8009180 <lwip_netconn_do_close_internal+0x2b4>)
 8008f46:	488a      	ldr	r0, [pc, #552]	; (8009170 <lwip_netconn_do_close_internal+0x2a4>)
 8008f48:	f00e ffae 	bl	8017ea8 <iprintf>

  tpcb = conn->pcb.tcp;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a1b      	ldr	r3, [r3, #32]
 8008f56:	7a1b      	ldrb	r3, [r3, #8]
 8008f58:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8008f5a:	7bfb      	ldrb	r3, [r7, #15]
 8008f5c:	f003 0301 	and.w	r3, r3, #1
 8008f60:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8008f62:	7bfb      	ldrb	r3, [r7, #15]
 8008f64:	f003 0302 	and.w	r3, r3, #2
 8008f68:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
 8008f6c:	2b03      	cmp	r3, #3
 8008f6e:	d102      	bne.n	8008f76 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8008f70:	2301      	movs	r3, #1
 8008f72:	75bb      	strb	r3, [r7, #22]
 8008f74:	e01f      	b.n	8008fb6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8008f76:	7bbb      	ldrb	r3, [r7, #14]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d00e      	beq.n	8008f9a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8008f80:	2b05      	cmp	r3, #5
 8008f82:	d007      	beq.n	8008f94 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8008f88:	2b06      	cmp	r3, #6
 8008f8a:	d003      	beq.n	8008f94 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8008f90:	2b08      	cmp	r3, #8
 8008f92:	d102      	bne.n	8008f9a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8008f94:	2301      	movs	r3, #1
 8008f96:	75bb      	strb	r3, [r7, #22]
 8008f98:	e00d      	b.n	8008fb6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8008f9a:	7b7b      	ldrb	r3, [r7, #13]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d008      	beq.n	8008fb2 <lwip_netconn_do_close_internal+0xe6>
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	8b5b      	ldrh	r3, [r3, #26]
 8008fa4:	f003 0310 	and.w	r3, r3, #16
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d002      	beq.n	8008fb2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8008fac:	2301      	movs	r3, #1
 8008fae:	75bb      	strb	r3, [r7, #22]
 8008fb0:	e001      	b.n	8008fb6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8008fb6:	7dbb      	ldrb	r3, [r7, #22]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d003      	beq.n	8008fc4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	6938      	ldr	r0, [r7, #16]
 8008fc0:	f005 f8be 	bl	800e140 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	7d1b      	ldrb	r3, [r3, #20]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d104      	bne.n	8008fd6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8008fcc:	2100      	movs	r1, #0
 8008fce:	6938      	ldr	r0, [r7, #16]
 8008fd0:	f005 f92e 	bl	800e230 <tcp_accept>
 8008fd4:	e01d      	b.n	8009012 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8008fd6:	7bbb      	ldrb	r3, [r7, #14]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d007      	beq.n	8008fec <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8008fdc:	2100      	movs	r1, #0
 8008fde:	6938      	ldr	r0, [r7, #16]
 8008fe0:	f005 f8c0 	bl	800e164 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	6938      	ldr	r0, [r7, #16]
 8008fe8:	f005 f922 	bl	800e230 <tcp_accept>
    }
    if (shut_tx) {
 8008fec:	7b7b      	ldrb	r3, [r7, #13]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d003      	beq.n	8008ffa <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	6938      	ldr	r0, [r7, #16]
 8008ff6:	f005 f8d7 	bl	800e1a8 <tcp_sent>
    }
    if (shut_close) {
 8008ffa:	7dbb      	ldrb	r3, [r7, #22]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d008      	beq.n	8009012 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009000:	2200      	movs	r2, #0
 8009002:	2100      	movs	r1, #0
 8009004:	6938      	ldr	r0, [r7, #16]
 8009006:	f005 f92b 	bl	800e260 <tcp_poll>
      tcp_err(tpcb, NULL);
 800900a:	2100      	movs	r1, #0
 800900c:	6938      	ldr	r0, [r7, #16]
 800900e:	f005 f8ed 	bl	800e1ec <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8009012:	7dbb      	ldrb	r3, [r7, #22]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d005      	beq.n	8009024 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009018:	6938      	ldr	r0, [r7, #16]
 800901a:	f003 fe93 	bl	800cd44 <tcp_close>
 800901e:	4603      	mov	r3, r0
 8009020:	75fb      	strb	r3, [r7, #23]
 8009022:	e007      	b.n	8009034 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009024:	7bbb      	ldrb	r3, [r7, #14]
 8009026:	7b7a      	ldrb	r2, [r7, #13]
 8009028:	4619      	mov	r1, r3
 800902a:	6938      	ldr	r0, [r7, #16]
 800902c:	f003 feb6 	bl	800cd9c <tcp_shutdown>
 8009030:	4603      	mov	r3, r0
 8009032:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8009034:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d102      	bne.n	8009042 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800903c:	2301      	movs	r3, #1
 800903e:	757b      	strb	r3, [r7, #21]
 8009040:	e016      	b.n	8009070 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8009042:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800904a:	d10f      	bne.n	800906c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a1b      	ldr	r3, [r3, #32]
 8009050:	7a5b      	ldrb	r3, [r3, #9]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d10c      	bne.n	8009070 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8009056:	2301      	movs	r3, #1
 8009058:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800905a:	7dbb      	ldrb	r3, [r7, #22]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d007      	beq.n	8009070 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009060:	6938      	ldr	r0, [r7, #16]
 8009062:	f003 ffb3 	bl	800cfcc <tcp_abort>
          err = ERR_OK;
 8009066:	2300      	movs	r3, #0
 8009068:	75fb      	strb	r3, [r7, #23]
 800906a:	e001      	b.n	8009070 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800906c:	2301      	movs	r3, #1
 800906e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009070:	7d7b      	ldrb	r3, [r7, #21]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d044      	beq.n	8009100 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a1b      	ldr	r3, [r3, #32]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	330c      	adds	r3, #12
 800907e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a1b      	ldr	r3, [r3, #32]
 8009084:	7dfa      	ldrb	r2, [r7, #23]
 8009086:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8009094:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d129      	bne.n	80090f0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800909c:	7dbb      	ldrb	r3, [r7, #22]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00c      	beq.n	80090bc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d005      	beq.n	80090bc <lwip_netconn_do_close_internal+0x1f0>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b4:	2200      	movs	r2, #0
 80090b6:	2104      	movs	r1, #4
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	4798      	blx	r3
      }
      if (shut_rx) {
 80090bc:	7bbb      	ldrb	r3, [r7, #14]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d009      	beq.n	80090d6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d005      	beq.n	80090d6 <lwip_netconn_do_close_internal+0x20a>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ce:	2200      	movs	r2, #0
 80090d0:	2100      	movs	r1, #0
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	4798      	blx	r3
      }
      if (shut_tx) {
 80090d6:	7b7b      	ldrb	r3, [r7, #13]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d009      	beq.n	80090f0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d005      	beq.n	80090f0 <lwip_netconn_do_close_internal+0x224>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e8:	2200      	movs	r2, #0
 80090ea:	2102      	movs	r1, #2
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80090f0:	78fb      	ldrb	r3, [r7, #3]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d002      	beq.n	80090fc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80090f6:	68b8      	ldr	r0, [r7, #8]
 80090f8:	f00e fdae 	bl	8017c58 <sys_sem_signal>
    }
    return ERR_OK;
 80090fc:	2300      	movs	r3, #0
 80090fe:	e02e      	b.n	800915e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8009100:	7d7b      	ldrb	r3, [r7, #21]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d11e      	bne.n	8009144 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	7d1b      	ldrb	r3, [r3, #20]
 800910a:	2b01      	cmp	r3, #1
 800910c:	d106      	bne.n	800911c <lwip_netconn_do_close_internal+0x250>
 800910e:	4b16      	ldr	r3, [pc, #88]	; (8009168 <lwip_netconn_do_close_internal+0x29c>)
 8009110:	f240 4241 	movw	r2, #1089	; 0x441
 8009114:	491b      	ldr	r1, [pc, #108]	; (8009184 <lwip_netconn_do_close_internal+0x2b8>)
 8009116:	4816      	ldr	r0, [pc, #88]	; (8009170 <lwip_netconn_do_close_internal+0x2a4>)
 8009118:	f00e fec6 	bl	8017ea8 <iprintf>
    if (shut_tx) {
 800911c:	7b7b      	ldrb	r3, [r7, #13]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d003      	beq.n	800912a <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 8009122:	4919      	ldr	r1, [pc, #100]	; (8009188 <lwip_netconn_do_close_internal+0x2bc>)
 8009124:	6938      	ldr	r0, [r7, #16]
 8009126:	f005 f83f 	bl	800e1a8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800912a:	2201      	movs	r2, #1
 800912c:	4917      	ldr	r1, [pc, #92]	; (800918c <lwip_netconn_do_close_internal+0x2c0>)
 800912e:	6938      	ldr	r0, [r7, #16]
 8009130:	f005 f896 	bl	800e260 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009134:	4916      	ldr	r1, [pc, #88]	; (8009190 <lwip_netconn_do_close_internal+0x2c4>)
 8009136:	6938      	ldr	r0, [r7, #16]
 8009138:	f005 f858 	bl	800e1ec <tcp_err>
    tcp_arg(tpcb, conn);
 800913c:	6879      	ldr	r1, [r7, #4]
 800913e:	6938      	ldr	r0, [r7, #16]
 8009140:	f004 fffe 	bl	800e140 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009144:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d106      	bne.n	800915a <lwip_netconn_do_close_internal+0x28e>
 800914c:	4b06      	ldr	r3, [pc, #24]	; (8009168 <lwip_netconn_do_close_internal+0x29c>)
 800914e:	f240 424d 	movw	r2, #1101	; 0x44d
 8009152:	4910      	ldr	r1, [pc, #64]	; (8009194 <lwip_netconn_do_close_internal+0x2c8>)
 8009154:	4806      	ldr	r0, [pc, #24]	; (8009170 <lwip_netconn_do_close_internal+0x2a4>)
 8009156:	f00e fea7 	bl	8017ea8 <iprintf>
  return err;
 800915a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3718      	adds	r7, #24
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	080192c0 	.word	0x080192c0
 800916c:	08019594 	.word	0x08019594
 8009170:	08019304 	.word	0x08019304
 8009174:	080195a4 	.word	0x080195a4
 8009178:	080195c4 	.word	0x080195c4
 800917c:	080195e8 	.word	0x080195e8
 8009180:	08019428 	.word	0x08019428
 8009184:	080195fc 	.word	0x080195fc
 8009188:	08008745 	.word	0x08008745
 800918c:	0800867d 	.word	0x0800867d
 8009190:	080087ed 	.word	0x080087ed
 8009194:	08019620 	.word	0x08019620

08009198 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	785b      	ldrb	r3, [r3, #1]
 80091aa:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80091ac:	7afb      	ldrb	r3, [r7, #11]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00d      	beq.n	80091ce <lwip_netconn_do_delconn+0x36>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091bc:	2b10      	cmp	r3, #16
 80091be:	d006      	beq.n	80091ce <lwip_netconn_do_delconn+0x36>
 80091c0:	4b60      	ldr	r3, [pc, #384]	; (8009344 <lwip_netconn_do_delconn+0x1ac>)
 80091c2:	f240 425f 	movw	r2, #1119	; 0x45f
 80091c6:	4960      	ldr	r1, [pc, #384]	; (8009348 <lwip_netconn_do_delconn+0x1b0>)
 80091c8:	4860      	ldr	r0, [pc, #384]	; (800934c <lwip_netconn_do_delconn+0x1b4>)
 80091ca:	f00e fe6d 	bl	8017ea8 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80091ce:	7afb      	ldrb	r3, [r7, #11]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d005      	beq.n	80091e0 <lwip_netconn_do_delconn+0x48>
 80091d4:	7afb      	ldrb	r3, [r7, #11]
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d002      	beq.n	80091e0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80091da:	7afb      	ldrb	r3, [r7, #11]
 80091dc:	2b03      	cmp	r3, #3
 80091de:	d109      	bne.n	80091f4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80091e0:	7afb      	ldrb	r3, [r7, #11]
 80091e2:	2b03      	cmp	r3, #3
 80091e4:	d10a      	bne.n	80091fc <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	7f1b      	ldrb	r3, [r3, #28]
 80091ec:	f003 0304 	and.w	r3, r3, #4
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d103      	bne.n	80091fc <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	22fb      	movs	r2, #251	; 0xfb
 80091f8:	711a      	strb	r2, [r3, #4]
 80091fa:	e097      	b.n	800932c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80091fc:	7afb      	ldrb	r3, [r7, #11]
 80091fe:	2b03      	cmp	r3, #3
 8009200:	d10d      	bne.n	800921e <lwip_netconn_do_delconn+0x86>
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	7f1b      	ldrb	r3, [r3, #28]
 8009208:	f003 0304 	and.w	r3, r3, #4
 800920c:	2b00      	cmp	r3, #0
 800920e:	d106      	bne.n	800921e <lwip_netconn_do_delconn+0x86>
 8009210:	4b4c      	ldr	r3, [pc, #304]	; (8009344 <lwip_netconn_do_delconn+0x1ac>)
 8009212:	f240 427b 	movw	r2, #1147	; 0x47b
 8009216:	494e      	ldr	r1, [pc, #312]	; (8009350 <lwip_netconn_do_delconn+0x1b8>)
 8009218:	484c      	ldr	r0, [pc, #304]	; (800934c <lwip_netconn_do_delconn+0x1b4>)
 800921a:	f00e fe45 	bl	8017ea8 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4618      	mov	r0, r3
 800922a:	f7ff fdd1 	bl	8008dd0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d05f      	beq.n	80092f8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009242:	2b10      	cmp	r3, #16
 8009244:	d00e      	beq.n	8009264 <lwip_netconn_do_delconn+0xcc>
 8009246:	2b20      	cmp	r3, #32
 8009248:	d000      	beq.n	800924c <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 800924a:	e051      	b.n	80092f0 <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	4618      	mov	r0, r3
 800925e:	f00a f9c7 	bl	80135f0 <udp_remove>
          break;
 8009262:	e045      	b.n	80092f0 <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	6a1b      	ldr	r3, [r3, #32]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d006      	beq.n	800927c <lwip_netconn_do_delconn+0xe4>
 800926e:	4b35      	ldr	r3, [pc, #212]	; (8009344 <lwip_netconn_do_delconn+0x1ac>)
 8009270:	f240 4294 	movw	r2, #1172	; 0x494
 8009274:	4937      	ldr	r1, [pc, #220]	; (8009354 <lwip_netconn_do_delconn+0x1bc>)
 8009276:	4835      	ldr	r0, [pc, #212]	; (800934c <lwip_netconn_do_delconn+0x1b4>)
 8009278:	f00e fe16 	bl	8017ea8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2204      	movs	r2, #4
 8009282:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2203      	movs	r2, #3
 8009288:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2100      	movs	r1, #0
 8009298:	4618      	mov	r0, r3
 800929a:	f7ff fe17 	bl	8008ecc <lwip_netconn_do_close_internal>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d04a      	beq.n	800933a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	785b      	ldrb	r3, [r3, #1]
 80092aa:	2b04      	cmp	r3, #4
 80092ac:	d006      	beq.n	80092bc <lwip_netconn_do_delconn+0x124>
 80092ae:	4b25      	ldr	r3, [pc, #148]	; (8009344 <lwip_netconn_do_delconn+0x1ac>)
 80092b0:	f240 429a 	movw	r2, #1178	; 0x49a
 80092b4:	4928      	ldr	r1, [pc, #160]	; (8009358 <lwip_netconn_do_delconn+0x1c0>)
 80092b6:	4825      	ldr	r0, [pc, #148]	; (800934c <lwip_netconn_do_delconn+0x1b4>)
 80092b8:	f00e fdf6 	bl	8017ea8 <iprintf>
            UNLOCK_TCPIP_CORE();
 80092bc:	4827      	ldr	r0, [pc, #156]	; (800935c <lwip_netconn_do_delconn+0x1c4>)
 80092be:	f00e fd3c 	bl	8017d3a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	330c      	adds	r3, #12
 80092c8:	2100      	movs	r1, #0
 80092ca:	4618      	mov	r0, r3
 80092cc:	f00e fc93 	bl	8017bf6 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80092d0:	4822      	ldr	r0, [pc, #136]	; (800935c <lwip_netconn_do_delconn+0x1c4>)
 80092d2:	f00e fd23 	bl	8017d1c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	785b      	ldrb	r3, [r3, #1]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d02c      	beq.n	800933a <lwip_netconn_do_delconn+0x1a2>
 80092e0:	4b18      	ldr	r3, [pc, #96]	; (8009344 <lwip_netconn_do_delconn+0x1ac>)
 80092e2:	f240 429e 	movw	r2, #1182	; 0x49e
 80092e6:	491c      	ldr	r1, [pc, #112]	; (8009358 <lwip_netconn_do_delconn+0x1c0>)
 80092e8:	4818      	ldr	r0, [pc, #96]	; (800934c <lwip_netconn_do_delconn+0x1b4>)
 80092ea:	f00e fddd 	bl	8017ea8 <iprintf>
          return;
 80092ee:	e024      	b.n	800933a <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2200      	movs	r2, #0
 80092f6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d007      	beq.n	8009312 <lwip_netconn_do_delconn+0x17a>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	6810      	ldr	r0, [r2, #0]
 800930c:	2200      	movs	r2, #0
 800930e:	2100      	movs	r1, #0
 8009310:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009318:	2b00      	cmp	r3, #0
 800931a:	d007      	beq.n	800932c <lwip_netconn_do_delconn+0x194>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	6810      	ldr	r0, [r2, #0]
 8009326:	2200      	movs	r2, #0
 8009328:	2102      	movs	r1, #2
 800932a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	330c      	adds	r3, #12
 8009332:	4618      	mov	r0, r3
 8009334:	f00e fcaa 	bl	8017c8c <sys_sem_valid>
 8009338:	e000      	b.n	800933c <lwip_netconn_do_delconn+0x1a4>
          return;
 800933a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	080192c0 	.word	0x080192c0
 8009348:	08019630 	.word	0x08019630
 800934c:	08019304 	.word	0x08019304
 8009350:	08019644 	.word	0x08019644
 8009354:	08019664 	.word	0x08019664
 8009358:	08019680 	.word	0x08019680
 800935c:	2000bddc 	.word	0x2000bddc

08009360 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d026      	beq.n	80093c4 <lwip_netconn_do_bind+0x64>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009380:	2b10      	cmp	r3, #16
 8009382:	d00e      	beq.n	80093a2 <lwip_netconn_do_bind+0x42>
 8009384:	2b20      	cmp	r3, #32
 8009386:	d119      	bne.n	80093bc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	6858      	ldr	r0, [r3, #4]
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	6899      	ldr	r1, [r3, #8]
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	899b      	ldrh	r3, [r3, #12]
 8009396:	461a      	mov	r2, r3
 8009398:	f00a f814 	bl	80133c4 <udp_bind>
 800939c:	4603      	mov	r3, r0
 800939e:	73fb      	strb	r3, [r7, #15]
        break;
 80093a0:	e012      	b.n	80093c8 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	6858      	ldr	r0, [r3, #4]
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	6899      	ldr	r1, [r3, #8]
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	899b      	ldrh	r3, [r3, #12]
 80093b0:	461a      	mov	r2, r3
 80093b2:	f003 fe17 	bl	800cfe4 <tcp_bind>
 80093b6:	4603      	mov	r3, r0
 80093b8:	73fb      	strb	r3, [r7, #15]
        break;
 80093ba:	e005      	b.n	80093c8 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80093bc:	23fa      	movs	r3, #250	; 0xfa
 80093be:	73fb      	strb	r3, [r7, #15]
        break;
 80093c0:	bf00      	nop
 80093c2:	e001      	b.n	80093c8 <lwip_netconn_do_bind+0x68>
    }
  } else {
    err = ERR_VAL;
 80093c4:	23fa      	movs	r3, #250	; 0xfa
 80093c6:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	7bfa      	ldrb	r2, [r7, #15]
 80093cc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80093ce:	bf00      	nop
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
	...

080093d8 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b086      	sub	sp, #24
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d07f      	beq.n	80094ee <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093f8:	2b10      	cmp	r3, #16
 80093fa:	d175      	bne.n	80094e8 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	785b      	ldrb	r3, [r3, #1]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d165      	bne.n	80094d2 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	7d1b      	ldrb	r3, [r3, #20]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d002      	beq.n	8009418 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8009412:	23fa      	movs	r3, #250	; 0xfa
 8009414:	72fb      	strb	r3, [r7, #11]
 8009416:	e06c      	b.n	80094f2 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009418:	23ff      	movs	r3, #255	; 0xff
 800941a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	f107 020b 	add.w	r2, r7, #11
 8009426:	7cf9      	ldrb	r1, [r7, #19]
 8009428:	4618      	mov	r0, r3
 800942a:	f003 fea5 	bl	800d178 <tcp_listen_with_backlog_and_err>
 800942e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d05d      	beq.n	80094f2 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	3310      	adds	r3, #16
 800943c:	4618      	mov	r0, r3
 800943e:	f00e fb94 	bl	8017b6a <sys_mbox_valid>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d00b      	beq.n	8009460 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	3310      	adds	r3, #16
 800944e:	4618      	mov	r0, r3
 8009450:	f00e fb04 	bl	8017a5c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	3310      	adds	r3, #16
 800945a:	4618      	mov	r0, r3
 800945c:	f00e fb96 	bl	8017b8c <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8009460:	2300      	movs	r3, #0
 8009462:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	3314      	adds	r3, #20
 800946a:	4618      	mov	r0, r3
 800946c:	f00e fb7d 	bl	8017b6a <sys_mbox_valid>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d108      	bne.n	8009488 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	3314      	adds	r3, #20
 800947c:	2106      	movs	r1, #6
 800947e:	4618      	mov	r0, r3
 8009480:	f00e faca 	bl	8017a18 <sys_mbox_new>
 8009484:	4603      	mov	r3, r0
 8009486:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8009488:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d118      	bne.n	80094c2 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2202      	movs	r2, #2
 8009496:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	685a      	ldr	r2, [r3, #4]
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4619      	mov	r1, r3
 80094ac:	4610      	mov	r0, r2
 80094ae:	f004 fe47 	bl	800e140 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	4912      	ldr	r1, [pc, #72]	; (8009504 <lwip_netconn_do_listen+0x12c>)
 80094ba:	4618      	mov	r0, r3
 80094bc:	f004 feb8 	bl	800e230 <tcp_accept>
 80094c0:	e017      	b.n	80094f2 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f003 fc3e 	bl	800cd44 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2200      	movs	r2, #0
 80094ce:	605a      	str	r2, [r3, #4]
 80094d0:	e00f      	b.n	80094f2 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	785b      	ldrb	r3, [r3, #1]
 80094d8:	2b02      	cmp	r3, #2
 80094da:	d102      	bne.n	80094e2 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 80094dc:	2300      	movs	r3, #0
 80094de:	72fb      	strb	r3, [r7, #11]
 80094e0:	e007      	b.n	80094f2 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 80094e2:	23f5      	movs	r3, #245	; 0xf5
 80094e4:	72fb      	strb	r3, [r7, #11]
 80094e6:	e004      	b.n	80094f2 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 80094e8:	23f0      	movs	r3, #240	; 0xf0
 80094ea:	72fb      	strb	r3, [r7, #11]
 80094ec:	e001      	b.n	80094f2 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 80094ee:	23f5      	movs	r3, #245	; 0xf5
 80094f0:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 80094f2:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80094fa:	bf00      	nop
 80094fc:	3718      	adds	r7, #24
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	080089e9 	.word	0x080089e9

08009508 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b086      	sub	sp, #24
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	2200      	movs	r2, #0
 8009518:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d022      	beq.n	800956a <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800952e:	2b10      	cmp	r3, #16
 8009530:	d11b      	bne.n	800956a <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800953e:	d202      	bcs.n	8009546 <lwip_netconn_do_recv+0x3e>
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	b29b      	uxth	r3, r3
 8009544:	e001      	b.n	800954a <lwip_netconn_do_recv+0x42>
 8009546:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800954a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	89fa      	ldrh	r2, [r7, #14]
 8009554:	4611      	mov	r1, r2
 8009556:	4618      	mov	r0, r3
 8009558:	f003 ff12 	bl	800d380 <tcp_recved>
        remaining -= recved;
 800955c:	89fb      	ldrh	r3, [r7, #14]
 800955e:	697a      	ldr	r2, [r7, #20]
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1e6      	bne.n	8009538 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800956a:	bf00      	nop
 800956c:	3718      	adds	r7, #24
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
	...

08009574 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b088      	sub	sp, #32
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	460b      	mov	r3, r1
 800957e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009580:	2300      	movs	r3, #0
 8009582:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d106      	bne.n	8009598 <lwip_netconn_do_writemore+0x24>
 800958a:	4b96      	ldr	r3, [pc, #600]	; (80097e4 <lwip_netconn_do_writemore+0x270>)
 800958c:	f240 6273 	movw	r2, #1651	; 0x673
 8009590:	4995      	ldr	r1, [pc, #596]	; (80097e8 <lwip_netconn_do_writemore+0x274>)
 8009592:	4896      	ldr	r0, [pc, #600]	; (80097ec <lwip_netconn_do_writemore+0x278>)
 8009594:	f00e fc88 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	785b      	ldrb	r3, [r3, #1]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d006      	beq.n	80095ae <lwip_netconn_do_writemore+0x3a>
 80095a0:	4b90      	ldr	r3, [pc, #576]	; (80097e4 <lwip_netconn_do_writemore+0x270>)
 80095a2:	f240 6274 	movw	r2, #1652	; 0x674
 80095a6:	4992      	ldr	r1, [pc, #584]	; (80097f0 <lwip_netconn_do_writemore+0x27c>)
 80095a8:	4890      	ldr	r0, [pc, #576]	; (80097ec <lwip_netconn_do_writemore+0x278>)
 80095aa:	f00e fc7d 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a1b      	ldr	r3, [r3, #32]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d106      	bne.n	80095c4 <lwip_netconn_do_writemore+0x50>
 80095b6:	4b8b      	ldr	r3, [pc, #556]	; (80097e4 <lwip_netconn_do_writemore+0x270>)
 80095b8:	f240 6275 	movw	r2, #1653	; 0x675
 80095bc:	498d      	ldr	r1, [pc, #564]	; (80097f4 <lwip_netconn_do_writemore+0x280>)
 80095be:	488b      	ldr	r0, [pc, #556]	; (80097ec <lwip_netconn_do_writemore+0x278>)
 80095c0:	f00e fc72 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d106      	bne.n	80095da <lwip_netconn_do_writemore+0x66>
 80095cc:	4b85      	ldr	r3, [pc, #532]	; (80097e4 <lwip_netconn_do_writemore+0x270>)
 80095ce:	f240 6276 	movw	r2, #1654	; 0x676
 80095d2:	4989      	ldr	r1, [pc, #548]	; (80097f8 <lwip_netconn_do_writemore+0x284>)
 80095d4:	4885      	ldr	r0, [pc, #532]	; (80097ec <lwip_netconn_do_writemore+0x278>)
 80095d6:	f00e fc67 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a1b      	ldr	r3, [r3, #32]
 80095de:	699a      	ldr	r2, [r3, #24]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a1b      	ldr	r3, [r3, #32]
 80095e4:	695b      	ldr	r3, [r3, #20]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d306      	bcc.n	80095f8 <lwip_netconn_do_writemore+0x84>
 80095ea:	4b7e      	ldr	r3, [pc, #504]	; (80097e4 <lwip_netconn_do_writemore+0x270>)
 80095ec:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80095f0:	4982      	ldr	r1, [pc, #520]	; (80097fc <lwip_netconn_do_writemore+0x288>)
 80095f2:	487e      	ldr	r0, [pc, #504]	; (80097ec <lwip_netconn_do_writemore+0x278>)
 80095f4:	f00e fc58 	bl	8017ea8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6a1b      	ldr	r3, [r3, #32]
 80095fc:	899b      	ldrh	r3, [r3, #12]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d106      	bne.n	8009610 <lwip_netconn_do_writemore+0x9c>
 8009602:	4b78      	ldr	r3, [pc, #480]	; (80097e4 <lwip_netconn_do_writemore+0x270>)
 8009604:	f240 6279 	movw	r2, #1657	; 0x679
 8009608:	497d      	ldr	r1, [pc, #500]	; (8009800 <lwip_netconn_do_writemore+0x28c>)
 800960a:	4878      	ldr	r0, [pc, #480]	; (80097ec <lwip_netconn_do_writemore+0x278>)
 800960c:	f00e fc4c 	bl	8017ea8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a1b      	ldr	r3, [r3, #32]
 8009614:	7f1b      	ldrb	r3, [r3, #28]
 8009616:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	7f1b      	ldrb	r3, [r3, #28]
 800961c:	f003 0302 	and.w	r3, r3, #2
 8009620:	2b00      	cmp	r3, #0
 8009622:	d104      	bne.n	800962e <lwip_netconn_do_writemore+0xba>
 8009624:	7ebb      	ldrb	r3, [r7, #26]
 8009626:	f003 0304 	and.w	r3, r3, #4
 800962a:	2b00      	cmp	r3, #0
 800962c:	d001      	beq.n	8009632 <lwip_netconn_do_writemore+0xbe>
 800962e:	2301      	movs	r3, #1
 8009630:	e000      	b.n	8009634 <lwip_netconn_do_writemore+0xc0>
 8009632:	2300      	movs	r3, #0
 8009634:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6a1b      	ldr	r3, [r3, #32]
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	4413      	add	r3, r2
 8009646:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6a1b      	ldr	r3, [r3, #32]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	685a      	ldr	r2, [r3, #4]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a1b      	ldr	r3, [r3, #32]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009660:	d307      	bcc.n	8009672 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8009662:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009666:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009668:	7ebb      	ldrb	r3, [r7, #26]
 800966a:	f043 0302 	orr.w	r3, r3, #2
 800966e:	76bb      	strb	r3, [r7, #26]
 8009670:	e001      	b.n	8009676 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800967e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009680:	89fa      	ldrh	r2, [r7, #14]
 8009682:	8bbb      	ldrh	r3, [r7, #28]
 8009684:	429a      	cmp	r2, r3
 8009686:	d216      	bcs.n	80096b6 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009688:	89fb      	ldrh	r3, [r7, #14]
 800968a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800968c:	7e3b      	ldrb	r3, [r7, #24]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00d      	beq.n	80096ae <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8009692:	8bbb      	ldrh	r3, [r7, #28]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d10e      	bne.n	80096b6 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6a1b      	ldr	r3, [r3, #32]
 800969c:	699b      	ldr	r3, [r3, #24]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d102      	bne.n	80096a8 <lwip_netconn_do_writemore+0x134>
 80096a2:	f06f 0306 	mvn.w	r3, #6
 80096a6:	e000      	b.n	80096aa <lwip_netconn_do_writemore+0x136>
 80096a8:	2300      	movs	r3, #0
 80096aa:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80096ac:	e07d      	b.n	80097aa <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80096ae:	7ebb      	ldrb	r3, [r7, #26]
 80096b0:	f043 0302 	orr.w	r3, r3, #2
 80096b4:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a1b      	ldr	r3, [r3, #32]
 80096ba:	691a      	ldr	r2, [r3, #16]
 80096bc:	8bbb      	ldrh	r3, [r7, #28]
 80096be:	441a      	add	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a1b      	ldr	r3, [r3, #32]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d906      	bls.n	80096da <lwip_netconn_do_writemore+0x166>
 80096cc:	4b45      	ldr	r3, [pc, #276]	; (80097e4 <lwip_netconn_do_writemore+0x270>)
 80096ce:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80096d2:	494c      	ldr	r1, [pc, #304]	; (8009804 <lwip_netconn_do_writemore+0x290>)
 80096d4:	4845      	ldr	r0, [pc, #276]	; (80097ec <lwip_netconn_do_writemore+0x278>)
 80096d6:	f00e fbe7 	bl	8017ea8 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80096da:	8bbb      	ldrh	r3, [r7, #28]
 80096dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d103      	bne.n	80096ec <lwip_netconn_do_writemore+0x178>
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096ea:	d209      	bcs.n	8009700 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80096f0:	8bba      	ldrh	r2, [r7, #28]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d10b      	bne.n	800970e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a1b      	ldr	r3, [r3, #32]
 80096fa:	899b      	ldrh	r3, [r3, #12]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d906      	bls.n	800970e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8009700:	2301      	movs	r3, #1
 8009702:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009704:	7ebb      	ldrb	r3, [r7, #26]
 8009706:	f043 0302 	orr.w	r3, r3, #2
 800970a:	76bb      	strb	r3, [r7, #26]
 800970c:	e001      	b.n	8009712 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800970e:	2300      	movs	r3, #0
 8009710:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6858      	ldr	r0, [r3, #4]
 8009716:	7ebb      	ldrb	r3, [r7, #26]
 8009718:	8bba      	ldrh	r2, [r7, #28]
 800971a:	6979      	ldr	r1, [r7, #20]
 800971c:	f007 fc4c 	bl	8010fb8 <tcp_write>
 8009720:	4603      	mov	r3, r0
 8009722:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009724:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d12c      	bne.n	8009786 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6a1b      	ldr	r3, [r3, #32]
 8009730:	6999      	ldr	r1, [r3, #24]
 8009732:	8bba      	ldrh	r2, [r7, #28]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6a1b      	ldr	r3, [r3, #32]
 8009738:	440a      	add	r2, r1
 800973a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6a1b      	ldr	r3, [r3, #32]
 8009740:	6919      	ldr	r1, [r3, #16]
 8009742:	8bba      	ldrh	r2, [r7, #28]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6a1b      	ldr	r3, [r3, #32]
 8009748:	440a      	add	r2, r1
 800974a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a1b      	ldr	r3, [r3, #32]
 8009750:	691a      	ldr	r2, [r3, #16]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	429a      	cmp	r2, r3
 800975c:	d113      	bne.n	8009786 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	899a      	ldrh	r2, [r3, #12]
 8009764:	3a01      	subs	r2, #1
 8009766:	b292      	uxth	r2, r2
 8009768:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a1b      	ldr	r3, [r3, #32]
 800976e:	899b      	ldrh	r3, [r3, #12]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d008      	beq.n	8009786 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6a1b      	ldr	r3, [r3, #32]
 8009778:	689a      	ldr	r2, [r3, #8]
 800977a:	3208      	adds	r2, #8
 800977c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a1b      	ldr	r3, [r3, #32]
 8009782:	2200      	movs	r2, #0
 8009784:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8009786:	7e7b      	ldrb	r3, [r7, #25]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d004      	beq.n	8009796 <lwip_netconn_do_writemore+0x222>
 800978c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009790:	2b00      	cmp	r3, #0
 8009792:	f43f af50 	beq.w	8009636 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009796:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d004      	beq.n	80097a8 <lwip_netconn_do_writemore+0x234>
 800979e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80097a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a6:	d146      	bne.n	8009836 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 80097a8:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80097aa:	7e3b      	ldrb	r3, [r7, #24]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d02b      	beq.n	8009808 <lwip_netconn_do_writemore+0x294>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6a1b      	ldr	r3, [r3, #32]
 80097b4:	699a      	ldr	r2, [r3, #24]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a1b      	ldr	r3, [r3, #32]
 80097ba:	695b      	ldr	r3, [r3, #20]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d223      	bcs.n	8009808 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d005      	beq.n	80097d4 <lwip_netconn_do_writemore+0x260>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097cc:	2200      	movs	r2, #0
 80097ce:	2103      	movs	r1, #3
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	7f1b      	ldrb	r3, [r3, #28]
 80097d8:	f043 0310 	orr.w	r3, r3, #16
 80097dc:	b2da      	uxtb	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	771a      	strb	r2, [r3, #28]
 80097e2:	e028      	b.n	8009836 <lwip_netconn_do_writemore+0x2c2>
 80097e4:	080192c0 	.word	0x080192c0
 80097e8:	08019418 	.word	0x08019418
 80097ec:	08019304 	.word	0x08019304
 80097f0:	08019720 	.word	0x08019720
 80097f4:	08019428 	.word	0x08019428
 80097f8:	08019740 	.word	0x08019740
 80097fc:	08019758 	.word	0x08019758
 8009800:	08019798 	.word	0x08019798
 8009804:	080197c0 	.word	0x080197c0
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009810:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009814:	d305      	bcc.n	8009822 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800981e:	2b04      	cmp	r3, #4
 8009820:	d909      	bls.n	8009836 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009826:	2b00      	cmp	r3, #0
 8009828:	d005      	beq.n	8009836 <lwip_netconn_do_writemore+0x2c2>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982e:	2200      	movs	r2, #0
 8009830:	2103      	movs	r1, #3
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8009836:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d11d      	bne.n	800987a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6a1b      	ldr	r3, [r3, #32]
 8009842:	699a      	ldr	r2, [r3, #24]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a1b      	ldr	r3, [r3, #32]
 8009848:	695b      	ldr	r3, [r3, #20]
 800984a:	429a      	cmp	r2, r3
 800984c:	d002      	beq.n	8009854 <lwip_netconn_do_writemore+0x2e0>
 800984e:	7e3b      	ldrb	r3, [r7, #24]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d001      	beq.n	8009858 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8009854:	2301      	movs	r3, #1
 8009856:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	4618      	mov	r0, r3
 800985e:	f008 f997 	bl	8011b90 <tcp_output>
 8009862:	4603      	mov	r3, r0
 8009864:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8009866:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800986a:	f113 0f04 	cmn.w	r3, #4
 800986e:	d12c      	bne.n	80098ca <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009870:	7b3b      	ldrb	r3, [r7, #12]
 8009872:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009874:	2301      	movs	r3, #1
 8009876:	76fb      	strb	r3, [r7, #27]
 8009878:	e027      	b.n	80098ca <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800987a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800987e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009882:	d120      	bne.n	80098c6 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	4618      	mov	r0, r3
 800988a:	f008 f981 	bl	8011b90 <tcp_output>
 800988e:	4603      	mov	r3, r0
 8009890:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8009892:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009896:	f113 0f04 	cmn.w	r3, #4
 800989a:	d104      	bne.n	80098a6 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800989c:	7b7b      	ldrb	r3, [r7, #13]
 800989e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80098a0:	2301      	movs	r3, #1
 80098a2:	76fb      	strb	r3, [r7, #27]
 80098a4:	e011      	b.n	80098ca <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 80098a6:	7e3b      	ldrb	r3, [r7, #24]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00e      	beq.n	80098ca <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6a1b      	ldr	r3, [r3, #32]
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d102      	bne.n	80098bc <lwip_netconn_do_writemore+0x348>
 80098b6:	f06f 0306 	mvn.w	r3, #6
 80098ba:	e000      	b.n	80098be <lwip_netconn_do_writemore+0x34a>
 80098bc:	2300      	movs	r3, #0
 80098be:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80098c0:	2301      	movs	r3, #1
 80098c2:	76fb      	strb	r3, [r7, #27]
 80098c4:	e001      	b.n	80098ca <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80098c6:	2301      	movs	r3, #1
 80098c8:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80098ca:	7efb      	ldrb	r3, [r7, #27]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d015      	beq.n	80098fc <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a1b      	ldr	r3, [r3, #32]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	330c      	adds	r3, #12
 80098d8:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a1b      	ldr	r3, [r3, #32]
 80098de:	7ffa      	ldrb	r2, [r7, #31]
 80098e0:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80098ee:	78fb      	ldrb	r3, [r7, #3]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d006      	beq.n	8009902 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80098f4:	68b8      	ldr	r0, [r7, #8]
 80098f6:	f00e f9af 	bl	8017c58 <sys_sem_signal>
 80098fa:	e002      	b.n	8009902 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80098fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009900:	e000      	b.n	8009904 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8009902:	2300      	movs	r3, #0
}
 8009904:	4618      	mov	r0, r3
 8009906:	3720      	adds	r7, #32
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4618      	mov	r0, r3
 800991e:	f7fe fd22 	bl	8008366 <netconn_err>
 8009922:	4603      	mov	r3, r0
 8009924:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d166      	bne.n	80099fc <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009938:	2b10      	cmp	r3, #16
 800993a:	d15d      	bne.n	80099f8 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	785b      	ldrb	r3, [r3, #1]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d002      	beq.n	800994c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8009946:	23fb      	movs	r3, #251	; 0xfb
 8009948:	73fb      	strb	r3, [r7, #15]
 800994a:	e057      	b.n	80099fc <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d04d      	beq.n	80099f2 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2201      	movs	r2, #1
 800995c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	6a1b      	ldr	r3, [r3, #32]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d006      	beq.n	8009976 <lwip_netconn_do_write+0x6a>
 8009968:	4b28      	ldr	r3, [pc, #160]	; (8009a0c <lwip_netconn_do_write+0x100>)
 800996a:	f240 7223 	movw	r2, #1827	; 0x723
 800996e:	4928      	ldr	r1, [pc, #160]	; (8009a10 <lwip_netconn_do_write+0x104>)
 8009970:	4828      	ldr	r0, [pc, #160]	; (8009a14 <lwip_netconn_do_write+0x108>)
 8009972:	f00e fa99 	bl	8017ea8 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	695b      	ldr	r3, [r3, #20]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d106      	bne.n	800998c <lwip_netconn_do_write+0x80>
 800997e:	4b23      	ldr	r3, [pc, #140]	; (8009a0c <lwip_netconn_do_write+0x100>)
 8009980:	f240 7224 	movw	r2, #1828	; 0x724
 8009984:	4924      	ldr	r1, [pc, #144]	; (8009a18 <lwip_netconn_do_write+0x10c>)
 8009986:	4823      	ldr	r0, [pc, #140]	; (8009a14 <lwip_netconn_do_write+0x108>)
 8009988:	f00e fa8e 	bl	8017ea8 <iprintf>
        msg->conn->current_msg = msg;
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68ba      	ldr	r2, [r7, #8]
 8009992:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2100      	movs	r1, #0
 800999a:	4618      	mov	r0, r3
 800999c:	f7ff fdea 	bl	8009574 <lwip_netconn_do_writemore>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d02e      	beq.n	8009a04 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	785b      	ldrb	r3, [r3, #1]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d006      	beq.n	80099be <lwip_netconn_do_write+0xb2>
 80099b0:	4b16      	ldr	r3, [pc, #88]	; (8009a0c <lwip_netconn_do_write+0x100>)
 80099b2:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80099b6:	4919      	ldr	r1, [pc, #100]	; (8009a1c <lwip_netconn_do_write+0x110>)
 80099b8:	4816      	ldr	r0, [pc, #88]	; (8009a14 <lwip_netconn_do_write+0x108>)
 80099ba:	f00e fa75 	bl	8017ea8 <iprintf>
          UNLOCK_TCPIP_CORE();
 80099be:	4818      	ldr	r0, [pc, #96]	; (8009a20 <lwip_netconn_do_write+0x114>)
 80099c0:	f00e f9bb 	bl	8017d3a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	330c      	adds	r3, #12
 80099ca:	2100      	movs	r1, #0
 80099cc:	4618      	mov	r0, r3
 80099ce:	f00e f912 	bl	8017bf6 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80099d2:	4813      	ldr	r0, [pc, #76]	; (8009a20 <lwip_netconn_do_write+0x114>)
 80099d4:	f00e f9a2 	bl	8017d1c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	785b      	ldrb	r3, [r3, #1]
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d110      	bne.n	8009a04 <lwip_netconn_do_write+0xf8>
 80099e2:	4b0a      	ldr	r3, [pc, #40]	; (8009a0c <lwip_netconn_do_write+0x100>)
 80099e4:	f240 722c 	movw	r2, #1836	; 0x72c
 80099e8:	490c      	ldr	r1, [pc, #48]	; (8009a1c <lwip_netconn_do_write+0x110>)
 80099ea:	480a      	ldr	r0, [pc, #40]	; (8009a14 <lwip_netconn_do_write+0x108>)
 80099ec:	f00e fa5c 	bl	8017ea8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 80099f0:	e008      	b.n	8009a04 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 80099f2:	23f5      	movs	r3, #245	; 0xf5
 80099f4:	73fb      	strb	r3, [r7, #15]
 80099f6:	e001      	b.n	80099fc <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 80099f8:	23fa      	movs	r3, #250	; 0xfa
 80099fa:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	7bfa      	ldrb	r2, [r7, #15]
 8009a00:	711a      	strb	r2, [r3, #4]
 8009a02:	e000      	b.n	8009a06 <lwip_netconn_do_write+0xfa>
        return;
 8009a04:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	080192c0 	.word	0x080192c0
 8009a10:	08019664 	.word	0x08019664
 8009a14:	08019304 	.word	0x08019304
 8009a18:	080197ec 	.word	0x080197ec
 8009a1c:	08019680 	.word	0x08019680
 8009a20:	2000bddc 	.word	0x2000bddc

08009a24 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	785b      	ldrb	r3, [r3, #1]
 8009a36:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d069      	beq.n	8009b16 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8009a4c:	2b10      	cmp	r3, #16
 8009a4e:	d162      	bne.n	8009b16 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009a54:	2b03      	cmp	r3, #3
 8009a56:	d002      	beq.n	8009a5e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009a58:	7afb      	ldrb	r3, [r7, #11]
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	d05b      	beq.n	8009b16 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8009a5e:	7afb      	ldrb	r3, [r7, #11]
 8009a60:	2b03      	cmp	r3, #3
 8009a62:	d103      	bne.n	8009a6c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	22f5      	movs	r2, #245	; 0xf5
 8009a68:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009a6a:	e059      	b.n	8009b20 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8009a6c:	7afb      	ldrb	r3, [r7, #11]
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d103      	bne.n	8009a7a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	22fb      	movs	r2, #251	; 0xfb
 8009a76:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009a78:	e052      	b.n	8009b20 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	7a1b      	ldrb	r3, [r3, #8]
 8009a7e:	f003 0301 	and.w	r3, r3, #1
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d004      	beq.n	8009a90 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7ff f9a0 	bl	8008dd0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d006      	beq.n	8009aa8 <lwip_netconn_do_close+0x84>
 8009a9a:	4b23      	ldr	r3, [pc, #140]	; (8009b28 <lwip_netconn_do_close+0x104>)
 8009a9c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8009aa0:	4922      	ldr	r1, [pc, #136]	; (8009b2c <lwip_netconn_do_close+0x108>)
 8009aa2:	4823      	ldr	r0, [pc, #140]	; (8009b30 <lwip_netconn_do_close+0x10c>)
 8009aa4:	f00e fa00 	bl	8017ea8 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2204      	movs	r2, #4
 8009aae:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2100      	movs	r1, #0
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7ff fa04 	bl	8008ecc <lwip_netconn_do_close_internal>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d029      	beq.n	8009b1e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	785b      	ldrb	r3, [r3, #1]
 8009ad0:	2b04      	cmp	r3, #4
 8009ad2:	d006      	beq.n	8009ae2 <lwip_netconn_do_close+0xbe>
 8009ad4:	4b14      	ldr	r3, [pc, #80]	; (8009b28 <lwip_netconn_do_close+0x104>)
 8009ad6:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8009ada:	4916      	ldr	r1, [pc, #88]	; (8009b34 <lwip_netconn_do_close+0x110>)
 8009adc:	4814      	ldr	r0, [pc, #80]	; (8009b30 <lwip_netconn_do_close+0x10c>)
 8009ade:	f00e f9e3 	bl	8017ea8 <iprintf>
        UNLOCK_TCPIP_CORE();
 8009ae2:	4815      	ldr	r0, [pc, #84]	; (8009b38 <lwip_netconn_do_close+0x114>)
 8009ae4:	f00e f929 	bl	8017d3a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	330c      	adds	r3, #12
 8009aee:	2100      	movs	r1, #0
 8009af0:	4618      	mov	r0, r3
 8009af2:	f00e f880 	bl	8017bf6 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8009af6:	4810      	ldr	r0, [pc, #64]	; (8009b38 <lwip_netconn_do_close+0x114>)
 8009af8:	f00e f910 	bl	8017d1c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	785b      	ldrb	r3, [r3, #1]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00b      	beq.n	8009b1e <lwip_netconn_do_close+0xfa>
 8009b06:	4b08      	ldr	r3, [pc, #32]	; (8009b28 <lwip_netconn_do_close+0x104>)
 8009b08:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8009b0c:	4909      	ldr	r1, [pc, #36]	; (8009b34 <lwip_netconn_do_close+0x110>)
 8009b0e:	4808      	ldr	r0, [pc, #32]	; (8009b30 <lwip_netconn_do_close+0x10c>)
 8009b10:	f00e f9ca 	bl	8017ea8 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8009b14:	e003      	b.n	8009b1e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	22f5      	movs	r2, #245	; 0xf5
 8009b1a:	711a      	strb	r2, [r3, #4]
 8009b1c:	e000      	b.n	8009b20 <lwip_netconn_do_close+0xfc>
      return;
 8009b1e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	080192c0 	.word	0x080192c0
 8009b2c:	08019664 	.word	0x08019664
 8009b30:	08019304 	.word	0x08019304
 8009b34:	08019680 	.word	0x08019680
 8009b38:	2000bddc 	.word	0x2000bddc

08009b3c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d013      	beq.n	8009b72 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00b      	beq.n	8009b6a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f002 fc42 	bl	800c3e0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	605a      	str	r2, [r3, #4]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	685a      	ldr	r2, [r3, #4]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009b6a:	6879      	ldr	r1, [r7, #4]
 8009b6c:	2006      	movs	r0, #6
 8009b6e:	f001 fd8b 	bl	800b688 <memp_free>
  }
}
 8009b72:	bf00      	nop
 8009b74:	3708      	adds	r7, #8
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
	...

08009b7c <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d108      	bne.n	8009ba0 <netbuf_data+0x24>
 8009b8e:	4b1b      	ldr	r3, [pc, #108]	; (8009bfc <netbuf_data+0x80>)
 8009b90:	22c6      	movs	r2, #198	; 0xc6
 8009b92:	491b      	ldr	r1, [pc, #108]	; (8009c00 <netbuf_data+0x84>)
 8009b94:	481b      	ldr	r0, [pc, #108]	; (8009c04 <netbuf_data+0x88>)
 8009b96:	f00e f987 	bl	8017ea8 <iprintf>
 8009b9a:	f06f 030f 	mvn.w	r3, #15
 8009b9e:	e029      	b.n	8009bf4 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d108      	bne.n	8009bb8 <netbuf_data+0x3c>
 8009ba6:	4b15      	ldr	r3, [pc, #84]	; (8009bfc <netbuf_data+0x80>)
 8009ba8:	22c7      	movs	r2, #199	; 0xc7
 8009baa:	4917      	ldr	r1, [pc, #92]	; (8009c08 <netbuf_data+0x8c>)
 8009bac:	4815      	ldr	r0, [pc, #84]	; (8009c04 <netbuf_data+0x88>)
 8009bae:	f00e f97b 	bl	8017ea8 <iprintf>
 8009bb2:	f06f 030f 	mvn.w	r3, #15
 8009bb6:	e01d      	b.n	8009bf4 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d108      	bne.n	8009bd0 <netbuf_data+0x54>
 8009bbe:	4b0f      	ldr	r3, [pc, #60]	; (8009bfc <netbuf_data+0x80>)
 8009bc0:	22c8      	movs	r2, #200	; 0xc8
 8009bc2:	4912      	ldr	r1, [pc, #72]	; (8009c0c <netbuf_data+0x90>)
 8009bc4:	480f      	ldr	r0, [pc, #60]	; (8009c04 <netbuf_data+0x88>)
 8009bc6:	f00e f96f 	bl	8017ea8 <iprintf>
 8009bca:	f06f 030f 	mvn.w	r3, #15
 8009bce:	e011      	b.n	8009bf4 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d102      	bne.n	8009bde <netbuf_data+0x62>
    return ERR_BUF;
 8009bd8:	f06f 0301 	mvn.w	r3, #1
 8009bdc:	e00a      	b.n	8009bf4 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	685a      	ldr	r2, [r3, #4]
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	895a      	ldrh	r2, [r3, #10]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8009bf2:	2300      	movs	r3, #0
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	08019818 	.word	0x08019818
 8009c00:	08019920 	.word	0x08019920
 8009c04:	08019868 	.word	0x08019868
 8009c08:	0801993c 	.word	0x0801993c
 8009c0c:	0801995c 	.word	0x0801995c

08009c10 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d108      	bne.n	8009c30 <netbuf_next+0x20>
 8009c1e:	4b11      	ldr	r3, [pc, #68]	; (8009c64 <netbuf_next+0x54>)
 8009c20:	22e0      	movs	r2, #224	; 0xe0
 8009c22:	4911      	ldr	r1, [pc, #68]	; (8009c68 <netbuf_next+0x58>)
 8009c24:	4811      	ldr	r0, [pc, #68]	; (8009c6c <netbuf_next+0x5c>)
 8009c26:	f00e f93f 	bl	8017ea8 <iprintf>
 8009c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c2e:	e014      	b.n	8009c5a <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d102      	bne.n	8009c40 <netbuf_next+0x30>
    return -1;
 8009c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c3e:	e00c      	b.n	8009c5a <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d101      	bne.n	8009c58 <netbuf_next+0x48>
    return 1;
 8009c54:	2301      	movs	r3, #1
 8009c56:	e000      	b.n	8009c5a <netbuf_next+0x4a>
  }
  return 0;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	08019818 	.word	0x08019818
 8009c68:	08019978 	.word	0x08019978
 8009c6c:	08019868 	.word	0x08019868

08009c70 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009c7a:	f009 f84f 	bl	8012d1c <sys_timeouts_sleeptime>
 8009c7e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c86:	d10b      	bne.n	8009ca0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009c88:	4813      	ldr	r0, [pc, #76]	; (8009cd8 <tcpip_timeouts_mbox_fetch+0x68>)
 8009c8a:	f00e f856 	bl	8017d3a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009c8e:	2200      	movs	r2, #0
 8009c90:	6839      	ldr	r1, [r7, #0]
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f00d ff0e 	bl	8017ab4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009c98:	480f      	ldr	r0, [pc, #60]	; (8009cd8 <tcpip_timeouts_mbox_fetch+0x68>)
 8009c9a:	f00e f83f 	bl	8017d1c <sys_mutex_lock>
    return;
 8009c9e:	e018      	b.n	8009cd2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d102      	bne.n	8009cac <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009ca6:	f008 ffff 	bl	8012ca8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009caa:	e7e6      	b.n	8009c7a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009cac:	480a      	ldr	r0, [pc, #40]	; (8009cd8 <tcpip_timeouts_mbox_fetch+0x68>)
 8009cae:	f00e f844 	bl	8017d3a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f00d fefc 	bl	8017ab4 <sys_arch_mbox_fetch>
 8009cbc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009cbe:	4806      	ldr	r0, [pc, #24]	; (8009cd8 <tcpip_timeouts_mbox_fetch+0x68>)
 8009cc0:	f00e f82c 	bl	8017d1c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cca:	d102      	bne.n	8009cd2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009ccc:	f008 ffec 	bl	8012ca8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009cd0:	e7d3      	b.n	8009c7a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	2000bddc 	.word	0x2000bddc

08009cdc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009ce4:	4810      	ldr	r0, [pc, #64]	; (8009d28 <tcpip_thread+0x4c>)
 8009ce6:	f00e f819 	bl	8017d1c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009cea:	4b10      	ldr	r3, [pc, #64]	; (8009d2c <tcpip_thread+0x50>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d005      	beq.n	8009cfe <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009cf2:	4b0e      	ldr	r3, [pc, #56]	; (8009d2c <tcpip_thread+0x50>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a0e      	ldr	r2, [pc, #56]	; (8009d30 <tcpip_thread+0x54>)
 8009cf8:	6812      	ldr	r2, [r2, #0]
 8009cfa:	4610      	mov	r0, r2
 8009cfc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009cfe:	f107 030c 	add.w	r3, r7, #12
 8009d02:	4619      	mov	r1, r3
 8009d04:	480b      	ldr	r0, [pc, #44]	; (8009d34 <tcpip_thread+0x58>)
 8009d06:	f7ff ffb3 	bl	8009c70 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d106      	bne.n	8009d1e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009d10:	4b09      	ldr	r3, [pc, #36]	; (8009d38 <tcpip_thread+0x5c>)
 8009d12:	2291      	movs	r2, #145	; 0x91
 8009d14:	4909      	ldr	r1, [pc, #36]	; (8009d3c <tcpip_thread+0x60>)
 8009d16:	480a      	ldr	r0, [pc, #40]	; (8009d40 <tcpip_thread+0x64>)
 8009d18:	f00e f8c6 	bl	8017ea8 <iprintf>
      continue;
 8009d1c:	e003      	b.n	8009d26 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f000 f80f 	bl	8009d44 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009d26:	e7ea      	b.n	8009cfe <tcpip_thread+0x22>
 8009d28:	2000bddc 	.word	0x2000bddc
 8009d2c:	200085fc 	.word	0x200085fc
 8009d30:	20008600 	.word	0x20008600
 8009d34:	20008604 	.word	0x20008604
 8009d38:	080199b0 	.word	0x080199b0
 8009d3c:	080199e0 	.word	0x080199e0
 8009d40:	08019a00 	.word	0x08019a00

08009d44 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d018      	beq.n	8009d86 <tcpip_thread_handle_msg+0x42>
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	d021      	beq.n	8009d9c <tcpip_thread_handle_msg+0x58>
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d126      	bne.n	8009daa <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	6850      	ldr	r0, [r2, #4]
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	6892      	ldr	r2, [r2, #8]
 8009d68:	4611      	mov	r1, r2
 8009d6a:	4798      	blx	r3
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d004      	beq.n	8009d7c <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	4618      	mov	r0, r3
 8009d78:	f002 fb32 	bl	800c3e0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009d7c:	6879      	ldr	r1, [r7, #4]
 8009d7e:	2009      	movs	r0, #9
 8009d80:	f001 fc82 	bl	800b688 <memp_free>
      break;
 8009d84:	e018      	b.n	8009db8 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	6892      	ldr	r2, [r2, #8]
 8009d8e:	4610      	mov	r0, r2
 8009d90:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009d92:	6879      	ldr	r1, [r7, #4]
 8009d94:	2008      	movs	r0, #8
 8009d96:	f001 fc77 	bl	800b688 <memp_free>
      break;
 8009d9a:	e00d      	b.n	8009db8 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	6892      	ldr	r2, [r2, #8]
 8009da4:	4610      	mov	r0, r2
 8009da6:	4798      	blx	r3
      break;
 8009da8:	e006      	b.n	8009db8 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009daa:	4b05      	ldr	r3, [pc, #20]	; (8009dc0 <tcpip_thread_handle_msg+0x7c>)
 8009dac:	22cf      	movs	r2, #207	; 0xcf
 8009dae:	4905      	ldr	r1, [pc, #20]	; (8009dc4 <tcpip_thread_handle_msg+0x80>)
 8009db0:	4805      	ldr	r0, [pc, #20]	; (8009dc8 <tcpip_thread_handle_msg+0x84>)
 8009db2:	f00e f879 	bl	8017ea8 <iprintf>
      break;
 8009db6:	bf00      	nop
  }
}
 8009db8:	bf00      	nop
 8009dba:	3708      	adds	r7, #8
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	080199b0 	.word	0x080199b0
 8009dc4:	080199e0 	.word	0x080199e0
 8009dc8:	08019a00 	.word	0x08019a00

08009dcc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b086      	sub	sp, #24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009dd8:	481a      	ldr	r0, [pc, #104]	; (8009e44 <tcpip_inpkt+0x78>)
 8009dda:	f00d fec6 	bl	8017b6a <sys_mbox_valid>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d105      	bne.n	8009df0 <tcpip_inpkt+0x24>
 8009de4:	4b18      	ldr	r3, [pc, #96]	; (8009e48 <tcpip_inpkt+0x7c>)
 8009de6:	22fc      	movs	r2, #252	; 0xfc
 8009de8:	4918      	ldr	r1, [pc, #96]	; (8009e4c <tcpip_inpkt+0x80>)
 8009dea:	4819      	ldr	r0, [pc, #100]	; (8009e50 <tcpip_inpkt+0x84>)
 8009dec:	f00e f85c 	bl	8017ea8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009df0:	2009      	movs	r0, #9
 8009df2:	f001 fbf7 	bl	800b5e4 <memp_malloc>
 8009df6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d102      	bne.n	8009e04 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8009e02:	e01a      	b.n	8009e3a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	2200      	movs	r2, #0
 8009e08:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009e1c:	6979      	ldr	r1, [r7, #20]
 8009e1e:	4809      	ldr	r0, [pc, #36]	; (8009e44 <tcpip_inpkt+0x78>)
 8009e20:	f00d fe2e 	bl	8017a80 <sys_mbox_trypost>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d006      	beq.n	8009e38 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009e2a:	6979      	ldr	r1, [r7, #20]
 8009e2c:	2009      	movs	r0, #9
 8009e2e:	f001 fc2b 	bl	800b688 <memp_free>
    return ERR_MEM;
 8009e32:	f04f 33ff 	mov.w	r3, #4294967295
 8009e36:	e000      	b.n	8009e3a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009e38:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3718      	adds	r7, #24
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	20008604 	.word	0x20008604
 8009e48:	080199b0 	.word	0x080199b0
 8009e4c:	08019a28 	.word	0x08019a28
 8009e50:	08019a00 	.word	0x08019a00

08009e54 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009e64:	f003 0318 	and.w	r3, r3, #24
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d006      	beq.n	8009e7a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009e6c:	4a08      	ldr	r2, [pc, #32]	; (8009e90 <tcpip_input+0x3c>)
 8009e6e:	6839      	ldr	r1, [r7, #0]
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f7ff ffab 	bl	8009dcc <tcpip_inpkt>
 8009e76:	4603      	mov	r3, r0
 8009e78:	e005      	b.n	8009e86 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009e7a:	4a06      	ldr	r2, [pc, #24]	; (8009e94 <tcpip_input+0x40>)
 8009e7c:	6839      	ldr	r1, [r7, #0]
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f7ff ffa4 	bl	8009dcc <tcpip_inpkt>
 8009e84:	4603      	mov	r3, r0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3708      	adds	r7, #8
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	0801786d 	.word	0x0801786d
 8009e94:	08016751 	.word	0x08016751

08009e98 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009ea2:	4819      	ldr	r0, [pc, #100]	; (8009f08 <tcpip_try_callback+0x70>)
 8009ea4:	f00d fe61 	bl	8017b6a <sys_mbox_valid>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d106      	bne.n	8009ebc <tcpip_try_callback+0x24>
 8009eae:	4b17      	ldr	r3, [pc, #92]	; (8009f0c <tcpip_try_callback+0x74>)
 8009eb0:	f240 125d 	movw	r2, #349	; 0x15d
 8009eb4:	4916      	ldr	r1, [pc, #88]	; (8009f10 <tcpip_try_callback+0x78>)
 8009eb6:	4817      	ldr	r0, [pc, #92]	; (8009f14 <tcpip_try_callback+0x7c>)
 8009eb8:	f00d fff6 	bl	8017ea8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009ebc:	2008      	movs	r0, #8
 8009ebe:	f001 fb91 	bl	800b5e4 <memp_malloc>
 8009ec2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d102      	bne.n	8009ed0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009eca:	f04f 33ff 	mov.w	r3, #4294967295
 8009ece:	e017      	b.n	8009f00 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	683a      	ldr	r2, [r7, #0]
 8009ee0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009ee2:	68f9      	ldr	r1, [r7, #12]
 8009ee4:	4808      	ldr	r0, [pc, #32]	; (8009f08 <tcpip_try_callback+0x70>)
 8009ee6:	f00d fdcb 	bl	8017a80 <sys_mbox_trypost>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d006      	beq.n	8009efe <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009ef0:	68f9      	ldr	r1, [r7, #12]
 8009ef2:	2008      	movs	r0, #8
 8009ef4:	f001 fbc8 	bl	800b688 <memp_free>
    return ERR_MEM;
 8009ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8009efc:	e000      	b.n	8009f00 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	20008604 	.word	0x20008604
 8009f0c:	080199b0 	.word	0x080199b0
 8009f10:	08019a28 	.word	0x08019a28
 8009f14:	08019a00 	.word	0x08019a00

08009f18 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8009f24:	4806      	ldr	r0, [pc, #24]	; (8009f40 <tcpip_send_msg_wait_sem+0x28>)
 8009f26:	f00d fef9 	bl	8017d1c <sys_mutex_lock>
  fn(apimsg);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	68b8      	ldr	r0, [r7, #8]
 8009f2e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8009f30:	4803      	ldr	r0, [pc, #12]	; (8009f40 <tcpip_send_msg_wait_sem+0x28>)
 8009f32:	f00d ff02 	bl	8017d3a <sys_mutex_unlock>
  return ERR_OK;
 8009f36:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3710      	adds	r7, #16
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	2000bddc 	.word	0x2000bddc

08009f44 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af02      	add	r7, sp, #8
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009f4e:	f000 fec1 	bl	800acd4 <lwip_init>

  tcpip_init_done = initfunc;
 8009f52:	4a17      	ldr	r2, [pc, #92]	; (8009fb0 <tcpip_init+0x6c>)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009f58:	4a16      	ldr	r2, [pc, #88]	; (8009fb4 <tcpip_init+0x70>)
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009f5e:	2106      	movs	r1, #6
 8009f60:	4815      	ldr	r0, [pc, #84]	; (8009fb8 <tcpip_init+0x74>)
 8009f62:	f00d fd59 	bl	8017a18 <sys_mbox_new>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d006      	beq.n	8009f7a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009f6c:	4b13      	ldr	r3, [pc, #76]	; (8009fbc <tcpip_init+0x78>)
 8009f6e:	f240 2261 	movw	r2, #609	; 0x261
 8009f72:	4913      	ldr	r1, [pc, #76]	; (8009fc0 <tcpip_init+0x7c>)
 8009f74:	4813      	ldr	r0, [pc, #76]	; (8009fc4 <tcpip_init+0x80>)
 8009f76:	f00d ff97 	bl	8017ea8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009f7a:	4813      	ldr	r0, [pc, #76]	; (8009fc8 <tcpip_init+0x84>)
 8009f7c:	f00d feb2 	bl	8017ce4 <sys_mutex_new>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d006      	beq.n	8009f94 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009f86:	4b0d      	ldr	r3, [pc, #52]	; (8009fbc <tcpip_init+0x78>)
 8009f88:	f240 2265 	movw	r2, #613	; 0x265
 8009f8c:	490f      	ldr	r1, [pc, #60]	; (8009fcc <tcpip_init+0x88>)
 8009f8e:	480d      	ldr	r0, [pc, #52]	; (8009fc4 <tcpip_init+0x80>)
 8009f90:	f00d ff8a 	bl	8017ea8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009f94:	2300      	movs	r3, #0
 8009f96:	9300      	str	r3, [sp, #0]
 8009f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	490c      	ldr	r1, [pc, #48]	; (8009fd0 <tcpip_init+0x8c>)
 8009fa0:	480c      	ldr	r0, [pc, #48]	; (8009fd4 <tcpip_init+0x90>)
 8009fa2:	f00d fed7 	bl	8017d54 <sys_thread_new>
}
 8009fa6:	bf00      	nop
 8009fa8:	3708      	adds	r7, #8
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	200085fc 	.word	0x200085fc
 8009fb4:	20008600 	.word	0x20008600
 8009fb8:	20008604 	.word	0x20008604
 8009fbc:	080199b0 	.word	0x080199b0
 8009fc0:	08019a38 	.word	0x08019a38
 8009fc4:	08019a00 	.word	0x08019a00
 8009fc8:	2000bddc 	.word	0x2000bddc
 8009fcc:	08019a5c 	.word	0x08019a5c
 8009fd0:	08009cdd 	.word	0x08009cdd
 8009fd4:	08019a80 	.word	0x08019a80

08009fd8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d002      	beq.n	8009fee <fs_open+0x16>
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d102      	bne.n	8009ff4 <fs_open+0x1c>
    return ERR_ARG;
 8009fee:	f06f 030f 	mvn.w	r3, #15
 8009ff2:	e028      	b.n	800a046 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8009ff4:	4b16      	ldr	r3, [pc, #88]	; (800a050 <fs_open+0x78>)
 8009ff6:	60fb      	str	r3, [r7, #12]
 8009ff8:	e020      	b.n	800a03c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	4619      	mov	r1, r3
 800a000:	6838      	ldr	r0, [r7, #0]
 800a002:	f7f6 f8f5 	bl	80001f0 <strcmp>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d114      	bne.n	800a036 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	689a      	ldr	r2, [r3, #8]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	68da      	ldr	r2, [r3, #12]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	68da      	ldr	r2, [r3, #12]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	7c1a      	ldrb	r2, [r3, #16]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800a032:	2300      	movs	r3, #0
 800a034:	e007      	b.n	800a046 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	60fb      	str	r3, [r7, #12]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1db      	bne.n	8009ffa <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800a042:	f06f 0305 	mvn.w	r3, #5
}
 800a046:	4618      	mov	r0, r3
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	08026b10 	.word	0x08026b10

0800a054 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800a05c:	bf00      	nop
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	685a      	ldr	r2, [r3, #4]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	1ad3      	subs	r3, r2, r3
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	370c      	adds	r7, #12
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr

0800a086 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b082      	sub	sp, #8
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800a08e:	222c      	movs	r2, #44	; 0x2c
 800a090:	2100      	movs	r1, #0
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f00d ff00 	bl	8017e98 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800a098:	bf00      	nop
 800a09a:	3708      	adds	r7, #8
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800a0a6:	202c      	movs	r0, #44	; 0x2c
 800a0a8:	f001 f91a 	bl	800b2e0 <mem_malloc>
 800a0ac:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d002      	beq.n	800a0ba <http_state_alloc+0x1a>
    http_state_init(ret);
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f7ff ffe6 	bl	800a086 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800a0ba:	687b      	ldr	r3, [r7, #4]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	695b      	ldr	r3, [r3, #20]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d007      	beq.n	800a0e4 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	695b      	ldr	r3, [r3, #20]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7ff ffbb 	bl	800a054 <fs_close>
    hs->handle = NULL;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a1b      	ldr	r3, [r3, #32]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d007      	beq.n	800a0fc <http_state_eof+0x38>
    pbuf_free(hs->req);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a1b      	ldr	r3, [r3, #32]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f002 f975 	bl	800c3e0 <pbuf_free>
    hs->req = NULL;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800a0fc:	bf00      	nop
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d005      	beq.n	800a11e <http_state_free+0x1a>
    http_state_eof(hs);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f7ff ffd6 	bl	800a0c4 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 ff47 	bl	800afac <mem_free>
  }
}
 800a11e:	bf00      	nop
 800a120:	3708      	adds	r7, #8
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
	...

0800a128 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b086      	sub	sp, #24
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]
 800a134:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d106      	bne.n	800a14a <http_write+0x22>
 800a13c:	4b2c      	ldr	r3, [pc, #176]	; (800a1f0 <http_write+0xc8>)
 800a13e:	f240 2219 	movw	r2, #537	; 0x219
 800a142:	492c      	ldr	r1, [pc, #176]	; (800a1f4 <http_write+0xcc>)
 800a144:	482c      	ldr	r0, [pc, #176]	; (800a1f8 <http_write+0xd0>)
 800a146:	f00d feaf 	bl	8017ea8 <iprintf>
  len = *length;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	881b      	ldrh	r3, [r3, #0]
 800a14e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800a150:	8afb      	ldrh	r3, [r7, #22]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d101      	bne.n	800a15a <http_write+0x32>
    return ERR_OK;
 800a156:	2300      	movs	r3, #0
 800a158:	e045      	b.n	800a1e6 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a160:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800a162:	8aba      	ldrh	r2, [r7, #20]
 800a164:	8afb      	ldrh	r3, [r7, #22]
 800a166:	429a      	cmp	r2, r3
 800a168:	d201      	bcs.n	800a16e <http_write+0x46>
    len = max_len;
 800a16a:	8abb      	ldrh	r3, [r7, #20]
 800a16c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a172:	005b      	lsls	r3, r3, #1
 800a174:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800a176:	8afa      	ldrh	r2, [r7, #22]
 800a178:	8abb      	ldrh	r3, [r7, #20]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d901      	bls.n	800a182 <http_write+0x5a>
    len = max_len;
 800a17e:	8abb      	ldrh	r3, [r7, #20]
 800a180:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800a182:	78fb      	ldrb	r3, [r7, #3]
 800a184:	8afa      	ldrh	r2, [r7, #22]
 800a186:	68b9      	ldr	r1, [r7, #8]
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	f006 ff15 	bl	8010fb8 <tcp_write>
 800a18e:	4603      	mov	r3, r0
 800a190:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800a192:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a19a:	d10f      	bne.n	800a1bc <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d004      	beq.n	800a1b0 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800a1ac:	2b08      	cmp	r3, #8
 800a1ae:	d902      	bls.n	800a1b6 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	82fb      	strh	r3, [r7, #22]
 800a1b4:	e002      	b.n	800a1bc <http_write+0x94>
      } else {
        len /= 2;
 800a1b6:	8afb      	ldrh	r3, [r7, #22]
 800a1b8:	085b      	lsrs	r3, r3, #1
 800a1ba:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800a1bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c4:	d102      	bne.n	800a1cc <http_write+0xa4>
 800a1c6:	8afb      	ldrh	r3, [r7, #22]
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d8da      	bhi.n	800a182 <http_write+0x5a>

  if (err == ERR_OK) {
 800a1cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d103      	bne.n	800a1dc <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	8afa      	ldrh	r2, [r7, #22]
 800a1d8:	801a      	strh	r2, [r3, #0]
 800a1da:	e002      	b.n	800a1e2 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800a1e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3718      	adds	r7, #24
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	08019ad0 	.word	0x08019ad0
 800a1f4:	08019b08 	.word	0x08019b08
 800a1f8:	08019b18 	.word	0x08019b18

0800a1fc <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b086      	sub	sp, #24
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	4613      	mov	r3, r2
 800a208:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800a20a:	2100      	movs	r1, #0
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f003 ff97 	bl	800e140 <tcp_arg>
  altcp_recv(pcb, NULL);
 800a212:	2100      	movs	r1, #0
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f003 ffa5 	bl	800e164 <tcp_recv>
  altcp_err(pcb, NULL);
 800a21a:	2100      	movs	r1, #0
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f003 ffe5 	bl	800e1ec <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800a222:	2200      	movs	r2, #0
 800a224:	2100      	movs	r1, #0
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f004 f81a 	bl	800e260 <tcp_poll>
  altcp_sent(pcb, NULL);
 800a22c:	2100      	movs	r1, #0
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f003 ffba 	bl	800e1a8 <tcp_sent>
  if (hs != NULL) {
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d002      	beq.n	800a240 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800a23a:	68b8      	ldr	r0, [r7, #8]
 800a23c:	f7ff ff62 	bl	800a104 <http_state_free>
  }

  if (abort_conn) {
 800a240:	79fb      	ldrb	r3, [r7, #7]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d004      	beq.n	800a250 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f002 fec0 	bl	800cfcc <tcp_abort>
    return ERR_OK;
 800a24c:	2300      	movs	r3, #0
 800a24e:	e00f      	b.n	800a270 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f002 fd77 	bl	800cd44 <tcp_close>
 800a256:	4603      	mov	r3, r0
 800a258:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800a25a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d004      	beq.n	800a26c <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a262:	2204      	movs	r2, #4
 800a264:	4904      	ldr	r1, [pc, #16]	; (800a278 <http_close_or_abort_conn+0x7c>)
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f003 fffa 	bl	800e260 <tcp_poll>
  }
  return err;
 800a26c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a270:	4618      	mov	r0, r3
 800a272:	3718      	adds	r7, #24
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}
 800a278:	0800a93f 	.word	0x0800a93f

0800a27c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800a286:	2200      	movs	r2, #0
 800a288:	6839      	ldr	r1, [r7, #0]
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f7ff ffb6 	bl	800a1fc <http_close_or_abort_conn>
 800a290:	4603      	mov	r3, r0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b082      	sub	sp, #8
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
 800a2a2:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800a2a4:	6839      	ldr	r1, [r7, #0]
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f7ff ffe8 	bl	800a27c <http_close_conn>
  }
}
 800a2ac:	bf00      	nop
 800a2ae:	3708      	adds	r7, #8
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	695b      	ldr	r3, [r3, #20]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d105      	bne.n	800a2d2 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800a2c6:	6839      	ldr	r1, [r7, #0]
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f7ff ffe6 	bl	800a29a <http_eof>
    return 0;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	e016      	b.n	800a300 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	695b      	ldr	r3, [r3, #20]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7ff fec6 	bl	800a068 <fs_bytes_left>
 800a2dc:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	dc05      	bgt.n	800a2f0 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a2e4:	6839      	ldr	r1, [r7, #0]
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f7ff ffd7 	bl	800a29a <http_eof>
    return 0;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	e007      	b.n	800a300 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800a2f0:	4b05      	ldr	r3, [pc, #20]	; (800a308 <http_check_eof+0x54>)
 800a2f2:	f240 429d 	movw	r2, #1181	; 0x49d
 800a2f6:	4905      	ldr	r1, [pc, #20]	; (800a30c <http_check_eof+0x58>)
 800a2f8:	4805      	ldr	r0, [pc, #20]	; (800a310 <http_check_eof+0x5c>)
 800a2fa:	f00d fdd5 	bl	8017ea8 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800a2fe:	2301      	movs	r3, #1
}
 800a300:	4618      	mov	r0, r3
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	08019ad0 	.word	0x08019ad0
 800a30c:	08019b40 	.word	0x08019b40
 800a310:	08019b18 	.word	0x08019b18

0800a314 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800a31e:	2300      	movs	r3, #0
 800a320:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a326:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d803      	bhi.n	800a336 <http_send_data_nonssi+0x22>
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a332:	b29b      	uxth	r3, r3
 800a334:	e001      	b.n	800a33a <http_send_data_nonssi+0x26>
 800a336:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a33a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	6999      	ldr	r1, [r3, #24]
 800a340:	f107 020c 	add.w	r2, r7, #12
 800a344:	2300      	movs	r3, #0
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f7ff feee 	bl	800a128 <http_write>
 800a34c:	4603      	mov	r3, r0
 800a34e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800a350:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d10d      	bne.n	800a374 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800a358:	2301      	movs	r3, #1
 800a35a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	699b      	ldr	r3, [r3, #24]
 800a360:	89ba      	ldrh	r2, [r7, #12]
 800a362:	441a      	add	r2, r3
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36c:	89ba      	ldrh	r2, [r7, #12]
 800a36e:	1a9a      	subs	r2, r3, r2
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800a374:	7bfb      	ldrb	r3, [r7, #15]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b084      	sub	sp, #16
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800a388:	2300      	movs	r3, #0
 800a38a:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d101      	bne.n	800a396 <http_send+0x18>
    return 0;
 800a392:	2300      	movs	r3, #0
 800a394:	e025      	b.n	800a3e2 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d108      	bne.n	800a3b0 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800a39e:	6839      	ldr	r1, [r7, #0]
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f7ff ff87 	bl	800a2b4 <http_check_eof>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d101      	bne.n	800a3b0 <http_send+0x32>
      return 0;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	e018      	b.n	800a3e2 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800a3b0:	6839      	ldr	r1, [r7, #0]
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f7ff ffae 	bl	800a314 <http_send_data_nonssi>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d10d      	bne.n	800a3e0 <http_send+0x62>
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	695b      	ldr	r3, [r3, #20]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7ff fe4d 	bl	800a068 <fs_bytes_left>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	dc05      	bgt.n	800a3e0 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a3d4:	6839      	ldr	r1, [r7, #0]
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f7ff ff5f 	bl	800a29a <http_eof>
    return 0;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	e000      	b.n	800a3e2 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800a3e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3710      	adds	r7, #16
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
	...

0800a3ec <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	4a1c      	ldr	r2, [pc, #112]	; (800a46c <http_get_404_file+0x80>)
 800a3fa:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4619      	mov	r1, r3
 800a404:	4610      	mov	r0, r2
 800a406:	f7ff fde7 	bl	8009fd8 <fs_open>
 800a40a:	4603      	mov	r3, r0
 800a40c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a40e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d024      	beq.n	800a460 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	4a15      	ldr	r2, [pc, #84]	; (800a470 <http_get_404_file+0x84>)
 800a41a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4619      	mov	r1, r3
 800a424:	4610      	mov	r0, r2
 800a426:	f7ff fdd7 	bl	8009fd8 <fs_open>
 800a42a:	4603      	mov	r3, r0
 800a42c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a42e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d014      	beq.n	800a460 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	4a0e      	ldr	r2, [pc, #56]	; (800a474 <http_get_404_file+0x88>)
 800a43a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4619      	mov	r1, r3
 800a444:	4610      	mov	r0, r2
 800a446:	f7ff fdc7 	bl	8009fd8 <fs_open>
 800a44a:	4603      	mov	r3, r0
 800a44c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800a44e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d004      	beq.n	800a460 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	2200      	movs	r2, #0
 800a45a:	601a      	str	r2, [r3, #0]
        return NULL;
 800a45c:	2300      	movs	r3, #0
 800a45e:	e000      	b.n	800a462 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800a460:	687b      	ldr	r3, [r7, #4]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3710      	adds	r7, #16
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	08019b78 	.word	0x08019b78
 800a470:	08019b84 	.word	0x08019b84
 800a474:	08019b90 	.word	0x08019b90

0800a478 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b08e      	sub	sp, #56	; 0x38
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800a488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d106      	bne.n	800a49c <http_parse_request+0x24>
 800a48e:	4b65      	ldr	r3, [pc, #404]	; (800a624 <http_parse_request+0x1ac>)
 800a490:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800a494:	4964      	ldr	r1, [pc, #400]	; (800a628 <http_parse_request+0x1b0>)
 800a496:	4865      	ldr	r0, [pc, #404]	; (800a62c <http_parse_request+0x1b4>)
 800a498:	f00d fd06 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d106      	bne.n	800a4b0 <http_parse_request+0x38>
 800a4a2:	4b60      	ldr	r3, [pc, #384]	; (800a624 <http_parse_request+0x1ac>)
 800a4a4:	f240 72af 	movw	r2, #1967	; 0x7af
 800a4a8:	4961      	ldr	r1, [pc, #388]	; (800a630 <http_parse_request+0x1b8>)
 800a4aa:	4860      	ldr	r0, [pc, #384]	; (800a62c <http_parse_request+0x1b4>)
 800a4ac:	f00d fcfc 	bl	8017ea8 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	695b      	ldr	r3, [r3, #20]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d103      	bne.n	800a4c0 <http_parse_request+0x48>
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	699b      	ldr	r3, [r3, #24]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d002      	beq.n	800a4c6 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800a4c0:	f06f 0307 	mvn.w	r3, #7
 800a4c4:	e0aa      	b.n	800a61c <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	6a1b      	ldr	r3, [r3, #32]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d103      	bne.n	800a4d6 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4d2:	621a      	str	r2, [r3, #32]
 800a4d4:	e005      	b.n	800a4e2 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	6a1b      	ldr	r3, [r3, #32]
 800a4da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f002 f84d 	bl	800c57c <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800a4e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4e4:	f002 f822 	bl	800c52c <pbuf_ref>

  if (hs->req->next != NULL) {
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	6a1b      	ldr	r3, [r3, #32]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d012      	beq.n	800a518 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	6a1b      	ldr	r3, [r3, #32]
 800a4f6:	891b      	ldrh	r3, [r3, #8]
 800a4f8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	bf28      	it	cs
 800a500:	4613      	movcs	r3, r2
 800a502:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	6a18      	ldr	r0, [r3, #32]
 800a508:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a50a:	2300      	movs	r3, #0
 800a50c:	4949      	ldr	r1, [pc, #292]	; (800a634 <http_parse_request+0x1bc>)
 800a50e:	f002 f96d 	bl	800c7ec <pbuf_copy_partial>
    data = httpd_req_buf;
 800a512:	4b48      	ldr	r3, [pc, #288]	; (800a634 <http_parse_request+0x1bc>)
 800a514:	637b      	str	r3, [r7, #52]	; 0x34
 800a516:	e005      	b.n	800a524 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800a518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800a51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a520:	895b      	ldrh	r3, [r3, #10]
 800a522:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800a524:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a526:	2b06      	cmp	r3, #6
 800a528:	d963      	bls.n	800a5f2 <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800a52a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a52c:	461a      	mov	r2, r3
 800a52e:	4942      	ldr	r1, [pc, #264]	; (800a638 <http_parse_request+0x1c0>)
 800a530:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a532:	f000 fb99 	bl	800ac68 <lwip_strnstr>
 800a536:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800a538:	6a3b      	ldr	r3, [r7, #32]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d059      	beq.n	800a5f2 <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800a53e:	2300      	movs	r3, #0
 800a540:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800a542:	2204      	movs	r2, #4
 800a544:	493d      	ldr	r1, [pc, #244]	; (800a63c <http_parse_request+0x1c4>)
 800a546:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a548:	f00d fd25 	bl	8017f96 <strncmp>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d117      	bne.n	800a582 <http_parse_request+0x10a>
        sp1 = data + 3;
 800a552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a554:	3303      	adds	r3, #3
 800a556:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	3301      	adds	r3, #1
 800a55c:	461a      	mov	r2, r3
 800a55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a560:	1ad3      	subs	r3, r2, r3
 800a562:	b29b      	uxth	r3, r3
 800a564:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a566:	1ad3      	subs	r3, r2, r3
 800a568:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800a56a:	69fb      	ldr	r3, [r7, #28]
 800a56c:	3301      	adds	r3, #1
 800a56e:	8b7a      	ldrh	r2, [r7, #26]
 800a570:	4933      	ldr	r1, [pc, #204]	; (800a640 <http_parse_request+0x1c8>)
 800a572:	4618      	mov	r0, r3
 800a574:	f000 fb78 	bl	800ac68 <lwip_strnstr>
 800a578:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800a57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d111      	bne.n	800a5a4 <http_parse_request+0x12c>
 800a580:	e006      	b.n	800a590 <http_parse_request+0x118>
        data[4] = 0;
 800a582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a584:	3304      	adds	r3, #4
 800a586:	2200      	movs	r2, #0
 800a588:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800a58a:	f06f 030f 	mvn.w	r3, #15
 800a58e:	e045      	b.n	800a61c <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	3301      	adds	r3, #1
 800a594:	8b7a      	ldrh	r2, [r7, #26]
 800a596:	4928      	ldr	r1, [pc, #160]	; (800a638 <http_parse_request+0x1c0>)
 800a598:	4618      	mov	r0, r3
 800a59a:	f000 fb65 	bl	800ac68 <lwip_strnstr>
 800a59e:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800a5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a6:	69fa      	ldr	r2, [r7, #28]
 800a5a8:	3201      	adds	r2, #1
 800a5aa:	1a9b      	subs	r3, r3, r2
 800a5ac:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800a5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d01e      	beq.n	800a5f2 <http_parse_request+0x17a>
 800a5b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d91a      	bls.n	800a5f2 <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800a5bc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a5be:	461a      	mov	r2, r3
 800a5c0:	4920      	ldr	r1, [pc, #128]	; (800a644 <http_parse_request+0x1cc>)
 800a5c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a5c4:	f000 fb50 	bl	800ac68 <lwip_strnstr>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d011      	beq.n	800a5f2 <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800a5da:	8b3b      	ldrh	r3, [r7, #24]
 800a5dc:	697a      	ldr	r2, [r7, #20]
 800a5de:	4413      	add	r3, r2
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800a5e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5e6:	6979      	ldr	r1, [r7, #20]
 800a5e8:	68b8      	ldr	r0, [r7, #8]
 800a5ea:	f000 f82d 	bl	800a648 <http_find_file>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	e014      	b.n	800a61c <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	6a1b      	ldr	r3, [r3, #32]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f001 ff80 	bl	800c4fc <pbuf_clen>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	6a1b      	ldr	r3, [r3, #32]
 800a604:	891b      	ldrh	r3, [r3, #8]
 800a606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a60a:	d205      	bcs.n	800a618 <http_parse_request+0x1a0>
 800a60c:	8a7b      	ldrh	r3, [r7, #18]
 800a60e:	2b05      	cmp	r3, #5
 800a610:	d802      	bhi.n	800a618 <http_parse_request+0x1a0>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800a612:	f06f 0304 	mvn.w	r3, #4
 800a616:	e001      	b.n	800a61c <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800a618:	f06f 030f 	mvn.w	r3, #15
  }
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3738      	adds	r7, #56	; 0x38
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}
 800a624:	08019ad0 	.word	0x08019ad0
 800a628:	08019b9c 	.word	0x08019b9c
 800a62c:	08019b18 	.word	0x08019b18
 800a630:	08019ba8 	.word	0x08019ba8
 800a634:	20008608 	.word	0x20008608
 800a638:	08019bb4 	.word	0x08019bb4
 800a63c:	08019bb8 	.word	0x08019bb8
 800a640:	08019bc0 	.word	0x08019bc0
 800a644:	08019bc4 	.word	0x08019bc4

0800a648 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b092      	sub	sp, #72	; 0x48
 800a64c:	af02      	add	r7, sp, #8
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800a654:	2300      	movs	r3, #0
 800a656:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800a658:	2300      	movs	r3, #0
 800a65a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800a65c:	2300      	movs	r3, #0
 800a65e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	4618      	mov	r0, r3
 800a666:	f7f5 fdcd 	bl	8000204 <strlen>
 800a66a:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800a66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d06b      	beq.n	800a74a <http_find_file+0x102>
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a676:	3b01      	subs	r3, #1
 800a678:	4413      	add	r3, r2
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	2b2f      	cmp	r3, #47	; 0x2f
 800a67e:	d164      	bne.n	800a74a <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a680:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800a682:	4a53      	ldr	r2, [pc, #332]	; (800a7d0 <http_find_file+0x188>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d102      	bne.n	800a68e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d15d      	bne.n	800a74a <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800a68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a690:	3b01      	subs	r3, #1
 800a692:	2b3f      	cmp	r3, #63	; 0x3f
 800a694:	bf28      	it	cs
 800a696:	233f      	movcs	r3, #63	; 0x3f
 800a698:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800a69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d00a      	beq.n	800a6b6 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	484a      	ldr	r0, [pc, #296]	; (800a7d0 <http_find_file+0x188>)
 800a6a8:	f00d fbeb 	bl	8017e82 <memcpy>
      http_uri_buf[copy_len] = 0;
 800a6ac:	4a48      	ldr	r2, [pc, #288]	; (800a7d0 <http_find_file+0x188>)
 800a6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b0:	4413      	add	r3, r2
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6ba:	e043      	b.n	800a744 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800a6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d028      	beq.n	800a714 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800a6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800a6c8:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800a6ca:	6a3b      	ldr	r3, [r7, #32]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d01e      	beq.n	800a70e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800a6d0:	4a40      	ldr	r2, [pc, #256]	; (800a7d4 <http_find_file+0x18c>)
 800a6d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7f5 fd93 	bl	8000204 <strlen>
 800a6de:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800a6e0:	69fa      	ldr	r2, [r7, #28]
 800a6e2:	6a3b      	ldr	r3, [r7, #32]
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	bf28      	it	cs
 800a6e8:	4613      	movcs	r3, r2
 800a6ea:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800a6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ee:	4a38      	ldr	r2, [pc, #224]	; (800a7d0 <http_find_file+0x188>)
 800a6f0:	1898      	adds	r0, r3, r2
 800a6f2:	4a38      	ldr	r2, [pc, #224]	; (800a7d4 <http_find_file+0x18c>)
 800a6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a6fa:	69ba      	ldr	r2, [r7, #24]
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	f00d fbc0 	bl	8017e82 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800a702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	4413      	add	r3, r2
 800a708:	4a31      	ldr	r2, [pc, #196]	; (800a7d0 <http_find_file+0x188>)
 800a70a:	2100      	movs	r1, #0
 800a70c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800a70e:	4b30      	ldr	r3, [pc, #192]	; (800a7d0 <http_find_file+0x188>)
 800a710:	633b      	str	r3, [r7, #48]	; 0x30
 800a712:	e004      	b.n	800a71e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800a714:	4a2f      	ldr	r2, [pc, #188]	; (800a7d4 <http_find_file+0x18c>)
 800a716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a718:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a71c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a722:	4618      	mov	r0, r3
 800a724:	f7ff fc58 	bl	8009fd8 <fs_open>
 800a728:	4603      	mov	r3, r0
 800a72a:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800a72c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d104      	bne.n	800a73e <http_find_file+0xf6>
        uri = file_name;
 800a734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a736:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800a73c:	e005      	b.n	800a74a <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800a73e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a740:	3301      	adds	r3, #1
 800a742:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a746:	2b04      	cmp	r3, #4
 800a748:	d9b8      	bls.n	800a6bc <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800a74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d124      	bne.n	800a79a <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	213f      	movs	r1, #63	; 0x3f
 800a754:	4618      	mov	r0, r3
 800a756:	f00d fc11 	bl	8017f7c <strchr>
 800a75a:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800a75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d005      	beq.n	800a76e <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800a762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a764:	2200      	movs	r2, #0
 800a766:	701a      	strb	r2, [r3, #0]
      params++;
 800a768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a76a:	3301      	adds	r3, #1
 800a76c:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	68ba      	ldr	r2, [r7, #8]
 800a772:	4611      	mov	r1, r2
 800a774:	4618      	mov	r0, r3
 800a776:	f7ff fc2f 	bl	8009fd8 <fs_open>
 800a77a:	4603      	mov	r3, r0
 800a77c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800a77e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d102      	bne.n	800a78c <http_find_file+0x144>
      file = &hs->file_handle;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	63bb      	str	r3, [r7, #56]	; 0x38
 800a78a:	e006      	b.n	800a79a <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800a78c:	f107 0308 	add.w	r3, r7, #8
 800a790:	4619      	mov	r1, r3
 800a792:	68f8      	ldr	r0, [r7, #12]
 800a794:	f7ff fe2a 	bl	800a3ec <http_get_404_file>
 800a798:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800a79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d106      	bne.n	800a7ae <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800a7a0:	f107 0308 	add.w	r3, r7, #8
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	68f8      	ldr	r0, [r7, #12]
 800a7a8:	f7ff fe20 	bl	800a3ec <http_get_404_file>
 800a7ac:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800a7ae:	68ba      	ldr	r2, [r7, #8]
 800a7b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7b2:	9301      	str	r3, [sp, #4]
 800a7b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f000 f809 	bl	800a7d8 <http_init_file>
 800a7c6:	4603      	mov	r3, r0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3740      	adds	r7, #64	; 0x40
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	20008a08 	.word	0x20008a08
 800a7d4:	08026b24 	.word	0x08026b24

0800a7d8 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b086      	sub	sp, #24
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	607a      	str	r2, [r7, #4]
 800a7e4:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d05d      	beq.n	800a8a8 <http_init_file+0xd0>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d106      	bne.n	800a802 <http_init_file+0x2a>
 800a7f4:	4b35      	ldr	r3, [pc, #212]	; (800a8cc <http_init_file+0xf4>)
 800a7f6:	f640 120b 	movw	r2, #2315	; 0x90b
 800a7fa:	4935      	ldr	r1, [pc, #212]	; (800a8d0 <http_init_file+0xf8>)
 800a7fc:	4835      	ldr	r0, [pc, #212]	; (800a8d4 <http_init_file+0xfc>)
 800a7fe:	f00d fb53 	bl	8017ea8 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	68ba      	ldr	r2, [r7, #8]
 800a806:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	2b00      	cmp	r3, #0
 800a816:	da06      	bge.n	800a826 <http_init_file+0x4e>
 800a818:	4b2c      	ldr	r3, [pc, #176]	; (800a8cc <http_init_file+0xf4>)
 800a81a:	f640 1234 	movw	r2, #2356	; 0x934
 800a81e:	492e      	ldr	r1, [pc, #184]	; (800a8d8 <http_init_file+0x100>)
 800a820:	482c      	ldr	r0, [pc, #176]	; (800a8d4 <http_init_file+0xfc>)
 800a822:	f00d fb41 	bl	8017ea8 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	461a      	mov	r2, r3
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2200      	movs	r2, #0
 800a834:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	695b      	ldr	r3, [r3, #20]
 800a83c:	7c1b      	ldrb	r3, [r3, #16]
 800a83e:	f003 0301 	and.w	r3, r3, #1
 800a842:	2b00      	cmp	r3, #0
 800a844:	d106      	bne.n	800a854 <http_init_file+0x7c>
 800a846:	4b21      	ldr	r3, [pc, #132]	; (800a8cc <http_init_file+0xf4>)
 800a848:	f640 1244 	movw	r2, #2372	; 0x944
 800a84c:	4923      	ldr	r1, [pc, #140]	; (800a8dc <http_init_file+0x104>)
 800a84e:	4821      	ldr	r0, [pc, #132]	; (800a8d4 <http_init_file+0xfc>)
 800a850:	f00d fb2a 	bl	8017ea8 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d033      	beq.n	800a8c2 <http_init_file+0xea>
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	695b      	ldr	r3, [r3, #20]
 800a85e:	7c1b      	ldrb	r3, [r3, #16]
 800a860:	f003 0301 	and.w	r3, r3, #1
 800a864:	2b00      	cmp	r3, #0
 800a866:	d02c      	beq.n	800a8c2 <http_init_file+0xea>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6998      	ldr	r0, [r3, #24]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a870:	461a      	mov	r2, r3
 800a872:	491b      	ldr	r1, [pc, #108]	; (800a8e0 <http_init_file+0x108>)
 800a874:	f000 f9f8 	bl	800ac68 <lwip_strnstr>
 800a878:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d020      	beq.n	800a8c2 <http_init_file+0xea>
        int diff = file_start + 4 - hs->file;
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	3304      	adds	r3, #4
 800a884:	461a      	mov	r2, r3
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	699b      	ldr	r3, [r3, #24]
 800a88a:	1ad3      	subs	r3, r2, r3
 800a88c:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	699a      	ldr	r2, [r3, #24]
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	441a      	add	r2, r3
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	1ad2      	subs	r2, r2, r3
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	625a      	str	r2, [r3, #36]	; 0x24
 800a8a6:	e00c      	b.n	800a8c2 <http_init_file+0xea>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3718      	adds	r7, #24
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	08019ad0 	.word	0x08019ad0
 800a8d0:	08019bcc 	.word	0x08019bcc
 800a8d4:	08019b18 	.word	0x08019b18
 800a8d8:	08019be0 	.word	0x08019be0
 800a8dc:	08019c00 	.word	0x08019c00
 800a8e0:	08019bc4 	.word	0x08019bc4

0800a8e4 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d002      	beq.n	800a900 <http_err+0x1c>
    http_state_free(hs);
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	f7ff fc02 	bl	800a104 <http_state_free>
  }
}
 800a900:	bf00      	nop
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b086      	sub	sp, #24
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	4613      	mov	r3, r2
 800a914:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d101      	bne.n	800a924 <http_sent+0x1c>
    return ERR_OK;
 800a920:	2300      	movs	r3, #0
 800a922:	e008      	b.n	800a936 <http_sent+0x2e>
  }

  hs->retries = 0;
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	2200      	movs	r2, #0
 800a928:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800a92c:	6979      	ldr	r1, [r7, #20]
 800a92e:	68b8      	ldr	r0, [r7, #8]
 800a930:	f7ff fd25 	bl	800a37e <http_send>

  return ERR_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3718      	adds	r7, #24
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b084      	sub	sp, #16
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
 800a946:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d107      	bne.n	800a962 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800a952:	2100      	movs	r1, #0
 800a954:	6838      	ldr	r0, [r7, #0]
 800a956:	f7ff fc91 	bl	800a27c <http_close_conn>
 800a95a:	4603      	mov	r3, r0
 800a95c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800a95e:	2300      	movs	r3, #0
 800a960:	e021      	b.n	800a9a6 <http_poll+0x68>
  } else {
    hs->retries++;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a968:	3301      	adds	r3, #1
 800a96a:	b2da      	uxtb	r2, r3
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a978:	2b04      	cmp	r3, #4
 800a97a:	d105      	bne.n	800a988 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800a97c:	68f9      	ldr	r1, [r7, #12]
 800a97e:	6838      	ldr	r0, [r7, #0]
 800a980:	f7ff fc7c 	bl	800a27c <http_close_conn>
      return ERR_OK;
 800a984:	2300      	movs	r3, #0
 800a986:	e00e      	b.n	800a9a6 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	695b      	ldr	r3, [r3, #20]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d009      	beq.n	800a9a4 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800a990:	68f9      	ldr	r1, [r7, #12]
 800a992:	6838      	ldr	r0, [r7, #0]
 800a994:	f7ff fcf3 	bl	800a37e <http_send>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d002      	beq.n	800a9a4 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800a99e:	6838      	ldr	r0, [r7, #0]
 800a9a0:	f007 f8f6 	bl	8011b90 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
	...

0800a9b0 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b086      	sub	sp, #24
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	607a      	str	r2, [r7, #4]
 800a9bc:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800a9c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d105      	bne.n	800a9d6 <http_recv+0x26>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d002      	beq.n	800a9d6 <http_recv+0x26>
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d111      	bne.n	800a9fa <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d008      	beq.n	800a9ee <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	891b      	ldrh	r3, [r3, #8]
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	68b8      	ldr	r0, [r7, #8]
 800a9e4:	f002 fccc 	bl	800d380 <tcp_recved>
      pbuf_free(p);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f001 fcf9 	bl	800c3e0 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800a9ee:	6979      	ldr	r1, [r7, #20]
 800a9f0:	68b8      	ldr	r0, [r7, #8]
 800a9f2:	f7ff fc43 	bl	800a27c <http_close_conn>
    return ERR_OK;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	e055      	b.n	800aaa6 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	891b      	ldrh	r3, [r3, #8]
 800a9fe:	4619      	mov	r1, r3
 800aa00:	68b8      	ldr	r0, [r7, #8]
 800aa02:	f002 fcbd 	bl	800d380 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	695b      	ldr	r3, [r3, #20]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d147      	bne.n	800aa9e <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800aa0e:	68ba      	ldr	r2, [r7, #8]
 800aa10:	6979      	ldr	r1, [r7, #20]
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f7ff fd30 	bl	800a478 <http_parse_request>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800aa1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d015      	beq.n	800aa50 <http_recv+0xa0>
 800aa24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa28:	f113 0f05 	cmn.w	r3, #5
 800aa2c:	d010      	beq.n	800aa50 <http_recv+0xa0>
 800aa2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa32:	f113 0f10 	cmn.w	r3, #16
 800aa36:	d00b      	beq.n	800aa50 <http_recv+0xa0>
 800aa38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa3c:	f113 0f08 	cmn.w	r3, #8
 800aa40:	d006      	beq.n	800aa50 <http_recv+0xa0>
 800aa42:	4b1b      	ldr	r3, [pc, #108]	; (800aab0 <http_recv+0x100>)
 800aa44:	f640 2205 	movw	r2, #2565	; 0xa05
 800aa48:	491a      	ldr	r1, [pc, #104]	; (800aab4 <http_recv+0x104>)
 800aa4a:	481b      	ldr	r0, [pc, #108]	; (800aab8 <http_recv+0x108>)
 800aa4c:	f00d fa2c 	bl	8017ea8 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800aa50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa54:	f113 0f05 	cmn.w	r3, #5
 800aa58:	d00b      	beq.n	800aa72 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	6a1b      	ldr	r3, [r3, #32]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d007      	beq.n	800aa72 <http_recv+0xc2>
          pbuf_free(hs->req);
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	4618      	mov	r0, r3
 800aa68:	f001 fcba 	bl	800c3e0 <pbuf_free>
          hs->req = NULL;
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f001 fcb4 	bl	800c3e0 <pbuf_free>
      if (parsed == ERR_OK) {
 800aa78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d104      	bne.n	800aa8a <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800aa80:	6979      	ldr	r1, [r7, #20]
 800aa82:	68b8      	ldr	r0, [r7, #8]
 800aa84:	f7ff fc7b 	bl	800a37e <http_send>
 800aa88:	e00c      	b.n	800aaa4 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800aa8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa8e:	f113 0f10 	cmn.w	r3, #16
 800aa92:	d107      	bne.n	800aaa4 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800aa94:	6979      	ldr	r1, [r7, #20]
 800aa96:	68b8      	ldr	r0, [r7, #8]
 800aa98:	f7ff fbf0 	bl	800a27c <http_close_conn>
 800aa9c:	e002      	b.n	800aaa4 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f001 fc9e 	bl	800c3e0 <pbuf_free>
    }
  }
  return ERR_OK;
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3718      	adds	r7, #24
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	08019ad0 	.word	0x08019ad0
 800aab4:	08019c2c 	.word	0x08019c2c
 800aab8:	08019b18 	.word	0x08019b18

0800aabc <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b086      	sub	sp, #24
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	4613      	mov	r3, r2
 800aac8:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800aaca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d102      	bne.n	800aad8 <http_accept+0x1c>
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d102      	bne.n	800aade <http_accept+0x22>
    return ERR_VAL;
 800aad8:	f06f 0305 	mvn.w	r3, #5
 800aadc:	e025      	b.n	800ab2a <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800aade:	2101      	movs	r1, #1
 800aae0:	68b8      	ldr	r0, [r7, #8]
 800aae2:	f003 f92d 	bl	800dd40 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800aae6:	f7ff fadb 	bl	800a0a0 <http_state_alloc>
 800aaea:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d102      	bne.n	800aaf8 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800aaf2:	f04f 33ff 	mov.w	r3, #4294967295
 800aaf6:	e018      	b.n	800ab2a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	68ba      	ldr	r2, [r7, #8]
 800aafc:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800aafe:	6979      	ldr	r1, [r7, #20]
 800ab00:	68b8      	ldr	r0, [r7, #8]
 800ab02:	f003 fb1d 	bl	800e140 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800ab06:	490b      	ldr	r1, [pc, #44]	; (800ab34 <http_accept+0x78>)
 800ab08:	68b8      	ldr	r0, [r7, #8]
 800ab0a:	f003 fb2b 	bl	800e164 <tcp_recv>
  altcp_err(pcb, http_err);
 800ab0e:	490a      	ldr	r1, [pc, #40]	; (800ab38 <http_accept+0x7c>)
 800ab10:	68b8      	ldr	r0, [r7, #8]
 800ab12:	f003 fb6b 	bl	800e1ec <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800ab16:	2204      	movs	r2, #4
 800ab18:	4908      	ldr	r1, [pc, #32]	; (800ab3c <http_accept+0x80>)
 800ab1a:	68b8      	ldr	r0, [r7, #8]
 800ab1c:	f003 fba0 	bl	800e260 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800ab20:	4907      	ldr	r1, [pc, #28]	; (800ab40 <http_accept+0x84>)
 800ab22:	68b8      	ldr	r0, [r7, #8]
 800ab24:	f003 fb40 	bl	800e1a8 <tcp_sent>

  return ERR_OK;
 800ab28:	2300      	movs	r3, #0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3718      	adds	r7, #24
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	0800a9b1 	.word	0x0800a9b1
 800ab38:	0800a8e5 	.word	0x0800a8e5
 800ab3c:	0800a93f 	.word	0x0800a93f
 800ab40:	0800a909 	.word	0x0800a909

0800ab44 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d029      	beq.n	800abaa <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800ab56:	2101      	movs	r1, #1
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f003 f8f1 	bl	800dd40 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800ab5e:	887b      	ldrh	r3, [r7, #2]
 800ab60:	461a      	mov	r2, r3
 800ab62:	4914      	ldr	r1, [pc, #80]	; (800abb4 <httpd_init_pcb+0x70>)
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f002 fa3d 	bl	800cfe4 <tcp_bind>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800ab6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d006      	beq.n	800ab84 <httpd_init_pcb+0x40>
 800ab76:	4b10      	ldr	r3, [pc, #64]	; (800abb8 <httpd_init_pcb+0x74>)
 800ab78:	f640 2257 	movw	r2, #2647	; 0xa57
 800ab7c:	490f      	ldr	r1, [pc, #60]	; (800abbc <httpd_init_pcb+0x78>)
 800ab7e:	4810      	ldr	r0, [pc, #64]	; (800abc0 <httpd_init_pcb+0x7c>)
 800ab80:	f00d f992 	bl	8017ea8 <iprintf>
    pcb = altcp_listen(pcb);
 800ab84:	21ff      	movs	r1, #255	; 0xff
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f002 fae4 	bl	800d154 <tcp_listen_with_backlog>
 800ab8c:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d106      	bne.n	800aba2 <httpd_init_pcb+0x5e>
 800ab94:	4b08      	ldr	r3, [pc, #32]	; (800abb8 <httpd_init_pcb+0x74>)
 800ab96:	f640 2259 	movw	r2, #2649	; 0xa59
 800ab9a:	490a      	ldr	r1, [pc, #40]	; (800abc4 <httpd_init_pcb+0x80>)
 800ab9c:	4808      	ldr	r0, [pc, #32]	; (800abc0 <httpd_init_pcb+0x7c>)
 800ab9e:	f00d f983 	bl	8017ea8 <iprintf>
    altcp_accept(pcb, http_accept);
 800aba2:	4909      	ldr	r1, [pc, #36]	; (800abc8 <httpd_init_pcb+0x84>)
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f003 fb43 	bl	800e230 <tcp_accept>
  }
}
 800abaa:	bf00      	nop
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	08026c6c 	.word	0x08026c6c
 800abb8:	08019ad0 	.word	0x08019ad0
 800abbc:	08019c58 	.word	0x08019c58
 800abc0:	08019b18 	.word	0x08019b18
 800abc4:	08019c74 	.word	0x08019c74
 800abc8:	0800aabd 	.word	0x0800aabd

0800abcc <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800abd2:	202e      	movs	r0, #46	; 0x2e
 800abd4:	f003 faa6 	bl	800e124 <tcp_new_ip_type>
 800abd8:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d106      	bne.n	800abee <httpd_init+0x22>
 800abe0:	4b07      	ldr	r3, [pc, #28]	; (800ac00 <httpd_init+0x34>)
 800abe2:	f640 2272 	movw	r2, #2674	; 0xa72
 800abe6:	4907      	ldr	r1, [pc, #28]	; (800ac04 <httpd_init+0x38>)
 800abe8:	4807      	ldr	r0, [pc, #28]	; (800ac08 <httpd_init+0x3c>)
 800abea:	f00d f95d 	bl	8017ea8 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800abee:	2150      	movs	r1, #80	; 0x50
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f7ff ffa7 	bl	800ab44 <httpd_init_pcb>
}
 800abf6:	bf00      	nop
 800abf8:	3708      	adds	r7, #8
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	08019ad0 	.word	0x08019ad0
 800ac04:	08019c94 	.word	0x08019c94
 800ac08:	08019b18 	.word	0x08019b18

0800ac0c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	4603      	mov	r3, r0
 800ac14:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ac16:	88fb      	ldrh	r3, [r7, #6]
 800ac18:	021b      	lsls	r3, r3, #8
 800ac1a:	b21a      	sxth	r2, r3
 800ac1c:	88fb      	ldrh	r3, [r7, #6]
 800ac1e:	0a1b      	lsrs	r3, r3, #8
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	b21b      	sxth	r3, r3
 800ac24:	4313      	orrs	r3, r2
 800ac26:	b21b      	sxth	r3, r3
 800ac28:	b29b      	uxth	r3, r3
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	370c      	adds	r7, #12
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ac36:	b480      	push	{r7}
 800ac38:	b083      	sub	sp, #12
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	061a      	lsls	r2, r3, #24
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	021b      	lsls	r3, r3, #8
 800ac46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac4a:	431a      	orrs	r2, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	0a1b      	lsrs	r3, r3, #8
 800ac50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ac54:	431a      	orrs	r2, r3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	0e1b      	lsrs	r3, r3, #24
 800ac5a:	4313      	orrs	r3, r2
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b086      	sub	sp, #24
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800ac74:	68b8      	ldr	r0, [r7, #8]
 800ac76:	f7f5 fac5 	bl	8000204 <strlen>
 800ac7a:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d101      	bne.n	800ac86 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	e022      	b.n	800accc <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	617b      	str	r3, [r7, #20]
 800ac8a:	e012      	b.n	800acb2 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	781a      	ldrb	r2, [r3, #0]
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d109      	bne.n	800acac <lwip_strnstr+0x44>
 800ac98:	693a      	ldr	r2, [r7, #16]
 800ac9a:	68b9      	ldr	r1, [r7, #8]
 800ac9c:	6978      	ldr	r0, [r7, #20]
 800ac9e:	f00d f97a 	bl	8017f96 <strncmp>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d101      	bne.n	800acac <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	e00f      	b.n	800accc <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	3301      	adds	r3, #1
 800acb0:	617b      	str	r3, [r7, #20]
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d007      	beq.n	800acca <lwip_strnstr+0x62>
 800acba:	697a      	ldr	r2, [r7, #20]
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	441a      	add	r2, r3
 800acc0:	68f9      	ldr	r1, [r7, #12]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	440b      	add	r3, r1
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d9e0      	bls.n	800ac8c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800acca:	2300      	movs	r3, #0
}
 800accc:	4618      	mov	r0, r3
 800acce:	3718      	adds	r7, #24
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800acda:	2300      	movs	r3, #0
 800acdc:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800acde:	f00c fff3 	bl	8017cc8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ace2:	f000 f8d5 	bl	800ae90 <mem_init>
  memp_init();
 800ace6:	f000 fc31 	bl	800b54c <memp_init>
  pbuf_init();
  netif_init();
 800acea:	f000 fcf7 	bl	800b6dc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800acee:	f008 f84d 	bl	8012d8c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800acf2:	f001 fe1f 	bl	800c934 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800acf6:	f007 ff91 	bl	8012c1c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800acfa:	bf00      	nop
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
	...

0800ad04 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ad0e:	4b05      	ldr	r3, [pc, #20]	; (800ad24 <ptr_to_mem+0x20>)
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	88fb      	ldrh	r3, [r7, #6]
 800ad14:	4413      	add	r3, r2
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	370c      	adds	r7, #12
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	20008a48 	.word	0x20008a48

0800ad28 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a05      	ldr	r2, [pc, #20]	; (800ad48 <mem_to_ptr+0x20>)
 800ad34:	6812      	ldr	r2, [r2, #0]
 800ad36:	1a9b      	subs	r3, r3, r2
 800ad38:	b29b      	uxth	r3, r3
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	370c      	adds	r7, #12
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	20008a48 	.word	0x20008a48

0800ad4c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ad4c:	b590      	push	{r4, r7, lr}
 800ad4e:	b085      	sub	sp, #20
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ad54:	4b45      	ldr	r3, [pc, #276]	; (800ae6c <plug_holes+0x120>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d206      	bcs.n	800ad6c <plug_holes+0x20>
 800ad5e:	4b44      	ldr	r3, [pc, #272]	; (800ae70 <plug_holes+0x124>)
 800ad60:	f240 12df 	movw	r2, #479	; 0x1df
 800ad64:	4943      	ldr	r1, [pc, #268]	; (800ae74 <plug_holes+0x128>)
 800ad66:	4844      	ldr	r0, [pc, #272]	; (800ae78 <plug_holes+0x12c>)
 800ad68:	f00d f89e 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ad6c:	4b43      	ldr	r3, [pc, #268]	; (800ae7c <plug_holes+0x130>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d306      	bcc.n	800ad84 <plug_holes+0x38>
 800ad76:	4b3e      	ldr	r3, [pc, #248]	; (800ae70 <plug_holes+0x124>)
 800ad78:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ad7c:	4940      	ldr	r1, [pc, #256]	; (800ae80 <plug_holes+0x134>)
 800ad7e:	483e      	ldr	r0, [pc, #248]	; (800ae78 <plug_holes+0x12c>)
 800ad80:	f00d f892 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	791b      	ldrb	r3, [r3, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d006      	beq.n	800ad9a <plug_holes+0x4e>
 800ad8c:	4b38      	ldr	r3, [pc, #224]	; (800ae70 <plug_holes+0x124>)
 800ad8e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ad92:	493c      	ldr	r1, [pc, #240]	; (800ae84 <plug_holes+0x138>)
 800ad94:	4838      	ldr	r0, [pc, #224]	; (800ae78 <plug_holes+0x12c>)
 800ad96:	f00d f887 	bl	8017ea8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	881b      	ldrh	r3, [r3, #0]
 800ad9e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ada2:	d906      	bls.n	800adb2 <plug_holes+0x66>
 800ada4:	4b32      	ldr	r3, [pc, #200]	; (800ae70 <plug_holes+0x124>)
 800ada6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800adaa:	4937      	ldr	r1, [pc, #220]	; (800ae88 <plug_holes+0x13c>)
 800adac:	4832      	ldr	r0, [pc, #200]	; (800ae78 <plug_holes+0x12c>)
 800adae:	f00d f87b 	bl	8017ea8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	881b      	ldrh	r3, [r3, #0]
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7ff ffa4 	bl	800ad04 <ptr_to_mem>
 800adbc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d024      	beq.n	800ae10 <plug_holes+0xc4>
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	791b      	ldrb	r3, [r3, #4]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d120      	bne.n	800ae10 <plug_holes+0xc4>
 800adce:	4b2b      	ldr	r3, [pc, #172]	; (800ae7c <plug_holes+0x130>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	68fa      	ldr	r2, [r7, #12]
 800add4:	429a      	cmp	r2, r3
 800add6:	d01b      	beq.n	800ae10 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800add8:	4b2c      	ldr	r3, [pc, #176]	; (800ae8c <plug_holes+0x140>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	68fa      	ldr	r2, [r7, #12]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d102      	bne.n	800ade8 <plug_holes+0x9c>
      lfree = mem;
 800ade2:	4a2a      	ldr	r2, [pc, #168]	; (800ae8c <plug_holes+0x140>)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	881a      	ldrh	r2, [r3, #0]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	881b      	ldrh	r3, [r3, #0]
 800adf4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800adf8:	d00a      	beq.n	800ae10 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	881b      	ldrh	r3, [r3, #0]
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7ff ff80 	bl	800ad04 <ptr_to_mem>
 800ae04:	4604      	mov	r4, r0
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f7ff ff8e 	bl	800ad28 <mem_to_ptr>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	885b      	ldrh	r3, [r3, #2]
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7ff ff75 	bl	800ad04 <ptr_to_mem>
 800ae1a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ae1c:	68ba      	ldr	r2, [r7, #8]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d01f      	beq.n	800ae64 <plug_holes+0x118>
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	791b      	ldrb	r3, [r3, #4]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d11b      	bne.n	800ae64 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ae2c:	4b17      	ldr	r3, [pc, #92]	; (800ae8c <plug_holes+0x140>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d102      	bne.n	800ae3c <plug_holes+0xf0>
      lfree = pmem;
 800ae36:	4a15      	ldr	r2, [pc, #84]	; (800ae8c <plug_holes+0x140>)
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	881a      	ldrh	r2, [r3, #0]
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	881b      	ldrh	r3, [r3, #0]
 800ae48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae4c:	d00a      	beq.n	800ae64 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	881b      	ldrh	r3, [r3, #0]
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7ff ff56 	bl	800ad04 <ptr_to_mem>
 800ae58:	4604      	mov	r4, r0
 800ae5a:	68b8      	ldr	r0, [r7, #8]
 800ae5c:	f7ff ff64 	bl	800ad28 <mem_to_ptr>
 800ae60:	4603      	mov	r3, r0
 800ae62:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ae64:	bf00      	nop
 800ae66:	3714      	adds	r7, #20
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd90      	pop	{r4, r7, pc}
 800ae6c:	20008a48 	.word	0x20008a48
 800ae70:	08019cb0 	.word	0x08019cb0
 800ae74:	08019ce0 	.word	0x08019ce0
 800ae78:	08019cf8 	.word	0x08019cf8
 800ae7c:	20008a4c 	.word	0x20008a4c
 800ae80:	08019d20 	.word	0x08019d20
 800ae84:	08019d3c 	.word	0x08019d3c
 800ae88:	08019d58 	.word	0x08019d58
 800ae8c:	20008a54 	.word	0x20008a54

0800ae90 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ae96:	4b1f      	ldr	r3, [pc, #124]	; (800af14 <mem_init+0x84>)
 800ae98:	3303      	adds	r3, #3
 800ae9a:	f023 0303 	bic.w	r3, r3, #3
 800ae9e:	461a      	mov	r2, r3
 800aea0:	4b1d      	ldr	r3, [pc, #116]	; (800af18 <mem_init+0x88>)
 800aea2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800aea4:	4b1c      	ldr	r3, [pc, #112]	; (800af18 <mem_init+0x88>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800aeb0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2200      	movs	r2, #0
 800aebc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800aebe:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800aec2:	f7ff ff1f 	bl	800ad04 <ptr_to_mem>
 800aec6:	4602      	mov	r2, r0
 800aec8:	4b14      	ldr	r3, [pc, #80]	; (800af1c <mem_init+0x8c>)
 800aeca:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800aecc:	4b13      	ldr	r3, [pc, #76]	; (800af1c <mem_init+0x8c>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2201      	movs	r2, #1
 800aed2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800aed4:	4b11      	ldr	r3, [pc, #68]	; (800af1c <mem_init+0x8c>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800aedc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800aede:	4b0f      	ldr	r3, [pc, #60]	; (800af1c <mem_init+0x8c>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800aee6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800aee8:	4b0b      	ldr	r3, [pc, #44]	; (800af18 <mem_init+0x88>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a0c      	ldr	r2, [pc, #48]	; (800af20 <mem_init+0x90>)
 800aeee:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800aef0:	480c      	ldr	r0, [pc, #48]	; (800af24 <mem_init+0x94>)
 800aef2:	f00c fef7 	bl	8017ce4 <sys_mutex_new>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d006      	beq.n	800af0a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800aefc:	4b0a      	ldr	r3, [pc, #40]	; (800af28 <mem_init+0x98>)
 800aefe:	f240 221f 	movw	r2, #543	; 0x21f
 800af02:	490a      	ldr	r1, [pc, #40]	; (800af2c <mem_init+0x9c>)
 800af04:	480a      	ldr	r0, [pc, #40]	; (800af30 <mem_init+0xa0>)
 800af06:	f00c ffcf 	bl	8017ea8 <iprintf>
  }
}
 800af0a:	bf00      	nop
 800af0c:	3708      	adds	r7, #8
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	2000bdf8 	.word	0x2000bdf8
 800af18:	20008a48 	.word	0x20008a48
 800af1c:	20008a4c 	.word	0x20008a4c
 800af20:	20008a54 	.word	0x20008a54
 800af24:	20008a50 	.word	0x20008a50
 800af28:	08019cb0 	.word	0x08019cb0
 800af2c:	08019d84 	.word	0x08019d84
 800af30:	08019cf8 	.word	0x08019cf8

0800af34 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b086      	sub	sp, #24
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f7ff fef3 	bl	800ad28 <mem_to_ptr>
 800af42:	4603      	mov	r3, r0
 800af44:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	881b      	ldrh	r3, [r3, #0]
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7ff feda 	bl	800ad04 <ptr_to_mem>
 800af50:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	885b      	ldrh	r3, [r3, #2]
 800af56:	4618      	mov	r0, r3
 800af58:	f7ff fed4 	bl	800ad04 <ptr_to_mem>
 800af5c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	881b      	ldrh	r3, [r3, #0]
 800af62:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af66:	d818      	bhi.n	800af9a <mem_link_valid+0x66>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	885b      	ldrh	r3, [r3, #2]
 800af6c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af70:	d813      	bhi.n	800af9a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800af76:	8afa      	ldrh	r2, [r7, #22]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d004      	beq.n	800af86 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	881b      	ldrh	r3, [r3, #0]
 800af80:	8afa      	ldrh	r2, [r7, #22]
 800af82:	429a      	cmp	r2, r3
 800af84:	d109      	bne.n	800af9a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800af86:	4b08      	ldr	r3, [pc, #32]	; (800afa8 <mem_link_valid+0x74>)
 800af88:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800af8a:	693a      	ldr	r2, [r7, #16]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d006      	beq.n	800af9e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	885b      	ldrh	r3, [r3, #2]
 800af94:	8afa      	ldrh	r2, [r7, #22]
 800af96:	429a      	cmp	r2, r3
 800af98:	d001      	beq.n	800af9e <mem_link_valid+0x6a>
    return 0;
 800af9a:	2300      	movs	r3, #0
 800af9c:	e000      	b.n	800afa0 <mem_link_valid+0x6c>
  }
  return 1;
 800af9e:	2301      	movs	r3, #1
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3718      	adds	r7, #24
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	20008a4c 	.word	0x20008a4c

0800afac <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b088      	sub	sp, #32
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d070      	beq.n	800b09c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f003 0303 	and.w	r3, r3, #3
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d00d      	beq.n	800afe0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800afc4:	4b37      	ldr	r3, [pc, #220]	; (800b0a4 <mem_free+0xf8>)
 800afc6:	f240 2273 	movw	r2, #627	; 0x273
 800afca:	4937      	ldr	r1, [pc, #220]	; (800b0a8 <mem_free+0xfc>)
 800afcc:	4837      	ldr	r0, [pc, #220]	; (800b0ac <mem_free+0x100>)
 800afce:	f00c ff6b 	bl	8017ea8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800afd2:	f00c fee5 	bl	8017da0 <sys_arch_protect>
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	68f8      	ldr	r0, [r7, #12]
 800afda:	f00c feef 	bl	8017dbc <sys_arch_unprotect>
    return;
 800afde:	e05e      	b.n	800b09e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	3b08      	subs	r3, #8
 800afe4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800afe6:	4b32      	ldr	r3, [pc, #200]	; (800b0b0 <mem_free+0x104>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	69fa      	ldr	r2, [r7, #28]
 800afec:	429a      	cmp	r2, r3
 800afee:	d306      	bcc.n	800affe <mem_free+0x52>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f103 020c 	add.w	r2, r3, #12
 800aff6:	4b2f      	ldr	r3, [pc, #188]	; (800b0b4 <mem_free+0x108>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	429a      	cmp	r2, r3
 800affc:	d90d      	bls.n	800b01a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800affe:	4b29      	ldr	r3, [pc, #164]	; (800b0a4 <mem_free+0xf8>)
 800b000:	f240 227f 	movw	r2, #639	; 0x27f
 800b004:	492c      	ldr	r1, [pc, #176]	; (800b0b8 <mem_free+0x10c>)
 800b006:	4829      	ldr	r0, [pc, #164]	; (800b0ac <mem_free+0x100>)
 800b008:	f00c ff4e 	bl	8017ea8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b00c:	f00c fec8 	bl	8017da0 <sys_arch_protect>
 800b010:	6138      	str	r0, [r7, #16]
 800b012:	6938      	ldr	r0, [r7, #16]
 800b014:	f00c fed2 	bl	8017dbc <sys_arch_unprotect>
    return;
 800b018:	e041      	b.n	800b09e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b01a:	4828      	ldr	r0, [pc, #160]	; (800b0bc <mem_free+0x110>)
 800b01c:	f00c fe7e 	bl	8017d1c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b020:	69fb      	ldr	r3, [r7, #28]
 800b022:	791b      	ldrb	r3, [r3, #4]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d110      	bne.n	800b04a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b028:	4b1e      	ldr	r3, [pc, #120]	; (800b0a4 <mem_free+0xf8>)
 800b02a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b02e:	4924      	ldr	r1, [pc, #144]	; (800b0c0 <mem_free+0x114>)
 800b030:	481e      	ldr	r0, [pc, #120]	; (800b0ac <mem_free+0x100>)
 800b032:	f00c ff39 	bl	8017ea8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b036:	4821      	ldr	r0, [pc, #132]	; (800b0bc <mem_free+0x110>)
 800b038:	f00c fe7f 	bl	8017d3a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b03c:	f00c feb0 	bl	8017da0 <sys_arch_protect>
 800b040:	6178      	str	r0, [r7, #20]
 800b042:	6978      	ldr	r0, [r7, #20]
 800b044:	f00c feba 	bl	8017dbc <sys_arch_unprotect>
    return;
 800b048:	e029      	b.n	800b09e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b04a:	69f8      	ldr	r0, [r7, #28]
 800b04c:	f7ff ff72 	bl	800af34 <mem_link_valid>
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d110      	bne.n	800b078 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b056:	4b13      	ldr	r3, [pc, #76]	; (800b0a4 <mem_free+0xf8>)
 800b058:	f240 2295 	movw	r2, #661	; 0x295
 800b05c:	4919      	ldr	r1, [pc, #100]	; (800b0c4 <mem_free+0x118>)
 800b05e:	4813      	ldr	r0, [pc, #76]	; (800b0ac <mem_free+0x100>)
 800b060:	f00c ff22 	bl	8017ea8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b064:	4815      	ldr	r0, [pc, #84]	; (800b0bc <mem_free+0x110>)
 800b066:	f00c fe68 	bl	8017d3a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b06a:	f00c fe99 	bl	8017da0 <sys_arch_protect>
 800b06e:	61b8      	str	r0, [r7, #24]
 800b070:	69b8      	ldr	r0, [r7, #24]
 800b072:	f00c fea3 	bl	8017dbc <sys_arch_unprotect>
    return;
 800b076:	e012      	b.n	800b09e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	2200      	movs	r2, #0
 800b07c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b07e:	4b12      	ldr	r3, [pc, #72]	; (800b0c8 <mem_free+0x11c>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	69fa      	ldr	r2, [r7, #28]
 800b084:	429a      	cmp	r2, r3
 800b086:	d202      	bcs.n	800b08e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b088:	4a0f      	ldr	r2, [pc, #60]	; (800b0c8 <mem_free+0x11c>)
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b08e:	69f8      	ldr	r0, [r7, #28]
 800b090:	f7ff fe5c 	bl	800ad4c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b094:	4809      	ldr	r0, [pc, #36]	; (800b0bc <mem_free+0x110>)
 800b096:	f00c fe50 	bl	8017d3a <sys_mutex_unlock>
 800b09a:	e000      	b.n	800b09e <mem_free+0xf2>
    return;
 800b09c:	bf00      	nop
}
 800b09e:	3720      	adds	r7, #32
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	08019cb0 	.word	0x08019cb0
 800b0a8:	08019da0 	.word	0x08019da0
 800b0ac:	08019cf8 	.word	0x08019cf8
 800b0b0:	20008a48 	.word	0x20008a48
 800b0b4:	20008a4c 	.word	0x20008a4c
 800b0b8:	08019dc4 	.word	0x08019dc4
 800b0bc:	20008a50 	.word	0x20008a50
 800b0c0:	08019de0 	.word	0x08019de0
 800b0c4:	08019e08 	.word	0x08019e08
 800b0c8:	20008a54 	.word	0x20008a54

0800b0cc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b088      	sub	sp, #32
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b0d8:	887b      	ldrh	r3, [r7, #2]
 800b0da:	3303      	adds	r3, #3
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	f023 0303 	bic.w	r3, r3, #3
 800b0e2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b0e4:	8bfb      	ldrh	r3, [r7, #30]
 800b0e6:	2b0b      	cmp	r3, #11
 800b0e8:	d801      	bhi.n	800b0ee <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b0ea:	230c      	movs	r3, #12
 800b0ec:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b0ee:	8bfb      	ldrh	r3, [r7, #30]
 800b0f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b0f4:	d803      	bhi.n	800b0fe <mem_trim+0x32>
 800b0f6:	8bfa      	ldrh	r2, [r7, #30]
 800b0f8:	887b      	ldrh	r3, [r7, #2]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d201      	bcs.n	800b102 <mem_trim+0x36>
    return NULL;
 800b0fe:	2300      	movs	r3, #0
 800b100:	e0d8      	b.n	800b2b4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b102:	4b6e      	ldr	r3, [pc, #440]	; (800b2bc <mem_trim+0x1f0>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d304      	bcc.n	800b116 <mem_trim+0x4a>
 800b10c:	4b6c      	ldr	r3, [pc, #432]	; (800b2c0 <mem_trim+0x1f4>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	429a      	cmp	r2, r3
 800b114:	d306      	bcc.n	800b124 <mem_trim+0x58>
 800b116:	4b6b      	ldr	r3, [pc, #428]	; (800b2c4 <mem_trim+0x1f8>)
 800b118:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b11c:	496a      	ldr	r1, [pc, #424]	; (800b2c8 <mem_trim+0x1fc>)
 800b11e:	486b      	ldr	r0, [pc, #428]	; (800b2cc <mem_trim+0x200>)
 800b120:	f00c fec2 	bl	8017ea8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b124:	4b65      	ldr	r3, [pc, #404]	; (800b2bc <mem_trim+0x1f0>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d304      	bcc.n	800b138 <mem_trim+0x6c>
 800b12e:	4b64      	ldr	r3, [pc, #400]	; (800b2c0 <mem_trim+0x1f4>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	429a      	cmp	r2, r3
 800b136:	d307      	bcc.n	800b148 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b138:	f00c fe32 	bl	8017da0 <sys_arch_protect>
 800b13c:	60b8      	str	r0, [r7, #8]
 800b13e:	68b8      	ldr	r0, [r7, #8]
 800b140:	f00c fe3c 	bl	8017dbc <sys_arch_unprotect>
    return rmem;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	e0b5      	b.n	800b2b4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	3b08      	subs	r3, #8
 800b14c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b14e:	69b8      	ldr	r0, [r7, #24]
 800b150:	f7ff fdea 	bl	800ad28 <mem_to_ptr>
 800b154:	4603      	mov	r3, r0
 800b156:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	881a      	ldrh	r2, [r3, #0]
 800b15c:	8afb      	ldrh	r3, [r7, #22]
 800b15e:	1ad3      	subs	r3, r2, r3
 800b160:	b29b      	uxth	r3, r3
 800b162:	3b08      	subs	r3, #8
 800b164:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b166:	8bfa      	ldrh	r2, [r7, #30]
 800b168:	8abb      	ldrh	r3, [r7, #20]
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d906      	bls.n	800b17c <mem_trim+0xb0>
 800b16e:	4b55      	ldr	r3, [pc, #340]	; (800b2c4 <mem_trim+0x1f8>)
 800b170:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b174:	4956      	ldr	r1, [pc, #344]	; (800b2d0 <mem_trim+0x204>)
 800b176:	4855      	ldr	r0, [pc, #340]	; (800b2cc <mem_trim+0x200>)
 800b178:	f00c fe96 	bl	8017ea8 <iprintf>
  if (newsize > size) {
 800b17c:	8bfa      	ldrh	r2, [r7, #30]
 800b17e:	8abb      	ldrh	r3, [r7, #20]
 800b180:	429a      	cmp	r2, r3
 800b182:	d901      	bls.n	800b188 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b184:	2300      	movs	r3, #0
 800b186:	e095      	b.n	800b2b4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800b188:	8bfa      	ldrh	r2, [r7, #30]
 800b18a:	8abb      	ldrh	r3, [r7, #20]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d101      	bne.n	800b194 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	e08f      	b.n	800b2b4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b194:	484f      	ldr	r0, [pc, #316]	; (800b2d4 <mem_trim+0x208>)
 800b196:	f00c fdc1 	bl	8017d1c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	881b      	ldrh	r3, [r3, #0]
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7ff fdb0 	bl	800ad04 <ptr_to_mem>
 800b1a4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	791b      	ldrb	r3, [r3, #4]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d13f      	bne.n	800b22e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	881b      	ldrh	r3, [r3, #0]
 800b1b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b1b6:	d106      	bne.n	800b1c6 <mem_trim+0xfa>
 800b1b8:	4b42      	ldr	r3, [pc, #264]	; (800b2c4 <mem_trim+0x1f8>)
 800b1ba:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b1be:	4946      	ldr	r1, [pc, #280]	; (800b2d8 <mem_trim+0x20c>)
 800b1c0:	4842      	ldr	r0, [pc, #264]	; (800b2cc <mem_trim+0x200>)
 800b1c2:	f00c fe71 	bl	8017ea8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	881b      	ldrh	r3, [r3, #0]
 800b1ca:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b1cc:	8afa      	ldrh	r2, [r7, #22]
 800b1ce:	8bfb      	ldrh	r3, [r7, #30]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	3308      	adds	r3, #8
 800b1d6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b1d8:	4b40      	ldr	r3, [pc, #256]	; (800b2dc <mem_trim+0x210>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	693a      	ldr	r2, [r7, #16]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d106      	bne.n	800b1f0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800b1e2:	89fb      	ldrh	r3, [r7, #14]
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7ff fd8d 	bl	800ad04 <ptr_to_mem>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	4b3b      	ldr	r3, [pc, #236]	; (800b2dc <mem_trim+0x210>)
 800b1ee:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b1f0:	89fb      	ldrh	r3, [r7, #14]
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7ff fd86 	bl	800ad04 <ptr_to_mem>
 800b1f8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	89ba      	ldrh	r2, [r7, #12]
 800b204:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	8afa      	ldrh	r2, [r7, #22]
 800b20a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	89fa      	ldrh	r2, [r7, #14]
 800b210:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	881b      	ldrh	r3, [r3, #0]
 800b216:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b21a:	d047      	beq.n	800b2ac <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	881b      	ldrh	r3, [r3, #0]
 800b220:	4618      	mov	r0, r3
 800b222:	f7ff fd6f 	bl	800ad04 <ptr_to_mem>
 800b226:	4602      	mov	r2, r0
 800b228:	89fb      	ldrh	r3, [r7, #14]
 800b22a:	8053      	strh	r3, [r2, #2]
 800b22c:	e03e      	b.n	800b2ac <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b22e:	8bfb      	ldrh	r3, [r7, #30]
 800b230:	f103 0214 	add.w	r2, r3, #20
 800b234:	8abb      	ldrh	r3, [r7, #20]
 800b236:	429a      	cmp	r2, r3
 800b238:	d838      	bhi.n	800b2ac <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b23a:	8afa      	ldrh	r2, [r7, #22]
 800b23c:	8bfb      	ldrh	r3, [r7, #30]
 800b23e:	4413      	add	r3, r2
 800b240:	b29b      	uxth	r3, r3
 800b242:	3308      	adds	r3, #8
 800b244:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	881b      	ldrh	r3, [r3, #0]
 800b24a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b24e:	d106      	bne.n	800b25e <mem_trim+0x192>
 800b250:	4b1c      	ldr	r3, [pc, #112]	; (800b2c4 <mem_trim+0x1f8>)
 800b252:	f240 3216 	movw	r2, #790	; 0x316
 800b256:	4920      	ldr	r1, [pc, #128]	; (800b2d8 <mem_trim+0x20c>)
 800b258:	481c      	ldr	r0, [pc, #112]	; (800b2cc <mem_trim+0x200>)
 800b25a:	f00c fe25 	bl	8017ea8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b25e:	89fb      	ldrh	r3, [r7, #14]
 800b260:	4618      	mov	r0, r3
 800b262:	f7ff fd4f 	bl	800ad04 <ptr_to_mem>
 800b266:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b268:	4b1c      	ldr	r3, [pc, #112]	; (800b2dc <mem_trim+0x210>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	693a      	ldr	r2, [r7, #16]
 800b26e:	429a      	cmp	r2, r3
 800b270:	d202      	bcs.n	800b278 <mem_trim+0x1ac>
      lfree = mem2;
 800b272:	4a1a      	ldr	r2, [pc, #104]	; (800b2dc <mem_trim+0x210>)
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	2200      	movs	r2, #0
 800b27c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	881a      	ldrh	r2, [r3, #0]
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	8afa      	ldrh	r2, [r7, #22]
 800b28a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	89fa      	ldrh	r2, [r7, #14]
 800b290:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	881b      	ldrh	r3, [r3, #0]
 800b296:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b29a:	d007      	beq.n	800b2ac <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	881b      	ldrh	r3, [r3, #0]
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7ff fd2f 	bl	800ad04 <ptr_to_mem>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	89fb      	ldrh	r3, [r7, #14]
 800b2aa:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b2ac:	4809      	ldr	r0, [pc, #36]	; (800b2d4 <mem_trim+0x208>)
 800b2ae:	f00c fd44 	bl	8017d3a <sys_mutex_unlock>
  return rmem;
 800b2b2:	687b      	ldr	r3, [r7, #4]
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3720      	adds	r7, #32
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	20008a48 	.word	0x20008a48
 800b2c0:	20008a4c 	.word	0x20008a4c
 800b2c4:	08019cb0 	.word	0x08019cb0
 800b2c8:	08019e3c 	.word	0x08019e3c
 800b2cc:	08019cf8 	.word	0x08019cf8
 800b2d0:	08019e54 	.word	0x08019e54
 800b2d4:	20008a50 	.word	0x20008a50
 800b2d8:	08019e74 	.word	0x08019e74
 800b2dc:	20008a54 	.word	0x20008a54

0800b2e0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b088      	sub	sp, #32
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b2ea:	88fb      	ldrh	r3, [r7, #6]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d101      	bne.n	800b2f4 <mem_malloc+0x14>
    return NULL;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	e0e2      	b.n	800b4ba <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b2f4:	88fb      	ldrh	r3, [r7, #6]
 800b2f6:	3303      	adds	r3, #3
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	f023 0303 	bic.w	r3, r3, #3
 800b2fe:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b300:	8bbb      	ldrh	r3, [r7, #28]
 800b302:	2b0b      	cmp	r3, #11
 800b304:	d801      	bhi.n	800b30a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b306:	230c      	movs	r3, #12
 800b308:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b30a:	8bbb      	ldrh	r3, [r7, #28]
 800b30c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b310:	d803      	bhi.n	800b31a <mem_malloc+0x3a>
 800b312:	8bba      	ldrh	r2, [r7, #28]
 800b314:	88fb      	ldrh	r3, [r7, #6]
 800b316:	429a      	cmp	r2, r3
 800b318:	d201      	bcs.n	800b31e <mem_malloc+0x3e>
    return NULL;
 800b31a:	2300      	movs	r3, #0
 800b31c:	e0cd      	b.n	800b4ba <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b31e:	4869      	ldr	r0, [pc, #420]	; (800b4c4 <mem_malloc+0x1e4>)
 800b320:	f00c fcfc 	bl	8017d1c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b324:	4b68      	ldr	r3, [pc, #416]	; (800b4c8 <mem_malloc+0x1e8>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4618      	mov	r0, r3
 800b32a:	f7ff fcfd 	bl	800ad28 <mem_to_ptr>
 800b32e:	4603      	mov	r3, r0
 800b330:	83fb      	strh	r3, [r7, #30]
 800b332:	e0b7      	b.n	800b4a4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b334:	8bfb      	ldrh	r3, [r7, #30]
 800b336:	4618      	mov	r0, r3
 800b338:	f7ff fce4 	bl	800ad04 <ptr_to_mem>
 800b33c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	791b      	ldrb	r3, [r3, #4]
 800b342:	2b00      	cmp	r3, #0
 800b344:	f040 80a7 	bne.w	800b496 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	881b      	ldrh	r3, [r3, #0]
 800b34c:	461a      	mov	r2, r3
 800b34e:	8bfb      	ldrh	r3, [r7, #30]
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	f1a3 0208 	sub.w	r2, r3, #8
 800b356:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b358:	429a      	cmp	r2, r3
 800b35a:	f0c0 809c 	bcc.w	800b496 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	881b      	ldrh	r3, [r3, #0]
 800b362:	461a      	mov	r2, r3
 800b364:	8bfb      	ldrh	r3, [r7, #30]
 800b366:	1ad3      	subs	r3, r2, r3
 800b368:	f1a3 0208 	sub.w	r2, r3, #8
 800b36c:	8bbb      	ldrh	r3, [r7, #28]
 800b36e:	3314      	adds	r3, #20
 800b370:	429a      	cmp	r2, r3
 800b372:	d333      	bcc.n	800b3dc <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b374:	8bfa      	ldrh	r2, [r7, #30]
 800b376:	8bbb      	ldrh	r3, [r7, #28]
 800b378:	4413      	add	r3, r2
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	3308      	adds	r3, #8
 800b37e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b380:	8a7b      	ldrh	r3, [r7, #18]
 800b382:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b386:	d106      	bne.n	800b396 <mem_malloc+0xb6>
 800b388:	4b50      	ldr	r3, [pc, #320]	; (800b4cc <mem_malloc+0x1ec>)
 800b38a:	f240 3287 	movw	r2, #903	; 0x387
 800b38e:	4950      	ldr	r1, [pc, #320]	; (800b4d0 <mem_malloc+0x1f0>)
 800b390:	4850      	ldr	r0, [pc, #320]	; (800b4d4 <mem_malloc+0x1f4>)
 800b392:	f00c fd89 	bl	8017ea8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b396:	8a7b      	ldrh	r3, [r7, #18]
 800b398:	4618      	mov	r0, r3
 800b39a:	f7ff fcb3 	bl	800ad04 <ptr_to_mem>
 800b39e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	881a      	ldrh	r2, [r3, #0]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	8bfa      	ldrh	r2, [r7, #30]
 800b3b2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	8a7a      	ldrh	r2, [r7, #18]
 800b3b8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	2201      	movs	r2, #1
 800b3be:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	881b      	ldrh	r3, [r3, #0]
 800b3c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b3c8:	d00b      	beq.n	800b3e2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	881b      	ldrh	r3, [r3, #0]
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7ff fc98 	bl	800ad04 <ptr_to_mem>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	8a7b      	ldrh	r3, [r7, #18]
 800b3d8:	8053      	strh	r3, [r2, #2]
 800b3da:	e002      	b.n	800b3e2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b3e2:	4b39      	ldr	r3, [pc, #228]	; (800b4c8 <mem_malloc+0x1e8>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	697a      	ldr	r2, [r7, #20]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d127      	bne.n	800b43c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800b3ec:	4b36      	ldr	r3, [pc, #216]	; (800b4c8 <mem_malloc+0x1e8>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b3f2:	e005      	b.n	800b400 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b3f4:	69bb      	ldr	r3, [r7, #24]
 800b3f6:	881b      	ldrh	r3, [r3, #0]
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7ff fc83 	bl	800ad04 <ptr_to_mem>
 800b3fe:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b400:	69bb      	ldr	r3, [r7, #24]
 800b402:	791b      	ldrb	r3, [r3, #4]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d004      	beq.n	800b412 <mem_malloc+0x132>
 800b408:	4b33      	ldr	r3, [pc, #204]	; (800b4d8 <mem_malloc+0x1f8>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	69ba      	ldr	r2, [r7, #24]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d1f0      	bne.n	800b3f4 <mem_malloc+0x114>
          }
          lfree = cur;
 800b412:	4a2d      	ldr	r2, [pc, #180]	; (800b4c8 <mem_malloc+0x1e8>)
 800b414:	69bb      	ldr	r3, [r7, #24]
 800b416:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b418:	4b2b      	ldr	r3, [pc, #172]	; (800b4c8 <mem_malloc+0x1e8>)
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	4b2e      	ldr	r3, [pc, #184]	; (800b4d8 <mem_malloc+0x1f8>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	429a      	cmp	r2, r3
 800b422:	d00b      	beq.n	800b43c <mem_malloc+0x15c>
 800b424:	4b28      	ldr	r3, [pc, #160]	; (800b4c8 <mem_malloc+0x1e8>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	791b      	ldrb	r3, [r3, #4]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d006      	beq.n	800b43c <mem_malloc+0x15c>
 800b42e:	4b27      	ldr	r3, [pc, #156]	; (800b4cc <mem_malloc+0x1ec>)
 800b430:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b434:	4929      	ldr	r1, [pc, #164]	; (800b4dc <mem_malloc+0x1fc>)
 800b436:	4827      	ldr	r0, [pc, #156]	; (800b4d4 <mem_malloc+0x1f4>)
 800b438:	f00c fd36 	bl	8017ea8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b43c:	4821      	ldr	r0, [pc, #132]	; (800b4c4 <mem_malloc+0x1e4>)
 800b43e:	f00c fc7c 	bl	8017d3a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b442:	8bba      	ldrh	r2, [r7, #28]
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	4413      	add	r3, r2
 800b448:	3308      	adds	r3, #8
 800b44a:	4a23      	ldr	r2, [pc, #140]	; (800b4d8 <mem_malloc+0x1f8>)
 800b44c:	6812      	ldr	r2, [r2, #0]
 800b44e:	4293      	cmp	r3, r2
 800b450:	d906      	bls.n	800b460 <mem_malloc+0x180>
 800b452:	4b1e      	ldr	r3, [pc, #120]	; (800b4cc <mem_malloc+0x1ec>)
 800b454:	f240 32ba 	movw	r2, #954	; 0x3ba
 800b458:	4921      	ldr	r1, [pc, #132]	; (800b4e0 <mem_malloc+0x200>)
 800b45a:	481e      	ldr	r0, [pc, #120]	; (800b4d4 <mem_malloc+0x1f4>)
 800b45c:	f00c fd24 	bl	8017ea8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	f003 0303 	and.w	r3, r3, #3
 800b466:	2b00      	cmp	r3, #0
 800b468:	d006      	beq.n	800b478 <mem_malloc+0x198>
 800b46a:	4b18      	ldr	r3, [pc, #96]	; (800b4cc <mem_malloc+0x1ec>)
 800b46c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800b470:	491c      	ldr	r1, [pc, #112]	; (800b4e4 <mem_malloc+0x204>)
 800b472:	4818      	ldr	r0, [pc, #96]	; (800b4d4 <mem_malloc+0x1f4>)
 800b474:	f00c fd18 	bl	8017ea8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	f003 0303 	and.w	r3, r3, #3
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d006      	beq.n	800b490 <mem_malloc+0x1b0>
 800b482:	4b12      	ldr	r3, [pc, #72]	; (800b4cc <mem_malloc+0x1ec>)
 800b484:	f240 32be 	movw	r2, #958	; 0x3be
 800b488:	4917      	ldr	r1, [pc, #92]	; (800b4e8 <mem_malloc+0x208>)
 800b48a:	4812      	ldr	r0, [pc, #72]	; (800b4d4 <mem_malloc+0x1f4>)
 800b48c:	f00c fd0c 	bl	8017ea8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	3308      	adds	r3, #8
 800b494:	e011      	b.n	800b4ba <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800b496:	8bfb      	ldrh	r3, [r7, #30]
 800b498:	4618      	mov	r0, r3
 800b49a:	f7ff fc33 	bl	800ad04 <ptr_to_mem>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	881b      	ldrh	r3, [r3, #0]
 800b4a2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b4a4:	8bfa      	ldrh	r2, [r7, #30]
 800b4a6:	8bbb      	ldrh	r3, [r7, #28]
 800b4a8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	f4ff af41 	bcc.w	800b334 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b4b2:	4804      	ldr	r0, [pc, #16]	; (800b4c4 <mem_malloc+0x1e4>)
 800b4b4:	f00c fc41 	bl	8017d3a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3720      	adds	r7, #32
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	20008a50 	.word	0x20008a50
 800b4c8:	20008a54 	.word	0x20008a54
 800b4cc:	08019cb0 	.word	0x08019cb0
 800b4d0:	08019e74 	.word	0x08019e74
 800b4d4:	08019cf8 	.word	0x08019cf8
 800b4d8:	20008a4c 	.word	0x20008a4c
 800b4dc:	08019e88 	.word	0x08019e88
 800b4e0:	08019ea4 	.word	0x08019ea4
 800b4e4:	08019ed4 	.word	0x08019ed4
 800b4e8:	08019f04 	.word	0x08019f04

0800b4ec <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b085      	sub	sp, #20
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	3303      	adds	r3, #3
 800b502:	f023 0303 	bic.w	r3, r3, #3
 800b506:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b508:	2300      	movs	r3, #0
 800b50a:	60fb      	str	r3, [r7, #12]
 800b50c:	e011      	b.n	800b532 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	881b      	ldrh	r3, [r3, #0]
 800b524:	461a      	mov	r2, r3
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	4413      	add	r3, r2
 800b52a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	3301      	adds	r3, #1
 800b530:	60fb      	str	r3, [r7, #12]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	885b      	ldrh	r3, [r3, #2]
 800b536:	461a      	mov	r2, r3
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	4293      	cmp	r3, r2
 800b53c:	dbe7      	blt.n	800b50e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b53e:	bf00      	nop
 800b540:	3714      	adds	r7, #20
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
	...

0800b54c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b552:	2300      	movs	r3, #0
 800b554:	80fb      	strh	r3, [r7, #6]
 800b556:	e009      	b.n	800b56c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b558:	88fb      	ldrh	r3, [r7, #6]
 800b55a:	4a08      	ldr	r2, [pc, #32]	; (800b57c <memp_init+0x30>)
 800b55c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b560:	4618      	mov	r0, r3
 800b562:	f7ff ffc3 	bl	800b4ec <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b566:	88fb      	ldrh	r3, [r7, #6]
 800b568:	3301      	adds	r3, #1
 800b56a:	80fb      	strh	r3, [r7, #6]
 800b56c:	88fb      	ldrh	r3, [r7, #6]
 800b56e:	2b0c      	cmp	r3, #12
 800b570:	d9f2      	bls.n	800b558 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b572:	bf00      	nop
 800b574:	3708      	adds	r7, #8
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	08026be8 	.word	0x08026be8

0800b580 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b588:	f00c fc0a 	bl	8017da0 <sys_arch_protect>
 800b58c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d015      	beq.n	800b5c8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	68ba      	ldr	r2, [r7, #8]
 800b5a2:	6812      	ldr	r2, [r2, #0]
 800b5a4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	f003 0303 	and.w	r3, r3, #3
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d006      	beq.n	800b5be <do_memp_malloc_pool+0x3e>
 800b5b0:	4b09      	ldr	r3, [pc, #36]	; (800b5d8 <do_memp_malloc_pool+0x58>)
 800b5b2:	f240 1219 	movw	r2, #281	; 0x119
 800b5b6:	4909      	ldr	r1, [pc, #36]	; (800b5dc <do_memp_malloc_pool+0x5c>)
 800b5b8:	4809      	ldr	r0, [pc, #36]	; (800b5e0 <do_memp_malloc_pool+0x60>)
 800b5ba:	f00c fc75 	bl	8017ea8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b5be:	68f8      	ldr	r0, [r7, #12]
 800b5c0:	f00c fbfc 	bl	8017dbc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	e003      	b.n	800b5d0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f00c fbf7 	bl	8017dbc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b5ce:	2300      	movs	r3, #0
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3710      	adds	r7, #16
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	08019f28 	.word	0x08019f28
 800b5dc:	08019f58 	.word	0x08019f58
 800b5e0:	08019f7c 	.word	0x08019f7c

0800b5e4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b5ee:	79fb      	ldrb	r3, [r7, #7]
 800b5f0:	2b0c      	cmp	r3, #12
 800b5f2:	d908      	bls.n	800b606 <memp_malloc+0x22>
 800b5f4:	4b0a      	ldr	r3, [pc, #40]	; (800b620 <memp_malloc+0x3c>)
 800b5f6:	f240 1257 	movw	r2, #343	; 0x157
 800b5fa:	490a      	ldr	r1, [pc, #40]	; (800b624 <memp_malloc+0x40>)
 800b5fc:	480a      	ldr	r0, [pc, #40]	; (800b628 <memp_malloc+0x44>)
 800b5fe:	f00c fc53 	bl	8017ea8 <iprintf>
 800b602:	2300      	movs	r3, #0
 800b604:	e008      	b.n	800b618 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b606:	79fb      	ldrb	r3, [r7, #7]
 800b608:	4a08      	ldr	r2, [pc, #32]	; (800b62c <memp_malloc+0x48>)
 800b60a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b60e:	4618      	mov	r0, r3
 800b610:	f7ff ffb6 	bl	800b580 <do_memp_malloc_pool>
 800b614:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b616:	68fb      	ldr	r3, [r7, #12]
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3710      	adds	r7, #16
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	08019f28 	.word	0x08019f28
 800b624:	08019fb8 	.word	0x08019fb8
 800b628:	08019f7c 	.word	0x08019f7c
 800b62c:	08026be8 	.word	0x08026be8

0800b630 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b084      	sub	sp, #16
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	f003 0303 	and.w	r3, r3, #3
 800b640:	2b00      	cmp	r3, #0
 800b642:	d006      	beq.n	800b652 <do_memp_free_pool+0x22>
 800b644:	4b0d      	ldr	r3, [pc, #52]	; (800b67c <do_memp_free_pool+0x4c>)
 800b646:	f240 126d 	movw	r2, #365	; 0x16d
 800b64a:	490d      	ldr	r1, [pc, #52]	; (800b680 <do_memp_free_pool+0x50>)
 800b64c:	480d      	ldr	r0, [pc, #52]	; (800b684 <do_memp_free_pool+0x54>)
 800b64e:	f00c fc2b 	bl	8017ea8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b656:	f00c fba3 	bl	8017da0 <sys_arch_protect>
 800b65a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	689b      	ldr	r3, [r3, #8]
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	68fa      	ldr	r2, [r7, #12]
 800b66c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b66e:	68b8      	ldr	r0, [r7, #8]
 800b670:	f00c fba4 	bl	8017dbc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b674:	bf00      	nop
 800b676:	3710      	adds	r7, #16
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}
 800b67c:	08019f28 	.word	0x08019f28
 800b680:	08019fd8 	.word	0x08019fd8
 800b684:	08019f7c 	.word	0x08019f7c

0800b688 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	4603      	mov	r3, r0
 800b690:	6039      	str	r1, [r7, #0]
 800b692:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b694:	79fb      	ldrb	r3, [r7, #7]
 800b696:	2b0c      	cmp	r3, #12
 800b698:	d907      	bls.n	800b6aa <memp_free+0x22>
 800b69a:	4b0c      	ldr	r3, [pc, #48]	; (800b6cc <memp_free+0x44>)
 800b69c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b6a0:	490b      	ldr	r1, [pc, #44]	; (800b6d0 <memp_free+0x48>)
 800b6a2:	480c      	ldr	r0, [pc, #48]	; (800b6d4 <memp_free+0x4c>)
 800b6a4:	f00c fc00 	bl	8017ea8 <iprintf>
 800b6a8:	e00c      	b.n	800b6c4 <memp_free+0x3c>

  if (mem == NULL) {
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d008      	beq.n	800b6c2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b6b0:	79fb      	ldrb	r3, [r7, #7]
 800b6b2:	4a09      	ldr	r2, [pc, #36]	; (800b6d8 <memp_free+0x50>)
 800b6b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6b8:	6839      	ldr	r1, [r7, #0]
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7ff ffb8 	bl	800b630 <do_memp_free_pool>
 800b6c0:	e000      	b.n	800b6c4 <memp_free+0x3c>
    return;
 800b6c2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b6c4:	3708      	adds	r7, #8
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	08019f28 	.word	0x08019f28
 800b6d0:	08019ff8 	.word	0x08019ff8
 800b6d4:	08019f7c 	.word	0x08019f7c
 800b6d8:	08026be8 	.word	0x08026be8

0800b6dc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b6e0:	bf00      	nop
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr
	...

0800b6ec <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b086      	sub	sp, #24
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	607a      	str	r2, [r7, #4]
 800b6f8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d108      	bne.n	800b712 <netif_add+0x26>
 800b700:	4b5b      	ldr	r3, [pc, #364]	; (800b870 <netif_add+0x184>)
 800b702:	f240 1227 	movw	r2, #295	; 0x127
 800b706:	495b      	ldr	r1, [pc, #364]	; (800b874 <netif_add+0x188>)
 800b708:	485b      	ldr	r0, [pc, #364]	; (800b878 <netif_add+0x18c>)
 800b70a:	f00c fbcd 	bl	8017ea8 <iprintf>
 800b70e:	2300      	movs	r3, #0
 800b710:	e0a9      	b.n	800b866 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b714:	2b00      	cmp	r3, #0
 800b716:	d108      	bne.n	800b72a <netif_add+0x3e>
 800b718:	4b55      	ldr	r3, [pc, #340]	; (800b870 <netif_add+0x184>)
 800b71a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b71e:	4957      	ldr	r1, [pc, #348]	; (800b87c <netif_add+0x190>)
 800b720:	4855      	ldr	r0, [pc, #340]	; (800b878 <netif_add+0x18c>)
 800b722:	f00c fbc1 	bl	8017ea8 <iprintf>
 800b726:	2300      	movs	r3, #0
 800b728:	e09d      	b.n	800b866 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d101      	bne.n	800b734 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b730:	4b53      	ldr	r3, [pc, #332]	; (800b880 <netif_add+0x194>)
 800b732:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d101      	bne.n	800b73e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b73a:	4b51      	ldr	r3, [pc, #324]	; (800b880 <netif_add+0x194>)
 800b73c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d101      	bne.n	800b748 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b744:	4b4e      	ldr	r3, [pc, #312]	; (800b880 <netif_add+0x194>)
 800b746:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2200      	movs	r2, #0
 800b74c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2200      	movs	r2, #0
 800b752:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2200      	movs	r2, #0
 800b758:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	4a49      	ldr	r2, [pc, #292]	; (800b884 <netif_add+0x198>)
 800b75e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2200      	movs	r2, #0
 800b764:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2200      	movs	r2, #0
 800b76a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	3324      	adds	r3, #36	; 0x24
 800b772:	2204      	movs	r2, #4
 800b774:	2100      	movs	r1, #0
 800b776:	4618      	mov	r0, r3
 800b778:	f00c fb8e 	bl	8017e98 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2200      	movs	r2, #0
 800b780:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	6a3a      	ldr	r2, [r7, #32]
 800b786:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b788:	4b3f      	ldr	r3, [pc, #252]	; (800b888 <netif_add+0x19c>)
 800b78a:	781a      	ldrb	r2, [r3, #0]
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b796:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	68b9      	ldr	r1, [r7, #8]
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	f000 f914 	bl	800b9cc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a6:	68f8      	ldr	r0, [r7, #12]
 800b7a8:	4798      	blx	r3
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d001      	beq.n	800b7b4 <netif_add+0xc8>
    return NULL;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	e058      	b.n	800b866 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b7ba:	2bff      	cmp	r3, #255	; 0xff
 800b7bc:	d103      	bne.n	800b7c6 <netif_add+0xda>
        netif->num = 0;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b7ca:	4b30      	ldr	r3, [pc, #192]	; (800b88c <netif_add+0x1a0>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	617b      	str	r3, [r7, #20]
 800b7d0:	e02b      	b.n	800b82a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b7d2:	697a      	ldr	r2, [r7, #20]
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d106      	bne.n	800b7e8 <netif_add+0xfc>
 800b7da:	4b25      	ldr	r3, [pc, #148]	; (800b870 <netif_add+0x184>)
 800b7dc:	f240 128b 	movw	r2, #395	; 0x18b
 800b7e0:	492b      	ldr	r1, [pc, #172]	; (800b890 <netif_add+0x1a4>)
 800b7e2:	4825      	ldr	r0, [pc, #148]	; (800b878 <netif_add+0x18c>)
 800b7e4:	f00c fb60 	bl	8017ea8 <iprintf>
        num_netifs++;
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	2bff      	cmp	r3, #255	; 0xff
 800b7f2:	dd06      	ble.n	800b802 <netif_add+0x116>
 800b7f4:	4b1e      	ldr	r3, [pc, #120]	; (800b870 <netif_add+0x184>)
 800b7f6:	f240 128d 	movw	r2, #397	; 0x18d
 800b7fa:	4926      	ldr	r1, [pc, #152]	; (800b894 <netif_add+0x1a8>)
 800b7fc:	481e      	ldr	r0, [pc, #120]	; (800b878 <netif_add+0x18c>)
 800b7fe:	f00c fb53 	bl	8017ea8 <iprintf>
        if (netif2->num == netif->num) {
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b80e:	429a      	cmp	r2, r3
 800b810:	d108      	bne.n	800b824 <netif_add+0x138>
          netif->num++;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b818:	3301      	adds	r3, #1
 800b81a:	b2da      	uxtb	r2, r3
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800b822:	e005      	b.n	800b830 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	617b      	str	r3, [r7, #20]
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1d0      	bne.n	800b7d2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d1be      	bne.n	800b7b4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b83c:	2bfe      	cmp	r3, #254	; 0xfe
 800b83e:	d103      	bne.n	800b848 <netif_add+0x15c>
    netif_num = 0;
 800b840:	4b11      	ldr	r3, [pc, #68]	; (800b888 <netif_add+0x19c>)
 800b842:	2200      	movs	r2, #0
 800b844:	701a      	strb	r2, [r3, #0]
 800b846:	e006      	b.n	800b856 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b84e:	3301      	adds	r3, #1
 800b850:	b2da      	uxtb	r2, r3
 800b852:	4b0d      	ldr	r3, [pc, #52]	; (800b888 <netif_add+0x19c>)
 800b854:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b856:	4b0d      	ldr	r3, [pc, #52]	; (800b88c <netif_add+0x1a0>)
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b85e:	4a0b      	ldr	r2, [pc, #44]	; (800b88c <netif_add+0x1a0>)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b864:	68fb      	ldr	r3, [r7, #12]
}
 800b866:	4618      	mov	r0, r3
 800b868:	3718      	adds	r7, #24
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	0801a014 	.word	0x0801a014
 800b874:	0801a0a8 	.word	0x0801a0a8
 800b878:	0801a064 	.word	0x0801a064
 800b87c:	0801a0c4 	.word	0x0801a0c4
 800b880:	08026c6c 	.word	0x08026c6c
 800b884:	0800bcaf 	.word	0x0800bcaf
 800b888:	20008a8c 	.word	0x20008a8c
 800b88c:	2000f504 	.word	0x2000f504
 800b890:	0801a0e8 	.word	0x0801a0e8
 800b894:	0801a0fc 	.word	0x0801a0fc

0800b898 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b8a2:	6839      	ldr	r1, [r7, #0]
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f002 fe81 	bl	800e5ac <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b8aa:	6839      	ldr	r1, [r7, #0]
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f007 ff05 	bl	80136bc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b8b2:	bf00      	nop
 800b8b4:	3708      	adds	r7, #8
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
	...

0800b8bc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b086      	sub	sp, #24
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d106      	bne.n	800b8dc <netif_do_set_ipaddr+0x20>
 800b8ce:	4b1d      	ldr	r3, [pc, #116]	; (800b944 <netif_do_set_ipaddr+0x88>)
 800b8d0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b8d4:	491c      	ldr	r1, [pc, #112]	; (800b948 <netif_do_set_ipaddr+0x8c>)
 800b8d6:	481d      	ldr	r0, [pc, #116]	; (800b94c <netif_do_set_ipaddr+0x90>)
 800b8d8:	f00c fae6 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d106      	bne.n	800b8f0 <netif_do_set_ipaddr+0x34>
 800b8e2:	4b18      	ldr	r3, [pc, #96]	; (800b944 <netif_do_set_ipaddr+0x88>)
 800b8e4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b8e8:	4917      	ldr	r1, [pc, #92]	; (800b948 <netif_do_set_ipaddr+0x8c>)
 800b8ea:	4818      	ldr	r0, [pc, #96]	; (800b94c <netif_do_set_ipaddr+0x90>)
 800b8ec:	f00c fadc 	bl	8017ea8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	681a      	ldr	r2, [r3, #0]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d01c      	beq.n	800b938 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	3304      	adds	r3, #4
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b90e:	f107 0314 	add.w	r3, r7, #20
 800b912:	4619      	mov	r1, r3
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f7ff ffbf 	bl	800b898 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d002      	beq.n	800b926 <netif_do_set_ipaddr+0x6a>
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	e000      	b.n	800b928 <netif_do_set_ipaddr+0x6c>
 800b926:	2300      	movs	r3, #0
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b92c:	2101      	movs	r1, #1
 800b92e:	68f8      	ldr	r0, [r7, #12]
 800b930:	f000 f8d2 	bl	800bad8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b934:	2301      	movs	r3, #1
 800b936:	e000      	b.n	800b93a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b938:	2300      	movs	r3, #0
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3718      	adds	r7, #24
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	0801a014 	.word	0x0801a014
 800b948:	0801a12c 	.word	0x0801a12c
 800b94c:	0801a064 	.word	0x0801a064

0800b950 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b950:	b480      	push	{r7}
 800b952:	b085      	sub	sp, #20
 800b954:	af00      	add	r7, sp, #0
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	60b9      	str	r1, [r7, #8]
 800b95a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	3308      	adds	r3, #8
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	429a      	cmp	r2, r3
 800b968:	d00a      	beq.n	800b980 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d002      	beq.n	800b976 <netif_do_set_netmask+0x26>
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	e000      	b.n	800b978 <netif_do_set_netmask+0x28>
 800b976:	2300      	movs	r3, #0
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b97c:	2301      	movs	r3, #1
 800b97e:	e000      	b.n	800b982 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b980:	2300      	movs	r3, #0
}
 800b982:	4618      	mov	r0, r3
 800b984:	3714      	adds	r7, #20
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr

0800b98e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b98e:	b480      	push	{r7}
 800b990:	b085      	sub	sp, #20
 800b992:	af00      	add	r7, sp, #0
 800b994:	60f8      	str	r0, [r7, #12]
 800b996:	60b9      	str	r1, [r7, #8]
 800b998:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	330c      	adds	r3, #12
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d00a      	beq.n	800b9be <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d002      	beq.n	800b9b4 <netif_do_set_gw+0x26>
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	e000      	b.n	800b9b6 <netif_do_set_gw+0x28>
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	68fa      	ldr	r2, [r7, #12]
 800b9b8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	e000      	b.n	800b9c0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b9be:	2300      	movs	r3, #0
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3714      	adds	r7, #20
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr

0800b9cc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b088      	sub	sp, #32
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	607a      	str	r2, [r7, #4]
 800b9d8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d101      	bne.n	800b9ec <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b9e8:	4b1c      	ldr	r3, [pc, #112]	; (800ba5c <netif_set_addr+0x90>)
 800b9ea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d101      	bne.n	800b9f6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b9f2:	4b1a      	ldr	r3, [pc, #104]	; (800ba5c <netif_set_addr+0x90>)
 800b9f4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d101      	bne.n	800ba00 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b9fc:	4b17      	ldr	r3, [pc, #92]	; (800ba5c <netif_set_addr+0x90>)
 800b9fe:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d003      	beq.n	800ba0e <netif_set_addr+0x42>
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d101      	bne.n	800ba12 <netif_set_addr+0x46>
 800ba0e:	2301      	movs	r3, #1
 800ba10:	e000      	b.n	800ba14 <netif_set_addr+0x48>
 800ba12:	2300      	movs	r3, #0
 800ba14:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d006      	beq.n	800ba2a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ba1c:	f107 0310 	add.w	r3, r7, #16
 800ba20:	461a      	mov	r2, r3
 800ba22:	68b9      	ldr	r1, [r7, #8]
 800ba24:	68f8      	ldr	r0, [r7, #12]
 800ba26:	f7ff ff49 	bl	800b8bc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ba2a:	69fa      	ldr	r2, [r7, #28]
 800ba2c:	6879      	ldr	r1, [r7, #4]
 800ba2e:	68f8      	ldr	r0, [r7, #12]
 800ba30:	f7ff ff8e 	bl	800b950 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ba34:	69ba      	ldr	r2, [r7, #24]
 800ba36:	6839      	ldr	r1, [r7, #0]
 800ba38:	68f8      	ldr	r0, [r7, #12]
 800ba3a:	f7ff ffa8 	bl	800b98e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d106      	bne.n	800ba52 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ba44:	f107 0310 	add.w	r3, r7, #16
 800ba48:	461a      	mov	r2, r3
 800ba4a:	68b9      	ldr	r1, [r7, #8]
 800ba4c:	68f8      	ldr	r0, [r7, #12]
 800ba4e:	f7ff ff35 	bl	800b8bc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ba52:	bf00      	nop
 800ba54:	3720      	adds	r7, #32
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	bf00      	nop
 800ba5c:	08026c6c 	.word	0x08026c6c

0800ba60 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b083      	sub	sp, #12
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ba68:	4a04      	ldr	r2, [pc, #16]	; (800ba7c <netif_set_default+0x1c>)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ba6e:	bf00      	nop
 800ba70:	370c      	adds	r7, #12
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr
 800ba7a:	bf00      	nop
 800ba7c:	2000f508 	.word	0x2000f508

0800ba80 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d107      	bne.n	800ba9e <netif_set_up+0x1e>
 800ba8e:	4b0f      	ldr	r3, [pc, #60]	; (800bacc <netif_set_up+0x4c>)
 800ba90:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ba94:	490e      	ldr	r1, [pc, #56]	; (800bad0 <netif_set_up+0x50>)
 800ba96:	480f      	ldr	r0, [pc, #60]	; (800bad4 <netif_set_up+0x54>)
 800ba98:	f00c fa06 	bl	8017ea8 <iprintf>
 800ba9c:	e013      	b.n	800bac6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800baa4:	f003 0301 	and.w	r3, r3, #1
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d10c      	bne.n	800bac6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bab2:	f043 0301 	orr.w	r3, r3, #1
 800bab6:	b2da      	uxtb	r2, r3
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800babe:	2103      	movs	r1, #3
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 f809 	bl	800bad8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	0801a014 	.word	0x0801a014
 800bad0:	0801a19c 	.word	0x0801a19c
 800bad4:	0801a064 	.word	0x0801a064

0800bad8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	460b      	mov	r3, r1
 800bae2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d106      	bne.n	800baf8 <netif_issue_reports+0x20>
 800baea:	4b18      	ldr	r3, [pc, #96]	; (800bb4c <netif_issue_reports+0x74>)
 800baec:	f240 326d 	movw	r2, #877	; 0x36d
 800baf0:	4917      	ldr	r1, [pc, #92]	; (800bb50 <netif_issue_reports+0x78>)
 800baf2:	4818      	ldr	r0, [pc, #96]	; (800bb54 <netif_issue_reports+0x7c>)
 800baf4:	f00c f9d8 	bl	8017ea8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bafe:	f003 0304 	and.w	r3, r3, #4
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d01e      	beq.n	800bb44 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb0c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d017      	beq.n	800bb44 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bb14:	78fb      	ldrb	r3, [r7, #3]
 800bb16:	f003 0301 	and.w	r3, r3, #1
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d013      	beq.n	800bb46 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	3304      	adds	r3, #4
 800bb22:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d00e      	beq.n	800bb46 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb2e:	f003 0308 	and.w	r3, r3, #8
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d007      	beq.n	800bb46 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	3304      	adds	r3, #4
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f00a fbcd 	bl	80162dc <etharp_request>
 800bb42:	e000      	b.n	800bb46 <netif_issue_reports+0x6e>
    return;
 800bb44:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800bb46:	3708      	adds	r7, #8
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	0801a014 	.word	0x0801a014
 800bb50:	0801a1b8 	.word	0x0801a1b8
 800bb54:	0801a064 	.word	0x0801a064

0800bb58 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d107      	bne.n	800bb76 <netif_set_down+0x1e>
 800bb66:	4b12      	ldr	r3, [pc, #72]	; (800bbb0 <netif_set_down+0x58>)
 800bb68:	f240 329b 	movw	r2, #923	; 0x39b
 800bb6c:	4911      	ldr	r1, [pc, #68]	; (800bbb4 <netif_set_down+0x5c>)
 800bb6e:	4812      	ldr	r0, [pc, #72]	; (800bbb8 <netif_set_down+0x60>)
 800bb70:	f00c f99a 	bl	8017ea8 <iprintf>
 800bb74:	e019      	b.n	800bbaa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb7c:	f003 0301 	and.w	r3, r3, #1
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d012      	beq.n	800bbaa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb8a:	f023 0301 	bic.w	r3, r3, #1
 800bb8e:	b2da      	uxtb	r2, r3
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb9c:	f003 0308 	and.w	r3, r3, #8
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d002      	beq.n	800bbaa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f009 ff53 	bl	8015a50 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800bbaa:	3708      	adds	r7, #8
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	0801a014 	.word	0x0801a014
 800bbb4:	0801a1dc 	.word	0x0801a1dc
 800bbb8:	0801a064 	.word	0x0801a064

0800bbbc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d107      	bne.n	800bbda <netif_set_link_up+0x1e>
 800bbca:	4b15      	ldr	r3, [pc, #84]	; (800bc20 <netif_set_link_up+0x64>)
 800bbcc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800bbd0:	4914      	ldr	r1, [pc, #80]	; (800bc24 <netif_set_link_up+0x68>)
 800bbd2:	4815      	ldr	r0, [pc, #84]	; (800bc28 <netif_set_link_up+0x6c>)
 800bbd4:	f00c f968 	bl	8017ea8 <iprintf>
 800bbd8:	e01e      	b.n	800bc18 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bbe0:	f003 0304 	and.w	r3, r3, #4
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d117      	bne.n	800bc18 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bbee:	f043 0304 	orr.w	r3, r3, #4
 800bbf2:	b2da      	uxtb	r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f008 f988 	bl	8013f10 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bc00:	2103      	movs	r1, #3
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f7ff ff68 	bl	800bad8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	69db      	ldr	r3, [r3, #28]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d003      	beq.n	800bc18 <netif_set_link_up+0x5c>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	69db      	ldr	r3, [r3, #28]
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	0801a014 	.word	0x0801a014
 800bc24:	0801a1fc 	.word	0x0801a1fc
 800bc28:	0801a064 	.word	0x0801a064

0800bc2c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d107      	bne.n	800bc4a <netif_set_link_down+0x1e>
 800bc3a:	4b11      	ldr	r3, [pc, #68]	; (800bc80 <netif_set_link_down+0x54>)
 800bc3c:	f240 4206 	movw	r2, #1030	; 0x406
 800bc40:	4910      	ldr	r1, [pc, #64]	; (800bc84 <netif_set_link_down+0x58>)
 800bc42:	4811      	ldr	r0, [pc, #68]	; (800bc88 <netif_set_link_down+0x5c>)
 800bc44:	f00c f930 	bl	8017ea8 <iprintf>
 800bc48:	e017      	b.n	800bc7a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bc50:	f003 0304 	and.w	r3, r3, #4
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d010      	beq.n	800bc7a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bc5e:	f023 0304 	bic.w	r3, r3, #4
 800bc62:	b2da      	uxtb	r2, r3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	69db      	ldr	r3, [r3, #28]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d003      	beq.n	800bc7a <netif_set_link_down+0x4e>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	69db      	ldr	r3, [r3, #28]
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bc7a:	3708      	adds	r7, #8
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	0801a014 	.word	0x0801a014
 800bc84:	0801a220 	.word	0x0801a220
 800bc88:	0801a064 	.word	0x0801a064

0800bc8c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d002      	beq.n	800bca2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	683a      	ldr	r2, [r7, #0]
 800bca0:	61da      	str	r2, [r3, #28]
  }
}
 800bca2:	bf00      	nop
 800bca4:	370c      	adds	r7, #12
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800bcae:	b480      	push	{r7}
 800bcb0:	b085      	sub	sp, #20
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	60f8      	str	r0, [r7, #12]
 800bcb6:	60b9      	str	r1, [r7, #8]
 800bcb8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800bcba:	f06f 030b 	mvn.w	r3, #11
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3714      	adds	r7, #20
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr
	...

0800bccc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b085      	sub	sp, #20
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bcd6:	79fb      	ldrb	r3, [r7, #7]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d013      	beq.n	800bd04 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bcdc:	4b0d      	ldr	r3, [pc, #52]	; (800bd14 <netif_get_by_index+0x48>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	60fb      	str	r3, [r7, #12]
 800bce2:	e00c      	b.n	800bcfe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bcea:	3301      	adds	r3, #1
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	79fa      	ldrb	r2, [r7, #7]
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d101      	bne.n	800bcf8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	e006      	b.n	800bd06 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	60fb      	str	r3, [r7, #12]
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d1ef      	bne.n	800bce4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800bd04:	2300      	movs	r3, #0
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3714      	adds	r7, #20
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr
 800bd12:	bf00      	nop
 800bd14:	2000f504 	.word	0x2000f504

0800bd18 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bd1e:	f00c f83f 	bl	8017da0 <sys_arch_protect>
 800bd22:	6038      	str	r0, [r7, #0]
 800bd24:	4b0d      	ldr	r3, [pc, #52]	; (800bd5c <pbuf_free_ooseq+0x44>)
 800bd26:	2200      	movs	r2, #0
 800bd28:	701a      	strb	r2, [r3, #0]
 800bd2a:	6838      	ldr	r0, [r7, #0]
 800bd2c:	f00c f846 	bl	8017dbc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bd30:	4b0b      	ldr	r3, [pc, #44]	; (800bd60 <pbuf_free_ooseq+0x48>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	607b      	str	r3, [r7, #4]
 800bd36:	e00a      	b.n	800bd4e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d003      	beq.n	800bd48 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f002 fc71 	bl	800e628 <tcp_free_ooseq>
      return;
 800bd46:	e005      	b.n	800bd54 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	68db      	ldr	r3, [r3, #12]
 800bd4c:	607b      	str	r3, [r7, #4]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d1f1      	bne.n	800bd38 <pbuf_free_ooseq+0x20>
    }
  }
}
 800bd54:	3708      	adds	r7, #8
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	2000f50c 	.word	0x2000f50c
 800bd60:	2000f514 	.word	0x2000f514

0800bd64 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800bd6c:	f7ff ffd4 	bl	800bd18 <pbuf_free_ooseq>
}
 800bd70:	bf00      	nop
 800bd72:	3708      	adds	r7, #8
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800bd7e:	f00c f80f 	bl	8017da0 <sys_arch_protect>
 800bd82:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800bd84:	4b0f      	ldr	r3, [pc, #60]	; (800bdc4 <pbuf_pool_is_empty+0x4c>)
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800bd8a:	4b0e      	ldr	r3, [pc, #56]	; (800bdc4 <pbuf_pool_is_empty+0x4c>)
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f00c f813 	bl	8017dbc <sys_arch_unprotect>

  if (!queued) {
 800bd96:	78fb      	ldrb	r3, [r7, #3]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d10f      	bne.n	800bdbc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800bd9c:	2100      	movs	r1, #0
 800bd9e:	480a      	ldr	r0, [pc, #40]	; (800bdc8 <pbuf_pool_is_empty+0x50>)
 800bda0:	f7fe f87a 	bl	8009e98 <tcpip_try_callback>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d008      	beq.n	800bdbc <pbuf_pool_is_empty+0x44>
 800bdaa:	f00b fff9 	bl	8017da0 <sys_arch_protect>
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	4b04      	ldr	r3, [pc, #16]	; (800bdc4 <pbuf_pool_is_empty+0x4c>)
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	701a      	strb	r2, [r3, #0]
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f00c f800 	bl	8017dbc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bdbc:	bf00      	nop
 800bdbe:	3708      	adds	r7, #8
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	2000f50c 	.word	0x2000f50c
 800bdc8:	0800bd65 	.word	0x0800bd65

0800bdcc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b085      	sub	sp, #20
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	4611      	mov	r1, r2
 800bdd8:	461a      	mov	r2, r3
 800bdda:	460b      	mov	r3, r1
 800bddc:	80fb      	strh	r3, [r7, #6]
 800bdde:	4613      	mov	r3, r2
 800bde0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2200      	movs	r2, #0
 800bde6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	68ba      	ldr	r2, [r7, #8]
 800bdec:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	88fa      	ldrh	r2, [r7, #6]
 800bdf2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	88ba      	ldrh	r2, [r7, #4]
 800bdf8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bdfa:	8b3b      	ldrh	r3, [r7, #24]
 800bdfc:	b2da      	uxtb	r2, r3
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	7f3a      	ldrb	r2, [r7, #28]
 800be06:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2201      	movs	r2, #1
 800be0c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2200      	movs	r2, #0
 800be12:	73da      	strb	r2, [r3, #15]
}
 800be14:	bf00      	nop
 800be16:	3714      	adds	r7, #20
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr

0800be20 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b08c      	sub	sp, #48	; 0x30
 800be24:	af02      	add	r7, sp, #8
 800be26:	4603      	mov	r3, r0
 800be28:	71fb      	strb	r3, [r7, #7]
 800be2a:	460b      	mov	r3, r1
 800be2c:	80bb      	strh	r3, [r7, #4]
 800be2e:	4613      	mov	r3, r2
 800be30:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800be32:	79fb      	ldrb	r3, [r7, #7]
 800be34:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800be36:	887b      	ldrh	r3, [r7, #2]
 800be38:	2b41      	cmp	r3, #65	; 0x41
 800be3a:	d00b      	beq.n	800be54 <pbuf_alloc+0x34>
 800be3c:	2b41      	cmp	r3, #65	; 0x41
 800be3e:	dc02      	bgt.n	800be46 <pbuf_alloc+0x26>
 800be40:	2b01      	cmp	r3, #1
 800be42:	d007      	beq.n	800be54 <pbuf_alloc+0x34>
 800be44:	e0c2      	b.n	800bfcc <pbuf_alloc+0x1ac>
 800be46:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800be4a:	d00b      	beq.n	800be64 <pbuf_alloc+0x44>
 800be4c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800be50:	d070      	beq.n	800bf34 <pbuf_alloc+0x114>
 800be52:	e0bb      	b.n	800bfcc <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800be54:	887a      	ldrh	r2, [r7, #2]
 800be56:	88bb      	ldrh	r3, [r7, #4]
 800be58:	4619      	mov	r1, r3
 800be5a:	2000      	movs	r0, #0
 800be5c:	f000 f8d2 	bl	800c004 <pbuf_alloc_reference>
 800be60:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800be62:	e0bd      	b.n	800bfe0 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800be64:	2300      	movs	r3, #0
 800be66:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800be68:	2300      	movs	r3, #0
 800be6a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800be6c:	88bb      	ldrh	r3, [r7, #4]
 800be6e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800be70:	200c      	movs	r0, #12
 800be72:	f7ff fbb7 	bl	800b5e4 <memp_malloc>
 800be76:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d109      	bne.n	800be92 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800be7e:	f7ff ff7b 	bl	800bd78 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800be82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be84:	2b00      	cmp	r3, #0
 800be86:	d002      	beq.n	800be8e <pbuf_alloc+0x6e>
            pbuf_free(p);
 800be88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be8a:	f000 faa9 	bl	800c3e0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800be8e:	2300      	movs	r3, #0
 800be90:	e0a7      	b.n	800bfe2 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800be92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be94:	3303      	adds	r3, #3
 800be96:	b29b      	uxth	r3, r3
 800be98:	f023 0303 	bic.w	r3, r3, #3
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	8b7a      	ldrh	r2, [r7, #26]
 800bea6:	4293      	cmp	r3, r2
 800bea8:	bf28      	it	cs
 800beaa:	4613      	movcs	r3, r2
 800beac:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800beae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800beb0:	3310      	adds	r3, #16
 800beb2:	693a      	ldr	r2, [r7, #16]
 800beb4:	4413      	add	r3, r2
 800beb6:	3303      	adds	r3, #3
 800beb8:	f023 0303 	bic.w	r3, r3, #3
 800bebc:	4618      	mov	r0, r3
 800bebe:	89f9      	ldrh	r1, [r7, #14]
 800bec0:	8b7a      	ldrh	r2, [r7, #26]
 800bec2:	2300      	movs	r3, #0
 800bec4:	9301      	str	r3, [sp, #4]
 800bec6:	887b      	ldrh	r3, [r7, #2]
 800bec8:	9300      	str	r3, [sp, #0]
 800beca:	460b      	mov	r3, r1
 800becc:	4601      	mov	r1, r0
 800bece:	6938      	ldr	r0, [r7, #16]
 800bed0:	f7ff ff7c 	bl	800bdcc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	f003 0303 	and.w	r3, r3, #3
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d006      	beq.n	800beee <pbuf_alloc+0xce>
 800bee0:	4b42      	ldr	r3, [pc, #264]	; (800bfec <pbuf_alloc+0x1cc>)
 800bee2:	f240 1201 	movw	r2, #257	; 0x101
 800bee6:	4942      	ldr	r1, [pc, #264]	; (800bff0 <pbuf_alloc+0x1d0>)
 800bee8:	4842      	ldr	r0, [pc, #264]	; (800bff4 <pbuf_alloc+0x1d4>)
 800beea:	f00b ffdd 	bl	8017ea8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800beee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bef0:	3303      	adds	r3, #3
 800bef2:	f023 0303 	bic.w	r3, r3, #3
 800bef6:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800befa:	d106      	bne.n	800bf0a <pbuf_alloc+0xea>
 800befc:	4b3b      	ldr	r3, [pc, #236]	; (800bfec <pbuf_alloc+0x1cc>)
 800befe:	f240 1203 	movw	r2, #259	; 0x103
 800bf02:	493d      	ldr	r1, [pc, #244]	; (800bff8 <pbuf_alloc+0x1d8>)
 800bf04:	483b      	ldr	r0, [pc, #236]	; (800bff4 <pbuf_alloc+0x1d4>)
 800bf06:	f00b ffcf 	bl	8017ea8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bf0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d102      	bne.n	800bf16 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	627b      	str	r3, [r7, #36]	; 0x24
 800bf14:	e002      	b.n	800bf1c <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	693a      	ldr	r2, [r7, #16]
 800bf1a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bf20:	8b7a      	ldrh	r2, [r7, #26]
 800bf22:	89fb      	ldrh	r3, [r7, #14]
 800bf24:	1ad3      	subs	r3, r2, r3
 800bf26:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800bf2c:	8b7b      	ldrh	r3, [r7, #26]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d19e      	bne.n	800be70 <pbuf_alloc+0x50>
      break;
 800bf32:	e055      	b.n	800bfe0 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bf34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf36:	3303      	adds	r3, #3
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	f023 0303 	bic.w	r3, r3, #3
 800bf3e:	b29a      	uxth	r2, r3
 800bf40:	88bb      	ldrh	r3, [r7, #4]
 800bf42:	3303      	adds	r3, #3
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	f023 0303 	bic.w	r3, r3, #3
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	4413      	add	r3, r2
 800bf4e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bf50:	8b3b      	ldrh	r3, [r7, #24]
 800bf52:	3310      	adds	r3, #16
 800bf54:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bf56:	8b3a      	ldrh	r2, [r7, #24]
 800bf58:	88bb      	ldrh	r3, [r7, #4]
 800bf5a:	3303      	adds	r3, #3
 800bf5c:	f023 0303 	bic.w	r3, r3, #3
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d306      	bcc.n	800bf72 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bf64:	8afa      	ldrh	r2, [r7, #22]
 800bf66:	88bb      	ldrh	r3, [r7, #4]
 800bf68:	3303      	adds	r3, #3
 800bf6a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d201      	bcs.n	800bf76 <pbuf_alloc+0x156>
        return NULL;
 800bf72:	2300      	movs	r3, #0
 800bf74:	e035      	b.n	800bfe2 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bf76:	8afb      	ldrh	r3, [r7, #22]
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7ff f9b1 	bl	800b2e0 <mem_malloc>
 800bf7e:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800bf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d101      	bne.n	800bf8a <pbuf_alloc+0x16a>
        return NULL;
 800bf86:	2300      	movs	r3, #0
 800bf88:	e02b      	b.n	800bfe2 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bf8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf8c:	3310      	adds	r3, #16
 800bf8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf90:	4413      	add	r3, r2
 800bf92:	3303      	adds	r3, #3
 800bf94:	f023 0303 	bic.w	r3, r3, #3
 800bf98:	4618      	mov	r0, r3
 800bf9a:	88b9      	ldrh	r1, [r7, #4]
 800bf9c:	88ba      	ldrh	r2, [r7, #4]
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	9301      	str	r3, [sp, #4]
 800bfa2:	887b      	ldrh	r3, [r7, #2]
 800bfa4:	9300      	str	r3, [sp, #0]
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	4601      	mov	r1, r0
 800bfaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfac:	f7ff ff0e 	bl	800bdcc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	f003 0303 	and.w	r3, r3, #3
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d010      	beq.n	800bfde <pbuf_alloc+0x1be>
 800bfbc:	4b0b      	ldr	r3, [pc, #44]	; (800bfec <pbuf_alloc+0x1cc>)
 800bfbe:	f240 1223 	movw	r2, #291	; 0x123
 800bfc2:	490e      	ldr	r1, [pc, #56]	; (800bffc <pbuf_alloc+0x1dc>)
 800bfc4:	480b      	ldr	r0, [pc, #44]	; (800bff4 <pbuf_alloc+0x1d4>)
 800bfc6:	f00b ff6f 	bl	8017ea8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bfca:	e008      	b.n	800bfde <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bfcc:	4b07      	ldr	r3, [pc, #28]	; (800bfec <pbuf_alloc+0x1cc>)
 800bfce:	f240 1227 	movw	r2, #295	; 0x127
 800bfd2:	490b      	ldr	r1, [pc, #44]	; (800c000 <pbuf_alloc+0x1e0>)
 800bfd4:	4807      	ldr	r0, [pc, #28]	; (800bff4 <pbuf_alloc+0x1d4>)
 800bfd6:	f00b ff67 	bl	8017ea8 <iprintf>
      return NULL;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	e001      	b.n	800bfe2 <pbuf_alloc+0x1c2>
      break;
 800bfde:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3728      	adds	r7, #40	; 0x28
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	0801a244 	.word	0x0801a244
 800bff0:	0801a274 	.word	0x0801a274
 800bff4:	0801a2a4 	.word	0x0801a2a4
 800bff8:	0801a2cc 	.word	0x0801a2cc
 800bffc:	0801a300 	.word	0x0801a300
 800c000:	0801a32c 	.word	0x0801a32c

0800c004 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b086      	sub	sp, #24
 800c008:	af02      	add	r7, sp, #8
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	460b      	mov	r3, r1
 800c00e:	807b      	strh	r3, [r7, #2]
 800c010:	4613      	mov	r3, r2
 800c012:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c014:	883b      	ldrh	r3, [r7, #0]
 800c016:	2b41      	cmp	r3, #65	; 0x41
 800c018:	d009      	beq.n	800c02e <pbuf_alloc_reference+0x2a>
 800c01a:	883b      	ldrh	r3, [r7, #0]
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d006      	beq.n	800c02e <pbuf_alloc_reference+0x2a>
 800c020:	4b0f      	ldr	r3, [pc, #60]	; (800c060 <pbuf_alloc_reference+0x5c>)
 800c022:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800c026:	490f      	ldr	r1, [pc, #60]	; (800c064 <pbuf_alloc_reference+0x60>)
 800c028:	480f      	ldr	r0, [pc, #60]	; (800c068 <pbuf_alloc_reference+0x64>)
 800c02a:	f00b ff3d 	bl	8017ea8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c02e:	200b      	movs	r0, #11
 800c030:	f7ff fad8 	bl	800b5e4 <memp_malloc>
 800c034:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d101      	bne.n	800c040 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c03c:	2300      	movs	r3, #0
 800c03e:	e00b      	b.n	800c058 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c040:	8879      	ldrh	r1, [r7, #2]
 800c042:	887a      	ldrh	r2, [r7, #2]
 800c044:	2300      	movs	r3, #0
 800c046:	9301      	str	r3, [sp, #4]
 800c048:	883b      	ldrh	r3, [r7, #0]
 800c04a:	9300      	str	r3, [sp, #0]
 800c04c:	460b      	mov	r3, r1
 800c04e:	6879      	ldr	r1, [r7, #4]
 800c050:	68f8      	ldr	r0, [r7, #12]
 800c052:	f7ff febb 	bl	800bdcc <pbuf_init_alloced_pbuf>
  return p;
 800c056:	68fb      	ldr	r3, [r7, #12]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3710      	adds	r7, #16
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	0801a244 	.word	0x0801a244
 800c064:	0801a348 	.word	0x0801a348
 800c068:	0801a2a4 	.word	0x0801a2a4

0800c06c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b088      	sub	sp, #32
 800c070:	af02      	add	r7, sp, #8
 800c072:	607b      	str	r3, [r7, #4]
 800c074:	4603      	mov	r3, r0
 800c076:	73fb      	strb	r3, [r7, #15]
 800c078:	460b      	mov	r3, r1
 800c07a:	81bb      	strh	r3, [r7, #12]
 800c07c:	4613      	mov	r3, r2
 800c07e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c080:	7bfb      	ldrb	r3, [r7, #15]
 800c082:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c084:	8a7b      	ldrh	r3, [r7, #18]
 800c086:	3303      	adds	r3, #3
 800c088:	f023 0203 	bic.w	r2, r3, #3
 800c08c:	89bb      	ldrh	r3, [r7, #12]
 800c08e:	441a      	add	r2, r3
 800c090:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c092:	429a      	cmp	r2, r3
 800c094:	d901      	bls.n	800c09a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c096:	2300      	movs	r3, #0
 800c098:	e018      	b.n	800c0cc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c09a:	6a3b      	ldr	r3, [r7, #32]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d007      	beq.n	800c0b0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c0a0:	8a7b      	ldrh	r3, [r7, #18]
 800c0a2:	3303      	adds	r3, #3
 800c0a4:	f023 0303 	bic.w	r3, r3, #3
 800c0a8:	6a3a      	ldr	r2, [r7, #32]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	617b      	str	r3, [r7, #20]
 800c0ae:	e001      	b.n	800c0b4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	89b9      	ldrh	r1, [r7, #12]
 800c0b8:	89ba      	ldrh	r2, [r7, #12]
 800c0ba:	2302      	movs	r3, #2
 800c0bc:	9301      	str	r3, [sp, #4]
 800c0be:	897b      	ldrh	r3, [r7, #10]
 800c0c0:	9300      	str	r3, [sp, #0]
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	6979      	ldr	r1, [r7, #20]
 800c0c6:	f7ff fe81 	bl	800bdcc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c0ca:	687b      	ldr	r3, [r7, #4]
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3718      	adds	r7, #24
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	460b      	mov	r3, r1
 800c0de:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d106      	bne.n	800c0f4 <pbuf_realloc+0x20>
 800c0e6:	4b3a      	ldr	r3, [pc, #232]	; (800c1d0 <pbuf_realloc+0xfc>)
 800c0e8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c0ec:	4939      	ldr	r1, [pc, #228]	; (800c1d4 <pbuf_realloc+0x100>)
 800c0ee:	483a      	ldr	r0, [pc, #232]	; (800c1d8 <pbuf_realloc+0x104>)
 800c0f0:	f00b feda 	bl	8017ea8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	891b      	ldrh	r3, [r3, #8]
 800c0f8:	887a      	ldrh	r2, [r7, #2]
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d264      	bcs.n	800c1c8 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	891a      	ldrh	r2, [r3, #8]
 800c102:	887b      	ldrh	r3, [r7, #2]
 800c104:	1ad3      	subs	r3, r2, r3
 800c106:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c108:	887b      	ldrh	r3, [r7, #2]
 800c10a:	817b      	strh	r3, [r7, #10]
  q = p;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c110:	e018      	b.n	800c144 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	895b      	ldrh	r3, [r3, #10]
 800c116:	897a      	ldrh	r2, [r7, #10]
 800c118:	1ad3      	subs	r3, r2, r3
 800c11a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	891a      	ldrh	r2, [r3, #8]
 800c120:	893b      	ldrh	r3, [r7, #8]
 800c122:	1ad3      	subs	r3, r2, r3
 800c124:	b29a      	uxth	r2, r3
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d106      	bne.n	800c144 <pbuf_realloc+0x70>
 800c136:	4b26      	ldr	r3, [pc, #152]	; (800c1d0 <pbuf_realloc+0xfc>)
 800c138:	f240 12af 	movw	r2, #431	; 0x1af
 800c13c:	4927      	ldr	r1, [pc, #156]	; (800c1dc <pbuf_realloc+0x108>)
 800c13e:	4826      	ldr	r0, [pc, #152]	; (800c1d8 <pbuf_realloc+0x104>)
 800c140:	f00b feb2 	bl	8017ea8 <iprintf>
  while (rem_len > q->len) {
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	895b      	ldrh	r3, [r3, #10]
 800c148:	897a      	ldrh	r2, [r7, #10]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d8e1      	bhi.n	800c112 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	7b1b      	ldrb	r3, [r3, #12]
 800c152:	f003 030f 	and.w	r3, r3, #15
 800c156:	2b00      	cmp	r3, #0
 800c158:	d122      	bne.n	800c1a0 <pbuf_realloc+0xcc>
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	895b      	ldrh	r3, [r3, #10]
 800c15e:	897a      	ldrh	r2, [r7, #10]
 800c160:	429a      	cmp	r2, r3
 800c162:	d01d      	beq.n	800c1a0 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	7b5b      	ldrb	r3, [r3, #13]
 800c168:	f003 0302 	and.w	r3, r3, #2
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d117      	bne.n	800c1a0 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	461a      	mov	r2, r3
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	1ad3      	subs	r3, r2, r3
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	897b      	ldrh	r3, [r7, #10]
 800c17e:	4413      	add	r3, r2
 800c180:	b29b      	uxth	r3, r3
 800c182:	4619      	mov	r1, r3
 800c184:	68f8      	ldr	r0, [r7, #12]
 800c186:	f7fe ffa1 	bl	800b0cc <mem_trim>
 800c18a:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d106      	bne.n	800c1a0 <pbuf_realloc+0xcc>
 800c192:	4b0f      	ldr	r3, [pc, #60]	; (800c1d0 <pbuf_realloc+0xfc>)
 800c194:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c198:	4911      	ldr	r1, [pc, #68]	; (800c1e0 <pbuf_realloc+0x10c>)
 800c19a:	480f      	ldr	r0, [pc, #60]	; (800c1d8 <pbuf_realloc+0x104>)
 800c19c:	f00b fe84 	bl	8017ea8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	897a      	ldrh	r2, [r7, #10]
 800c1a4:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	895a      	ldrh	r2, [r3, #10]
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d004      	beq.n	800c1c0 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f000 f910 	bl	800c3e0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	601a      	str	r2, [r3, #0]
 800c1c6:	e000      	b.n	800c1ca <pbuf_realloc+0xf6>
    return;
 800c1c8:	bf00      	nop

}
 800c1ca:	3710      	adds	r7, #16
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	0801a244 	.word	0x0801a244
 800c1d4:	0801a35c 	.word	0x0801a35c
 800c1d8:	0801a2a4 	.word	0x0801a2a4
 800c1dc:	0801a374 	.word	0x0801a374
 800c1e0:	0801a38c 	.word	0x0801a38c

0800c1e4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b086      	sub	sp, #24
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d106      	bne.n	800c206 <pbuf_add_header_impl+0x22>
 800c1f8:	4b2b      	ldr	r3, [pc, #172]	; (800c2a8 <pbuf_add_header_impl+0xc4>)
 800c1fa:	f240 12df 	movw	r2, #479	; 0x1df
 800c1fe:	492b      	ldr	r1, [pc, #172]	; (800c2ac <pbuf_add_header_impl+0xc8>)
 800c200:	482b      	ldr	r0, [pc, #172]	; (800c2b0 <pbuf_add_header_impl+0xcc>)
 800c202:	f00b fe51 	bl	8017ea8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d003      	beq.n	800c214 <pbuf_add_header_impl+0x30>
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c212:	d301      	bcc.n	800c218 <pbuf_add_header_impl+0x34>
    return 1;
 800c214:	2301      	movs	r3, #1
 800c216:	e043      	b.n	800c2a0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d101      	bne.n	800c222 <pbuf_add_header_impl+0x3e>
    return 0;
 800c21e:	2300      	movs	r3, #0
 800c220:	e03e      	b.n	800c2a0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	891a      	ldrh	r2, [r3, #8]
 800c22a:	8a7b      	ldrh	r3, [r7, #18]
 800c22c:	4413      	add	r3, r2
 800c22e:	b29b      	uxth	r3, r3
 800c230:	8a7a      	ldrh	r2, [r7, #18]
 800c232:	429a      	cmp	r2, r3
 800c234:	d901      	bls.n	800c23a <pbuf_add_header_impl+0x56>
    return 1;
 800c236:	2301      	movs	r3, #1
 800c238:	e032      	b.n	800c2a0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	7b1b      	ldrb	r3, [r3, #12]
 800c23e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c240:	8a3b      	ldrh	r3, [r7, #16]
 800c242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c246:	2b00      	cmp	r3, #0
 800c248:	d00c      	beq.n	800c264 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	685a      	ldr	r2, [r3, #4]
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	425b      	negs	r3, r3
 800c252:	4413      	add	r3, r2
 800c254:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	3310      	adds	r3, #16
 800c25a:	697a      	ldr	r2, [r7, #20]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d20d      	bcs.n	800c27c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c260:	2301      	movs	r3, #1
 800c262:	e01d      	b.n	800c2a0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c264:	79fb      	ldrb	r3, [r7, #7]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d006      	beq.n	800c278 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	685a      	ldr	r2, [r3, #4]
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	425b      	negs	r3, r3
 800c272:	4413      	add	r3, r2
 800c274:	617b      	str	r3, [r7, #20]
 800c276:	e001      	b.n	800c27c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c278:	2301      	movs	r3, #1
 800c27a:	e011      	b.n	800c2a0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	697a      	ldr	r2, [r7, #20]
 800c280:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	895a      	ldrh	r2, [r3, #10]
 800c286:	8a7b      	ldrh	r3, [r7, #18]
 800c288:	4413      	add	r3, r2
 800c28a:	b29a      	uxth	r2, r3
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	891a      	ldrh	r2, [r3, #8]
 800c294:	8a7b      	ldrh	r3, [r7, #18]
 800c296:	4413      	add	r3, r2
 800c298:	b29a      	uxth	r2, r3
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	811a      	strh	r2, [r3, #8]


  return 0;
 800c29e:	2300      	movs	r3, #0
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3718      	adds	r7, #24
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	0801a244 	.word	0x0801a244
 800c2ac:	0801a3a8 	.word	0x0801a3a8
 800c2b0:	0801a2a4 	.word	0x0801a2a4

0800c2b4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c2be:	2200      	movs	r2, #0
 800c2c0:	6839      	ldr	r1, [r7, #0]
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f7ff ff8e 	bl	800c1e4 <pbuf_add_header_impl>
 800c2c8:	4603      	mov	r3, r0
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3708      	adds	r7, #8
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
	...

0800c2d4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d106      	bne.n	800c2f2 <pbuf_remove_header+0x1e>
 800c2e4:	4b20      	ldr	r3, [pc, #128]	; (800c368 <pbuf_remove_header+0x94>)
 800c2e6:	f240 224b 	movw	r2, #587	; 0x24b
 800c2ea:	4920      	ldr	r1, [pc, #128]	; (800c36c <pbuf_remove_header+0x98>)
 800c2ec:	4820      	ldr	r0, [pc, #128]	; (800c370 <pbuf_remove_header+0x9c>)
 800c2ee:	f00b fddb 	bl	8017ea8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d003      	beq.n	800c300 <pbuf_remove_header+0x2c>
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2fe:	d301      	bcc.n	800c304 <pbuf_remove_header+0x30>
    return 1;
 800c300:	2301      	movs	r3, #1
 800c302:	e02c      	b.n	800c35e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d101      	bne.n	800c30e <pbuf_remove_header+0x3a>
    return 0;
 800c30a:	2300      	movs	r3, #0
 800c30c:	e027      	b.n	800c35e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	895b      	ldrh	r3, [r3, #10]
 800c316:	89fa      	ldrh	r2, [r7, #14]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d908      	bls.n	800c32e <pbuf_remove_header+0x5a>
 800c31c:	4b12      	ldr	r3, [pc, #72]	; (800c368 <pbuf_remove_header+0x94>)
 800c31e:	f240 2255 	movw	r2, #597	; 0x255
 800c322:	4914      	ldr	r1, [pc, #80]	; (800c374 <pbuf_remove_header+0xa0>)
 800c324:	4812      	ldr	r0, [pc, #72]	; (800c370 <pbuf_remove_header+0x9c>)
 800c326:	f00b fdbf 	bl	8017ea8 <iprintf>
 800c32a:	2301      	movs	r3, #1
 800c32c:	e017      	b.n	800c35e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	685a      	ldr	r2, [r3, #4]
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	441a      	add	r2, r3
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	895a      	ldrh	r2, [r3, #10]
 800c344:	89fb      	ldrh	r3, [r7, #14]
 800c346:	1ad3      	subs	r3, r2, r3
 800c348:	b29a      	uxth	r2, r3
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	891a      	ldrh	r2, [r3, #8]
 800c352:	89fb      	ldrh	r3, [r7, #14]
 800c354:	1ad3      	subs	r3, r2, r3
 800c356:	b29a      	uxth	r2, r3
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c35c:	2300      	movs	r3, #0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	0801a244 	.word	0x0801a244
 800c36c:	0801a3a8 	.word	0x0801a3a8
 800c370:	0801a2a4 	.word	0x0801a2a4
 800c374:	0801a3b4 	.word	0x0801a3b4

0800c378 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	460b      	mov	r3, r1
 800c382:	807b      	strh	r3, [r7, #2]
 800c384:	4613      	mov	r3, r2
 800c386:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c388:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	da08      	bge.n	800c3a2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c390:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c394:	425b      	negs	r3, r3
 800c396:	4619      	mov	r1, r3
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f7ff ff9b 	bl	800c2d4 <pbuf_remove_header>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	e007      	b.n	800c3b2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c3a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c3a6:	787a      	ldrb	r2, [r7, #1]
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f7ff ff1a 	bl	800c1e4 <pbuf_add_header_impl>
 800c3b0:	4603      	mov	r3, r0
  }
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3708      	adds	r7, #8
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b082      	sub	sp, #8
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c3c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	4619      	mov	r1, r3
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f7ff ffd2 	bl	800c378 <pbuf_header_impl>
 800c3d4:	4603      	mov	r3, r0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3708      	adds	r7, #8
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
	...

0800c3e0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b088      	sub	sp, #32
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d10b      	bne.n	800c406 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d106      	bne.n	800c402 <pbuf_free+0x22>
 800c3f4:	4b3b      	ldr	r3, [pc, #236]	; (800c4e4 <pbuf_free+0x104>)
 800c3f6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c3fa:	493b      	ldr	r1, [pc, #236]	; (800c4e8 <pbuf_free+0x108>)
 800c3fc:	483b      	ldr	r0, [pc, #236]	; (800c4ec <pbuf_free+0x10c>)
 800c3fe:	f00b fd53 	bl	8017ea8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c402:	2300      	movs	r3, #0
 800c404:	e069      	b.n	800c4da <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c406:	2300      	movs	r3, #0
 800c408:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c40a:	e062      	b.n	800c4d2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c40c:	f00b fcc8 	bl	8017da0 <sys_arch_protect>
 800c410:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	7b9b      	ldrb	r3, [r3, #14]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d106      	bne.n	800c428 <pbuf_free+0x48>
 800c41a:	4b32      	ldr	r3, [pc, #200]	; (800c4e4 <pbuf_free+0x104>)
 800c41c:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c420:	4933      	ldr	r1, [pc, #204]	; (800c4f0 <pbuf_free+0x110>)
 800c422:	4832      	ldr	r0, [pc, #200]	; (800c4ec <pbuf_free+0x10c>)
 800c424:	f00b fd40 	bl	8017ea8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	7b9b      	ldrb	r3, [r3, #14]
 800c42c:	3b01      	subs	r3, #1
 800c42e:	b2da      	uxtb	r2, r3
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	739a      	strb	r2, [r3, #14]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	7b9b      	ldrb	r3, [r3, #14]
 800c438:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c43a:	69b8      	ldr	r0, [r7, #24]
 800c43c:	f00b fcbe 	bl	8017dbc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c440:	7dfb      	ldrb	r3, [r7, #23]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d143      	bne.n	800c4ce <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	7b1b      	ldrb	r3, [r3, #12]
 800c450:	f003 030f 	and.w	r3, r3, #15
 800c454:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	7b5b      	ldrb	r3, [r3, #13]
 800c45a:	f003 0302 	and.w	r3, r3, #2
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d011      	beq.n	800c486 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	691b      	ldr	r3, [r3, #16]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d106      	bne.n	800c47c <pbuf_free+0x9c>
 800c46e:	4b1d      	ldr	r3, [pc, #116]	; (800c4e4 <pbuf_free+0x104>)
 800c470:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c474:	491f      	ldr	r1, [pc, #124]	; (800c4f4 <pbuf_free+0x114>)
 800c476:	481d      	ldr	r0, [pc, #116]	; (800c4ec <pbuf_free+0x10c>)
 800c478:	f00b fd16 	bl	8017ea8 <iprintf>
        pc->custom_free_function(p);
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	691b      	ldr	r3, [r3, #16]
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	4798      	blx	r3
 800c484:	e01d      	b.n	800c4c2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c486:	7bfb      	ldrb	r3, [r7, #15]
 800c488:	2b02      	cmp	r3, #2
 800c48a:	d104      	bne.n	800c496 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c48c:	6879      	ldr	r1, [r7, #4]
 800c48e:	200c      	movs	r0, #12
 800c490:	f7ff f8fa 	bl	800b688 <memp_free>
 800c494:	e015      	b.n	800c4c2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c496:	7bfb      	ldrb	r3, [r7, #15]
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d104      	bne.n	800c4a6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c49c:	6879      	ldr	r1, [r7, #4]
 800c49e:	200b      	movs	r0, #11
 800c4a0:	f7ff f8f2 	bl	800b688 <memp_free>
 800c4a4:	e00d      	b.n	800c4c2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c4a6:	7bfb      	ldrb	r3, [r7, #15]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d103      	bne.n	800c4b4 <pbuf_free+0xd4>
          mem_free(p);
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f7fe fd7d 	bl	800afac <mem_free>
 800c4b2:	e006      	b.n	800c4c2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c4b4:	4b0b      	ldr	r3, [pc, #44]	; (800c4e4 <pbuf_free+0x104>)
 800c4b6:	f240 320f 	movw	r2, #783	; 0x30f
 800c4ba:	490f      	ldr	r1, [pc, #60]	; (800c4f8 <pbuf_free+0x118>)
 800c4bc:	480b      	ldr	r0, [pc, #44]	; (800c4ec <pbuf_free+0x10c>)
 800c4be:	f00b fcf3 	bl	8017ea8 <iprintf>
        }
      }
      count++;
 800c4c2:	7ffb      	ldrb	r3, [r7, #31]
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	607b      	str	r3, [r7, #4]
 800c4cc:	e001      	b.n	800c4d2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d199      	bne.n	800c40c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c4d8:	7ffb      	ldrb	r3, [r7, #31]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3720      	adds	r7, #32
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	0801a244 	.word	0x0801a244
 800c4e8:	0801a3a8 	.word	0x0801a3a8
 800c4ec:	0801a2a4 	.word	0x0801a2a4
 800c4f0:	0801a3d4 	.word	0x0801a3d4
 800c4f4:	0801a3ec 	.word	0x0801a3ec
 800c4f8:	0801a410 	.word	0x0801a410

0800c4fc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b085      	sub	sp, #20
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c504:	2300      	movs	r3, #0
 800c506:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c508:	e005      	b.n	800c516 <pbuf_clen+0x1a>
    ++len;
 800c50a:	89fb      	ldrh	r3, [r7, #14]
 800c50c:	3301      	adds	r3, #1
 800c50e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d1f6      	bne.n	800c50a <pbuf_clen+0xe>
  }
  return len;
 800c51c:	89fb      	ldrh	r3, [r7, #14]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3714      	adds	r7, #20
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr
	...

0800c52c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d016      	beq.n	800c568 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c53a:	f00b fc31 	bl	8017da0 <sys_arch_protect>
 800c53e:	60f8      	str	r0, [r7, #12]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	7b9b      	ldrb	r3, [r3, #14]
 800c544:	3301      	adds	r3, #1
 800c546:	b2da      	uxtb	r2, r3
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	739a      	strb	r2, [r3, #14]
 800c54c:	68f8      	ldr	r0, [r7, #12]
 800c54e:	f00b fc35 	bl	8017dbc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	7b9b      	ldrb	r3, [r3, #14]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d106      	bne.n	800c568 <pbuf_ref+0x3c>
 800c55a:	4b05      	ldr	r3, [pc, #20]	; (800c570 <pbuf_ref+0x44>)
 800c55c:	f240 3242 	movw	r2, #834	; 0x342
 800c560:	4904      	ldr	r1, [pc, #16]	; (800c574 <pbuf_ref+0x48>)
 800c562:	4805      	ldr	r0, [pc, #20]	; (800c578 <pbuf_ref+0x4c>)
 800c564:	f00b fca0 	bl	8017ea8 <iprintf>
  }
}
 800c568:	bf00      	nop
 800c56a:	3710      	adds	r7, #16
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}
 800c570:	0801a244 	.word	0x0801a244
 800c574:	0801a424 	.word	0x0801a424
 800c578:	0801a2a4 	.word	0x0801a2a4

0800c57c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d002      	beq.n	800c592 <pbuf_cat+0x16>
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d107      	bne.n	800c5a2 <pbuf_cat+0x26>
 800c592:	4b20      	ldr	r3, [pc, #128]	; (800c614 <pbuf_cat+0x98>)
 800c594:	f240 325a 	movw	r2, #858	; 0x35a
 800c598:	491f      	ldr	r1, [pc, #124]	; (800c618 <pbuf_cat+0x9c>)
 800c59a:	4820      	ldr	r0, [pc, #128]	; (800c61c <pbuf_cat+0xa0>)
 800c59c:	f00b fc84 	bl	8017ea8 <iprintf>
 800c5a0:	e034      	b.n	800c60c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	60fb      	str	r3, [r7, #12]
 800c5a6:	e00a      	b.n	800c5be <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	891a      	ldrh	r2, [r3, #8]
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	891b      	ldrh	r3, [r3, #8]
 800c5b0:	4413      	add	r3, r2
 800c5b2:	b29a      	uxth	r2, r3
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	60fb      	str	r3, [r7, #12]
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d1f0      	bne.n	800c5a8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	891a      	ldrh	r2, [r3, #8]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	895b      	ldrh	r3, [r3, #10]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d006      	beq.n	800c5e0 <pbuf_cat+0x64>
 800c5d2:	4b10      	ldr	r3, [pc, #64]	; (800c614 <pbuf_cat+0x98>)
 800c5d4:	f240 3262 	movw	r2, #866	; 0x362
 800c5d8:	4911      	ldr	r1, [pc, #68]	; (800c620 <pbuf_cat+0xa4>)
 800c5da:	4810      	ldr	r0, [pc, #64]	; (800c61c <pbuf_cat+0xa0>)
 800c5dc:	f00b fc64 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d006      	beq.n	800c5f6 <pbuf_cat+0x7a>
 800c5e8:	4b0a      	ldr	r3, [pc, #40]	; (800c614 <pbuf_cat+0x98>)
 800c5ea:	f240 3263 	movw	r2, #867	; 0x363
 800c5ee:	490d      	ldr	r1, [pc, #52]	; (800c624 <pbuf_cat+0xa8>)
 800c5f0:	480a      	ldr	r0, [pc, #40]	; (800c61c <pbuf_cat+0xa0>)
 800c5f2:	f00b fc59 	bl	8017ea8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	891a      	ldrh	r2, [r3, #8]
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	891b      	ldrh	r3, [r3, #8]
 800c5fe:	4413      	add	r3, r2
 800c600:	b29a      	uxth	r2, r3
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	683a      	ldr	r2, [r7, #0]
 800c60a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	0801a244 	.word	0x0801a244
 800c618:	0801a438 	.word	0x0801a438
 800c61c:	0801a2a4 	.word	0x0801a2a4
 800c620:	0801a470 	.word	0x0801a470
 800c624:	0801a4a0 	.word	0x0801a4a0

0800c628 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c632:	6839      	ldr	r1, [r7, #0]
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f7ff ffa1 	bl	800c57c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c63a:	6838      	ldr	r0, [r7, #0]
 800c63c:	f7ff ff76 	bl	800c52c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c640:	bf00      	nop
 800c642:	3708      	adds	r7, #8
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b086      	sub	sp, #24
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c652:	2300      	movs	r3, #0
 800c654:	617b      	str	r3, [r7, #20]
 800c656:	2300      	movs	r3, #0
 800c658:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d008      	beq.n	800c672 <pbuf_copy+0x2a>
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d005      	beq.n	800c672 <pbuf_copy+0x2a>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	891a      	ldrh	r2, [r3, #8]
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	891b      	ldrh	r3, [r3, #8]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d209      	bcs.n	800c686 <pbuf_copy+0x3e>
 800c672:	4b57      	ldr	r3, [pc, #348]	; (800c7d0 <pbuf_copy+0x188>)
 800c674:	f240 32ca 	movw	r2, #970	; 0x3ca
 800c678:	4956      	ldr	r1, [pc, #344]	; (800c7d4 <pbuf_copy+0x18c>)
 800c67a:	4857      	ldr	r0, [pc, #348]	; (800c7d8 <pbuf_copy+0x190>)
 800c67c:	f00b fc14 	bl	8017ea8 <iprintf>
 800c680:	f06f 030f 	mvn.w	r3, #15
 800c684:	e09f      	b.n	800c7c6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	895b      	ldrh	r3, [r3, #10]
 800c68a:	461a      	mov	r2, r3
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	1ad2      	subs	r2, r2, r3
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	895b      	ldrh	r3, [r3, #10]
 800c694:	4619      	mov	r1, r3
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	1acb      	subs	r3, r1, r3
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d306      	bcc.n	800c6ac <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	895b      	ldrh	r3, [r3, #10]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	1ad3      	subs	r3, r2, r3
 800c6a8:	60fb      	str	r3, [r7, #12]
 800c6aa:	e005      	b.n	800c6b8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	895b      	ldrh	r3, [r3, #10]
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	1ad3      	subs	r3, r2, r3
 800c6b6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	685a      	ldr	r2, [r3, #4]
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	18d0      	adds	r0, r2, r3
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	685a      	ldr	r2, [r3, #4]
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	4413      	add	r3, r2
 800c6c8:	68fa      	ldr	r2, [r7, #12]
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	f00b fbd9 	bl	8017e82 <memcpy>
    offset_to += len;
 800c6d0:	697a      	ldr	r2, [r7, #20]
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	4413      	add	r3, r2
 800c6d6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c6d8:	693a      	ldr	r2, [r7, #16]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	4413      	add	r3, r2
 800c6de:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	895b      	ldrh	r3, [r3, #10]
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d906      	bls.n	800c6fa <pbuf_copy+0xb2>
 800c6ec:	4b38      	ldr	r3, [pc, #224]	; (800c7d0 <pbuf_copy+0x188>)
 800c6ee:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c6f2:	493a      	ldr	r1, [pc, #232]	; (800c7dc <pbuf_copy+0x194>)
 800c6f4:	4838      	ldr	r0, [pc, #224]	; (800c7d8 <pbuf_copy+0x190>)
 800c6f6:	f00b fbd7 	bl	8017ea8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	895b      	ldrh	r3, [r3, #10]
 800c6fe:	461a      	mov	r2, r3
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	4293      	cmp	r3, r2
 800c704:	d906      	bls.n	800c714 <pbuf_copy+0xcc>
 800c706:	4b32      	ldr	r3, [pc, #200]	; (800c7d0 <pbuf_copy+0x188>)
 800c708:	f240 32da 	movw	r2, #986	; 0x3da
 800c70c:	4934      	ldr	r1, [pc, #208]	; (800c7e0 <pbuf_copy+0x198>)
 800c70e:	4832      	ldr	r0, [pc, #200]	; (800c7d8 <pbuf_copy+0x190>)
 800c710:	f00b fbca 	bl	8017ea8 <iprintf>
    if (offset_from >= p_from->len) {
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	895b      	ldrh	r3, [r3, #10]
 800c718:	461a      	mov	r2, r3
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d304      	bcc.n	800c72a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c720:	2300      	movs	r3, #0
 800c722:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	895b      	ldrh	r3, [r3, #10]
 800c72e:	461a      	mov	r2, r3
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	4293      	cmp	r3, r2
 800c734:	d114      	bne.n	800c760 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c736:	2300      	movs	r3, #0
 800c738:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d10c      	bne.n	800c760 <pbuf_copy+0x118>
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d009      	beq.n	800c760 <pbuf_copy+0x118>
 800c74c:	4b20      	ldr	r3, [pc, #128]	; (800c7d0 <pbuf_copy+0x188>)
 800c74e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c752:	4924      	ldr	r1, [pc, #144]	; (800c7e4 <pbuf_copy+0x19c>)
 800c754:	4820      	ldr	r0, [pc, #128]	; (800c7d8 <pbuf_copy+0x190>)
 800c756:	f00b fba7 	bl	8017ea8 <iprintf>
 800c75a:	f06f 030f 	mvn.w	r3, #15
 800c75e:	e032      	b.n	800c7c6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d013      	beq.n	800c78e <pbuf_copy+0x146>
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	895a      	ldrh	r2, [r3, #10]
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	891b      	ldrh	r3, [r3, #8]
 800c76e:	429a      	cmp	r2, r3
 800c770:	d10d      	bne.n	800c78e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d009      	beq.n	800c78e <pbuf_copy+0x146>
 800c77a:	4b15      	ldr	r3, [pc, #84]	; (800c7d0 <pbuf_copy+0x188>)
 800c77c:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800c780:	4919      	ldr	r1, [pc, #100]	; (800c7e8 <pbuf_copy+0x1a0>)
 800c782:	4815      	ldr	r0, [pc, #84]	; (800c7d8 <pbuf_copy+0x190>)
 800c784:	f00b fb90 	bl	8017ea8 <iprintf>
 800c788:	f06f 0305 	mvn.w	r3, #5
 800c78c:	e01b      	b.n	800c7c6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d013      	beq.n	800c7bc <pbuf_copy+0x174>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	895a      	ldrh	r2, [r3, #10]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	891b      	ldrh	r3, [r3, #8]
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d10d      	bne.n	800c7bc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d009      	beq.n	800c7bc <pbuf_copy+0x174>
 800c7a8:	4b09      	ldr	r3, [pc, #36]	; (800c7d0 <pbuf_copy+0x188>)
 800c7aa:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800c7ae:	490e      	ldr	r1, [pc, #56]	; (800c7e8 <pbuf_copy+0x1a0>)
 800c7b0:	4809      	ldr	r0, [pc, #36]	; (800c7d8 <pbuf_copy+0x190>)
 800c7b2:	f00b fb79 	bl	8017ea8 <iprintf>
 800c7b6:	f06f 0305 	mvn.w	r3, #5
 800c7ba:	e004      	b.n	800c7c6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	f47f af61 	bne.w	800c686 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c7c4:	2300      	movs	r3, #0
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3718      	adds	r7, #24
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	0801a244 	.word	0x0801a244
 800c7d4:	0801a4ec 	.word	0x0801a4ec
 800c7d8:	0801a2a4 	.word	0x0801a2a4
 800c7dc:	0801a51c 	.word	0x0801a51c
 800c7e0:	0801a534 	.word	0x0801a534
 800c7e4:	0801a550 	.word	0x0801a550
 800c7e8:	0801a560 	.word	0x0801a560

0800c7ec <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b088      	sub	sp, #32
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	4611      	mov	r1, r2
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	460b      	mov	r3, r1
 800c7fc:	80fb      	strh	r3, [r7, #6]
 800c7fe:	4613      	mov	r3, r2
 800c800:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c802:	2300      	movs	r3, #0
 800c804:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c806:	2300      	movs	r3, #0
 800c808:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d108      	bne.n	800c822 <pbuf_copy_partial+0x36>
 800c810:	4b2b      	ldr	r3, [pc, #172]	; (800c8c0 <pbuf_copy_partial+0xd4>)
 800c812:	f240 420a 	movw	r2, #1034	; 0x40a
 800c816:	492b      	ldr	r1, [pc, #172]	; (800c8c4 <pbuf_copy_partial+0xd8>)
 800c818:	482b      	ldr	r0, [pc, #172]	; (800c8c8 <pbuf_copy_partial+0xdc>)
 800c81a:	f00b fb45 	bl	8017ea8 <iprintf>
 800c81e:	2300      	movs	r3, #0
 800c820:	e04a      	b.n	800c8b8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d108      	bne.n	800c83a <pbuf_copy_partial+0x4e>
 800c828:	4b25      	ldr	r3, [pc, #148]	; (800c8c0 <pbuf_copy_partial+0xd4>)
 800c82a:	f240 420b 	movw	r2, #1035	; 0x40b
 800c82e:	4927      	ldr	r1, [pc, #156]	; (800c8cc <pbuf_copy_partial+0xe0>)
 800c830:	4825      	ldr	r0, [pc, #148]	; (800c8c8 <pbuf_copy_partial+0xdc>)
 800c832:	f00b fb39 	bl	8017ea8 <iprintf>
 800c836:	2300      	movs	r3, #0
 800c838:	e03e      	b.n	800c8b8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	61fb      	str	r3, [r7, #28]
 800c83e:	e034      	b.n	800c8aa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c840:	88bb      	ldrh	r3, [r7, #4]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d00a      	beq.n	800c85c <pbuf_copy_partial+0x70>
 800c846:	69fb      	ldr	r3, [r7, #28]
 800c848:	895b      	ldrh	r3, [r3, #10]
 800c84a:	88ba      	ldrh	r2, [r7, #4]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d305      	bcc.n	800c85c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c850:	69fb      	ldr	r3, [r7, #28]
 800c852:	895b      	ldrh	r3, [r3, #10]
 800c854:	88ba      	ldrh	r2, [r7, #4]
 800c856:	1ad3      	subs	r3, r2, r3
 800c858:	80bb      	strh	r3, [r7, #4]
 800c85a:	e023      	b.n	800c8a4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	895a      	ldrh	r2, [r3, #10]
 800c860:	88bb      	ldrh	r3, [r7, #4]
 800c862:	1ad3      	subs	r3, r2, r3
 800c864:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c866:	8b3a      	ldrh	r2, [r7, #24]
 800c868:	88fb      	ldrh	r3, [r7, #6]
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d901      	bls.n	800c872 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c86e:	88fb      	ldrh	r3, [r7, #6]
 800c870:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c872:	8b7b      	ldrh	r3, [r7, #26]
 800c874:	68ba      	ldr	r2, [r7, #8]
 800c876:	18d0      	adds	r0, r2, r3
 800c878:	69fb      	ldr	r3, [r7, #28]
 800c87a:	685a      	ldr	r2, [r3, #4]
 800c87c:	88bb      	ldrh	r3, [r7, #4]
 800c87e:	4413      	add	r3, r2
 800c880:	8b3a      	ldrh	r2, [r7, #24]
 800c882:	4619      	mov	r1, r3
 800c884:	f00b fafd 	bl	8017e82 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c888:	8afa      	ldrh	r2, [r7, #22]
 800c88a:	8b3b      	ldrh	r3, [r7, #24]
 800c88c:	4413      	add	r3, r2
 800c88e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c890:	8b7a      	ldrh	r2, [r7, #26]
 800c892:	8b3b      	ldrh	r3, [r7, #24]
 800c894:	4413      	add	r3, r2
 800c896:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c898:	88fa      	ldrh	r2, [r7, #6]
 800c89a:	8b3b      	ldrh	r3, [r7, #24]
 800c89c:	1ad3      	subs	r3, r2, r3
 800c89e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	61fb      	str	r3, [r7, #28]
 800c8aa:	88fb      	ldrh	r3, [r7, #6]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d002      	beq.n	800c8b6 <pbuf_copy_partial+0xca>
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d1c4      	bne.n	800c840 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c8b6:	8afb      	ldrh	r3, [r7, #22]
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3720      	adds	r7, #32
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	0801a244 	.word	0x0801a244
 800c8c4:	0801a58c 	.word	0x0801a58c
 800c8c8:	0801a2a4 	.word	0x0801a2a4
 800c8cc:	0801a5ac 	.word	0x0801a5ac

0800c8d0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	603a      	str	r2, [r7, #0]
 800c8da:	71fb      	strb	r3, [r7, #7]
 800c8dc:	460b      	mov	r3, r1
 800c8de:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	8919      	ldrh	r1, [r3, #8]
 800c8e4:	88ba      	ldrh	r2, [r7, #4]
 800c8e6:	79fb      	ldrb	r3, [r7, #7]
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f7ff fa99 	bl	800be20 <pbuf_alloc>
 800c8ee:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d101      	bne.n	800c8fa <pbuf_clone+0x2a>
    return NULL;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	e011      	b.n	800c91e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c8fa:	6839      	ldr	r1, [r7, #0]
 800c8fc:	68f8      	ldr	r0, [r7, #12]
 800c8fe:	f7ff fea3 	bl	800c648 <pbuf_copy>
 800c902:	4603      	mov	r3, r0
 800c904:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c906:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d006      	beq.n	800c91c <pbuf_clone+0x4c>
 800c90e:	4b06      	ldr	r3, [pc, #24]	; (800c928 <pbuf_clone+0x58>)
 800c910:	f240 5224 	movw	r2, #1316	; 0x524
 800c914:	4905      	ldr	r1, [pc, #20]	; (800c92c <pbuf_clone+0x5c>)
 800c916:	4806      	ldr	r0, [pc, #24]	; (800c930 <pbuf_clone+0x60>)
 800c918:	f00b fac6 	bl	8017ea8 <iprintf>
  return q;
 800c91c:	68fb      	ldr	r3, [r7, #12]
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3710      	adds	r7, #16
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	0801a244 	.word	0x0801a244
 800c92c:	0801a6b8 	.word	0x0801a6b8
 800c930:	0801a2a4 	.word	0x0801a2a4

0800c934 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c938:	f00b face 	bl	8017ed8 <rand>
 800c93c:	4603      	mov	r3, r0
 800c93e:	b29b      	uxth	r3, r3
 800c940:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c944:	b29b      	uxth	r3, r3
 800c946:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c94a:	b29a      	uxth	r2, r3
 800c94c:	4b01      	ldr	r3, [pc, #4]	; (800c954 <tcp_init+0x20>)
 800c94e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c950:	bf00      	nop
 800c952:	bd80      	pop	{r7, pc}
 800c954:	20000010 	.word	0x20000010

0800c958 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	7d1b      	ldrb	r3, [r3, #20]
 800c964:	2b01      	cmp	r3, #1
 800c966:	d105      	bne.n	800c974 <tcp_free+0x1c>
 800c968:	4b06      	ldr	r3, [pc, #24]	; (800c984 <tcp_free+0x2c>)
 800c96a:	22d4      	movs	r2, #212	; 0xd4
 800c96c:	4906      	ldr	r1, [pc, #24]	; (800c988 <tcp_free+0x30>)
 800c96e:	4807      	ldr	r0, [pc, #28]	; (800c98c <tcp_free+0x34>)
 800c970:	f00b fa9a 	bl	8017ea8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c974:	6879      	ldr	r1, [r7, #4]
 800c976:	2001      	movs	r0, #1
 800c978:	f7fe fe86 	bl	800b688 <memp_free>
}
 800c97c:	bf00      	nop
 800c97e:	3708      	adds	r7, #8
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	0801a744 	.word	0x0801a744
 800c988:	0801a774 	.word	0x0801a774
 800c98c:	0801a788 	.word	0x0801a788

0800c990 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b082      	sub	sp, #8
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	7d1b      	ldrb	r3, [r3, #20]
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d105      	bne.n	800c9ac <tcp_free_listen+0x1c>
 800c9a0:	4b06      	ldr	r3, [pc, #24]	; (800c9bc <tcp_free_listen+0x2c>)
 800c9a2:	22df      	movs	r2, #223	; 0xdf
 800c9a4:	4906      	ldr	r1, [pc, #24]	; (800c9c0 <tcp_free_listen+0x30>)
 800c9a6:	4807      	ldr	r0, [pc, #28]	; (800c9c4 <tcp_free_listen+0x34>)
 800c9a8:	f00b fa7e 	bl	8017ea8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c9ac:	6879      	ldr	r1, [r7, #4]
 800c9ae:	2002      	movs	r0, #2
 800c9b0:	f7fe fe6a 	bl	800b688 <memp_free>
}
 800c9b4:	bf00      	nop
 800c9b6:	3708      	adds	r7, #8
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	0801a744 	.word	0x0801a744
 800c9c0:	0801a7b0 	.word	0x0801a7b0
 800c9c4:	0801a788 	.word	0x0801a788

0800c9c8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c9cc:	f001 f8ac 	bl	800db28 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c9d0:	4b07      	ldr	r3, [pc, #28]	; (800c9f0 <tcp_tmr+0x28>)
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	b2da      	uxtb	r2, r3
 800c9d8:	4b05      	ldr	r3, [pc, #20]	; (800c9f0 <tcp_tmr+0x28>)
 800c9da:	701a      	strb	r2, [r3, #0]
 800c9dc:	4b04      	ldr	r3, [pc, #16]	; (800c9f0 <tcp_tmr+0x28>)
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	f003 0301 	and.w	r3, r3, #1
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d001      	beq.n	800c9ec <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c9e8:	f000 fd60 	bl	800d4ac <tcp_slowtmr>
  }
}
 800c9ec:	bf00      	nop
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	20008a8d 	.word	0x20008a8d

0800c9f4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b084      	sub	sp, #16
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d105      	bne.n	800ca10 <tcp_remove_listener+0x1c>
 800ca04:	4b0d      	ldr	r3, [pc, #52]	; (800ca3c <tcp_remove_listener+0x48>)
 800ca06:	22ff      	movs	r2, #255	; 0xff
 800ca08:	490d      	ldr	r1, [pc, #52]	; (800ca40 <tcp_remove_listener+0x4c>)
 800ca0a:	480e      	ldr	r0, [pc, #56]	; (800ca44 <tcp_remove_listener+0x50>)
 800ca0c:	f00b fa4c 	bl	8017ea8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	60fb      	str	r3, [r7, #12]
 800ca14:	e00a      	b.n	800ca2c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca1a:	683a      	ldr	r2, [r7, #0]
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d102      	bne.n	800ca26 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2200      	movs	r2, #0
 800ca24:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	68db      	ldr	r3, [r3, #12]
 800ca2a:	60fb      	str	r3, [r7, #12]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d1f1      	bne.n	800ca16 <tcp_remove_listener+0x22>
    }
  }
}
 800ca32:	bf00      	nop
 800ca34:	3710      	adds	r7, #16
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
 800ca3a:	bf00      	nop
 800ca3c:	0801a744 	.word	0x0801a744
 800ca40:	0801a7cc 	.word	0x0801a7cc
 800ca44:	0801a788 	.word	0x0801a788

0800ca48 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d106      	bne.n	800ca64 <tcp_listen_closed+0x1c>
 800ca56:	4b14      	ldr	r3, [pc, #80]	; (800caa8 <tcp_listen_closed+0x60>)
 800ca58:	f240 1211 	movw	r2, #273	; 0x111
 800ca5c:	4913      	ldr	r1, [pc, #76]	; (800caac <tcp_listen_closed+0x64>)
 800ca5e:	4814      	ldr	r0, [pc, #80]	; (800cab0 <tcp_listen_closed+0x68>)
 800ca60:	f00b fa22 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	7d1b      	ldrb	r3, [r3, #20]
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d006      	beq.n	800ca7a <tcp_listen_closed+0x32>
 800ca6c:	4b0e      	ldr	r3, [pc, #56]	; (800caa8 <tcp_listen_closed+0x60>)
 800ca6e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ca72:	4910      	ldr	r1, [pc, #64]	; (800cab4 <tcp_listen_closed+0x6c>)
 800ca74:	480e      	ldr	r0, [pc, #56]	; (800cab0 <tcp_listen_closed+0x68>)
 800ca76:	f00b fa17 	bl	8017ea8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	60fb      	str	r3, [r7, #12]
 800ca7e:	e00b      	b.n	800ca98 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ca80:	4a0d      	ldr	r2, [pc, #52]	; (800cab8 <tcp_listen_closed+0x70>)
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	6879      	ldr	r1, [r7, #4]
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f7ff ffb1 	bl	800c9f4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	3301      	adds	r3, #1
 800ca96:	60fb      	str	r3, [r7, #12]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	2b03      	cmp	r3, #3
 800ca9c:	d9f0      	bls.n	800ca80 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ca9e:	bf00      	nop
 800caa0:	3710      	adds	r7, #16
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	0801a744 	.word	0x0801a744
 800caac:	0801a7f4 	.word	0x0801a7f4
 800cab0:	0801a788 	.word	0x0801a788
 800cab4:	0801a800 	.word	0x0801a800
 800cab8:	08026c34 	.word	0x08026c34

0800cabc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800cabc:	b5b0      	push	{r4, r5, r7, lr}
 800cabe:	b088      	sub	sp, #32
 800cac0:	af04      	add	r7, sp, #16
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	460b      	mov	r3, r1
 800cac6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d106      	bne.n	800cadc <tcp_close_shutdown+0x20>
 800cace:	4b61      	ldr	r3, [pc, #388]	; (800cc54 <tcp_close_shutdown+0x198>)
 800cad0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800cad4:	4960      	ldr	r1, [pc, #384]	; (800cc58 <tcp_close_shutdown+0x19c>)
 800cad6:	4861      	ldr	r0, [pc, #388]	; (800cc5c <tcp_close_shutdown+0x1a0>)
 800cad8:	f00b f9e6 	bl	8017ea8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800cadc:	78fb      	ldrb	r3, [r7, #3]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d066      	beq.n	800cbb0 <tcp_close_shutdown+0xf4>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	7d1b      	ldrb	r3, [r3, #20]
 800cae6:	2b04      	cmp	r3, #4
 800cae8:	d003      	beq.n	800caf2 <tcp_close_shutdown+0x36>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	7d1b      	ldrb	r3, [r3, #20]
 800caee:	2b07      	cmp	r3, #7
 800caf0:	d15e      	bne.n	800cbb0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d104      	bne.n	800cb04 <tcp_close_shutdown+0x48>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cafe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cb02:	d055      	beq.n	800cbb0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	8b5b      	ldrh	r3, [r3, #26]
 800cb08:	f003 0310 	and.w	r3, r3, #16
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d106      	bne.n	800cb1e <tcp_close_shutdown+0x62>
 800cb10:	4b50      	ldr	r3, [pc, #320]	; (800cc54 <tcp_close_shutdown+0x198>)
 800cb12:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800cb16:	4952      	ldr	r1, [pc, #328]	; (800cc60 <tcp_close_shutdown+0x1a4>)
 800cb18:	4850      	ldr	r0, [pc, #320]	; (800cc5c <tcp_close_shutdown+0x1a0>)
 800cb1a:	f00b f9c5 	bl	8017ea8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cb26:	687d      	ldr	r5, [r7, #4]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	3304      	adds	r3, #4
 800cb2c:	687a      	ldr	r2, [r7, #4]
 800cb2e:	8ad2      	ldrh	r2, [r2, #22]
 800cb30:	6879      	ldr	r1, [r7, #4]
 800cb32:	8b09      	ldrh	r1, [r1, #24]
 800cb34:	9102      	str	r1, [sp, #8]
 800cb36:	9201      	str	r2, [sp, #4]
 800cb38:	9300      	str	r3, [sp, #0]
 800cb3a:	462b      	mov	r3, r5
 800cb3c:	4622      	mov	r2, r4
 800cb3e:	4601      	mov	r1, r0
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f005 fde9 	bl	8012718 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f001 fbba 	bl	800e2c0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cb4c:	4b45      	ldr	r3, [pc, #276]	; (800cc64 <tcp_close_shutdown+0x1a8>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	687a      	ldr	r2, [r7, #4]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d105      	bne.n	800cb62 <tcp_close_shutdown+0xa6>
 800cb56:	4b43      	ldr	r3, [pc, #268]	; (800cc64 <tcp_close_shutdown+0x1a8>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	4a41      	ldr	r2, [pc, #260]	; (800cc64 <tcp_close_shutdown+0x1a8>)
 800cb5e:	6013      	str	r3, [r2, #0]
 800cb60:	e013      	b.n	800cb8a <tcp_close_shutdown+0xce>
 800cb62:	4b40      	ldr	r3, [pc, #256]	; (800cc64 <tcp_close_shutdown+0x1a8>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	60fb      	str	r3, [r7, #12]
 800cb68:	e00c      	b.n	800cb84 <tcp_close_shutdown+0xc8>
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	68db      	ldr	r3, [r3, #12]
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d104      	bne.n	800cb7e <tcp_close_shutdown+0xc2>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	68da      	ldr	r2, [r3, #12]
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	60da      	str	r2, [r3, #12]
 800cb7c:	e005      	b.n	800cb8a <tcp_close_shutdown+0xce>
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	68db      	ldr	r3, [r3, #12]
 800cb82:	60fb      	str	r3, [r7, #12]
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d1ef      	bne.n	800cb6a <tcp_close_shutdown+0xae>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	60da      	str	r2, [r3, #12]
 800cb90:	4b35      	ldr	r3, [pc, #212]	; (800cc68 <tcp_close_shutdown+0x1ac>)
 800cb92:	2201      	movs	r2, #1
 800cb94:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800cb96:	4b35      	ldr	r3, [pc, #212]	; (800cc6c <tcp_close_shutdown+0x1b0>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d102      	bne.n	800cba6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800cba0:	f004 f84c 	bl	8010c3c <tcp_trigger_input_pcb_close>
 800cba4:	e002      	b.n	800cbac <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f7ff fed6 	bl	800c958 <tcp_free>
      }
      return ERR_OK;
 800cbac:	2300      	movs	r3, #0
 800cbae:	e04d      	b.n	800cc4c <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	7d1b      	ldrb	r3, [r3, #20]
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d02d      	beq.n	800cc14 <tcp_close_shutdown+0x158>
 800cbb8:	2b02      	cmp	r3, #2
 800cbba:	d036      	beq.n	800cc2a <tcp_close_shutdown+0x16e>
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d13f      	bne.n	800cc40 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	8adb      	ldrh	r3, [r3, #22]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d021      	beq.n	800cc0c <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cbc8:	4b29      	ldr	r3, [pc, #164]	; (800cc70 <tcp_close_shutdown+0x1b4>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	687a      	ldr	r2, [r7, #4]
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d105      	bne.n	800cbde <tcp_close_shutdown+0x122>
 800cbd2:	4b27      	ldr	r3, [pc, #156]	; (800cc70 <tcp_close_shutdown+0x1b4>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	68db      	ldr	r3, [r3, #12]
 800cbd8:	4a25      	ldr	r2, [pc, #148]	; (800cc70 <tcp_close_shutdown+0x1b4>)
 800cbda:	6013      	str	r3, [r2, #0]
 800cbdc:	e013      	b.n	800cc06 <tcp_close_shutdown+0x14a>
 800cbde:	4b24      	ldr	r3, [pc, #144]	; (800cc70 <tcp_close_shutdown+0x1b4>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	60bb      	str	r3, [r7, #8]
 800cbe4:	e00c      	b.n	800cc00 <tcp_close_shutdown+0x144>
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d104      	bne.n	800cbfa <tcp_close_shutdown+0x13e>
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	68da      	ldr	r2, [r3, #12]
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	60da      	str	r2, [r3, #12]
 800cbf8:	e005      	b.n	800cc06 <tcp_close_shutdown+0x14a>
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	68db      	ldr	r3, [r3, #12]
 800cbfe:	60bb      	str	r3, [r7, #8]
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d1ef      	bne.n	800cbe6 <tcp_close_shutdown+0x12a>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f7ff fea3 	bl	800c958 <tcp_free>
      break;
 800cc12:	e01a      	b.n	800cc4a <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f7ff ff17 	bl	800ca48 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800cc1a:	6879      	ldr	r1, [r7, #4]
 800cc1c:	4815      	ldr	r0, [pc, #84]	; (800cc74 <tcp_close_shutdown+0x1b8>)
 800cc1e:	f001 fb9f 	bl	800e360 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f7ff feb4 	bl	800c990 <tcp_free_listen>
      break;
 800cc28:	e00f      	b.n	800cc4a <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cc2a:	6879      	ldr	r1, [r7, #4]
 800cc2c:	480d      	ldr	r0, [pc, #52]	; (800cc64 <tcp_close_shutdown+0x1a8>)
 800cc2e:	f001 fb97 	bl	800e360 <tcp_pcb_remove>
 800cc32:	4b0d      	ldr	r3, [pc, #52]	; (800cc68 <tcp_close_shutdown+0x1ac>)
 800cc34:	2201      	movs	r2, #1
 800cc36:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f7ff fe8d 	bl	800c958 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800cc3e:	e004      	b.n	800cc4a <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f000 f819 	bl	800cc78 <tcp_close_shutdown_fin>
 800cc46:	4603      	mov	r3, r0
 800cc48:	e000      	b.n	800cc4c <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800cc4a:	2300      	movs	r3, #0
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3710      	adds	r7, #16
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bdb0      	pop	{r4, r5, r7, pc}
 800cc54:	0801a744 	.word	0x0801a744
 800cc58:	0801a818 	.word	0x0801a818
 800cc5c:	0801a788 	.word	0x0801a788
 800cc60:	0801a838 	.word	0x0801a838
 800cc64:	2000f514 	.word	0x2000f514
 800cc68:	2000f510 	.word	0x2000f510
 800cc6c:	2000f528 	.word	0x2000f528
 800cc70:	2000f520 	.word	0x2000f520
 800cc74:	2000f51c 	.word	0x2000f51c

0800cc78 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d106      	bne.n	800cc94 <tcp_close_shutdown_fin+0x1c>
 800cc86:	4b2c      	ldr	r3, [pc, #176]	; (800cd38 <tcp_close_shutdown_fin+0xc0>)
 800cc88:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800cc8c:	492b      	ldr	r1, [pc, #172]	; (800cd3c <tcp_close_shutdown_fin+0xc4>)
 800cc8e:	482c      	ldr	r0, [pc, #176]	; (800cd40 <tcp_close_shutdown_fin+0xc8>)
 800cc90:	f00b f90a 	bl	8017ea8 <iprintf>

  switch (pcb->state) {
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	7d1b      	ldrb	r3, [r3, #20]
 800cc98:	2b04      	cmp	r3, #4
 800cc9a:	d010      	beq.n	800ccbe <tcp_close_shutdown_fin+0x46>
 800cc9c:	2b07      	cmp	r3, #7
 800cc9e:	d01b      	beq.n	800ccd8 <tcp_close_shutdown_fin+0x60>
 800cca0:	2b03      	cmp	r3, #3
 800cca2:	d126      	bne.n	800ccf2 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f004 fe35 	bl	8011914 <tcp_send_fin>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ccae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d11f      	bne.n	800ccf6 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2205      	movs	r2, #5
 800ccba:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ccbc:	e01b      	b.n	800ccf6 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f004 fe28 	bl	8011914 <tcp_send_fin>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ccc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d114      	bne.n	800ccfa <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2205      	movs	r2, #5
 800ccd4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ccd6:	e010      	b.n	800ccfa <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f004 fe1b 	bl	8011914 <tcp_send_fin>
 800ccde:	4603      	mov	r3, r0
 800cce0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d109      	bne.n	800ccfe <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2209      	movs	r2, #9
 800ccee:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ccf0:	e005      	b.n	800ccfe <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	e01c      	b.n	800cd30 <tcp_close_shutdown_fin+0xb8>
      break;
 800ccf6:	bf00      	nop
 800ccf8:	e002      	b.n	800cd00 <tcp_close_shutdown_fin+0x88>
      break;
 800ccfa:	bf00      	nop
 800ccfc:	e000      	b.n	800cd00 <tcp_close_shutdown_fin+0x88>
      break;
 800ccfe:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cd00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d103      	bne.n	800cd10 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f004 ff41 	bl	8011b90 <tcp_output>
 800cd0e:	e00d      	b.n	800cd2c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800cd10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd18:	d108      	bne.n	800cd2c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	8b5b      	ldrh	r3, [r3, #26]
 800cd1e:	f043 0308 	orr.w	r3, r3, #8
 800cd22:	b29a      	uxth	r2, r3
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	e001      	b.n	800cd30 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800cd2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3710      	adds	r7, #16
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	0801a744 	.word	0x0801a744
 800cd3c:	0801a7f4 	.word	0x0801a7f4
 800cd40:	0801a788 	.word	0x0801a788

0800cd44 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b082      	sub	sp, #8
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d109      	bne.n	800cd66 <tcp_close+0x22>
 800cd52:	4b0f      	ldr	r3, [pc, #60]	; (800cd90 <tcp_close+0x4c>)
 800cd54:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800cd58:	490e      	ldr	r1, [pc, #56]	; (800cd94 <tcp_close+0x50>)
 800cd5a:	480f      	ldr	r0, [pc, #60]	; (800cd98 <tcp_close+0x54>)
 800cd5c:	f00b f8a4 	bl	8017ea8 <iprintf>
 800cd60:	f06f 030f 	mvn.w	r3, #15
 800cd64:	e00f      	b.n	800cd86 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	7d1b      	ldrb	r3, [r3, #20]
 800cd6a:	2b01      	cmp	r3, #1
 800cd6c:	d006      	beq.n	800cd7c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	8b5b      	ldrh	r3, [r3, #26]
 800cd72:	f043 0310 	orr.w	r3, r3, #16
 800cd76:	b29a      	uxth	r2, r3
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cd7c:	2101      	movs	r1, #1
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f7ff fe9c 	bl	800cabc <tcp_close_shutdown>
 800cd84:	4603      	mov	r3, r0
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3708      	adds	r7, #8
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}
 800cd8e:	bf00      	nop
 800cd90:	0801a744 	.word	0x0801a744
 800cd94:	0801a854 	.word	0x0801a854
 800cd98:	0801a788 	.word	0x0801a788

0800cd9c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b084      	sub	sp, #16
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	60f8      	str	r0, [r7, #12]
 800cda4:	60b9      	str	r1, [r7, #8]
 800cda6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d109      	bne.n	800cdc2 <tcp_shutdown+0x26>
 800cdae:	4b25      	ldr	r3, [pc, #148]	; (800ce44 <tcp_shutdown+0xa8>)
 800cdb0:	f240 2207 	movw	r2, #519	; 0x207
 800cdb4:	4924      	ldr	r1, [pc, #144]	; (800ce48 <tcp_shutdown+0xac>)
 800cdb6:	4825      	ldr	r0, [pc, #148]	; (800ce4c <tcp_shutdown+0xb0>)
 800cdb8:	f00b f876 	bl	8017ea8 <iprintf>
 800cdbc:	f06f 030f 	mvn.w	r3, #15
 800cdc0:	e03c      	b.n	800ce3c <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	7d1b      	ldrb	r3, [r3, #20]
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d102      	bne.n	800cdd0 <tcp_shutdown+0x34>
    return ERR_CONN;
 800cdca:	f06f 030a 	mvn.w	r3, #10
 800cdce:	e035      	b.n	800ce3c <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d01b      	beq.n	800ce0e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	8b5b      	ldrh	r3, [r3, #26]
 800cdda:	f043 0310 	orr.w	r3, r3, #16
 800cdde:	b29a      	uxth	r2, r3
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d005      	beq.n	800cdf6 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800cdea:	2101      	movs	r1, #1
 800cdec:	68f8      	ldr	r0, [r7, #12]
 800cdee:	f7ff fe65 	bl	800cabc <tcp_close_shutdown>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	e022      	b.n	800ce3c <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d007      	beq.n	800ce0e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7ff faec 	bl	800c3e0 <pbuf_free>
      pcb->refused_data = NULL;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d012      	beq.n	800ce3a <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	7d1b      	ldrb	r3, [r3, #20]
 800ce18:	2b03      	cmp	r3, #3
 800ce1a:	db0b      	blt.n	800ce34 <tcp_shutdown+0x98>
 800ce1c:	2b04      	cmp	r3, #4
 800ce1e:	dd01      	ble.n	800ce24 <tcp_shutdown+0x88>
 800ce20:	2b07      	cmp	r3, #7
 800ce22:	d107      	bne.n	800ce34 <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	b2db      	uxtb	r3, r3
 800ce28:	4619      	mov	r1, r3
 800ce2a:	68f8      	ldr	r0, [r7, #12]
 800ce2c:	f7ff fe46 	bl	800cabc <tcp_close_shutdown>
 800ce30:	4603      	mov	r3, r0
 800ce32:	e003      	b.n	800ce3c <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800ce34:	f06f 030a 	mvn.w	r3, #10
 800ce38:	e000      	b.n	800ce3c <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800ce3a:	2300      	movs	r3, #0
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3710      	adds	r7, #16
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	0801a744 	.word	0x0801a744
 800ce48:	0801a86c 	.word	0x0801a86c
 800ce4c:	0801a788 	.word	0x0801a788

0800ce50 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b08e      	sub	sp, #56	; 0x38
 800ce54:	af04      	add	r7, sp, #16
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d107      	bne.n	800ce70 <tcp_abandon+0x20>
 800ce60:	4b52      	ldr	r3, [pc, #328]	; (800cfac <tcp_abandon+0x15c>)
 800ce62:	f240 223d 	movw	r2, #573	; 0x23d
 800ce66:	4952      	ldr	r1, [pc, #328]	; (800cfb0 <tcp_abandon+0x160>)
 800ce68:	4852      	ldr	r0, [pc, #328]	; (800cfb4 <tcp_abandon+0x164>)
 800ce6a:	f00b f81d 	bl	8017ea8 <iprintf>
 800ce6e:	e099      	b.n	800cfa4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	7d1b      	ldrb	r3, [r3, #20]
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d106      	bne.n	800ce86 <tcp_abandon+0x36>
 800ce78:	4b4c      	ldr	r3, [pc, #304]	; (800cfac <tcp_abandon+0x15c>)
 800ce7a:	f240 2241 	movw	r2, #577	; 0x241
 800ce7e:	494e      	ldr	r1, [pc, #312]	; (800cfb8 <tcp_abandon+0x168>)
 800ce80:	484c      	ldr	r0, [pc, #304]	; (800cfb4 <tcp_abandon+0x164>)
 800ce82:	f00b f811 	bl	8017ea8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	7d1b      	ldrb	r3, [r3, #20]
 800ce8a:	2b0a      	cmp	r3, #10
 800ce8c:	d107      	bne.n	800ce9e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ce8e:	6879      	ldr	r1, [r7, #4]
 800ce90:	484a      	ldr	r0, [pc, #296]	; (800cfbc <tcp_abandon+0x16c>)
 800ce92:	f001 fa65 	bl	800e360 <tcp_pcb_remove>
    tcp_free(pcb);
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f7ff fd5e 	bl	800c958 <tcp_free>
 800ce9c:	e082      	b.n	800cfa4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800cea2:	2300      	movs	r3, #0
 800cea4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ceaa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceb0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ceb8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	691b      	ldr	r3, [r3, #16]
 800cebe:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	7d1b      	ldrb	r3, [r3, #20]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d126      	bne.n	800cf16 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	8adb      	ldrh	r3, [r3, #22]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d02e      	beq.n	800cf2e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ced0:	4b3b      	ldr	r3, [pc, #236]	; (800cfc0 <tcp_abandon+0x170>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d105      	bne.n	800cee6 <tcp_abandon+0x96>
 800ceda:	4b39      	ldr	r3, [pc, #228]	; (800cfc0 <tcp_abandon+0x170>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	68db      	ldr	r3, [r3, #12]
 800cee0:	4a37      	ldr	r2, [pc, #220]	; (800cfc0 <tcp_abandon+0x170>)
 800cee2:	6013      	str	r3, [r2, #0]
 800cee4:	e013      	b.n	800cf0e <tcp_abandon+0xbe>
 800cee6:	4b36      	ldr	r3, [pc, #216]	; (800cfc0 <tcp_abandon+0x170>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	61fb      	str	r3, [r7, #28]
 800ceec:	e00c      	b.n	800cf08 <tcp_abandon+0xb8>
 800ceee:	69fb      	ldr	r3, [r7, #28]
 800cef0:	68db      	ldr	r3, [r3, #12]
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d104      	bne.n	800cf02 <tcp_abandon+0xb2>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	68da      	ldr	r2, [r3, #12]
 800cefc:	69fb      	ldr	r3, [r7, #28]
 800cefe:	60da      	str	r2, [r3, #12]
 800cf00:	e005      	b.n	800cf0e <tcp_abandon+0xbe>
 800cf02:	69fb      	ldr	r3, [r7, #28]
 800cf04:	68db      	ldr	r3, [r3, #12]
 800cf06:	61fb      	str	r3, [r7, #28]
 800cf08:	69fb      	ldr	r3, [r7, #28]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d1ef      	bne.n	800ceee <tcp_abandon+0x9e>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2200      	movs	r2, #0
 800cf12:	60da      	str	r2, [r3, #12]
 800cf14:	e00b      	b.n	800cf2e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	8adb      	ldrh	r3, [r3, #22]
 800cf1e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cf20:	6879      	ldr	r1, [r7, #4]
 800cf22:	4828      	ldr	r0, [pc, #160]	; (800cfc4 <tcp_abandon+0x174>)
 800cf24:	f001 fa1c 	bl	800e360 <tcp_pcb_remove>
 800cf28:	4b27      	ldr	r3, [pc, #156]	; (800cfc8 <tcp_abandon+0x178>)
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d004      	beq.n	800cf40 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f000 fed4 	bl	800dce8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d004      	beq.n	800cf52 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f000 fecb 	bl	800dce8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d004      	beq.n	800cf64 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f000 fec2 	bl	800dce8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800cf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d00e      	beq.n	800cf88 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cf6a:	6879      	ldr	r1, [r7, #4]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	3304      	adds	r3, #4
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	8b12      	ldrh	r2, [r2, #24]
 800cf74:	9202      	str	r2, [sp, #8]
 800cf76:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cf78:	9201      	str	r2, [sp, #4]
 800cf7a:	9300      	str	r3, [sp, #0]
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	697a      	ldr	r2, [r7, #20]
 800cf80:	69b9      	ldr	r1, [r7, #24]
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f005 fbc8 	bl	8012718 <tcp_rst>
    }
    last_state = pcb->state;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	7d1b      	ldrb	r3, [r3, #20]
 800cf8c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f7ff fce2 	bl	800c958 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d004      	beq.n	800cfa4 <tcp_abandon+0x154>
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	f06f 010c 	mvn.w	r1, #12
 800cfa0:	68f8      	ldr	r0, [r7, #12]
 800cfa2:	4798      	blx	r3
  }
}
 800cfa4:	3728      	adds	r7, #40	; 0x28
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	0801a744 	.word	0x0801a744
 800cfb0:	0801a888 	.word	0x0801a888
 800cfb4:	0801a788 	.word	0x0801a788
 800cfb8:	0801a8a4 	.word	0x0801a8a4
 800cfbc:	2000f524 	.word	0x2000f524
 800cfc0:	2000f520 	.word	0x2000f520
 800cfc4:	2000f514 	.word	0x2000f514
 800cfc8:	2000f510 	.word	0x2000f510

0800cfcc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cfd4:	2101      	movs	r1, #1
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f7ff ff3a 	bl	800ce50 <tcp_abandon>
}
 800cfdc:	bf00      	nop
 800cfde:	3708      	adds	r7, #8
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b088      	sub	sp, #32
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	60f8      	str	r0, [r7, #12]
 800cfec:	60b9      	str	r1, [r7, #8]
 800cfee:	4613      	mov	r3, r2
 800cff0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800cff2:	2304      	movs	r3, #4
 800cff4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d101      	bne.n	800d000 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800cffc:	4b3e      	ldr	r3, [pc, #248]	; (800d0f8 <tcp_bind+0x114>)
 800cffe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d109      	bne.n	800d01a <tcp_bind+0x36>
 800d006:	4b3d      	ldr	r3, [pc, #244]	; (800d0fc <tcp_bind+0x118>)
 800d008:	f240 22a9 	movw	r2, #681	; 0x2a9
 800d00c:	493c      	ldr	r1, [pc, #240]	; (800d100 <tcp_bind+0x11c>)
 800d00e:	483d      	ldr	r0, [pc, #244]	; (800d104 <tcp_bind+0x120>)
 800d010:	f00a ff4a 	bl	8017ea8 <iprintf>
 800d014:	f06f 030f 	mvn.w	r3, #15
 800d018:	e06a      	b.n	800d0f0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	7d1b      	ldrb	r3, [r3, #20]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d009      	beq.n	800d036 <tcp_bind+0x52>
 800d022:	4b36      	ldr	r3, [pc, #216]	; (800d0fc <tcp_bind+0x118>)
 800d024:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d028:	4937      	ldr	r1, [pc, #220]	; (800d108 <tcp_bind+0x124>)
 800d02a:	4836      	ldr	r0, [pc, #216]	; (800d104 <tcp_bind+0x120>)
 800d02c:	f00a ff3c 	bl	8017ea8 <iprintf>
 800d030:	f06f 0305 	mvn.w	r3, #5
 800d034:	e05c      	b.n	800d0f0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800d036:	88fb      	ldrh	r3, [r7, #6]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d109      	bne.n	800d050 <tcp_bind+0x6c>
    port = tcp_new_port();
 800d03c:	f000 f9f0 	bl	800d420 <tcp_new_port>
 800d040:	4603      	mov	r3, r0
 800d042:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d044:	88fb      	ldrh	r3, [r7, #6]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d135      	bne.n	800d0b6 <tcp_bind+0xd2>
      return ERR_BUF;
 800d04a:	f06f 0301 	mvn.w	r3, #1
 800d04e:	e04f      	b.n	800d0f0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800d050:	2300      	movs	r3, #0
 800d052:	61fb      	str	r3, [r7, #28]
 800d054:	e02b      	b.n	800d0ae <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d056:	4a2d      	ldr	r2, [pc, #180]	; (800d10c <tcp_bind+0x128>)
 800d058:	69fb      	ldr	r3, [r7, #28]
 800d05a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	61bb      	str	r3, [r7, #24]
 800d062:	e01e      	b.n	800d0a2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800d064:	69bb      	ldr	r3, [r7, #24]
 800d066:	8adb      	ldrh	r3, [r3, #22]
 800d068:	88fa      	ldrh	r2, [r7, #6]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d116      	bne.n	800d09c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800d06e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d070:	2b00      	cmp	r3, #0
 800d072:	d010      	beq.n	800d096 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800d074:	69bb      	ldr	r3, [r7, #24]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d00c      	beq.n	800d096 <tcp_bind+0xb2>
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d009      	beq.n	800d096 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d005      	beq.n	800d096 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d092:	429a      	cmp	r2, r3
 800d094:	d102      	bne.n	800d09c <tcp_bind+0xb8>
              return ERR_USE;
 800d096:	f06f 0307 	mvn.w	r3, #7
 800d09a:	e029      	b.n	800d0f0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	68db      	ldr	r3, [r3, #12]
 800d0a0:	61bb      	str	r3, [r7, #24]
 800d0a2:	69bb      	ldr	r3, [r7, #24]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d1dd      	bne.n	800d064 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800d0a8:	69fb      	ldr	r3, [r7, #28]
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	61fb      	str	r3, [r7, #28]
 800d0ae:	69fa      	ldr	r2, [r7, #28]
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	dbcf      	blt.n	800d056 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d00c      	beq.n	800d0d6 <tcp_bind+0xf2>
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d008      	beq.n	800d0d6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d002      	beq.n	800d0d0 <tcp_bind+0xec>
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	e000      	b.n	800d0d2 <tcp_bind+0xee>
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	68fa      	ldr	r2, [r7, #12]
 800d0d4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	88fa      	ldrh	r2, [r7, #6]
 800d0da:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800d0dc:	4b0c      	ldr	r3, [pc, #48]	; (800d110 <tcp_bind+0x12c>)
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	60da      	str	r2, [r3, #12]
 800d0e4:	4a0a      	ldr	r2, [pc, #40]	; (800d110 <tcp_bind+0x12c>)
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	6013      	str	r3, [r2, #0]
 800d0ea:	f005 fcd7 	bl	8012a9c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800d0ee:	2300      	movs	r3, #0
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3720      	adds	r7, #32
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	08026c6c 	.word	0x08026c6c
 800d0fc:	0801a744 	.word	0x0801a744
 800d100:	0801a8d8 	.word	0x0801a8d8
 800d104:	0801a788 	.word	0x0801a788
 800d108:	0801a8f0 	.word	0x0801a8f0
 800d10c:	08026c34 	.word	0x08026c34
 800d110:	2000f520 	.word	0x2000f520

0800d114 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b084      	sub	sp, #16
 800d118:	af00      	add	r7, sp, #0
 800d11a:	60f8      	str	r0, [r7, #12]
 800d11c:	60b9      	str	r1, [r7, #8]
 800d11e:	4613      	mov	r3, r2
 800d120:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d106      	bne.n	800d136 <tcp_accept_null+0x22>
 800d128:	4b07      	ldr	r3, [pc, #28]	; (800d148 <tcp_accept_null+0x34>)
 800d12a:	f240 320f 	movw	r2, #783	; 0x30f
 800d12e:	4907      	ldr	r1, [pc, #28]	; (800d14c <tcp_accept_null+0x38>)
 800d130:	4807      	ldr	r0, [pc, #28]	; (800d150 <tcp_accept_null+0x3c>)
 800d132:	f00a feb9 	bl	8017ea8 <iprintf>

  tcp_abort(pcb);
 800d136:	68b8      	ldr	r0, [r7, #8]
 800d138:	f7ff ff48 	bl	800cfcc <tcp_abort>

  return ERR_ABRT;
 800d13c:	f06f 030c 	mvn.w	r3, #12
}
 800d140:	4618      	mov	r0, r3
 800d142:	3710      	adds	r7, #16
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	0801a744 	.word	0x0801a744
 800d14c:	0801a918 	.word	0x0801a918
 800d150:	0801a788 	.word	0x0801a788

0800d154 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b082      	sub	sp, #8
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	460b      	mov	r3, r1
 800d15e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800d160:	78fb      	ldrb	r3, [r7, #3]
 800d162:	2200      	movs	r2, #0
 800d164:	4619      	mov	r1, r3
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f000 f806 	bl	800d178 <tcp_listen_with_backlog_and_err>
 800d16c:	4603      	mov	r3, r0
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3708      	adds	r7, #8
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
	...

0800d178 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b088      	sub	sp, #32
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	60f8      	str	r0, [r7, #12]
 800d180:	460b      	mov	r3, r1
 800d182:	607a      	str	r2, [r7, #4]
 800d184:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800d186:	2300      	movs	r3, #0
 800d188:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d109      	bne.n	800d1a4 <tcp_listen_with_backlog_and_err+0x2c>
 800d190:	4b47      	ldr	r3, [pc, #284]	; (800d2b0 <tcp_listen_with_backlog_and_err+0x138>)
 800d192:	f240 3259 	movw	r2, #857	; 0x359
 800d196:	4947      	ldr	r1, [pc, #284]	; (800d2b4 <tcp_listen_with_backlog_and_err+0x13c>)
 800d198:	4847      	ldr	r0, [pc, #284]	; (800d2b8 <tcp_listen_with_backlog_and_err+0x140>)
 800d19a:	f00a fe85 	bl	8017ea8 <iprintf>
 800d19e:	23f0      	movs	r3, #240	; 0xf0
 800d1a0:	76fb      	strb	r3, [r7, #27]
 800d1a2:	e079      	b.n	800d298 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	7d1b      	ldrb	r3, [r3, #20]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d009      	beq.n	800d1c0 <tcp_listen_with_backlog_and_err+0x48>
 800d1ac:	4b40      	ldr	r3, [pc, #256]	; (800d2b0 <tcp_listen_with_backlog_and_err+0x138>)
 800d1ae:	f240 325a 	movw	r2, #858	; 0x35a
 800d1b2:	4942      	ldr	r1, [pc, #264]	; (800d2bc <tcp_listen_with_backlog_and_err+0x144>)
 800d1b4:	4840      	ldr	r0, [pc, #256]	; (800d2b8 <tcp_listen_with_backlog_and_err+0x140>)
 800d1b6:	f00a fe77 	bl	8017ea8 <iprintf>
 800d1ba:	23f1      	movs	r3, #241	; 0xf1
 800d1bc:	76fb      	strb	r3, [r7, #27]
 800d1be:	e06b      	b.n	800d298 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	7d1b      	ldrb	r3, [r3, #20]
 800d1c4:	2b01      	cmp	r3, #1
 800d1c6:	d104      	bne.n	800d1d2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800d1cc:	23f7      	movs	r3, #247	; 0xf7
 800d1ce:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d1d0:	e062      	b.n	800d298 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800d1d2:	2002      	movs	r0, #2
 800d1d4:	f7fe fa06 	bl	800b5e4 <memp_malloc>
 800d1d8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d102      	bne.n	800d1e6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800d1e0:	23ff      	movs	r3, #255	; 0xff
 800d1e2:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d1e4:	e058      	b.n	800d298 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	691a      	ldr	r2, [r3, #16]
 800d1ea:	69fb      	ldr	r3, [r7, #28]
 800d1ec:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	8ada      	ldrh	r2, [r3, #22]
 800d1f2:	69fb      	ldr	r3, [r7, #28]
 800d1f4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	7d5a      	ldrb	r2, [r3, #21]
 800d200:	69fb      	ldr	r3, [r7, #28]
 800d202:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	7a5a      	ldrb	r2, [r3, #9]
 800d208:	69fb      	ldr	r3, [r7, #28]
 800d20a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	2200      	movs	r2, #0
 800d210:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	7ada      	ldrb	r2, [r3, #11]
 800d216:	69fb      	ldr	r3, [r7, #28]
 800d218:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	7a9a      	ldrb	r2, [r3, #10]
 800d21e:	69fb      	ldr	r3, [r7, #28]
 800d220:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	69fb      	ldr	r3, [r7, #28]
 800d228:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	8adb      	ldrh	r3, [r3, #22]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d021      	beq.n	800d276 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800d232:	4b23      	ldr	r3, [pc, #140]	; (800d2c0 <tcp_listen_with_backlog_and_err+0x148>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	68fa      	ldr	r2, [r7, #12]
 800d238:	429a      	cmp	r2, r3
 800d23a:	d105      	bne.n	800d248 <tcp_listen_with_backlog_and_err+0xd0>
 800d23c:	4b20      	ldr	r3, [pc, #128]	; (800d2c0 <tcp_listen_with_backlog_and_err+0x148>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	68db      	ldr	r3, [r3, #12]
 800d242:	4a1f      	ldr	r2, [pc, #124]	; (800d2c0 <tcp_listen_with_backlog_and_err+0x148>)
 800d244:	6013      	str	r3, [r2, #0]
 800d246:	e013      	b.n	800d270 <tcp_listen_with_backlog_and_err+0xf8>
 800d248:	4b1d      	ldr	r3, [pc, #116]	; (800d2c0 <tcp_listen_with_backlog_and_err+0x148>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	617b      	str	r3, [r7, #20]
 800d24e:	e00c      	b.n	800d26a <tcp_listen_with_backlog_and_err+0xf2>
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	68db      	ldr	r3, [r3, #12]
 800d254:	68fa      	ldr	r2, [r7, #12]
 800d256:	429a      	cmp	r2, r3
 800d258:	d104      	bne.n	800d264 <tcp_listen_with_backlog_and_err+0xec>
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	68da      	ldr	r2, [r3, #12]
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	60da      	str	r2, [r3, #12]
 800d262:	e005      	b.n	800d270 <tcp_listen_with_backlog_and_err+0xf8>
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	68db      	ldr	r3, [r3, #12]
 800d268:	617b      	str	r3, [r7, #20]
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d1ef      	bne.n	800d250 <tcp_listen_with_backlog_and_err+0xd8>
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2200      	movs	r2, #0
 800d274:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800d276:	68f8      	ldr	r0, [r7, #12]
 800d278:	f7ff fb6e 	bl	800c958 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	4a11      	ldr	r2, [pc, #68]	; (800d2c4 <tcp_listen_with_backlog_and_err+0x14c>)
 800d280:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800d282:	4b11      	ldr	r3, [pc, #68]	; (800d2c8 <tcp_listen_with_backlog_and_err+0x150>)
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	69fb      	ldr	r3, [r7, #28]
 800d288:	60da      	str	r2, [r3, #12]
 800d28a:	4a0f      	ldr	r2, [pc, #60]	; (800d2c8 <tcp_listen_with_backlog_and_err+0x150>)
 800d28c:	69fb      	ldr	r3, [r7, #28]
 800d28e:	6013      	str	r3, [r2, #0]
 800d290:	f005 fc04 	bl	8012a9c <tcp_timer_needed>
  res = ERR_OK;
 800d294:	2300      	movs	r3, #0
 800d296:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d002      	beq.n	800d2a4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	7efa      	ldrb	r2, [r7, #27]
 800d2a2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800d2a4:	69fb      	ldr	r3, [r7, #28]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3720      	adds	r7, #32
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	0801a744 	.word	0x0801a744
 800d2b4:	0801a938 	.word	0x0801a938
 800d2b8:	0801a788 	.word	0x0801a788
 800d2bc:	0801a968 	.word	0x0801a968
 800d2c0:	2000f520 	.word	0x2000f520
 800d2c4:	0800d115 	.word	0x0800d115
 800d2c8:	2000f51c 	.word	0x2000f51c

0800d2cc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b084      	sub	sp, #16
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d106      	bne.n	800d2e8 <tcp_update_rcv_ann_wnd+0x1c>
 800d2da:	4b25      	ldr	r3, [pc, #148]	; (800d370 <tcp_update_rcv_ann_wnd+0xa4>)
 800d2dc:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d2e0:	4924      	ldr	r1, [pc, #144]	; (800d374 <tcp_update_rcv_ann_wnd+0xa8>)
 800d2e2:	4825      	ldr	r0, [pc, #148]	; (800d378 <tcp_update_rcv_ann_wnd+0xac>)
 800d2e4:	f00a fde0 	bl	8017ea8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d2f0:	4413      	add	r3, r2
 800d2f2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f8:	687a      	ldr	r2, [r7, #4]
 800d2fa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d2fc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d300:	bf28      	it	cs
 800d302:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d306:	b292      	uxth	r2, r2
 800d308:	4413      	add	r3, r2
 800d30a:	68fa      	ldr	r2, [r7, #12]
 800d30c:	1ad3      	subs	r3, r2, r3
 800d30e:	2b00      	cmp	r3, #0
 800d310:	db08      	blt.n	800d324 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d31e:	68fa      	ldr	r2, [r7, #12]
 800d320:	1ad3      	subs	r3, r2, r3
 800d322:	e020      	b.n	800d366 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d32c:	1ad3      	subs	r3, r2, r3
 800d32e:	2b00      	cmp	r3, #0
 800d330:	dd03      	ble.n	800d33a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2200      	movs	r2, #0
 800d336:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d338:	e014      	b.n	800d364 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d342:	1ad3      	subs	r3, r2, r3
 800d344:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d34c:	d306      	bcc.n	800d35c <tcp_update_rcv_ann_wnd+0x90>
 800d34e:	4b08      	ldr	r3, [pc, #32]	; (800d370 <tcp_update_rcv_ann_wnd+0xa4>)
 800d350:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d354:	4909      	ldr	r1, [pc, #36]	; (800d37c <tcp_update_rcv_ann_wnd+0xb0>)
 800d356:	4808      	ldr	r0, [pc, #32]	; (800d378 <tcp_update_rcv_ann_wnd+0xac>)
 800d358:	f00a fda6 	bl	8017ea8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	b29a      	uxth	r2, r3
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d364:	2300      	movs	r3, #0
  }
}
 800d366:	4618      	mov	r0, r3
 800d368:	3710      	adds	r7, #16
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	0801a744 	.word	0x0801a744
 800d374:	0801a9a0 	.word	0x0801a9a0
 800d378:	0801a788 	.word	0x0801a788
 800d37c:	0801a9c4 	.word	0x0801a9c4

0800d380 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b084      	sub	sp, #16
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	460b      	mov	r3, r1
 800d38a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d107      	bne.n	800d3a2 <tcp_recved+0x22>
 800d392:	4b1f      	ldr	r3, [pc, #124]	; (800d410 <tcp_recved+0x90>)
 800d394:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d398:	491e      	ldr	r1, [pc, #120]	; (800d414 <tcp_recved+0x94>)
 800d39a:	481f      	ldr	r0, [pc, #124]	; (800d418 <tcp_recved+0x98>)
 800d39c:	f00a fd84 	bl	8017ea8 <iprintf>
 800d3a0:	e032      	b.n	800d408 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	7d1b      	ldrb	r3, [r3, #20]
 800d3a6:	2b01      	cmp	r3, #1
 800d3a8:	d106      	bne.n	800d3b8 <tcp_recved+0x38>
 800d3aa:	4b19      	ldr	r3, [pc, #100]	; (800d410 <tcp_recved+0x90>)
 800d3ac:	f240 32d3 	movw	r2, #979	; 0x3d3
 800d3b0:	491a      	ldr	r1, [pc, #104]	; (800d41c <tcp_recved+0x9c>)
 800d3b2:	4819      	ldr	r0, [pc, #100]	; (800d418 <tcp_recved+0x98>)
 800d3b4:	f00a fd78 	bl	8017ea8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d3bc:	887b      	ldrh	r3, [r7, #2]
 800d3be:	4413      	add	r3, r2
 800d3c0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d3c2:	89fb      	ldrh	r3, [r7, #14]
 800d3c4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d3c8:	d804      	bhi.n	800d3d4 <tcp_recved+0x54>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3ce:	89fa      	ldrh	r2, [r7, #14]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d204      	bcs.n	800d3de <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d3da:	851a      	strh	r2, [r3, #40]	; 0x28
 800d3dc:	e002      	b.n	800d3e4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	89fa      	ldrh	r2, [r7, #14]
 800d3e2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f7ff ff71 	bl	800d2cc <tcp_update_rcv_ann_wnd>
 800d3ea:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d3f2:	d309      	bcc.n	800d408 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	8b5b      	ldrh	r3, [r3, #26]
 800d3f8:	f043 0302 	orr.w	r3, r3, #2
 800d3fc:	b29a      	uxth	r2, r3
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f004 fbc4 	bl	8011b90 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d408:	3710      	adds	r7, #16
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	0801a744 	.word	0x0801a744
 800d414:	0801a9e0 	.word	0x0801a9e0
 800d418:	0801a788 	.word	0x0801a788
 800d41c:	0801a9f8 	.word	0x0801a9f8

0800d420 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d420:	b480      	push	{r7}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d426:	2300      	movs	r3, #0
 800d428:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800d42a:	4b1e      	ldr	r3, [pc, #120]	; (800d4a4 <tcp_new_port+0x84>)
 800d42c:	881b      	ldrh	r3, [r3, #0]
 800d42e:	3301      	adds	r3, #1
 800d430:	b29a      	uxth	r2, r3
 800d432:	4b1c      	ldr	r3, [pc, #112]	; (800d4a4 <tcp_new_port+0x84>)
 800d434:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d436:	4b1b      	ldr	r3, [pc, #108]	; (800d4a4 <tcp_new_port+0x84>)
 800d438:	881b      	ldrh	r3, [r3, #0]
 800d43a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d43e:	4293      	cmp	r3, r2
 800d440:	d103      	bne.n	800d44a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d442:	4b18      	ldr	r3, [pc, #96]	; (800d4a4 <tcp_new_port+0x84>)
 800d444:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d448:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d44a:	2300      	movs	r3, #0
 800d44c:	71fb      	strb	r3, [r7, #7]
 800d44e:	e01e      	b.n	800d48e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d450:	79fb      	ldrb	r3, [r7, #7]
 800d452:	4a15      	ldr	r2, [pc, #84]	; (800d4a8 <tcp_new_port+0x88>)
 800d454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	603b      	str	r3, [r7, #0]
 800d45c:	e011      	b.n	800d482 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	8ada      	ldrh	r2, [r3, #22]
 800d462:	4b10      	ldr	r3, [pc, #64]	; (800d4a4 <tcp_new_port+0x84>)
 800d464:	881b      	ldrh	r3, [r3, #0]
 800d466:	429a      	cmp	r2, r3
 800d468:	d108      	bne.n	800d47c <tcp_new_port+0x5c>
        n++;
 800d46a:	88bb      	ldrh	r3, [r7, #4]
 800d46c:	3301      	adds	r3, #1
 800d46e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d470:	88bb      	ldrh	r3, [r7, #4]
 800d472:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d476:	d3d8      	bcc.n	800d42a <tcp_new_port+0xa>
          return 0;
 800d478:	2300      	movs	r3, #0
 800d47a:	e00d      	b.n	800d498 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	603b      	str	r3, [r7, #0]
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d1ea      	bne.n	800d45e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d488:	79fb      	ldrb	r3, [r7, #7]
 800d48a:	3301      	adds	r3, #1
 800d48c:	71fb      	strb	r3, [r7, #7]
 800d48e:	79fb      	ldrb	r3, [r7, #7]
 800d490:	2b03      	cmp	r3, #3
 800d492:	d9dd      	bls.n	800d450 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d494:	4b03      	ldr	r3, [pc, #12]	; (800d4a4 <tcp_new_port+0x84>)
 800d496:	881b      	ldrh	r3, [r3, #0]
}
 800d498:	4618      	mov	r0, r3
 800d49a:	370c      	adds	r7, #12
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr
 800d4a4:	20000010 	.word	0x20000010
 800d4a8:	08026c34 	.word	0x08026c34

0800d4ac <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d4ac:	b5b0      	push	{r4, r5, r7, lr}
 800d4ae:	b090      	sub	sp, #64	; 0x40
 800d4b0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d4b8:	4b94      	ldr	r3, [pc, #592]	; (800d70c <tcp_slowtmr+0x260>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	3301      	adds	r3, #1
 800d4be:	4a93      	ldr	r2, [pc, #588]	; (800d70c <tcp_slowtmr+0x260>)
 800d4c0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d4c2:	4b93      	ldr	r3, [pc, #588]	; (800d710 <tcp_slowtmr+0x264>)
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	b2da      	uxtb	r2, r3
 800d4ca:	4b91      	ldr	r3, [pc, #580]	; (800d710 <tcp_slowtmr+0x264>)
 800d4cc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d4d2:	4b90      	ldr	r3, [pc, #576]	; (800d714 <tcp_slowtmr+0x268>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d4d8:	e29f      	b.n	800da1a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4dc:	7d1b      	ldrb	r3, [r3, #20]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d106      	bne.n	800d4f0 <tcp_slowtmr+0x44>
 800d4e2:	4b8d      	ldr	r3, [pc, #564]	; (800d718 <tcp_slowtmr+0x26c>)
 800d4e4:	f240 42be 	movw	r2, #1214	; 0x4be
 800d4e8:	498c      	ldr	r1, [pc, #560]	; (800d71c <tcp_slowtmr+0x270>)
 800d4ea:	488d      	ldr	r0, [pc, #564]	; (800d720 <tcp_slowtmr+0x274>)
 800d4ec:	f00a fcdc 	bl	8017ea8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f2:	7d1b      	ldrb	r3, [r3, #20]
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d106      	bne.n	800d506 <tcp_slowtmr+0x5a>
 800d4f8:	4b87      	ldr	r3, [pc, #540]	; (800d718 <tcp_slowtmr+0x26c>)
 800d4fa:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d4fe:	4989      	ldr	r1, [pc, #548]	; (800d724 <tcp_slowtmr+0x278>)
 800d500:	4887      	ldr	r0, [pc, #540]	; (800d720 <tcp_slowtmr+0x274>)
 800d502:	f00a fcd1 	bl	8017ea8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d508:	7d1b      	ldrb	r3, [r3, #20]
 800d50a:	2b0a      	cmp	r3, #10
 800d50c:	d106      	bne.n	800d51c <tcp_slowtmr+0x70>
 800d50e:	4b82      	ldr	r3, [pc, #520]	; (800d718 <tcp_slowtmr+0x26c>)
 800d510:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d514:	4984      	ldr	r1, [pc, #528]	; (800d728 <tcp_slowtmr+0x27c>)
 800d516:	4882      	ldr	r0, [pc, #520]	; (800d720 <tcp_slowtmr+0x274>)
 800d518:	f00a fcc6 	bl	8017ea8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d51e:	7f9a      	ldrb	r2, [r3, #30]
 800d520:	4b7b      	ldr	r3, [pc, #492]	; (800d710 <tcp_slowtmr+0x264>)
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	429a      	cmp	r2, r3
 800d526:	d105      	bne.n	800d534 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d52a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d52e:	68db      	ldr	r3, [r3, #12]
 800d530:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d532:	e272      	b.n	800da1a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d534:	4b76      	ldr	r3, [pc, #472]	; (800d710 <tcp_slowtmr+0x264>)
 800d536:	781a      	ldrb	r2, [r3, #0]
 800d538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d53c:	2300      	movs	r3, #0
 800d53e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d542:	2300      	movs	r3, #0
 800d544:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d54a:	7d1b      	ldrb	r3, [r3, #20]
 800d54c:	2b02      	cmp	r3, #2
 800d54e:	d10a      	bne.n	800d566 <tcp_slowtmr+0xba>
 800d550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d552:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d556:	2b05      	cmp	r3, #5
 800d558:	d905      	bls.n	800d566 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d55a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d55e:	3301      	adds	r3, #1
 800d560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d564:	e11e      	b.n	800d7a4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d568:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d56c:	2b0b      	cmp	r3, #11
 800d56e:	d905      	bls.n	800d57c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d574:	3301      	adds	r3, #1
 800d576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d57a:	e113      	b.n	800d7a4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d57e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d582:	2b00      	cmp	r3, #0
 800d584:	d075      	beq.n	800d672 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d006      	beq.n	800d59c <tcp_slowtmr+0xf0>
 800d58e:	4b62      	ldr	r3, [pc, #392]	; (800d718 <tcp_slowtmr+0x26c>)
 800d590:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d594:	4965      	ldr	r1, [pc, #404]	; (800d72c <tcp_slowtmr+0x280>)
 800d596:	4862      	ldr	r0, [pc, #392]	; (800d720 <tcp_slowtmr+0x274>)
 800d598:	f00a fc86 	bl	8017ea8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d59e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d106      	bne.n	800d5b2 <tcp_slowtmr+0x106>
 800d5a4:	4b5c      	ldr	r3, [pc, #368]	; (800d718 <tcp_slowtmr+0x26c>)
 800d5a6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d5aa:	4961      	ldr	r1, [pc, #388]	; (800d730 <tcp_slowtmr+0x284>)
 800d5ac:	485c      	ldr	r0, [pc, #368]	; (800d720 <tcp_slowtmr+0x274>)
 800d5ae:	f00a fc7b 	bl	8017ea8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d5b8:	2b0b      	cmp	r3, #11
 800d5ba:	d905      	bls.n	800d5c8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d5bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d5c6:	e0ed      	b.n	800d7a4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d5ce:	3b01      	subs	r3, #1
 800d5d0:	4a58      	ldr	r2, [pc, #352]	; (800d734 <tcp_slowtmr+0x288>)
 800d5d2:	5cd3      	ldrb	r3, [r2, r3]
 800d5d4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d5dc:	7c7a      	ldrb	r2, [r7, #17]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d907      	bls.n	800d5f2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d5e8:	3301      	adds	r3, #1
 800d5ea:	b2da      	uxtb	r2, r3
 800d5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d5f8:	7c7a      	ldrb	r2, [r7, #17]
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	f200 80d2 	bhi.w	800d7a4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d600:	2301      	movs	r3, #1
 800d602:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d606:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d108      	bne.n	800d620 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d60e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d610:	f005 f976 	bl	8012900 <tcp_zero_window_probe>
 800d614:	4603      	mov	r3, r0
 800d616:	2b00      	cmp	r3, #0
 800d618:	d014      	beq.n	800d644 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d61a:	2300      	movs	r3, #0
 800d61c:	623b      	str	r3, [r7, #32]
 800d61e:	e011      	b.n	800d644 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d622:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d626:	4619      	mov	r1, r3
 800d628:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d62a:	f004 f82b 	bl	8011684 <tcp_split_unsent_seg>
 800d62e:	4603      	mov	r3, r0
 800d630:	2b00      	cmp	r3, #0
 800d632:	d107      	bne.n	800d644 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d634:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d636:	f004 faab 	bl	8011b90 <tcp_output>
 800d63a:	4603      	mov	r3, r0
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d101      	bne.n	800d644 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d640:	2300      	movs	r3, #0
 800d642:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d644:	6a3b      	ldr	r3, [r7, #32]
 800d646:	2b00      	cmp	r3, #0
 800d648:	f000 80ac 	beq.w	800d7a4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d64e:	2200      	movs	r2, #0
 800d650:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d656:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d65a:	2b06      	cmp	r3, #6
 800d65c:	f200 80a2 	bhi.w	800d7a4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d662:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d666:	3301      	adds	r3, #1
 800d668:	b2da      	uxtb	r2, r3
 800d66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d66c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d670:	e098      	b.n	800d7a4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d674:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d678:	2b00      	cmp	r3, #0
 800d67a:	db0f      	blt.n	800d69c <tcp_slowtmr+0x1f0>
 800d67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d682:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d686:	4293      	cmp	r3, r2
 800d688:	d008      	beq.n	800d69c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d690:	b29b      	uxth	r3, r3
 800d692:	3301      	adds	r3, #1
 800d694:	b29b      	uxth	r3, r3
 800d696:	b21a      	sxth	r2, r3
 800d698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	db7b      	blt.n	800d7a4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d6ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6ae:	f004 fd67 	bl	8012180 <tcp_rexmit_rto_prepare>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d007      	beq.n	800d6c8 <tcp_slowtmr+0x21c>
 800d6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d171      	bne.n	800d7a4 <tcp_slowtmr+0x2f8>
 800d6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d06d      	beq.n	800d7a4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ca:	7d1b      	ldrb	r3, [r3, #20]
 800d6cc:	2b02      	cmp	r3, #2
 800d6ce:	d03a      	beq.n	800d746 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d6d6:	2b0c      	cmp	r3, #12
 800d6d8:	bf28      	it	cs
 800d6da:	230c      	movcs	r3, #12
 800d6dc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d6e4:	10db      	asrs	r3, r3, #3
 800d6e6:	b21b      	sxth	r3, r3
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d6f0:	4413      	add	r3, r2
 800d6f2:	7efa      	ldrb	r2, [r7, #27]
 800d6f4:	4910      	ldr	r1, [pc, #64]	; (800d738 <tcp_slowtmr+0x28c>)
 800d6f6:	5c8a      	ldrb	r2, [r1, r2]
 800d6f8:	4093      	lsls	r3, r2
 800d6fa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d702:	4293      	cmp	r3, r2
 800d704:	dc1a      	bgt.n	800d73c <tcp_slowtmr+0x290>
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	b21a      	sxth	r2, r3
 800d70a:	e019      	b.n	800d740 <tcp_slowtmr+0x294>
 800d70c:	2000f518 	.word	0x2000f518
 800d710:	20008a8e 	.word	0x20008a8e
 800d714:	2000f514 	.word	0x2000f514
 800d718:	0801a744 	.word	0x0801a744
 800d71c:	0801aa88 	.word	0x0801aa88
 800d720:	0801a788 	.word	0x0801a788
 800d724:	0801aab4 	.word	0x0801aab4
 800d728:	0801aae0 	.word	0x0801aae0
 800d72c:	0801ab10 	.word	0x0801ab10
 800d730:	0801ab44 	.word	0x0801ab44
 800d734:	08026c2c 	.word	0x08026c2c
 800d738:	08026c1c 	.word	0x08026c1c
 800d73c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d742:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d748:	2200      	movs	r2, #0
 800d74a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d754:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d758:	4293      	cmp	r3, r2
 800d75a:	bf28      	it	cs
 800d75c:	4613      	movcs	r3, r2
 800d75e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d760:	8a7b      	ldrh	r3, [r7, #18]
 800d762:	085b      	lsrs	r3, r3, #1
 800d764:	b29a      	uxth	r2, r3
 800d766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d768:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d76e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d774:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d776:	005b      	lsls	r3, r3, #1
 800d778:	b29b      	uxth	r3, r3
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d206      	bcs.n	800d78c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d780:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d782:	005b      	lsls	r3, r3, #1
 800d784:	b29a      	uxth	r2, r3
 800d786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d788:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d78e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d792:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d798:	2200      	movs	r2, #0
 800d79a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d79e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7a0:	f004 fd5e 	bl	8012260 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a6:	7d1b      	ldrb	r3, [r3, #20]
 800d7a8:	2b06      	cmp	r3, #6
 800d7aa:	d111      	bne.n	800d7d0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ae:	8b5b      	ldrh	r3, [r3, #26]
 800d7b0:	f003 0310 	and.w	r3, r3, #16
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d00b      	beq.n	800d7d0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d7b8:	4b9d      	ldr	r3, [pc, #628]	; (800da30 <tcp_slowtmr+0x584>)
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7be:	6a1b      	ldr	r3, [r3, #32]
 800d7c0:	1ad3      	subs	r3, r2, r3
 800d7c2:	2b28      	cmp	r3, #40	; 0x28
 800d7c4:	d904      	bls.n	800d7d0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d7c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d2:	7a5b      	ldrb	r3, [r3, #9]
 800d7d4:	f003 0308 	and.w	r3, r3, #8
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d04c      	beq.n	800d876 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800d7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7de:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d7e0:	2b04      	cmp	r3, #4
 800d7e2:	d003      	beq.n	800d7ec <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d7e8:	2b07      	cmp	r3, #7
 800d7ea:	d144      	bne.n	800d876 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d7ec:	4b90      	ldr	r3, [pc, #576]	; (800da30 <tcp_slowtmr+0x584>)
 800d7ee:	681a      	ldr	r2, [r3, #0]
 800d7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f2:	6a1b      	ldr	r3, [r3, #32]
 800d7f4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d7fc:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800d800:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800d804:	498b      	ldr	r1, [pc, #556]	; (800da34 <tcp_slowtmr+0x588>)
 800d806:	fba1 1303 	umull	r1, r3, r1, r3
 800d80a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d90a      	bls.n	800d826 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d814:	3301      	adds	r3, #1
 800d816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d81a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d81e:	3301      	adds	r3, #1
 800d820:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d824:	e027      	b.n	800d876 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d826:	4b82      	ldr	r3, [pc, #520]	; (800da30 <tcp_slowtmr+0x584>)
 800d828:	681a      	ldr	r2, [r3, #0]
 800d82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d82c:	6a1b      	ldr	r3, [r3, #32]
 800d82e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d832:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d838:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d83c:	4618      	mov	r0, r3
 800d83e:	4b7e      	ldr	r3, [pc, #504]	; (800da38 <tcp_slowtmr+0x58c>)
 800d840:	fb03 f300 	mul.w	r3, r3, r0
 800d844:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d846:	497b      	ldr	r1, [pc, #492]	; (800da34 <tcp_slowtmr+0x588>)
 800d848:	fba1 1303 	umull	r1, r3, r1, r3
 800d84c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d84e:	429a      	cmp	r2, r3
 800d850:	d911      	bls.n	800d876 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800d852:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d854:	f005 f814 	bl	8012880 <tcp_keepalive>
 800d858:	4603      	mov	r3, r0
 800d85a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d85e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d862:	2b00      	cmp	r3, #0
 800d864:	d107      	bne.n	800d876 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800d866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d868:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d86c:	3301      	adds	r3, #1
 800d86e:	b2da      	uxtb	r2, r3
 800d870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d872:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d011      	beq.n	800d8a2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d87e:	4b6c      	ldr	r3, [pc, #432]	; (800da30 <tcp_slowtmr+0x584>)
 800d880:	681a      	ldr	r2, [r3, #0]
 800d882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d884:	6a1b      	ldr	r3, [r3, #32]
 800d886:	1ad2      	subs	r2, r2, r3
 800d888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d88a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d88e:	4619      	mov	r1, r3
 800d890:	460b      	mov	r3, r1
 800d892:	005b      	lsls	r3, r3, #1
 800d894:	440b      	add	r3, r1
 800d896:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d898:	429a      	cmp	r2, r3
 800d89a:	d302      	bcc.n	800d8a2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d89c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d89e:	f000 fec3 	bl	800e628 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a4:	7d1b      	ldrb	r3, [r3, #20]
 800d8a6:	2b03      	cmp	r3, #3
 800d8a8:	d10b      	bne.n	800d8c2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d8aa:	4b61      	ldr	r3, [pc, #388]	; (800da30 <tcp_slowtmr+0x584>)
 800d8ac:	681a      	ldr	r2, [r3, #0]
 800d8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b0:	6a1b      	ldr	r3, [r3, #32]
 800d8b2:	1ad3      	subs	r3, r2, r3
 800d8b4:	2b28      	cmp	r3, #40	; 0x28
 800d8b6:	d904      	bls.n	800d8c2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d8b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8bc:	3301      	adds	r3, #1
 800d8be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c4:	7d1b      	ldrb	r3, [r3, #20]
 800d8c6:	2b09      	cmp	r3, #9
 800d8c8:	d10b      	bne.n	800d8e2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d8ca:	4b59      	ldr	r3, [pc, #356]	; (800da30 <tcp_slowtmr+0x584>)
 800d8cc:	681a      	ldr	r2, [r3, #0]
 800d8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d0:	6a1b      	ldr	r3, [r3, #32]
 800d8d2:	1ad3      	subs	r3, r2, r3
 800d8d4:	2bf0      	cmp	r3, #240	; 0xf0
 800d8d6:	d904      	bls.n	800d8e2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800d8d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8dc:	3301      	adds	r3, #1
 800d8de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d8e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d060      	beq.n	800d9ac <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8f0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d8f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8f4:	f000 fce4 	bl	800e2c0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d010      	beq.n	800d920 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d8fe:	4b4f      	ldr	r3, [pc, #316]	; (800da3c <tcp_slowtmr+0x590>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d904:	429a      	cmp	r2, r3
 800d906:	d106      	bne.n	800d916 <tcp_slowtmr+0x46a>
 800d908:	4b4d      	ldr	r3, [pc, #308]	; (800da40 <tcp_slowtmr+0x594>)
 800d90a:	f240 526d 	movw	r2, #1389	; 0x56d
 800d90e:	494d      	ldr	r1, [pc, #308]	; (800da44 <tcp_slowtmr+0x598>)
 800d910:	484d      	ldr	r0, [pc, #308]	; (800da48 <tcp_slowtmr+0x59c>)
 800d912:	f00a fac9 	bl	8017ea8 <iprintf>
        prev->next = pcb->next;
 800d916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d918:	68da      	ldr	r2, [r3, #12]
 800d91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91c:	60da      	str	r2, [r3, #12]
 800d91e:	e00f      	b.n	800d940 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d920:	4b46      	ldr	r3, [pc, #280]	; (800da3c <tcp_slowtmr+0x590>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d926:	429a      	cmp	r2, r3
 800d928:	d006      	beq.n	800d938 <tcp_slowtmr+0x48c>
 800d92a:	4b45      	ldr	r3, [pc, #276]	; (800da40 <tcp_slowtmr+0x594>)
 800d92c:	f240 5271 	movw	r2, #1393	; 0x571
 800d930:	4946      	ldr	r1, [pc, #280]	; (800da4c <tcp_slowtmr+0x5a0>)
 800d932:	4845      	ldr	r0, [pc, #276]	; (800da48 <tcp_slowtmr+0x59c>)
 800d934:	f00a fab8 	bl	8017ea8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	4a3f      	ldr	r2, [pc, #252]	; (800da3c <tcp_slowtmr+0x590>)
 800d93e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d940:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d944:	2b00      	cmp	r3, #0
 800d946:	d013      	beq.n	800d970 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d950:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d954:	3304      	adds	r3, #4
 800d956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d958:	8ad2      	ldrh	r2, [r2, #22]
 800d95a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d95c:	8b09      	ldrh	r1, [r1, #24]
 800d95e:	9102      	str	r1, [sp, #8]
 800d960:	9201      	str	r2, [sp, #4]
 800d962:	9300      	str	r3, [sp, #0]
 800d964:	462b      	mov	r3, r5
 800d966:	4622      	mov	r2, r4
 800d968:	4601      	mov	r1, r0
 800d96a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d96c:	f004 fed4 	bl	8012718 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d972:	691b      	ldr	r3, [r3, #16]
 800d974:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d978:	7d1b      	ldrb	r3, [r3, #20]
 800d97a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d97e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d982:	68db      	ldr	r3, [r3, #12]
 800d984:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d986:	6838      	ldr	r0, [r7, #0]
 800d988:	f7fe ffe6 	bl	800c958 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d98c:	4b30      	ldr	r3, [pc, #192]	; (800da50 <tcp_slowtmr+0x5a4>)
 800d98e:	2200      	movs	r2, #0
 800d990:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d004      	beq.n	800d9a2 <tcp_slowtmr+0x4f6>
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	f06f 010c 	mvn.w	r1, #12
 800d99e:	68b8      	ldr	r0, [r7, #8]
 800d9a0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d9a2:	4b2b      	ldr	r3, [pc, #172]	; (800da50 <tcp_slowtmr+0x5a4>)
 800d9a4:	781b      	ldrb	r3, [r3, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d037      	beq.n	800da1a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d9aa:	e590      	b.n	800d4ce <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b2:	68db      	ldr	r3, [r3, #12]
 800d9b4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b8:	7f1b      	ldrb	r3, [r3, #28]
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	b2da      	uxtb	r2, r3
 800d9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c4:	7f1a      	ldrb	r2, [r3, #28]
 800d9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c8:	7f5b      	ldrb	r3, [r3, #29]
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	d325      	bcc.n	800da1a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d9d4:	4b1e      	ldr	r3, [pc, #120]	; (800da50 <tcp_slowtmr+0x5a4>)
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00b      	beq.n	800d9fc <tcp_slowtmr+0x550>
 800d9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9ec:	6912      	ldr	r2, [r2, #16]
 800d9ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9f0:	4610      	mov	r0, r2
 800d9f2:	4798      	blx	r3
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d9fa:	e002      	b.n	800da02 <tcp_slowtmr+0x556>
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800da02:	4b13      	ldr	r3, [pc, #76]	; (800da50 <tcp_slowtmr+0x5a4>)
 800da04:	781b      	ldrb	r3, [r3, #0]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d000      	beq.n	800da0c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800da0a:	e560      	b.n	800d4ce <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800da0c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800da10:	2b00      	cmp	r3, #0
 800da12:	d102      	bne.n	800da1a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800da14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da16:	f004 f8bb 	bl	8011b90 <tcp_output>
  while (pcb != NULL) {
 800da1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	f47f ad5c 	bne.w	800d4da <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800da22:	2300      	movs	r3, #0
 800da24:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800da26:	4b0b      	ldr	r3, [pc, #44]	; (800da54 <tcp_slowtmr+0x5a8>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800da2c:	e067      	b.n	800dafe <tcp_slowtmr+0x652>
 800da2e:	bf00      	nop
 800da30:	2000f518 	.word	0x2000f518
 800da34:	10624dd3 	.word	0x10624dd3
 800da38:	000124f8 	.word	0x000124f8
 800da3c:	2000f514 	.word	0x2000f514
 800da40:	0801a744 	.word	0x0801a744
 800da44:	0801ab7c 	.word	0x0801ab7c
 800da48:	0801a788 	.word	0x0801a788
 800da4c:	0801aba8 	.word	0x0801aba8
 800da50:	2000f510 	.word	0x2000f510
 800da54:	2000f524 	.word	0x2000f524
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800da58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5a:	7d1b      	ldrb	r3, [r3, #20]
 800da5c:	2b0a      	cmp	r3, #10
 800da5e:	d006      	beq.n	800da6e <tcp_slowtmr+0x5c2>
 800da60:	4b2a      	ldr	r3, [pc, #168]	; (800db0c <tcp_slowtmr+0x660>)
 800da62:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800da66:	492a      	ldr	r1, [pc, #168]	; (800db10 <tcp_slowtmr+0x664>)
 800da68:	482a      	ldr	r0, [pc, #168]	; (800db14 <tcp_slowtmr+0x668>)
 800da6a:	f00a fa1d 	bl	8017ea8 <iprintf>
    pcb_remove = 0;
 800da6e:	2300      	movs	r3, #0
 800da70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800da74:	4b28      	ldr	r3, [pc, #160]	; (800db18 <tcp_slowtmr+0x66c>)
 800da76:	681a      	ldr	r2, [r3, #0]
 800da78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da7a:	6a1b      	ldr	r3, [r3, #32]
 800da7c:	1ad3      	subs	r3, r2, r3
 800da7e:	2bf0      	cmp	r3, #240	; 0xf0
 800da80:	d904      	bls.n	800da8c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800da82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da86:	3301      	adds	r3, #1
 800da88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800da8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da90:	2b00      	cmp	r3, #0
 800da92:	d02f      	beq.n	800daf4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800da94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da96:	f000 fc13 	bl	800e2c0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800da9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d010      	beq.n	800dac2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800daa0:	4b1e      	ldr	r3, [pc, #120]	; (800db1c <tcp_slowtmr+0x670>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800daa6:	429a      	cmp	r2, r3
 800daa8:	d106      	bne.n	800dab8 <tcp_slowtmr+0x60c>
 800daaa:	4b18      	ldr	r3, [pc, #96]	; (800db0c <tcp_slowtmr+0x660>)
 800daac:	f240 52af 	movw	r2, #1455	; 0x5af
 800dab0:	491b      	ldr	r1, [pc, #108]	; (800db20 <tcp_slowtmr+0x674>)
 800dab2:	4818      	ldr	r0, [pc, #96]	; (800db14 <tcp_slowtmr+0x668>)
 800dab4:	f00a f9f8 	bl	8017ea8 <iprintf>
        prev->next = pcb->next;
 800dab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daba:	68da      	ldr	r2, [r3, #12]
 800dabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dabe:	60da      	str	r2, [r3, #12]
 800dac0:	e00f      	b.n	800dae2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800dac2:	4b16      	ldr	r3, [pc, #88]	; (800db1c <tcp_slowtmr+0x670>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dac8:	429a      	cmp	r2, r3
 800daca:	d006      	beq.n	800dada <tcp_slowtmr+0x62e>
 800dacc:	4b0f      	ldr	r3, [pc, #60]	; (800db0c <tcp_slowtmr+0x660>)
 800dace:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800dad2:	4914      	ldr	r1, [pc, #80]	; (800db24 <tcp_slowtmr+0x678>)
 800dad4:	480f      	ldr	r0, [pc, #60]	; (800db14 <tcp_slowtmr+0x668>)
 800dad6:	f00a f9e7 	bl	8017ea8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800dada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dadc:	68db      	ldr	r3, [r3, #12]
 800dade:	4a0f      	ldr	r2, [pc, #60]	; (800db1c <tcp_slowtmr+0x670>)
 800dae0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800dae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800dae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800daec:	69f8      	ldr	r0, [r7, #28]
 800daee:	f7fe ff33 	bl	800c958 <tcp_free>
 800daf2:	e004      	b.n	800dafe <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800daf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800daf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafa:	68db      	ldr	r3, [r3, #12]
 800dafc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800dafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db00:	2b00      	cmp	r3, #0
 800db02:	d1a9      	bne.n	800da58 <tcp_slowtmr+0x5ac>
    }
  }
}
 800db04:	bf00      	nop
 800db06:	3730      	adds	r7, #48	; 0x30
 800db08:	46bd      	mov	sp, r7
 800db0a:	bdb0      	pop	{r4, r5, r7, pc}
 800db0c:	0801a744 	.word	0x0801a744
 800db10:	0801abd4 	.word	0x0801abd4
 800db14:	0801a788 	.word	0x0801a788
 800db18:	2000f518 	.word	0x2000f518
 800db1c:	2000f524 	.word	0x2000f524
 800db20:	0801ac04 	.word	0x0801ac04
 800db24:	0801ac2c 	.word	0x0801ac2c

0800db28 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800db2e:	4b2d      	ldr	r3, [pc, #180]	; (800dbe4 <tcp_fasttmr+0xbc>)
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	3301      	adds	r3, #1
 800db34:	b2da      	uxtb	r2, r3
 800db36:	4b2b      	ldr	r3, [pc, #172]	; (800dbe4 <tcp_fasttmr+0xbc>)
 800db38:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800db3a:	4b2b      	ldr	r3, [pc, #172]	; (800dbe8 <tcp_fasttmr+0xc0>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800db40:	e048      	b.n	800dbd4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	7f9a      	ldrb	r2, [r3, #30]
 800db46:	4b27      	ldr	r3, [pc, #156]	; (800dbe4 <tcp_fasttmr+0xbc>)
 800db48:	781b      	ldrb	r3, [r3, #0]
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d03f      	beq.n	800dbce <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800db4e:	4b25      	ldr	r3, [pc, #148]	; (800dbe4 <tcp_fasttmr+0xbc>)
 800db50:	781a      	ldrb	r2, [r3, #0]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	8b5b      	ldrh	r3, [r3, #26]
 800db5a:	f003 0301 	and.w	r3, r3, #1
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d010      	beq.n	800db84 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	8b5b      	ldrh	r3, [r3, #26]
 800db66:	f043 0302 	orr.w	r3, r3, #2
 800db6a:	b29a      	uxth	r2, r3
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f004 f80d 	bl	8011b90 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	8b5b      	ldrh	r3, [r3, #26]
 800db7a:	f023 0303 	bic.w	r3, r3, #3
 800db7e:	b29a      	uxth	r2, r3
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	8b5b      	ldrh	r3, [r3, #26]
 800db88:	f003 0308 	and.w	r3, r3, #8
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d009      	beq.n	800dba4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	8b5b      	ldrh	r3, [r3, #26]
 800db94:	f023 0308 	bic.w	r3, r3, #8
 800db98:	b29a      	uxth	r2, r3
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f7ff f86a 	bl	800cc78 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	68db      	ldr	r3, [r3, #12]
 800dba8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d00a      	beq.n	800dbc8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800dbb2:	4b0e      	ldr	r3, [pc, #56]	; (800dbec <tcp_fasttmr+0xc4>)
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f000 f819 	bl	800dbf0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800dbbe:	4b0b      	ldr	r3, [pc, #44]	; (800dbec <tcp_fasttmr+0xc4>)
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d000      	beq.n	800dbc8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800dbc6:	e7b8      	b.n	800db3a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	607b      	str	r3, [r7, #4]
 800dbcc:	e002      	b.n	800dbd4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	68db      	ldr	r3, [r3, #12]
 800dbd2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d1b3      	bne.n	800db42 <tcp_fasttmr+0x1a>
    }
  }
}
 800dbda:	bf00      	nop
 800dbdc:	3708      	adds	r7, #8
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}
 800dbe2:	bf00      	nop
 800dbe4:	20008a8e 	.word	0x20008a8e
 800dbe8:	2000f514 	.word	0x2000f514
 800dbec:	2000f510 	.word	0x2000f510

0800dbf0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800dbf0:	b590      	push	{r4, r7, lr}
 800dbf2:	b085      	sub	sp, #20
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d109      	bne.n	800dc12 <tcp_process_refused_data+0x22>
 800dbfe:	4b37      	ldr	r3, [pc, #220]	; (800dcdc <tcp_process_refused_data+0xec>)
 800dc00:	f240 6209 	movw	r2, #1545	; 0x609
 800dc04:	4936      	ldr	r1, [pc, #216]	; (800dce0 <tcp_process_refused_data+0xf0>)
 800dc06:	4837      	ldr	r0, [pc, #220]	; (800dce4 <tcp_process_refused_data+0xf4>)
 800dc08:	f00a f94e 	bl	8017ea8 <iprintf>
 800dc0c:	f06f 030f 	mvn.w	r3, #15
 800dc10:	e060      	b.n	800dcd4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc16:	7b5b      	ldrb	r3, [r3, #13]
 800dc18:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc1e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2200      	movs	r2, #0
 800dc24:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d00b      	beq.n	800dc48 <tcp_process_refused_data+0x58>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6918      	ldr	r0, [r3, #16]
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	68ba      	ldr	r2, [r7, #8]
 800dc3e:	6879      	ldr	r1, [r7, #4]
 800dc40:	47a0      	blx	r4
 800dc42:	4603      	mov	r3, r0
 800dc44:	73fb      	strb	r3, [r7, #15]
 800dc46:	e007      	b.n	800dc58 <tcp_process_refused_data+0x68>
 800dc48:	2300      	movs	r3, #0
 800dc4a:	68ba      	ldr	r2, [r7, #8]
 800dc4c:	6879      	ldr	r1, [r7, #4]
 800dc4e:	2000      	movs	r0, #0
 800dc50:	f000 f8c0 	bl	800ddd4 <tcp_recv_null>
 800dc54:	4603      	mov	r3, r0
 800dc56:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800dc58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d12a      	bne.n	800dcb6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800dc60:	7bbb      	ldrb	r3, [r7, #14]
 800dc62:	f003 0320 	and.w	r3, r3, #32
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d033      	beq.n	800dcd2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc6e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dc72:	d005      	beq.n	800dc80 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc78:	3301      	adds	r3, #1
 800dc7a:	b29a      	uxth	r2, r3
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d00b      	beq.n	800dca2 <tcp_process_refused_data+0xb2>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6918      	ldr	r0, [r3, #16]
 800dc94:	2300      	movs	r3, #0
 800dc96:	2200      	movs	r2, #0
 800dc98:	6879      	ldr	r1, [r7, #4]
 800dc9a:	47a0      	blx	r4
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	73fb      	strb	r3, [r7, #15]
 800dca0:	e001      	b.n	800dca6 <tcp_process_refused_data+0xb6>
 800dca2:	2300      	movs	r3, #0
 800dca4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800dca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcaa:	f113 0f0d 	cmn.w	r3, #13
 800dcae:	d110      	bne.n	800dcd2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800dcb0:	f06f 030c 	mvn.w	r3, #12
 800dcb4:	e00e      	b.n	800dcd4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800dcb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcba:	f113 0f0d 	cmn.w	r3, #13
 800dcbe:	d102      	bne.n	800dcc6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800dcc0:	f06f 030c 	mvn.w	r3, #12
 800dcc4:	e006      	b.n	800dcd4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	68ba      	ldr	r2, [r7, #8]
 800dcca:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800dccc:	f06f 0304 	mvn.w	r3, #4
 800dcd0:	e000      	b.n	800dcd4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800dcd2:	2300      	movs	r3, #0
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3714      	adds	r7, #20
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd90      	pop	{r4, r7, pc}
 800dcdc:	0801a744 	.word	0x0801a744
 800dce0:	0801ac54 	.word	0x0801ac54
 800dce4:	0801a788 	.word	0x0801a788

0800dce8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800dcf0:	e007      	b.n	800dd02 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f000 f809 	bl	800dd10 <tcp_seg_free>
    seg = next;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d1f4      	bne.n	800dcf2 <tcp_segs_free+0xa>
  }
}
 800dd08:	bf00      	nop
 800dd0a:	3710      	adds	r7, #16
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}

0800dd10 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b082      	sub	sp, #8
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d00c      	beq.n	800dd38 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	685b      	ldr	r3, [r3, #4]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d004      	beq.n	800dd30 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	685b      	ldr	r3, [r3, #4]
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f7fe fb58 	bl	800c3e0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800dd30:	6879      	ldr	r1, [r7, #4]
 800dd32:	2003      	movs	r0, #3
 800dd34:	f7fd fca8 	bl	800b688 <memp_free>
  }
}
 800dd38:	bf00      	nop
 800dd3a:	3708      	adds	r7, #8
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}

0800dd40 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b082      	sub	sp, #8
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	460b      	mov	r3, r1
 800dd4a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d107      	bne.n	800dd62 <tcp_setprio+0x22>
 800dd52:	4b07      	ldr	r3, [pc, #28]	; (800dd70 <tcp_setprio+0x30>)
 800dd54:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800dd58:	4906      	ldr	r1, [pc, #24]	; (800dd74 <tcp_setprio+0x34>)
 800dd5a:	4807      	ldr	r0, [pc, #28]	; (800dd78 <tcp_setprio+0x38>)
 800dd5c:	f00a f8a4 	bl	8017ea8 <iprintf>
 800dd60:	e002      	b.n	800dd68 <tcp_setprio+0x28>

  pcb->prio = prio;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	78fa      	ldrb	r2, [r7, #3]
 800dd66:	755a      	strb	r2, [r3, #21]
}
 800dd68:	3708      	adds	r7, #8
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	0801a744 	.word	0x0801a744
 800dd74:	0801ac7c 	.word	0x0801ac7c
 800dd78:	0801a788 	.word	0x0801a788

0800dd7c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d106      	bne.n	800dd98 <tcp_seg_copy+0x1c>
 800dd8a:	4b0f      	ldr	r3, [pc, #60]	; (800ddc8 <tcp_seg_copy+0x4c>)
 800dd8c:	f240 6282 	movw	r2, #1666	; 0x682
 800dd90:	490e      	ldr	r1, [pc, #56]	; (800ddcc <tcp_seg_copy+0x50>)
 800dd92:	480f      	ldr	r0, [pc, #60]	; (800ddd0 <tcp_seg_copy+0x54>)
 800dd94:	f00a f888 	bl	8017ea8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800dd98:	2003      	movs	r0, #3
 800dd9a:	f7fd fc23 	bl	800b5e4 <memp_malloc>
 800dd9e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d101      	bne.n	800ddaa <tcp_seg_copy+0x2e>
    return NULL;
 800dda6:	2300      	movs	r3, #0
 800dda8:	e00a      	b.n	800ddc0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ddaa:	2210      	movs	r2, #16
 800ddac:	6879      	ldr	r1, [r7, #4]
 800ddae:	68f8      	ldr	r0, [r7, #12]
 800ddb0:	f00a f867 	bl	8017e82 <memcpy>
  pbuf_ref(cseg->p);
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	685b      	ldr	r3, [r3, #4]
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f7fe fbb7 	bl	800c52c <pbuf_ref>
  return cseg;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3710      	adds	r7, #16
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}
 800ddc8:	0801a744 	.word	0x0801a744
 800ddcc:	0801ac98 	.word	0x0801ac98
 800ddd0:	0801a788 	.word	0x0801a788

0800ddd4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b084      	sub	sp, #16
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	60f8      	str	r0, [r7, #12]
 800dddc:	60b9      	str	r1, [r7, #8]
 800ddde:	607a      	str	r2, [r7, #4]
 800dde0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d109      	bne.n	800ddfc <tcp_recv_null+0x28>
 800dde8:	4b12      	ldr	r3, [pc, #72]	; (800de34 <tcp_recv_null+0x60>)
 800ddea:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ddee:	4912      	ldr	r1, [pc, #72]	; (800de38 <tcp_recv_null+0x64>)
 800ddf0:	4812      	ldr	r0, [pc, #72]	; (800de3c <tcp_recv_null+0x68>)
 800ddf2:	f00a f859 	bl	8017ea8 <iprintf>
 800ddf6:	f06f 030f 	mvn.w	r3, #15
 800ddfa:	e016      	b.n	800de2a <tcp_recv_null+0x56>

  if (p != NULL) {
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d009      	beq.n	800de16 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	891b      	ldrh	r3, [r3, #8]
 800de06:	4619      	mov	r1, r3
 800de08:	68b8      	ldr	r0, [r7, #8]
 800de0a:	f7ff fab9 	bl	800d380 <tcp_recved>
    pbuf_free(p);
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f7fe fae6 	bl	800c3e0 <pbuf_free>
 800de14:	e008      	b.n	800de28 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800de16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d104      	bne.n	800de28 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800de1e:	68b8      	ldr	r0, [r7, #8]
 800de20:	f7fe ff90 	bl	800cd44 <tcp_close>
 800de24:	4603      	mov	r3, r0
 800de26:	e000      	b.n	800de2a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800de28:	2300      	movs	r3, #0
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3710      	adds	r7, #16
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}
 800de32:	bf00      	nop
 800de34:	0801a744 	.word	0x0801a744
 800de38:	0801acb4 	.word	0x0801acb4
 800de3c:	0801a788 	.word	0x0801a788

0800de40 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b086      	sub	sp, #24
 800de44:	af00      	add	r7, sp, #0
 800de46:	4603      	mov	r3, r0
 800de48:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800de4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	db01      	blt.n	800de56 <tcp_kill_prio+0x16>
 800de52:	79fb      	ldrb	r3, [r7, #7]
 800de54:	e000      	b.n	800de58 <tcp_kill_prio+0x18>
 800de56:	237f      	movs	r3, #127	; 0x7f
 800de58:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800de5a:	7afb      	ldrb	r3, [r7, #11]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d034      	beq.n	800deca <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800de60:	7afb      	ldrb	r3, [r7, #11]
 800de62:	3b01      	subs	r3, #1
 800de64:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800de66:	2300      	movs	r3, #0
 800de68:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800de6a:	2300      	movs	r3, #0
 800de6c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800de6e:	4b19      	ldr	r3, [pc, #100]	; (800ded4 <tcp_kill_prio+0x94>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	617b      	str	r3, [r7, #20]
 800de74:	e01f      	b.n	800deb6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	7d5b      	ldrb	r3, [r3, #21]
 800de7a:	7afa      	ldrb	r2, [r7, #11]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d80c      	bhi.n	800de9a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800de84:	7afa      	ldrb	r2, [r7, #11]
 800de86:	429a      	cmp	r2, r3
 800de88:	d112      	bne.n	800deb0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800de8a:	4b13      	ldr	r3, [pc, #76]	; (800ded8 <tcp_kill_prio+0x98>)
 800de8c:	681a      	ldr	r2, [r3, #0]
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	6a1b      	ldr	r3, [r3, #32]
 800de92:	1ad3      	subs	r3, r2, r3
 800de94:	68fa      	ldr	r2, [r7, #12]
 800de96:	429a      	cmp	r2, r3
 800de98:	d80a      	bhi.n	800deb0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800de9a:	4b0f      	ldr	r3, [pc, #60]	; (800ded8 <tcp_kill_prio+0x98>)
 800de9c:	681a      	ldr	r2, [r3, #0]
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	6a1b      	ldr	r3, [r3, #32]
 800dea2:	1ad3      	subs	r3, r2, r3
 800dea4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	7d5b      	ldrb	r3, [r3, #21]
 800deae:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	68db      	ldr	r3, [r3, #12]
 800deb4:	617b      	str	r3, [r7, #20]
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d1dc      	bne.n	800de76 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d004      	beq.n	800decc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dec2:	6938      	ldr	r0, [r7, #16]
 800dec4:	f7ff f882 	bl	800cfcc <tcp_abort>
 800dec8:	e000      	b.n	800decc <tcp_kill_prio+0x8c>
    return;
 800deca:	bf00      	nop
  }
}
 800decc:	3718      	adds	r7, #24
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	2000f514 	.word	0x2000f514
 800ded8:	2000f518 	.word	0x2000f518

0800dedc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b086      	sub	sp, #24
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	4603      	mov	r3, r0
 800dee4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800dee6:	79fb      	ldrb	r3, [r7, #7]
 800dee8:	2b08      	cmp	r3, #8
 800deea:	d009      	beq.n	800df00 <tcp_kill_state+0x24>
 800deec:	79fb      	ldrb	r3, [r7, #7]
 800deee:	2b09      	cmp	r3, #9
 800def0:	d006      	beq.n	800df00 <tcp_kill_state+0x24>
 800def2:	4b1a      	ldr	r3, [pc, #104]	; (800df5c <tcp_kill_state+0x80>)
 800def4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800def8:	4919      	ldr	r1, [pc, #100]	; (800df60 <tcp_kill_state+0x84>)
 800defa:	481a      	ldr	r0, [pc, #104]	; (800df64 <tcp_kill_state+0x88>)
 800defc:	f009 ffd4 	bl	8017ea8 <iprintf>

  inactivity = 0;
 800df00:	2300      	movs	r3, #0
 800df02:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800df04:	2300      	movs	r3, #0
 800df06:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800df08:	4b17      	ldr	r3, [pc, #92]	; (800df68 <tcp_kill_state+0x8c>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	617b      	str	r3, [r7, #20]
 800df0e:	e017      	b.n	800df40 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	7d1b      	ldrb	r3, [r3, #20]
 800df14:	79fa      	ldrb	r2, [r7, #7]
 800df16:	429a      	cmp	r2, r3
 800df18:	d10f      	bne.n	800df3a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800df1a:	4b14      	ldr	r3, [pc, #80]	; (800df6c <tcp_kill_state+0x90>)
 800df1c:	681a      	ldr	r2, [r3, #0]
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	6a1b      	ldr	r3, [r3, #32]
 800df22:	1ad3      	subs	r3, r2, r3
 800df24:	68fa      	ldr	r2, [r7, #12]
 800df26:	429a      	cmp	r2, r3
 800df28:	d807      	bhi.n	800df3a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800df2a:	4b10      	ldr	r3, [pc, #64]	; (800df6c <tcp_kill_state+0x90>)
 800df2c:	681a      	ldr	r2, [r3, #0]
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	6a1b      	ldr	r3, [r3, #32]
 800df32:	1ad3      	subs	r3, r2, r3
 800df34:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	68db      	ldr	r3, [r3, #12]
 800df3e:	617b      	str	r3, [r7, #20]
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d1e4      	bne.n	800df10 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d003      	beq.n	800df54 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800df4c:	2100      	movs	r1, #0
 800df4e:	6938      	ldr	r0, [r7, #16]
 800df50:	f7fe ff7e 	bl	800ce50 <tcp_abandon>
  }
}
 800df54:	bf00      	nop
 800df56:	3718      	adds	r7, #24
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}
 800df5c:	0801a744 	.word	0x0801a744
 800df60:	0801acd0 	.word	0x0801acd0
 800df64:	0801a788 	.word	0x0801a788
 800df68:	2000f514 	.word	0x2000f514
 800df6c:	2000f518 	.word	0x2000f518

0800df70 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b084      	sub	sp, #16
 800df74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800df76:	2300      	movs	r3, #0
 800df78:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800df7a:	2300      	movs	r3, #0
 800df7c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800df7e:	4b12      	ldr	r3, [pc, #72]	; (800dfc8 <tcp_kill_timewait+0x58>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	60fb      	str	r3, [r7, #12]
 800df84:	e012      	b.n	800dfac <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800df86:	4b11      	ldr	r3, [pc, #68]	; (800dfcc <tcp_kill_timewait+0x5c>)
 800df88:	681a      	ldr	r2, [r3, #0]
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	6a1b      	ldr	r3, [r3, #32]
 800df8e:	1ad3      	subs	r3, r2, r3
 800df90:	687a      	ldr	r2, [r7, #4]
 800df92:	429a      	cmp	r2, r3
 800df94:	d807      	bhi.n	800dfa6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800df96:	4b0d      	ldr	r3, [pc, #52]	; (800dfcc <tcp_kill_timewait+0x5c>)
 800df98:	681a      	ldr	r2, [r3, #0]
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	6a1b      	ldr	r3, [r3, #32]
 800df9e:	1ad3      	subs	r3, r2, r3
 800dfa0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	68db      	ldr	r3, [r3, #12]
 800dfaa:	60fb      	str	r3, [r7, #12]
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d1e9      	bne.n	800df86 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d002      	beq.n	800dfbe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dfb8:	68b8      	ldr	r0, [r7, #8]
 800dfba:	f7ff f807 	bl	800cfcc <tcp_abort>
  }
}
 800dfbe:	bf00      	nop
 800dfc0:	3710      	adds	r7, #16
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}
 800dfc6:	bf00      	nop
 800dfc8:	2000f524 	.word	0x2000f524
 800dfcc:	2000f518 	.word	0x2000f518

0800dfd0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800dfd6:	4b10      	ldr	r3, [pc, #64]	; (800e018 <tcp_handle_closepend+0x48>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dfdc:	e014      	b.n	800e008 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	68db      	ldr	r3, [r3, #12]
 800dfe2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	8b5b      	ldrh	r3, [r3, #26]
 800dfe8:	f003 0308 	and.w	r3, r3, #8
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d009      	beq.n	800e004 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	8b5b      	ldrh	r3, [r3, #26]
 800dff4:	f023 0308 	bic.w	r3, r3, #8
 800dff8:	b29a      	uxth	r2, r3
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f7fe fe3a 	bl	800cc78 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d1e7      	bne.n	800dfde <tcp_handle_closepend+0xe>
  }
}
 800e00e:	bf00      	nop
 800e010:	3708      	adds	r7, #8
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	bf00      	nop
 800e018:	2000f514 	.word	0x2000f514

0800e01c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
 800e022:	4603      	mov	r3, r0
 800e024:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e026:	2001      	movs	r0, #1
 800e028:	f7fd fadc 	bl	800b5e4 <memp_malloc>
 800e02c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d126      	bne.n	800e082 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e034:	f7ff ffcc 	bl	800dfd0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e038:	f7ff ff9a 	bl	800df70 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e03c:	2001      	movs	r0, #1
 800e03e:	f7fd fad1 	bl	800b5e4 <memp_malloc>
 800e042:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d11b      	bne.n	800e082 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e04a:	2009      	movs	r0, #9
 800e04c:	f7ff ff46 	bl	800dedc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e050:	2001      	movs	r0, #1
 800e052:	f7fd fac7 	bl	800b5e4 <memp_malloc>
 800e056:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d111      	bne.n	800e082 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e05e:	2008      	movs	r0, #8
 800e060:	f7ff ff3c 	bl	800dedc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e064:	2001      	movs	r0, #1
 800e066:	f7fd fabd 	bl	800b5e4 <memp_malloc>
 800e06a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d107      	bne.n	800e082 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e072:	79fb      	ldrb	r3, [r7, #7]
 800e074:	4618      	mov	r0, r3
 800e076:	f7ff fee3 	bl	800de40 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e07a:	2001      	movs	r0, #1
 800e07c:	f7fd fab2 	bl	800b5e4 <memp_malloc>
 800e080:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d03f      	beq.n	800e108 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e088:	229c      	movs	r2, #156	; 0x9c
 800e08a:	2100      	movs	r1, #0
 800e08c:	68f8      	ldr	r0, [r7, #12]
 800e08e:	f009 ff03 	bl	8017e98 <memset>
    pcb->prio = prio;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	79fa      	ldrb	r2, [r7, #7]
 800e096:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e09e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e0a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	22ff      	movs	r2, #255	; 0xff
 800e0b6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e0be:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	2206      	movs	r2, #6
 800e0c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2206      	movs	r2, #6
 800e0cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0d4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	2201      	movs	r2, #1
 800e0da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e0de:	4b0d      	ldr	r3, [pc, #52]	; (800e114 <tcp_alloc+0xf8>)
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e0e6:	4b0c      	ldr	r3, [pc, #48]	; (800e118 <tcp_alloc+0xfc>)
 800e0e8:	781a      	ldrb	r2, [r3, #0]
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e0f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	4a08      	ldr	r2, [pc, #32]	; (800e11c <tcp_alloc+0x100>)
 800e0fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	4a07      	ldr	r2, [pc, #28]	; (800e120 <tcp_alloc+0x104>)
 800e104:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e108:	68fb      	ldr	r3, [r7, #12]
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	3710      	adds	r7, #16
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}
 800e112:	bf00      	nop
 800e114:	2000f518 	.word	0x2000f518
 800e118:	20008a8e 	.word	0x20008a8e
 800e11c:	0800ddd5 	.word	0x0800ddd5
 800e120:	006ddd00 	.word	0x006ddd00

0800e124 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	4603      	mov	r3, r0
 800e12c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e12e:	2040      	movs	r0, #64	; 0x40
 800e130:	f7ff ff74 	bl	800e01c <tcp_alloc>
 800e134:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e136:	68fb      	ldr	r3, [r7, #12]
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3710      	adds	r7, #16
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e140:	b480      	push	{r7}
 800e142:	b083      	sub	sp, #12
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
 800e148:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d002      	beq.n	800e156 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	683a      	ldr	r2, [r7, #0]
 800e154:	611a      	str	r2, [r3, #16]
  }
}
 800e156:	bf00      	nop
 800e158:	370c      	adds	r7, #12
 800e15a:	46bd      	mov	sp, r7
 800e15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e160:	4770      	bx	lr
	...

0800e164 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d00e      	beq.n	800e192 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	7d1b      	ldrb	r3, [r3, #20]
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d106      	bne.n	800e18a <tcp_recv+0x26>
 800e17c:	4b07      	ldr	r3, [pc, #28]	; (800e19c <tcp_recv+0x38>)
 800e17e:	f240 72df 	movw	r2, #2015	; 0x7df
 800e182:	4907      	ldr	r1, [pc, #28]	; (800e1a0 <tcp_recv+0x3c>)
 800e184:	4807      	ldr	r0, [pc, #28]	; (800e1a4 <tcp_recv+0x40>)
 800e186:	f009 fe8f 	bl	8017ea8 <iprintf>
    pcb->recv = recv;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	683a      	ldr	r2, [r7, #0]
 800e18e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800e192:	bf00      	nop
 800e194:	3708      	adds	r7, #8
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}
 800e19a:	bf00      	nop
 800e19c:	0801a744 	.word	0x0801a744
 800e1a0:	0801ace0 	.word	0x0801ace0
 800e1a4:	0801a788 	.word	0x0801a788

0800e1a8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d00e      	beq.n	800e1d6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	7d1b      	ldrb	r3, [r3, #20]
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d106      	bne.n	800e1ce <tcp_sent+0x26>
 800e1c0:	4b07      	ldr	r3, [pc, #28]	; (800e1e0 <tcp_sent+0x38>)
 800e1c2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800e1c6:	4907      	ldr	r1, [pc, #28]	; (800e1e4 <tcp_sent+0x3c>)
 800e1c8:	4807      	ldr	r0, [pc, #28]	; (800e1e8 <tcp_sent+0x40>)
 800e1ca:	f009 fe6d 	bl	8017ea8 <iprintf>
    pcb->sent = sent;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	683a      	ldr	r2, [r7, #0]
 800e1d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800e1d6:	bf00      	nop
 800e1d8:	3708      	adds	r7, #8
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
 800e1de:	bf00      	nop
 800e1e0:	0801a744 	.word	0x0801a744
 800e1e4:	0801ad08 	.word	0x0801ad08
 800e1e8:	0801a788 	.word	0x0801a788

0800e1ec <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d00e      	beq.n	800e21a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	7d1b      	ldrb	r3, [r3, #20]
 800e200:	2b01      	cmp	r3, #1
 800e202:	d106      	bne.n	800e212 <tcp_err+0x26>
 800e204:	4b07      	ldr	r3, [pc, #28]	; (800e224 <tcp_err+0x38>)
 800e206:	f640 020d 	movw	r2, #2061	; 0x80d
 800e20a:	4907      	ldr	r1, [pc, #28]	; (800e228 <tcp_err+0x3c>)
 800e20c:	4807      	ldr	r0, [pc, #28]	; (800e22c <tcp_err+0x40>)
 800e20e:	f009 fe4b 	bl	8017ea8 <iprintf>
    pcb->errf = err;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	683a      	ldr	r2, [r7, #0]
 800e216:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800e21a:	bf00      	nop
 800e21c:	3708      	adds	r7, #8
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}
 800e222:	bf00      	nop
 800e224:	0801a744 	.word	0x0801a744
 800e228:	0801ad30 	.word	0x0801ad30
 800e22c:	0801a788 	.word	0x0801a788

0800e230 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e230:	b480      	push	{r7}
 800e232:	b085      	sub	sp, #20
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d008      	beq.n	800e252 <tcp_accept+0x22>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	7d1b      	ldrb	r3, [r3, #20]
 800e244:	2b01      	cmp	r3, #1
 800e246:	d104      	bne.n	800e252 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	683a      	ldr	r2, [r7, #0]
 800e250:	619a      	str	r2, [r3, #24]
  }
}
 800e252:	bf00      	nop
 800e254:	3714      	adds	r7, #20
 800e256:	46bd      	mov	sp, r7
 800e258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25c:	4770      	bx	lr
	...

0800e260 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b084      	sub	sp, #16
 800e264:	af00      	add	r7, sp, #0
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	60b9      	str	r1, [r7, #8]
 800e26a:	4613      	mov	r3, r2
 800e26c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d107      	bne.n	800e284 <tcp_poll+0x24>
 800e274:	4b0e      	ldr	r3, [pc, #56]	; (800e2b0 <tcp_poll+0x50>)
 800e276:	f640 023d 	movw	r2, #2109	; 0x83d
 800e27a:	490e      	ldr	r1, [pc, #56]	; (800e2b4 <tcp_poll+0x54>)
 800e27c:	480e      	ldr	r0, [pc, #56]	; (800e2b8 <tcp_poll+0x58>)
 800e27e:	f009 fe13 	bl	8017ea8 <iprintf>
 800e282:	e011      	b.n	800e2a8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	7d1b      	ldrb	r3, [r3, #20]
 800e288:	2b01      	cmp	r3, #1
 800e28a:	d106      	bne.n	800e29a <tcp_poll+0x3a>
 800e28c:	4b08      	ldr	r3, [pc, #32]	; (800e2b0 <tcp_poll+0x50>)
 800e28e:	f640 023e 	movw	r2, #2110	; 0x83e
 800e292:	490a      	ldr	r1, [pc, #40]	; (800e2bc <tcp_poll+0x5c>)
 800e294:	4808      	ldr	r0, [pc, #32]	; (800e2b8 <tcp_poll+0x58>)
 800e296:	f009 fe07 	bl	8017ea8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	68ba      	ldr	r2, [r7, #8]
 800e29e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	79fa      	ldrb	r2, [r7, #7]
 800e2a6:	775a      	strb	r2, [r3, #29]
}
 800e2a8:	3710      	adds	r7, #16
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}
 800e2ae:	bf00      	nop
 800e2b0:	0801a744 	.word	0x0801a744
 800e2b4:	0801ad58 	.word	0x0801ad58
 800e2b8:	0801a788 	.word	0x0801a788
 800e2bc:	0801ad70 	.word	0x0801ad70

0800e2c0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b082      	sub	sp, #8
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d107      	bne.n	800e2de <tcp_pcb_purge+0x1e>
 800e2ce:	4b21      	ldr	r3, [pc, #132]	; (800e354 <tcp_pcb_purge+0x94>)
 800e2d0:	f640 0251 	movw	r2, #2129	; 0x851
 800e2d4:	4920      	ldr	r1, [pc, #128]	; (800e358 <tcp_pcb_purge+0x98>)
 800e2d6:	4821      	ldr	r0, [pc, #132]	; (800e35c <tcp_pcb_purge+0x9c>)
 800e2d8:	f009 fde6 	bl	8017ea8 <iprintf>
 800e2dc:	e037      	b.n	800e34e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	7d1b      	ldrb	r3, [r3, #20]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d033      	beq.n	800e34e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e2ea:	2b0a      	cmp	r3, #10
 800e2ec:	d02f      	beq.n	800e34e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d02b      	beq.n	800e34e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d007      	beq.n	800e30e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e302:	4618      	mov	r0, r3
 800e304:	f7fe f86c 	bl	800c3e0 <pbuf_free>
      pcb->refused_data = NULL;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2200      	movs	r2, #0
 800e30c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e312:	2b00      	cmp	r3, #0
 800e314:	d002      	beq.n	800e31c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f000 f986 	bl	800e628 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e322:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e328:	4618      	mov	r0, r3
 800e32a:	f7ff fcdd 	bl	800dce8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e332:	4618      	mov	r0, r3
 800e334:	f7ff fcd8 	bl	800dce8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2200      	movs	r2, #0
 800e33c:	66da      	str	r2, [r3, #108]	; 0x6c
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2200      	movs	r2, #0
 800e34a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e34e:	3708      	adds	r7, #8
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}
 800e354:	0801a744 	.word	0x0801a744
 800e358:	0801ad90 	.word	0x0801ad90
 800e35c:	0801a788 	.word	0x0801a788

0800e360 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b084      	sub	sp, #16
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
 800e368:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d106      	bne.n	800e37e <tcp_pcb_remove+0x1e>
 800e370:	4b3e      	ldr	r3, [pc, #248]	; (800e46c <tcp_pcb_remove+0x10c>)
 800e372:	f640 0283 	movw	r2, #2179	; 0x883
 800e376:	493e      	ldr	r1, [pc, #248]	; (800e470 <tcp_pcb_remove+0x110>)
 800e378:	483e      	ldr	r0, [pc, #248]	; (800e474 <tcp_pcb_remove+0x114>)
 800e37a:	f009 fd95 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d106      	bne.n	800e392 <tcp_pcb_remove+0x32>
 800e384:	4b39      	ldr	r3, [pc, #228]	; (800e46c <tcp_pcb_remove+0x10c>)
 800e386:	f640 0284 	movw	r2, #2180	; 0x884
 800e38a:	493b      	ldr	r1, [pc, #236]	; (800e478 <tcp_pcb_remove+0x118>)
 800e38c:	4839      	ldr	r0, [pc, #228]	; (800e474 <tcp_pcb_remove+0x114>)
 800e38e:	f009 fd8b 	bl	8017ea8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	683a      	ldr	r2, [r7, #0]
 800e398:	429a      	cmp	r2, r3
 800e39a:	d105      	bne.n	800e3a8 <tcp_pcb_remove+0x48>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	68da      	ldr	r2, [r3, #12]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	601a      	str	r2, [r3, #0]
 800e3a6:	e013      	b.n	800e3d0 <tcp_pcb_remove+0x70>
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	60fb      	str	r3, [r7, #12]
 800e3ae:	e00c      	b.n	800e3ca <tcp_pcb_remove+0x6a>
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	68db      	ldr	r3, [r3, #12]
 800e3b4:	683a      	ldr	r2, [r7, #0]
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d104      	bne.n	800e3c4 <tcp_pcb_remove+0x64>
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	68da      	ldr	r2, [r3, #12]
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	60da      	str	r2, [r3, #12]
 800e3c2:	e005      	b.n	800e3d0 <tcp_pcb_remove+0x70>
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	68db      	ldr	r3, [r3, #12]
 800e3c8:	60fb      	str	r3, [r7, #12]
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d1ef      	bne.n	800e3b0 <tcp_pcb_remove+0x50>
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e3d6:	6838      	ldr	r0, [r7, #0]
 800e3d8:	f7ff ff72 	bl	800e2c0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	7d1b      	ldrb	r3, [r3, #20]
 800e3e0:	2b0a      	cmp	r3, #10
 800e3e2:	d013      	beq.n	800e40c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e3e8:	2b01      	cmp	r3, #1
 800e3ea:	d00f      	beq.n	800e40c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	8b5b      	ldrh	r3, [r3, #26]
 800e3f0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d009      	beq.n	800e40c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	8b5b      	ldrh	r3, [r3, #26]
 800e3fc:	f043 0302 	orr.w	r3, r3, #2
 800e400:	b29a      	uxth	r2, r3
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e406:	6838      	ldr	r0, [r7, #0]
 800e408:	f003 fbc2 	bl	8011b90 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	7d1b      	ldrb	r3, [r3, #20]
 800e410:	2b01      	cmp	r3, #1
 800e412:	d020      	beq.n	800e456 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d006      	beq.n	800e42a <tcp_pcb_remove+0xca>
 800e41c:	4b13      	ldr	r3, [pc, #76]	; (800e46c <tcp_pcb_remove+0x10c>)
 800e41e:	f640 0293 	movw	r2, #2195	; 0x893
 800e422:	4916      	ldr	r1, [pc, #88]	; (800e47c <tcp_pcb_remove+0x11c>)
 800e424:	4813      	ldr	r0, [pc, #76]	; (800e474 <tcp_pcb_remove+0x114>)
 800e426:	f009 fd3f 	bl	8017ea8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d006      	beq.n	800e440 <tcp_pcb_remove+0xe0>
 800e432:	4b0e      	ldr	r3, [pc, #56]	; (800e46c <tcp_pcb_remove+0x10c>)
 800e434:	f640 0294 	movw	r2, #2196	; 0x894
 800e438:	4911      	ldr	r1, [pc, #68]	; (800e480 <tcp_pcb_remove+0x120>)
 800e43a:	480e      	ldr	r0, [pc, #56]	; (800e474 <tcp_pcb_remove+0x114>)
 800e43c:	f009 fd34 	bl	8017ea8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e444:	2b00      	cmp	r3, #0
 800e446:	d006      	beq.n	800e456 <tcp_pcb_remove+0xf6>
 800e448:	4b08      	ldr	r3, [pc, #32]	; (800e46c <tcp_pcb_remove+0x10c>)
 800e44a:	f640 0296 	movw	r2, #2198	; 0x896
 800e44e:	490d      	ldr	r1, [pc, #52]	; (800e484 <tcp_pcb_remove+0x124>)
 800e450:	4808      	ldr	r0, [pc, #32]	; (800e474 <tcp_pcb_remove+0x114>)
 800e452:	f009 fd29 	bl	8017ea8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	2200      	movs	r2, #0
 800e45a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	2200      	movs	r2, #0
 800e460:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e462:	bf00      	nop
 800e464:	3710      	adds	r7, #16
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop
 800e46c:	0801a744 	.word	0x0801a744
 800e470:	0801adac 	.word	0x0801adac
 800e474:	0801a788 	.word	0x0801a788
 800e478:	0801adc8 	.word	0x0801adc8
 800e47c:	0801ade8 	.word	0x0801ade8
 800e480:	0801ae00 	.word	0x0801ae00
 800e484:	0801ae1c 	.word	0x0801ae1c

0800e488 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b082      	sub	sp, #8
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d106      	bne.n	800e4a4 <tcp_next_iss+0x1c>
 800e496:	4b0a      	ldr	r3, [pc, #40]	; (800e4c0 <tcp_next_iss+0x38>)
 800e498:	f640 02af 	movw	r2, #2223	; 0x8af
 800e49c:	4909      	ldr	r1, [pc, #36]	; (800e4c4 <tcp_next_iss+0x3c>)
 800e49e:	480a      	ldr	r0, [pc, #40]	; (800e4c8 <tcp_next_iss+0x40>)
 800e4a0:	f009 fd02 	bl	8017ea8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e4a4:	4b09      	ldr	r3, [pc, #36]	; (800e4cc <tcp_next_iss+0x44>)
 800e4a6:	681a      	ldr	r2, [r3, #0]
 800e4a8:	4b09      	ldr	r3, [pc, #36]	; (800e4d0 <tcp_next_iss+0x48>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4413      	add	r3, r2
 800e4ae:	4a07      	ldr	r2, [pc, #28]	; (800e4cc <tcp_next_iss+0x44>)
 800e4b0:	6013      	str	r3, [r2, #0]
  return iss;
 800e4b2:	4b06      	ldr	r3, [pc, #24]	; (800e4cc <tcp_next_iss+0x44>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	3708      	adds	r7, #8
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}
 800e4be:	bf00      	nop
 800e4c0:	0801a744 	.word	0x0801a744
 800e4c4:	0801ae34 	.word	0x0801ae34
 800e4c8:	0801a788 	.word	0x0801a788
 800e4cc:	20000014 	.word	0x20000014
 800e4d0:	2000f518 	.word	0x2000f518

0800e4d4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b086      	sub	sp, #24
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	4603      	mov	r3, r0
 800e4dc:	60b9      	str	r1, [r7, #8]
 800e4de:	607a      	str	r2, [r7, #4]
 800e4e0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d106      	bne.n	800e4f6 <tcp_eff_send_mss_netif+0x22>
 800e4e8:	4b14      	ldr	r3, [pc, #80]	; (800e53c <tcp_eff_send_mss_netif+0x68>)
 800e4ea:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e4ee:	4914      	ldr	r1, [pc, #80]	; (800e540 <tcp_eff_send_mss_netif+0x6c>)
 800e4f0:	4814      	ldr	r0, [pc, #80]	; (800e544 <tcp_eff_send_mss_netif+0x70>)
 800e4f2:	f009 fcd9 	bl	8017ea8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d101      	bne.n	800e500 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e4fc:	89fb      	ldrh	r3, [r7, #14]
 800e4fe:	e019      	b.n	800e534 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e504:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e506:	8afb      	ldrh	r3, [r7, #22]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d012      	beq.n	800e532 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e50c:	2328      	movs	r3, #40	; 0x28
 800e50e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e510:	8afa      	ldrh	r2, [r7, #22]
 800e512:	8abb      	ldrh	r3, [r7, #20]
 800e514:	429a      	cmp	r2, r3
 800e516:	d904      	bls.n	800e522 <tcp_eff_send_mss_netif+0x4e>
 800e518:	8afa      	ldrh	r2, [r7, #22]
 800e51a:	8abb      	ldrh	r3, [r7, #20]
 800e51c:	1ad3      	subs	r3, r2, r3
 800e51e:	b29b      	uxth	r3, r3
 800e520:	e000      	b.n	800e524 <tcp_eff_send_mss_netif+0x50>
 800e522:	2300      	movs	r3, #0
 800e524:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e526:	8a7a      	ldrh	r2, [r7, #18]
 800e528:	89fb      	ldrh	r3, [r7, #14]
 800e52a:	4293      	cmp	r3, r2
 800e52c:	bf28      	it	cs
 800e52e:	4613      	movcs	r3, r2
 800e530:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e532:	89fb      	ldrh	r3, [r7, #14]
}
 800e534:	4618      	mov	r0, r3
 800e536:	3718      	adds	r7, #24
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}
 800e53c:	0801a744 	.word	0x0801a744
 800e540:	0801ae50 	.word	0x0801ae50
 800e544:	0801a788 	.word	0x0801a788

0800e548 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b084      	sub	sp, #16
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d119      	bne.n	800e590 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e55c:	4b10      	ldr	r3, [pc, #64]	; (800e5a0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e55e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e562:	4910      	ldr	r1, [pc, #64]	; (800e5a4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e564:	4810      	ldr	r0, [pc, #64]	; (800e5a8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e566:	f009 fc9f 	bl	8017ea8 <iprintf>

  while (pcb != NULL) {
 800e56a:	e011      	b.n	800e590 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681a      	ldr	r2, [r3, #0]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	429a      	cmp	r2, r3
 800e576:	d108      	bne.n	800e58a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	68db      	ldr	r3, [r3, #12]
 800e57c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e57e:	68f8      	ldr	r0, [r7, #12]
 800e580:	f7fe fd24 	bl	800cfcc <tcp_abort>
      pcb = next;
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	60fb      	str	r3, [r7, #12]
 800e588:	e002      	b.n	800e590 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	68db      	ldr	r3, [r3, #12]
 800e58e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d1ea      	bne.n	800e56c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e596:	bf00      	nop
 800e598:	3710      	adds	r7, #16
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	0801a744 	.word	0x0801a744
 800e5a4:	0801ae78 	.word	0x0801ae78
 800e5a8:	0801a788 	.word	0x0801a788

0800e5ac <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b084      	sub	sp, #16
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
 800e5b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d02a      	beq.n	800e612 <tcp_netif_ip_addr_changed+0x66>
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d026      	beq.n	800e612 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e5c4:	4b15      	ldr	r3, [pc, #84]	; (800e61c <tcp_netif_ip_addr_changed+0x70>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4619      	mov	r1, r3
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f7ff ffbc 	bl	800e548 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e5d0:	4b13      	ldr	r3, [pc, #76]	; (800e620 <tcp_netif_ip_addr_changed+0x74>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f7ff ffb6 	bl	800e548 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d017      	beq.n	800e612 <tcp_netif_ip_addr_changed+0x66>
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d013      	beq.n	800e612 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e5ea:	4b0e      	ldr	r3, [pc, #56]	; (800e624 <tcp_netif_ip_addr_changed+0x78>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	60fb      	str	r3, [r7, #12]
 800e5f0:	e00c      	b.n	800e60c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	681a      	ldr	r2, [r3, #0]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d103      	bne.n	800e606 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	681a      	ldr	r2, [r3, #0]
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	68db      	ldr	r3, [r3, #12]
 800e60a:	60fb      	str	r3, [r7, #12]
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d1ef      	bne.n	800e5f2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e612:	bf00      	nop
 800e614:	3710      	adds	r7, #16
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	2000f514 	.word	0x2000f514
 800e620:	2000f520 	.word	0x2000f520
 800e624:	2000f51c 	.word	0x2000f51c

0800e628 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b082      	sub	sp, #8
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e634:	2b00      	cmp	r3, #0
 800e636:	d007      	beq.n	800e648 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7ff fb53 	bl	800dce8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2200      	movs	r2, #0
 800e646:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e648:	bf00      	nop
 800e64a:	3708      	adds	r7, #8
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}

0800e650 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e650:	b590      	push	{r4, r7, lr}
 800e652:	b08d      	sub	sp, #52	; 0x34
 800e654:	af04      	add	r7, sp, #16
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d105      	bne.n	800e66c <tcp_input+0x1c>
 800e660:	4b9b      	ldr	r3, [pc, #620]	; (800e8d0 <tcp_input+0x280>)
 800e662:	2283      	movs	r2, #131	; 0x83
 800e664:	499b      	ldr	r1, [pc, #620]	; (800e8d4 <tcp_input+0x284>)
 800e666:	489c      	ldr	r0, [pc, #624]	; (800e8d8 <tcp_input+0x288>)
 800e668:	f009 fc1e 	bl	8017ea8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	685b      	ldr	r3, [r3, #4]
 800e670:	4a9a      	ldr	r2, [pc, #616]	; (800e8dc <tcp_input+0x28c>)
 800e672:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	895b      	ldrh	r3, [r3, #10]
 800e678:	2b13      	cmp	r3, #19
 800e67a:	f240 83c4 	bls.w	800ee06 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e67e:	4b98      	ldr	r3, [pc, #608]	; (800e8e0 <tcp_input+0x290>)
 800e680:	695a      	ldr	r2, [r3, #20]
 800e682:	4b97      	ldr	r3, [pc, #604]	; (800e8e0 <tcp_input+0x290>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	4619      	mov	r1, r3
 800e688:	4610      	mov	r0, r2
 800e68a:	f008 fa79 	bl	8016b80 <ip4_addr_isbroadcast_u32>
 800e68e:	4603      	mov	r3, r0
 800e690:	2b00      	cmp	r3, #0
 800e692:	f040 83ba 	bne.w	800ee0a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e696:	4b92      	ldr	r3, [pc, #584]	; (800e8e0 <tcp_input+0x290>)
 800e698:	695b      	ldr	r3, [r3, #20]
 800e69a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e69e:	2be0      	cmp	r3, #224	; 0xe0
 800e6a0:	f000 83b3 	beq.w	800ee0a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e6a4:	4b8d      	ldr	r3, [pc, #564]	; (800e8dc <tcp_input+0x28c>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	899b      	ldrh	r3, [r3, #12]
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7fc faad 	bl	800ac0c <lwip_htons>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	0b1b      	lsrs	r3, r3, #12
 800e6b6:	b29b      	uxth	r3, r3
 800e6b8:	b2db      	uxtb	r3, r3
 800e6ba:	009b      	lsls	r3, r3, #2
 800e6bc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e6be:	7cbb      	ldrb	r3, [r7, #18]
 800e6c0:	2b13      	cmp	r3, #19
 800e6c2:	f240 83a2 	bls.w	800ee0a <tcp_input+0x7ba>
 800e6c6:	7cbb      	ldrb	r3, [r7, #18]
 800e6c8:	b29a      	uxth	r2, r3
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	891b      	ldrh	r3, [r3, #8]
 800e6ce:	429a      	cmp	r2, r3
 800e6d0:	f200 839b 	bhi.w	800ee0a <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e6d4:	7cbb      	ldrb	r3, [r7, #18]
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	3b14      	subs	r3, #20
 800e6da:	b29a      	uxth	r2, r3
 800e6dc:	4b81      	ldr	r3, [pc, #516]	; (800e8e4 <tcp_input+0x294>)
 800e6de:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e6e0:	4b81      	ldr	r3, [pc, #516]	; (800e8e8 <tcp_input+0x298>)
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	895a      	ldrh	r2, [r3, #10]
 800e6ea:	7cbb      	ldrb	r3, [r7, #18]
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d309      	bcc.n	800e706 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e6f2:	4b7c      	ldr	r3, [pc, #496]	; (800e8e4 <tcp_input+0x294>)
 800e6f4:	881a      	ldrh	r2, [r3, #0]
 800e6f6:	4b7d      	ldr	r3, [pc, #500]	; (800e8ec <tcp_input+0x29c>)
 800e6f8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e6fa:	7cbb      	ldrb	r3, [r7, #18]
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f7fd fde8 	bl	800c2d4 <pbuf_remove_header>
 800e704:	e04e      	b.n	800e7a4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d105      	bne.n	800e71a <tcp_input+0xca>
 800e70e:	4b70      	ldr	r3, [pc, #448]	; (800e8d0 <tcp_input+0x280>)
 800e710:	22c2      	movs	r2, #194	; 0xc2
 800e712:	4977      	ldr	r1, [pc, #476]	; (800e8f0 <tcp_input+0x2a0>)
 800e714:	4870      	ldr	r0, [pc, #448]	; (800e8d8 <tcp_input+0x288>)
 800e716:	f009 fbc7 	bl	8017ea8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e71a:	2114      	movs	r1, #20
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f7fd fdd9 	bl	800c2d4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	895a      	ldrh	r2, [r3, #10]
 800e726:	4b71      	ldr	r3, [pc, #452]	; (800e8ec <tcp_input+0x29c>)
 800e728:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e72a:	4b6e      	ldr	r3, [pc, #440]	; (800e8e4 <tcp_input+0x294>)
 800e72c:	881a      	ldrh	r2, [r3, #0]
 800e72e:	4b6f      	ldr	r3, [pc, #444]	; (800e8ec <tcp_input+0x29c>)
 800e730:	881b      	ldrh	r3, [r3, #0]
 800e732:	1ad3      	subs	r3, r2, r3
 800e734:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e736:	4b6d      	ldr	r3, [pc, #436]	; (800e8ec <tcp_input+0x29c>)
 800e738:	881b      	ldrh	r3, [r3, #0]
 800e73a:	4619      	mov	r1, r3
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f7fd fdc9 	bl	800c2d4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	895b      	ldrh	r3, [r3, #10]
 800e748:	8a3a      	ldrh	r2, [r7, #16]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	f200 835f 	bhi.w	800ee0e <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	685b      	ldr	r3, [r3, #4]
 800e756:	4a64      	ldr	r2, [pc, #400]	; (800e8e8 <tcp_input+0x298>)
 800e758:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	8a3a      	ldrh	r2, [r7, #16]
 800e760:	4611      	mov	r1, r2
 800e762:	4618      	mov	r0, r3
 800e764:	f7fd fdb6 	bl	800c2d4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	891a      	ldrh	r2, [r3, #8]
 800e76c:	8a3b      	ldrh	r3, [r7, #16]
 800e76e:	1ad3      	subs	r3, r2, r3
 800e770:	b29a      	uxth	r2, r3
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	895b      	ldrh	r3, [r3, #10]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d005      	beq.n	800e78a <tcp_input+0x13a>
 800e77e:	4b54      	ldr	r3, [pc, #336]	; (800e8d0 <tcp_input+0x280>)
 800e780:	22df      	movs	r2, #223	; 0xdf
 800e782:	495c      	ldr	r1, [pc, #368]	; (800e8f4 <tcp_input+0x2a4>)
 800e784:	4854      	ldr	r0, [pc, #336]	; (800e8d8 <tcp_input+0x288>)
 800e786:	f009 fb8f 	bl	8017ea8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	891a      	ldrh	r2, [r3, #8]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	891b      	ldrh	r3, [r3, #8]
 800e794:	429a      	cmp	r2, r3
 800e796:	d005      	beq.n	800e7a4 <tcp_input+0x154>
 800e798:	4b4d      	ldr	r3, [pc, #308]	; (800e8d0 <tcp_input+0x280>)
 800e79a:	22e0      	movs	r2, #224	; 0xe0
 800e79c:	4956      	ldr	r1, [pc, #344]	; (800e8f8 <tcp_input+0x2a8>)
 800e79e:	484e      	ldr	r0, [pc, #312]	; (800e8d8 <tcp_input+0x288>)
 800e7a0:	f009 fb82 	bl	8017ea8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e7a4:	4b4d      	ldr	r3, [pc, #308]	; (800e8dc <tcp_input+0x28c>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	881b      	ldrh	r3, [r3, #0]
 800e7aa:	b29a      	uxth	r2, r3
 800e7ac:	4b4b      	ldr	r3, [pc, #300]	; (800e8dc <tcp_input+0x28c>)
 800e7ae:	681c      	ldr	r4, [r3, #0]
 800e7b0:	4610      	mov	r0, r2
 800e7b2:	f7fc fa2b 	bl	800ac0c <lwip_htons>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e7ba:	4b48      	ldr	r3, [pc, #288]	; (800e8dc <tcp_input+0x28c>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	885b      	ldrh	r3, [r3, #2]
 800e7c0:	b29a      	uxth	r2, r3
 800e7c2:	4b46      	ldr	r3, [pc, #280]	; (800e8dc <tcp_input+0x28c>)
 800e7c4:	681c      	ldr	r4, [r3, #0]
 800e7c6:	4610      	mov	r0, r2
 800e7c8:	f7fc fa20 	bl	800ac0c <lwip_htons>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e7d0:	4b42      	ldr	r3, [pc, #264]	; (800e8dc <tcp_input+0x28c>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	685a      	ldr	r2, [r3, #4]
 800e7d6:	4b41      	ldr	r3, [pc, #260]	; (800e8dc <tcp_input+0x28c>)
 800e7d8:	681c      	ldr	r4, [r3, #0]
 800e7da:	4610      	mov	r0, r2
 800e7dc:	f7fc fa2b 	bl	800ac36 <lwip_htonl>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	6063      	str	r3, [r4, #4]
 800e7e4:	6863      	ldr	r3, [r4, #4]
 800e7e6:	4a45      	ldr	r2, [pc, #276]	; (800e8fc <tcp_input+0x2ac>)
 800e7e8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e7ea:	4b3c      	ldr	r3, [pc, #240]	; (800e8dc <tcp_input+0x28c>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	689a      	ldr	r2, [r3, #8]
 800e7f0:	4b3a      	ldr	r3, [pc, #232]	; (800e8dc <tcp_input+0x28c>)
 800e7f2:	681c      	ldr	r4, [r3, #0]
 800e7f4:	4610      	mov	r0, r2
 800e7f6:	f7fc fa1e 	bl	800ac36 <lwip_htonl>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	60a3      	str	r3, [r4, #8]
 800e7fe:	68a3      	ldr	r3, [r4, #8]
 800e800:	4a3f      	ldr	r2, [pc, #252]	; (800e900 <tcp_input+0x2b0>)
 800e802:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e804:	4b35      	ldr	r3, [pc, #212]	; (800e8dc <tcp_input+0x28c>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	89db      	ldrh	r3, [r3, #14]
 800e80a:	b29a      	uxth	r2, r3
 800e80c:	4b33      	ldr	r3, [pc, #204]	; (800e8dc <tcp_input+0x28c>)
 800e80e:	681c      	ldr	r4, [r3, #0]
 800e810:	4610      	mov	r0, r2
 800e812:	f7fc f9fb 	bl	800ac0c <lwip_htons>
 800e816:	4603      	mov	r3, r0
 800e818:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e81a:	4b30      	ldr	r3, [pc, #192]	; (800e8dc <tcp_input+0x28c>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	899b      	ldrh	r3, [r3, #12]
 800e820:	b29b      	uxth	r3, r3
 800e822:	4618      	mov	r0, r3
 800e824:	f7fc f9f2 	bl	800ac0c <lwip_htons>
 800e828:	4603      	mov	r3, r0
 800e82a:	b2db      	uxtb	r3, r3
 800e82c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e830:	b2da      	uxtb	r2, r3
 800e832:	4b34      	ldr	r3, [pc, #208]	; (800e904 <tcp_input+0x2b4>)
 800e834:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	891a      	ldrh	r2, [r3, #8]
 800e83a:	4b33      	ldr	r3, [pc, #204]	; (800e908 <tcp_input+0x2b8>)
 800e83c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e83e:	4b31      	ldr	r3, [pc, #196]	; (800e904 <tcp_input+0x2b4>)
 800e840:	781b      	ldrb	r3, [r3, #0]
 800e842:	f003 0303 	and.w	r3, r3, #3
 800e846:	2b00      	cmp	r3, #0
 800e848:	d00c      	beq.n	800e864 <tcp_input+0x214>
    tcplen++;
 800e84a:	4b2f      	ldr	r3, [pc, #188]	; (800e908 <tcp_input+0x2b8>)
 800e84c:	881b      	ldrh	r3, [r3, #0]
 800e84e:	3301      	adds	r3, #1
 800e850:	b29a      	uxth	r2, r3
 800e852:	4b2d      	ldr	r3, [pc, #180]	; (800e908 <tcp_input+0x2b8>)
 800e854:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	891a      	ldrh	r2, [r3, #8]
 800e85a:	4b2b      	ldr	r3, [pc, #172]	; (800e908 <tcp_input+0x2b8>)
 800e85c:	881b      	ldrh	r3, [r3, #0]
 800e85e:	429a      	cmp	r2, r3
 800e860:	f200 82d7 	bhi.w	800ee12 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e864:	2300      	movs	r3, #0
 800e866:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e868:	4b28      	ldr	r3, [pc, #160]	; (800e90c <tcp_input+0x2bc>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	61fb      	str	r3, [r7, #28]
 800e86e:	e09d      	b.n	800e9ac <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e870:	69fb      	ldr	r3, [r7, #28]
 800e872:	7d1b      	ldrb	r3, [r3, #20]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d105      	bne.n	800e884 <tcp_input+0x234>
 800e878:	4b15      	ldr	r3, [pc, #84]	; (800e8d0 <tcp_input+0x280>)
 800e87a:	22fb      	movs	r2, #251	; 0xfb
 800e87c:	4924      	ldr	r1, [pc, #144]	; (800e910 <tcp_input+0x2c0>)
 800e87e:	4816      	ldr	r0, [pc, #88]	; (800e8d8 <tcp_input+0x288>)
 800e880:	f009 fb12 	bl	8017ea8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e884:	69fb      	ldr	r3, [r7, #28]
 800e886:	7d1b      	ldrb	r3, [r3, #20]
 800e888:	2b0a      	cmp	r3, #10
 800e88a:	d105      	bne.n	800e898 <tcp_input+0x248>
 800e88c:	4b10      	ldr	r3, [pc, #64]	; (800e8d0 <tcp_input+0x280>)
 800e88e:	22fc      	movs	r2, #252	; 0xfc
 800e890:	4920      	ldr	r1, [pc, #128]	; (800e914 <tcp_input+0x2c4>)
 800e892:	4811      	ldr	r0, [pc, #68]	; (800e8d8 <tcp_input+0x288>)
 800e894:	f009 fb08 	bl	8017ea8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	7d1b      	ldrb	r3, [r3, #20]
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d105      	bne.n	800e8ac <tcp_input+0x25c>
 800e8a0:	4b0b      	ldr	r3, [pc, #44]	; (800e8d0 <tcp_input+0x280>)
 800e8a2:	22fd      	movs	r2, #253	; 0xfd
 800e8a4:	491c      	ldr	r1, [pc, #112]	; (800e918 <tcp_input+0x2c8>)
 800e8a6:	480c      	ldr	r0, [pc, #48]	; (800e8d8 <tcp_input+0x288>)
 800e8a8:	f009 fafe 	bl	8017ea8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e8ac:	69fb      	ldr	r3, [r7, #28]
 800e8ae:	7a1b      	ldrb	r3, [r3, #8]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d033      	beq.n	800e91c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	7a1a      	ldrb	r2, [r3, #8]
 800e8b8:	4b09      	ldr	r3, [pc, #36]	; (800e8e0 <tcp_input+0x290>)
 800e8ba:	685b      	ldr	r3, [r3, #4]
 800e8bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e8c0:	3301      	adds	r3, #1
 800e8c2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d029      	beq.n	800e91c <tcp_input+0x2cc>
      prev = pcb;
 800e8c8:	69fb      	ldr	r3, [r7, #28]
 800e8ca:	61bb      	str	r3, [r7, #24]
      continue;
 800e8cc:	e06b      	b.n	800e9a6 <tcp_input+0x356>
 800e8ce:	bf00      	nop
 800e8d0:	0801aeac 	.word	0x0801aeac
 800e8d4:	0801aee0 	.word	0x0801aee0
 800e8d8:	0801aef8 	.word	0x0801aef8
 800e8dc:	20008aa0 	.word	0x20008aa0
 800e8e0:	2000bde0 	.word	0x2000bde0
 800e8e4:	20008aa4 	.word	0x20008aa4
 800e8e8:	20008aa8 	.word	0x20008aa8
 800e8ec:	20008aa6 	.word	0x20008aa6
 800e8f0:	0801af20 	.word	0x0801af20
 800e8f4:	0801af30 	.word	0x0801af30
 800e8f8:	0801af3c 	.word	0x0801af3c
 800e8fc:	20008ab0 	.word	0x20008ab0
 800e900:	20008ab4 	.word	0x20008ab4
 800e904:	20008abc 	.word	0x20008abc
 800e908:	20008aba 	.word	0x20008aba
 800e90c:	2000f514 	.word	0x2000f514
 800e910:	0801af5c 	.word	0x0801af5c
 800e914:	0801af84 	.word	0x0801af84
 800e918:	0801afb0 	.word	0x0801afb0
    }

    if (pcb->remote_port == tcphdr->src &&
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	8b1a      	ldrh	r2, [r3, #24]
 800e920:	4b94      	ldr	r3, [pc, #592]	; (800eb74 <tcp_input+0x524>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	881b      	ldrh	r3, [r3, #0]
 800e926:	b29b      	uxth	r3, r3
 800e928:	429a      	cmp	r2, r3
 800e92a:	d13a      	bne.n	800e9a2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e92c:	69fb      	ldr	r3, [r7, #28]
 800e92e:	8ada      	ldrh	r2, [r3, #22]
 800e930:	4b90      	ldr	r3, [pc, #576]	; (800eb74 <tcp_input+0x524>)
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	885b      	ldrh	r3, [r3, #2]
 800e936:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e938:	429a      	cmp	r2, r3
 800e93a:	d132      	bne.n	800e9a2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e93c:	69fb      	ldr	r3, [r7, #28]
 800e93e:	685a      	ldr	r2, [r3, #4]
 800e940:	4b8d      	ldr	r3, [pc, #564]	; (800eb78 <tcp_input+0x528>)
 800e942:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e944:	429a      	cmp	r2, r3
 800e946:	d12c      	bne.n	800e9a2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e948:	69fb      	ldr	r3, [r7, #28]
 800e94a:	681a      	ldr	r2, [r3, #0]
 800e94c:	4b8a      	ldr	r3, [pc, #552]	; (800eb78 <tcp_input+0x528>)
 800e94e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e950:	429a      	cmp	r2, r3
 800e952:	d126      	bne.n	800e9a2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	68db      	ldr	r3, [r3, #12]
 800e958:	69fa      	ldr	r2, [r7, #28]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d106      	bne.n	800e96c <tcp_input+0x31c>
 800e95e:	4b87      	ldr	r3, [pc, #540]	; (800eb7c <tcp_input+0x52c>)
 800e960:	f240 120d 	movw	r2, #269	; 0x10d
 800e964:	4986      	ldr	r1, [pc, #536]	; (800eb80 <tcp_input+0x530>)
 800e966:	4887      	ldr	r0, [pc, #540]	; (800eb84 <tcp_input+0x534>)
 800e968:	f009 fa9e 	bl	8017ea8 <iprintf>
      if (prev != NULL) {
 800e96c:	69bb      	ldr	r3, [r7, #24]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d00a      	beq.n	800e988 <tcp_input+0x338>
        prev->next = pcb->next;
 800e972:	69fb      	ldr	r3, [r7, #28]
 800e974:	68da      	ldr	r2, [r3, #12]
 800e976:	69bb      	ldr	r3, [r7, #24]
 800e978:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e97a:	4b83      	ldr	r3, [pc, #524]	; (800eb88 <tcp_input+0x538>)
 800e97c:	681a      	ldr	r2, [r3, #0]
 800e97e:	69fb      	ldr	r3, [r7, #28]
 800e980:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e982:	4a81      	ldr	r2, [pc, #516]	; (800eb88 <tcp_input+0x538>)
 800e984:	69fb      	ldr	r3, [r7, #28]
 800e986:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e988:	69fb      	ldr	r3, [r7, #28]
 800e98a:	68db      	ldr	r3, [r3, #12]
 800e98c:	69fa      	ldr	r2, [r7, #28]
 800e98e:	429a      	cmp	r2, r3
 800e990:	d111      	bne.n	800e9b6 <tcp_input+0x366>
 800e992:	4b7a      	ldr	r3, [pc, #488]	; (800eb7c <tcp_input+0x52c>)
 800e994:	f240 1215 	movw	r2, #277	; 0x115
 800e998:	497c      	ldr	r1, [pc, #496]	; (800eb8c <tcp_input+0x53c>)
 800e99a:	487a      	ldr	r0, [pc, #488]	; (800eb84 <tcp_input+0x534>)
 800e99c:	f009 fa84 	bl	8017ea8 <iprintf>
      break;
 800e9a0:	e009      	b.n	800e9b6 <tcp_input+0x366>
    }
    prev = pcb;
 800e9a2:	69fb      	ldr	r3, [r7, #28]
 800e9a4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9a6:	69fb      	ldr	r3, [r7, #28]
 800e9a8:	68db      	ldr	r3, [r3, #12]
 800e9aa:	61fb      	str	r3, [r7, #28]
 800e9ac:	69fb      	ldr	r3, [r7, #28]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	f47f af5e 	bne.w	800e870 <tcp_input+0x220>
 800e9b4:	e000      	b.n	800e9b8 <tcp_input+0x368>
      break;
 800e9b6:	bf00      	nop
  }

  if (pcb == NULL) {
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	f040 8095 	bne.w	800eaea <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9c0:	4b73      	ldr	r3, [pc, #460]	; (800eb90 <tcp_input+0x540>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	61fb      	str	r3, [r7, #28]
 800e9c6:	e03f      	b.n	800ea48 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e9c8:	69fb      	ldr	r3, [r7, #28]
 800e9ca:	7d1b      	ldrb	r3, [r3, #20]
 800e9cc:	2b0a      	cmp	r3, #10
 800e9ce:	d006      	beq.n	800e9de <tcp_input+0x38e>
 800e9d0:	4b6a      	ldr	r3, [pc, #424]	; (800eb7c <tcp_input+0x52c>)
 800e9d2:	f240 121f 	movw	r2, #287	; 0x11f
 800e9d6:	496f      	ldr	r1, [pc, #444]	; (800eb94 <tcp_input+0x544>)
 800e9d8:	486a      	ldr	r0, [pc, #424]	; (800eb84 <tcp_input+0x534>)
 800e9da:	f009 fa65 	bl	8017ea8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e9de:	69fb      	ldr	r3, [r7, #28]
 800e9e0:	7a1b      	ldrb	r3, [r3, #8]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d009      	beq.n	800e9fa <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e9e6:	69fb      	ldr	r3, [r7, #28]
 800e9e8:	7a1a      	ldrb	r2, [r3, #8]
 800e9ea:	4b63      	ldr	r3, [pc, #396]	; (800eb78 <tcp_input+0x528>)
 800e9ec:	685b      	ldr	r3, [r3, #4]
 800e9ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d122      	bne.n	800ea40 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e9fa:	69fb      	ldr	r3, [r7, #28]
 800e9fc:	8b1a      	ldrh	r2, [r3, #24]
 800e9fe:	4b5d      	ldr	r3, [pc, #372]	; (800eb74 <tcp_input+0x524>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	881b      	ldrh	r3, [r3, #0]
 800ea04:	b29b      	uxth	r3, r3
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d11b      	bne.n	800ea42 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ea0a:	69fb      	ldr	r3, [r7, #28]
 800ea0c:	8ada      	ldrh	r2, [r3, #22]
 800ea0e:	4b59      	ldr	r3, [pc, #356]	; (800eb74 <tcp_input+0x524>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	885b      	ldrh	r3, [r3, #2]
 800ea14:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d113      	bne.n	800ea42 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ea1a:	69fb      	ldr	r3, [r7, #28]
 800ea1c:	685a      	ldr	r2, [r3, #4]
 800ea1e:	4b56      	ldr	r3, [pc, #344]	; (800eb78 <tcp_input+0x528>)
 800ea20:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d10d      	bne.n	800ea42 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ea26:	69fb      	ldr	r3, [r7, #28]
 800ea28:	681a      	ldr	r2, [r3, #0]
 800ea2a:	4b53      	ldr	r3, [pc, #332]	; (800eb78 <tcp_input+0x528>)
 800ea2c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	d107      	bne.n	800ea42 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ea32:	69f8      	ldr	r0, [r7, #28]
 800ea34:	f000 fb52 	bl	800f0dc <tcp_timewait_input>
        }
        pbuf_free(p);
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	f7fd fcd1 	bl	800c3e0 <pbuf_free>
        return;
 800ea3e:	e1ee      	b.n	800ee1e <tcp_input+0x7ce>
        continue;
 800ea40:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea42:	69fb      	ldr	r3, [r7, #28]
 800ea44:	68db      	ldr	r3, [r3, #12]
 800ea46:	61fb      	str	r3, [r7, #28]
 800ea48:	69fb      	ldr	r3, [r7, #28]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d1bc      	bne.n	800e9c8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ea52:	4b51      	ldr	r3, [pc, #324]	; (800eb98 <tcp_input+0x548>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	617b      	str	r3, [r7, #20]
 800ea58:	e02a      	b.n	800eab0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	7a1b      	ldrb	r3, [r3, #8]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d00c      	beq.n	800ea7c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	7a1a      	ldrb	r2, [r3, #8]
 800ea66:	4b44      	ldr	r3, [pc, #272]	; (800eb78 <tcp_input+0x528>)
 800ea68:	685b      	ldr	r3, [r3, #4]
 800ea6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ea6e:	3301      	adds	r3, #1
 800ea70:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d002      	beq.n	800ea7c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	61bb      	str	r3, [r7, #24]
        continue;
 800ea7a:	e016      	b.n	800eaaa <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	8ada      	ldrh	r2, [r3, #22]
 800ea80:	4b3c      	ldr	r3, [pc, #240]	; (800eb74 <tcp_input+0x524>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	885b      	ldrh	r3, [r3, #2]
 800ea86:	b29b      	uxth	r3, r3
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d10c      	bne.n	800eaa6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	681a      	ldr	r2, [r3, #0]
 800ea90:	4b39      	ldr	r3, [pc, #228]	; (800eb78 <tcp_input+0x528>)
 800ea92:	695b      	ldr	r3, [r3, #20]
 800ea94:	429a      	cmp	r2, r3
 800ea96:	d00f      	beq.n	800eab8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d00d      	beq.n	800eaba <tcp_input+0x46a>
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d009      	beq.n	800eaba <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	68db      	ldr	r3, [r3, #12]
 800eaae:	617b      	str	r3, [r7, #20]
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d1d1      	bne.n	800ea5a <tcp_input+0x40a>
 800eab6:	e000      	b.n	800eaba <tcp_input+0x46a>
            break;
 800eab8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d014      	beq.n	800eaea <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800eac0:	69bb      	ldr	r3, [r7, #24]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d00a      	beq.n	800eadc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	68da      	ldr	r2, [r3, #12]
 800eaca:	69bb      	ldr	r3, [r7, #24]
 800eacc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800eace:	4b32      	ldr	r3, [pc, #200]	; (800eb98 <tcp_input+0x548>)
 800ead0:	681a      	ldr	r2, [r3, #0]
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ead6:	4a30      	ldr	r2, [pc, #192]	; (800eb98 <tcp_input+0x548>)
 800ead8:	697b      	ldr	r3, [r7, #20]
 800eada:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800eadc:	6978      	ldr	r0, [r7, #20]
 800eade:	f000 f9ff 	bl	800eee0 <tcp_listen_input>
      }
      pbuf_free(p);
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	f7fd fc7c 	bl	800c3e0 <pbuf_free>
      return;
 800eae8:	e199      	b.n	800ee1e <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800eaea:	69fb      	ldr	r3, [r7, #28]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	f000 8160 	beq.w	800edb2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800eaf2:	4b2a      	ldr	r3, [pc, #168]	; (800eb9c <tcp_input+0x54c>)
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	891a      	ldrh	r2, [r3, #8]
 800eafc:	4b27      	ldr	r3, [pc, #156]	; (800eb9c <tcp_input+0x54c>)
 800eafe:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800eb00:	4a26      	ldr	r2, [pc, #152]	; (800eb9c <tcp_input+0x54c>)
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800eb06:	4b1b      	ldr	r3, [pc, #108]	; (800eb74 <tcp_input+0x524>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	4a24      	ldr	r2, [pc, #144]	; (800eb9c <tcp_input+0x54c>)
 800eb0c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800eb0e:	4b24      	ldr	r3, [pc, #144]	; (800eba0 <tcp_input+0x550>)
 800eb10:	2200      	movs	r2, #0
 800eb12:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800eb14:	4b23      	ldr	r3, [pc, #140]	; (800eba4 <tcp_input+0x554>)
 800eb16:	2200      	movs	r2, #0
 800eb18:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800eb1a:	4b23      	ldr	r3, [pc, #140]	; (800eba8 <tcp_input+0x558>)
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800eb20:	4b22      	ldr	r3, [pc, #136]	; (800ebac <tcp_input+0x55c>)
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	f003 0308 	and.w	r3, r3, #8
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d006      	beq.n	800eb3a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	7b5b      	ldrb	r3, [r3, #13]
 800eb30:	f043 0301 	orr.w	r3, r3, #1
 800eb34:	b2da      	uxtb	r2, r3
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800eb3a:	69fb      	ldr	r3, [r7, #28]
 800eb3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d038      	beq.n	800ebb4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800eb42:	69f8      	ldr	r0, [r7, #28]
 800eb44:	f7ff f854 	bl	800dbf0 <tcp_process_refused_data>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	f113 0f0d 	cmn.w	r3, #13
 800eb4e:	d007      	beq.n	800eb60 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800eb50:	69fb      	ldr	r3, [r7, #28]
 800eb52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d02d      	beq.n	800ebb4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800eb58:	4b15      	ldr	r3, [pc, #84]	; (800ebb0 <tcp_input+0x560>)
 800eb5a:	881b      	ldrh	r3, [r3, #0]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d029      	beq.n	800ebb4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800eb60:	69fb      	ldr	r3, [r7, #28]
 800eb62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	f040 8104 	bne.w	800ed72 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800eb6a:	69f8      	ldr	r0, [r7, #28]
 800eb6c:	f003 fe26 	bl	80127bc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800eb70:	e0ff      	b.n	800ed72 <tcp_input+0x722>
 800eb72:	bf00      	nop
 800eb74:	20008aa0 	.word	0x20008aa0
 800eb78:	2000bde0 	.word	0x2000bde0
 800eb7c:	0801aeac 	.word	0x0801aeac
 800eb80:	0801afd8 	.word	0x0801afd8
 800eb84:	0801aef8 	.word	0x0801aef8
 800eb88:	2000f514 	.word	0x2000f514
 800eb8c:	0801b004 	.word	0x0801b004
 800eb90:	2000f524 	.word	0x2000f524
 800eb94:	0801b030 	.word	0x0801b030
 800eb98:	2000f51c 	.word	0x2000f51c
 800eb9c:	20008a90 	.word	0x20008a90
 800eba0:	20008ac0 	.word	0x20008ac0
 800eba4:	20008abd 	.word	0x20008abd
 800eba8:	20008ab8 	.word	0x20008ab8
 800ebac:	20008abc 	.word	0x20008abc
 800ebb0:	20008aba 	.word	0x20008aba
      }
    }
    tcp_input_pcb = pcb;
 800ebb4:	4a9b      	ldr	r2, [pc, #620]	; (800ee24 <tcp_input+0x7d4>)
 800ebb6:	69fb      	ldr	r3, [r7, #28]
 800ebb8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ebba:	69f8      	ldr	r0, [r7, #28]
 800ebbc:	f000 fb0a 	bl	800f1d4 <tcp_process>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ebc4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ebc8:	f113 0f0d 	cmn.w	r3, #13
 800ebcc:	f000 80d3 	beq.w	800ed76 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800ebd0:	4b95      	ldr	r3, [pc, #596]	; (800ee28 <tcp_input+0x7d8>)
 800ebd2:	781b      	ldrb	r3, [r3, #0]
 800ebd4:	f003 0308 	and.w	r3, r3, #8
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d015      	beq.n	800ec08 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ebdc:	69fb      	ldr	r3, [r7, #28]
 800ebde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d008      	beq.n	800ebf8 <tcp_input+0x5a8>
 800ebe6:	69fb      	ldr	r3, [r7, #28]
 800ebe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebec:	69fa      	ldr	r2, [r7, #28]
 800ebee:	6912      	ldr	r2, [r2, #16]
 800ebf0:	f06f 010d 	mvn.w	r1, #13
 800ebf4:	4610      	mov	r0, r2
 800ebf6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ebf8:	69f9      	ldr	r1, [r7, #28]
 800ebfa:	488c      	ldr	r0, [pc, #560]	; (800ee2c <tcp_input+0x7dc>)
 800ebfc:	f7ff fbb0 	bl	800e360 <tcp_pcb_remove>
        tcp_free(pcb);
 800ec00:	69f8      	ldr	r0, [r7, #28]
 800ec02:	f7fd fea9 	bl	800c958 <tcp_free>
 800ec06:	e0c1      	b.n	800ed8c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800ec08:	2300      	movs	r3, #0
 800ec0a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ec0c:	4b88      	ldr	r3, [pc, #544]	; (800ee30 <tcp_input+0x7e0>)
 800ec0e:	881b      	ldrh	r3, [r3, #0]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d01d      	beq.n	800ec50 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ec14:	4b86      	ldr	r3, [pc, #536]	; (800ee30 <tcp_input+0x7e0>)
 800ec16:	881b      	ldrh	r3, [r3, #0]
 800ec18:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ec1a:	69fb      	ldr	r3, [r7, #28]
 800ec1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d00a      	beq.n	800ec3a <tcp_input+0x5ea>
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec2a:	69fa      	ldr	r2, [r7, #28]
 800ec2c:	6910      	ldr	r0, [r2, #16]
 800ec2e:	89fa      	ldrh	r2, [r7, #14]
 800ec30:	69f9      	ldr	r1, [r7, #28]
 800ec32:	4798      	blx	r3
 800ec34:	4603      	mov	r3, r0
 800ec36:	74fb      	strb	r3, [r7, #19]
 800ec38:	e001      	b.n	800ec3e <tcp_input+0x5ee>
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ec3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec42:	f113 0f0d 	cmn.w	r3, #13
 800ec46:	f000 8098 	beq.w	800ed7a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ec4a:	4b79      	ldr	r3, [pc, #484]	; (800ee30 <tcp_input+0x7e0>)
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ec50:	69f8      	ldr	r0, [r7, #28]
 800ec52:	f000 f905 	bl	800ee60 <tcp_input_delayed_close>
 800ec56:	4603      	mov	r3, r0
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	f040 8090 	bne.w	800ed7e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ec5e:	4b75      	ldr	r3, [pc, #468]	; (800ee34 <tcp_input+0x7e4>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d041      	beq.n	800ecea <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ec66:	69fb      	ldr	r3, [r7, #28]
 800ec68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d006      	beq.n	800ec7c <tcp_input+0x62c>
 800ec6e:	4b72      	ldr	r3, [pc, #456]	; (800ee38 <tcp_input+0x7e8>)
 800ec70:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ec74:	4971      	ldr	r1, [pc, #452]	; (800ee3c <tcp_input+0x7ec>)
 800ec76:	4872      	ldr	r0, [pc, #456]	; (800ee40 <tcp_input+0x7f0>)
 800ec78:	f009 f916 	bl	8017ea8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ec7c:	69fb      	ldr	r3, [r7, #28]
 800ec7e:	8b5b      	ldrh	r3, [r3, #26]
 800ec80:	f003 0310 	and.w	r3, r3, #16
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d008      	beq.n	800ec9a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ec88:	4b6a      	ldr	r3, [pc, #424]	; (800ee34 <tcp_input+0x7e4>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f7fd fba7 	bl	800c3e0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ec92:	69f8      	ldr	r0, [r7, #28]
 800ec94:	f7fe f99a 	bl	800cfcc <tcp_abort>
            goto aborted;
 800ec98:	e078      	b.n	800ed8c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ec9a:	69fb      	ldr	r3, [r7, #28]
 800ec9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d00c      	beq.n	800ecbe <tcp_input+0x66e>
 800eca4:	69fb      	ldr	r3, [r7, #28]
 800eca6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ecaa:	69fb      	ldr	r3, [r7, #28]
 800ecac:	6918      	ldr	r0, [r3, #16]
 800ecae:	4b61      	ldr	r3, [pc, #388]	; (800ee34 <tcp_input+0x7e4>)
 800ecb0:	681a      	ldr	r2, [r3, #0]
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	69f9      	ldr	r1, [r7, #28]
 800ecb6:	47a0      	blx	r4
 800ecb8:	4603      	mov	r3, r0
 800ecba:	74fb      	strb	r3, [r7, #19]
 800ecbc:	e008      	b.n	800ecd0 <tcp_input+0x680>
 800ecbe:	4b5d      	ldr	r3, [pc, #372]	; (800ee34 <tcp_input+0x7e4>)
 800ecc0:	681a      	ldr	r2, [r3, #0]
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	69f9      	ldr	r1, [r7, #28]
 800ecc6:	2000      	movs	r0, #0
 800ecc8:	f7ff f884 	bl	800ddd4 <tcp_recv_null>
 800eccc:	4603      	mov	r3, r0
 800ecce:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ecd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ecd4:	f113 0f0d 	cmn.w	r3, #13
 800ecd8:	d053      	beq.n	800ed82 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ecda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d003      	beq.n	800ecea <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ece2:	4b54      	ldr	r3, [pc, #336]	; (800ee34 <tcp_input+0x7e4>)
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	69fb      	ldr	r3, [r7, #28]
 800ece8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ecea:	4b4f      	ldr	r3, [pc, #316]	; (800ee28 <tcp_input+0x7d8>)
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	f003 0320 	and.w	r3, r3, #32
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d030      	beq.n	800ed58 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800ecf6:	69fb      	ldr	r3, [r7, #28]
 800ecf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d009      	beq.n	800ed12 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ecfe:	69fb      	ldr	r3, [r7, #28]
 800ed00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed02:	7b5a      	ldrb	r2, [r3, #13]
 800ed04:	69fb      	ldr	r3, [r7, #28]
 800ed06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed08:	f042 0220 	orr.w	r2, r2, #32
 800ed0c:	b2d2      	uxtb	r2, r2
 800ed0e:	735a      	strb	r2, [r3, #13]
 800ed10:	e022      	b.n	800ed58 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ed12:	69fb      	ldr	r3, [r7, #28]
 800ed14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed16:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ed1a:	d005      	beq.n	800ed28 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800ed1c:	69fb      	ldr	r3, [r7, #28]
 800ed1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed20:	3301      	adds	r3, #1
 800ed22:	b29a      	uxth	r2, r3
 800ed24:	69fb      	ldr	r3, [r7, #28]
 800ed26:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ed28:	69fb      	ldr	r3, [r7, #28]
 800ed2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d00b      	beq.n	800ed4a <tcp_input+0x6fa>
 800ed32:	69fb      	ldr	r3, [r7, #28]
 800ed34:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ed38:	69fb      	ldr	r3, [r7, #28]
 800ed3a:	6918      	ldr	r0, [r3, #16]
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	2200      	movs	r2, #0
 800ed40:	69f9      	ldr	r1, [r7, #28]
 800ed42:	47a0      	blx	r4
 800ed44:	4603      	mov	r3, r0
 800ed46:	74fb      	strb	r3, [r7, #19]
 800ed48:	e001      	b.n	800ed4e <tcp_input+0x6fe>
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ed4e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ed52:	f113 0f0d 	cmn.w	r3, #13
 800ed56:	d016      	beq.n	800ed86 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ed58:	4b32      	ldr	r3, [pc, #200]	; (800ee24 <tcp_input+0x7d4>)
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ed5e:	69f8      	ldr	r0, [r7, #28]
 800ed60:	f000 f87e 	bl	800ee60 <tcp_input_delayed_close>
 800ed64:	4603      	mov	r3, r0
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d10f      	bne.n	800ed8a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ed6a:	69f8      	ldr	r0, [r7, #28]
 800ed6c:	f002 ff10 	bl	8011b90 <tcp_output>
 800ed70:	e00c      	b.n	800ed8c <tcp_input+0x73c>
        goto aborted;
 800ed72:	bf00      	nop
 800ed74:	e00a      	b.n	800ed8c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ed76:	bf00      	nop
 800ed78:	e008      	b.n	800ed8c <tcp_input+0x73c>
              goto aborted;
 800ed7a:	bf00      	nop
 800ed7c:	e006      	b.n	800ed8c <tcp_input+0x73c>
          goto aborted;
 800ed7e:	bf00      	nop
 800ed80:	e004      	b.n	800ed8c <tcp_input+0x73c>
            goto aborted;
 800ed82:	bf00      	nop
 800ed84:	e002      	b.n	800ed8c <tcp_input+0x73c>
              goto aborted;
 800ed86:	bf00      	nop
 800ed88:	e000      	b.n	800ed8c <tcp_input+0x73c>
          goto aborted;
 800ed8a:	bf00      	nop
    tcp_input_pcb = NULL;
 800ed8c:	4b25      	ldr	r3, [pc, #148]	; (800ee24 <tcp_input+0x7d4>)
 800ed8e:	2200      	movs	r2, #0
 800ed90:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ed92:	4b28      	ldr	r3, [pc, #160]	; (800ee34 <tcp_input+0x7e4>)
 800ed94:	2200      	movs	r2, #0
 800ed96:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ed98:	4b2a      	ldr	r3, [pc, #168]	; (800ee44 <tcp_input+0x7f4>)
 800ed9a:	685b      	ldr	r3, [r3, #4]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d03d      	beq.n	800ee1c <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800eda0:	4b28      	ldr	r3, [pc, #160]	; (800ee44 <tcp_input+0x7f4>)
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	4618      	mov	r0, r3
 800eda6:	f7fd fb1b 	bl	800c3e0 <pbuf_free>
      inseg.p = NULL;
 800edaa:	4b26      	ldr	r3, [pc, #152]	; (800ee44 <tcp_input+0x7f4>)
 800edac:	2200      	movs	r2, #0
 800edae:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800edb0:	e034      	b.n	800ee1c <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800edb2:	4b25      	ldr	r3, [pc, #148]	; (800ee48 <tcp_input+0x7f8>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	899b      	ldrh	r3, [r3, #12]
 800edb8:	b29b      	uxth	r3, r3
 800edba:	4618      	mov	r0, r3
 800edbc:	f7fb ff26 	bl	800ac0c <lwip_htons>
 800edc0:	4603      	mov	r3, r0
 800edc2:	b2db      	uxtb	r3, r3
 800edc4:	f003 0304 	and.w	r3, r3, #4
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d118      	bne.n	800edfe <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edcc:	4b1f      	ldr	r3, [pc, #124]	; (800ee4c <tcp_input+0x7fc>)
 800edce:	6819      	ldr	r1, [r3, #0]
 800edd0:	4b1f      	ldr	r3, [pc, #124]	; (800ee50 <tcp_input+0x800>)
 800edd2:	881b      	ldrh	r3, [r3, #0]
 800edd4:	461a      	mov	r2, r3
 800edd6:	4b1f      	ldr	r3, [pc, #124]	; (800ee54 <tcp_input+0x804>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eddc:	4b1a      	ldr	r3, [pc, #104]	; (800ee48 <tcp_input+0x7f8>)
 800edde:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ede0:	885b      	ldrh	r3, [r3, #2]
 800ede2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ede4:	4a18      	ldr	r2, [pc, #96]	; (800ee48 <tcp_input+0x7f8>)
 800ede6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ede8:	8812      	ldrh	r2, [r2, #0]
 800edea:	b292      	uxth	r2, r2
 800edec:	9202      	str	r2, [sp, #8]
 800edee:	9301      	str	r3, [sp, #4]
 800edf0:	4b19      	ldr	r3, [pc, #100]	; (800ee58 <tcp_input+0x808>)
 800edf2:	9300      	str	r3, [sp, #0]
 800edf4:	4b19      	ldr	r3, [pc, #100]	; (800ee5c <tcp_input+0x80c>)
 800edf6:	4602      	mov	r2, r0
 800edf8:	2000      	movs	r0, #0
 800edfa:	f003 fc8d 	bl	8012718 <tcp_rst>
    pbuf_free(p);
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f7fd faee 	bl	800c3e0 <pbuf_free>
  return;
 800ee04:	e00a      	b.n	800ee1c <tcp_input+0x7cc>
    goto dropped;
 800ee06:	bf00      	nop
 800ee08:	e004      	b.n	800ee14 <tcp_input+0x7c4>
dropped:
 800ee0a:	bf00      	nop
 800ee0c:	e002      	b.n	800ee14 <tcp_input+0x7c4>
      goto dropped;
 800ee0e:	bf00      	nop
 800ee10:	e000      	b.n	800ee14 <tcp_input+0x7c4>
      goto dropped;
 800ee12:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f7fd fae3 	bl	800c3e0 <pbuf_free>
 800ee1a:	e000      	b.n	800ee1e <tcp_input+0x7ce>
  return;
 800ee1c:	bf00      	nop
}
 800ee1e:	3724      	adds	r7, #36	; 0x24
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd90      	pop	{r4, r7, pc}
 800ee24:	2000f528 	.word	0x2000f528
 800ee28:	20008abd 	.word	0x20008abd
 800ee2c:	2000f514 	.word	0x2000f514
 800ee30:	20008ab8 	.word	0x20008ab8
 800ee34:	20008ac0 	.word	0x20008ac0
 800ee38:	0801aeac 	.word	0x0801aeac
 800ee3c:	0801b060 	.word	0x0801b060
 800ee40:	0801aef8 	.word	0x0801aef8
 800ee44:	20008a90 	.word	0x20008a90
 800ee48:	20008aa0 	.word	0x20008aa0
 800ee4c:	20008ab4 	.word	0x20008ab4
 800ee50:	20008aba 	.word	0x20008aba
 800ee54:	20008ab0 	.word	0x20008ab0
 800ee58:	2000bdf0 	.word	0x2000bdf0
 800ee5c:	2000bdf4 	.word	0x2000bdf4

0800ee60 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b082      	sub	sp, #8
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d106      	bne.n	800ee7c <tcp_input_delayed_close+0x1c>
 800ee6e:	4b17      	ldr	r3, [pc, #92]	; (800eecc <tcp_input_delayed_close+0x6c>)
 800ee70:	f240 225a 	movw	r2, #602	; 0x25a
 800ee74:	4916      	ldr	r1, [pc, #88]	; (800eed0 <tcp_input_delayed_close+0x70>)
 800ee76:	4817      	ldr	r0, [pc, #92]	; (800eed4 <tcp_input_delayed_close+0x74>)
 800ee78:	f009 f816 	bl	8017ea8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ee7c:	4b16      	ldr	r3, [pc, #88]	; (800eed8 <tcp_input_delayed_close+0x78>)
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	f003 0310 	and.w	r3, r3, #16
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d01c      	beq.n	800eec2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	8b5b      	ldrh	r3, [r3, #26]
 800ee8c:	f003 0310 	and.w	r3, r3, #16
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d10d      	bne.n	800eeb0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d008      	beq.n	800eeb0 <tcp_input_delayed_close+0x50>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eea4:	687a      	ldr	r2, [r7, #4]
 800eea6:	6912      	ldr	r2, [r2, #16]
 800eea8:	f06f 010e 	mvn.w	r1, #14
 800eeac:	4610      	mov	r0, r2
 800eeae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800eeb0:	6879      	ldr	r1, [r7, #4]
 800eeb2:	480a      	ldr	r0, [pc, #40]	; (800eedc <tcp_input_delayed_close+0x7c>)
 800eeb4:	f7ff fa54 	bl	800e360 <tcp_pcb_remove>
    tcp_free(pcb);
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f7fd fd4d 	bl	800c958 <tcp_free>
    return 1;
 800eebe:	2301      	movs	r3, #1
 800eec0:	e000      	b.n	800eec4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800eec2:	2300      	movs	r3, #0
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3708      	adds	r7, #8
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}
 800eecc:	0801aeac 	.word	0x0801aeac
 800eed0:	0801b07c 	.word	0x0801b07c
 800eed4:	0801aef8 	.word	0x0801aef8
 800eed8:	20008abd 	.word	0x20008abd
 800eedc:	2000f514 	.word	0x2000f514

0800eee0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800eee0:	b590      	push	{r4, r7, lr}
 800eee2:	b08b      	sub	sp, #44	; 0x2c
 800eee4:	af04      	add	r7, sp, #16
 800eee6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800eee8:	4b6f      	ldr	r3, [pc, #444]	; (800f0a8 <tcp_listen_input+0x1c8>)
 800eeea:	781b      	ldrb	r3, [r3, #0]
 800eeec:	f003 0304 	and.w	r3, r3, #4
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	f040 80d3 	bne.w	800f09c <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d106      	bne.n	800ef0a <tcp_listen_input+0x2a>
 800eefc:	4b6b      	ldr	r3, [pc, #428]	; (800f0ac <tcp_listen_input+0x1cc>)
 800eefe:	f240 2281 	movw	r2, #641	; 0x281
 800ef02:	496b      	ldr	r1, [pc, #428]	; (800f0b0 <tcp_listen_input+0x1d0>)
 800ef04:	486b      	ldr	r0, [pc, #428]	; (800f0b4 <tcp_listen_input+0x1d4>)
 800ef06:	f008 ffcf 	bl	8017ea8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ef0a:	4b67      	ldr	r3, [pc, #412]	; (800f0a8 <tcp_listen_input+0x1c8>)
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	f003 0310 	and.w	r3, r3, #16
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d019      	beq.n	800ef4a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef16:	4b68      	ldr	r3, [pc, #416]	; (800f0b8 <tcp_listen_input+0x1d8>)
 800ef18:	6819      	ldr	r1, [r3, #0]
 800ef1a:	4b68      	ldr	r3, [pc, #416]	; (800f0bc <tcp_listen_input+0x1dc>)
 800ef1c:	881b      	ldrh	r3, [r3, #0]
 800ef1e:	461a      	mov	r2, r3
 800ef20:	4b67      	ldr	r3, [pc, #412]	; (800f0c0 <tcp_listen_input+0x1e0>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef26:	4b67      	ldr	r3, [pc, #412]	; (800f0c4 <tcp_listen_input+0x1e4>)
 800ef28:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef2a:	885b      	ldrh	r3, [r3, #2]
 800ef2c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef2e:	4a65      	ldr	r2, [pc, #404]	; (800f0c4 <tcp_listen_input+0x1e4>)
 800ef30:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef32:	8812      	ldrh	r2, [r2, #0]
 800ef34:	b292      	uxth	r2, r2
 800ef36:	9202      	str	r2, [sp, #8]
 800ef38:	9301      	str	r3, [sp, #4]
 800ef3a:	4b63      	ldr	r3, [pc, #396]	; (800f0c8 <tcp_listen_input+0x1e8>)
 800ef3c:	9300      	str	r3, [sp, #0]
 800ef3e:	4b63      	ldr	r3, [pc, #396]	; (800f0cc <tcp_listen_input+0x1ec>)
 800ef40:	4602      	mov	r2, r0
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f003 fbe8 	bl	8012718 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ef48:	e0aa      	b.n	800f0a0 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800ef4a:	4b57      	ldr	r3, [pc, #348]	; (800f0a8 <tcp_listen_input+0x1c8>)
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	f003 0302 	and.w	r3, r3, #2
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	f000 80a4 	beq.w	800f0a0 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	7d5b      	ldrb	r3, [r3, #21]
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7ff f85d 	bl	800e01c <tcp_alloc>
 800ef62:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d111      	bne.n	800ef8e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	699b      	ldr	r3, [r3, #24]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d00a      	beq.n	800ef88 <tcp_listen_input+0xa8>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	699b      	ldr	r3, [r3, #24]
 800ef76:	687a      	ldr	r2, [r7, #4]
 800ef78:	6910      	ldr	r0, [r2, #16]
 800ef7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef7e:	2100      	movs	r1, #0
 800ef80:	4798      	blx	r3
 800ef82:	4603      	mov	r3, r0
 800ef84:	73bb      	strb	r3, [r7, #14]
      return;
 800ef86:	e08c      	b.n	800f0a2 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ef88:	23f0      	movs	r3, #240	; 0xf0
 800ef8a:	73bb      	strb	r3, [r7, #14]
      return;
 800ef8c:	e089      	b.n	800f0a2 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ef8e:	4b50      	ldr	r3, [pc, #320]	; (800f0d0 <tcp_listen_input+0x1f0>)
 800ef90:	695a      	ldr	r2, [r3, #20]
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ef96:	4b4e      	ldr	r3, [pc, #312]	; (800f0d0 <tcp_listen_input+0x1f0>)
 800ef98:	691a      	ldr	r2, [r3, #16]
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	8ada      	ldrh	r2, [r3, #22]
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800efa6:	4b47      	ldr	r3, [pc, #284]	; (800f0c4 <tcp_listen_input+0x1e4>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	881b      	ldrh	r3, [r3, #0]
 800efac:	b29a      	uxth	r2, r3
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	2203      	movs	r2, #3
 800efb6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800efb8:	4b41      	ldr	r3, [pc, #260]	; (800f0c0 <tcp_listen_input+0x1e0>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	1c5a      	adds	r2, r3, #1
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800efca:	6978      	ldr	r0, [r7, #20]
 800efcc:	f7ff fa5c 	bl	800e488 <tcp_next_iss>
 800efd0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800efd2:	697b      	ldr	r3, [r7, #20]
 800efd4:	693a      	ldr	r2, [r7, #16]
 800efd6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	693a      	ldr	r2, [r7, #16]
 800efdc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	693a      	ldr	r2, [r7, #16]
 800efe2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	693a      	ldr	r2, [r7, #16]
 800efe8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800efea:	4b35      	ldr	r3, [pc, #212]	; (800f0c0 <tcp_listen_input+0x1e0>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	1e5a      	subs	r2, r3, #1
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	691a      	ldr	r2, [r3, #16]
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	687a      	ldr	r2, [r7, #4]
 800f000:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	7a5b      	ldrb	r3, [r3, #9]
 800f006:	f003 030c 	and.w	r3, r3, #12
 800f00a:	b2da      	uxtb	r2, r3
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	7a1a      	ldrb	r2, [r3, #8]
 800f014:	697b      	ldr	r3, [r7, #20]
 800f016:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f018:	4b2e      	ldr	r3, [pc, #184]	; (800f0d4 <tcp_listen_input+0x1f4>)
 800f01a:	681a      	ldr	r2, [r3, #0]
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	60da      	str	r2, [r3, #12]
 800f020:	4a2c      	ldr	r2, [pc, #176]	; (800f0d4 <tcp_listen_input+0x1f4>)
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	6013      	str	r3, [r2, #0]
 800f026:	f003 fd39 	bl	8012a9c <tcp_timer_needed>
 800f02a:	4b2b      	ldr	r3, [pc, #172]	; (800f0d8 <tcp_listen_input+0x1f8>)
 800f02c:	2201      	movs	r2, #1
 800f02e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f030:	6978      	ldr	r0, [r7, #20]
 800f032:	f001 fd8f 	bl	8010b54 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f036:	4b23      	ldr	r3, [pc, #140]	; (800f0c4 <tcp_listen_input+0x1e4>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	89db      	ldrh	r3, [r3, #14]
 800f03c:	b29a      	uxth	r2, r3
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	3304      	adds	r3, #4
 800f058:	4618      	mov	r0, r3
 800f05a:	f007 fadf 	bl	801661c <ip4_route>
 800f05e:	4601      	mov	r1, r0
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	3304      	adds	r3, #4
 800f064:	461a      	mov	r2, r3
 800f066:	4620      	mov	r0, r4
 800f068:	f7ff fa34 	bl	800e4d4 <tcp_eff_send_mss_netif>
 800f06c:	4603      	mov	r3, r0
 800f06e:	461a      	mov	r2, r3
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f074:	2112      	movs	r1, #18
 800f076:	6978      	ldr	r0, [r7, #20]
 800f078:	f002 fc9c 	bl	80119b4 <tcp_enqueue_flags>
 800f07c:	4603      	mov	r3, r0
 800f07e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d004      	beq.n	800f092 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f088:	2100      	movs	r1, #0
 800f08a:	6978      	ldr	r0, [r7, #20]
 800f08c:	f7fd fee0 	bl	800ce50 <tcp_abandon>
      return;
 800f090:	e007      	b.n	800f0a2 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800f092:	6978      	ldr	r0, [r7, #20]
 800f094:	f002 fd7c 	bl	8011b90 <tcp_output>
  return;
 800f098:	bf00      	nop
 800f09a:	e001      	b.n	800f0a0 <tcp_listen_input+0x1c0>
    return;
 800f09c:	bf00      	nop
 800f09e:	e000      	b.n	800f0a2 <tcp_listen_input+0x1c2>
  return;
 800f0a0:	bf00      	nop
}
 800f0a2:	371c      	adds	r7, #28
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd90      	pop	{r4, r7, pc}
 800f0a8:	20008abc 	.word	0x20008abc
 800f0ac:	0801aeac 	.word	0x0801aeac
 800f0b0:	0801b0a4 	.word	0x0801b0a4
 800f0b4:	0801aef8 	.word	0x0801aef8
 800f0b8:	20008ab4 	.word	0x20008ab4
 800f0bc:	20008aba 	.word	0x20008aba
 800f0c0:	20008ab0 	.word	0x20008ab0
 800f0c4:	20008aa0 	.word	0x20008aa0
 800f0c8:	2000bdf0 	.word	0x2000bdf0
 800f0cc:	2000bdf4 	.word	0x2000bdf4
 800f0d0:	2000bde0 	.word	0x2000bde0
 800f0d4:	2000f514 	.word	0x2000f514
 800f0d8:	2000f510 	.word	0x2000f510

0800f0dc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b086      	sub	sp, #24
 800f0e0:	af04      	add	r7, sp, #16
 800f0e2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f0e4:	4b30      	ldr	r3, [pc, #192]	; (800f1a8 <tcp_timewait_input+0xcc>)
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	f003 0304 	and.w	r3, r3, #4
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d154      	bne.n	800f19a <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d106      	bne.n	800f104 <tcp_timewait_input+0x28>
 800f0f6:	4b2d      	ldr	r3, [pc, #180]	; (800f1ac <tcp_timewait_input+0xd0>)
 800f0f8:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f0fc:	492c      	ldr	r1, [pc, #176]	; (800f1b0 <tcp_timewait_input+0xd4>)
 800f0fe:	482d      	ldr	r0, [pc, #180]	; (800f1b4 <tcp_timewait_input+0xd8>)
 800f100:	f008 fed2 	bl	8017ea8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f104:	4b28      	ldr	r3, [pc, #160]	; (800f1a8 <tcp_timewait_input+0xcc>)
 800f106:	781b      	ldrb	r3, [r3, #0]
 800f108:	f003 0302 	and.w	r3, r3, #2
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d02a      	beq.n	800f166 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f110:	4b29      	ldr	r3, [pc, #164]	; (800f1b8 <tcp_timewait_input+0xdc>)
 800f112:	681a      	ldr	r2, [r3, #0]
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f118:	1ad3      	subs	r3, r2, r3
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	db2d      	blt.n	800f17a <tcp_timewait_input+0x9e>
 800f11e:	4b26      	ldr	r3, [pc, #152]	; (800f1b8 <tcp_timewait_input+0xdc>)
 800f120:	681a      	ldr	r2, [r3, #0]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f126:	6879      	ldr	r1, [r7, #4]
 800f128:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f12a:	440b      	add	r3, r1
 800f12c:	1ad3      	subs	r3, r2, r3
 800f12e:	2b00      	cmp	r3, #0
 800f130:	dc23      	bgt.n	800f17a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f132:	4b22      	ldr	r3, [pc, #136]	; (800f1bc <tcp_timewait_input+0xe0>)
 800f134:	6819      	ldr	r1, [r3, #0]
 800f136:	4b22      	ldr	r3, [pc, #136]	; (800f1c0 <tcp_timewait_input+0xe4>)
 800f138:	881b      	ldrh	r3, [r3, #0]
 800f13a:	461a      	mov	r2, r3
 800f13c:	4b1e      	ldr	r3, [pc, #120]	; (800f1b8 <tcp_timewait_input+0xdc>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f142:	4b20      	ldr	r3, [pc, #128]	; (800f1c4 <tcp_timewait_input+0xe8>)
 800f144:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f146:	885b      	ldrh	r3, [r3, #2]
 800f148:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f14a:	4a1e      	ldr	r2, [pc, #120]	; (800f1c4 <tcp_timewait_input+0xe8>)
 800f14c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f14e:	8812      	ldrh	r2, [r2, #0]
 800f150:	b292      	uxth	r2, r2
 800f152:	9202      	str	r2, [sp, #8]
 800f154:	9301      	str	r3, [sp, #4]
 800f156:	4b1c      	ldr	r3, [pc, #112]	; (800f1c8 <tcp_timewait_input+0xec>)
 800f158:	9300      	str	r3, [sp, #0]
 800f15a:	4b1c      	ldr	r3, [pc, #112]	; (800f1cc <tcp_timewait_input+0xf0>)
 800f15c:	4602      	mov	r2, r0
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f003 fada 	bl	8012718 <tcp_rst>
      return;
 800f164:	e01c      	b.n	800f1a0 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800f166:	4b10      	ldr	r3, [pc, #64]	; (800f1a8 <tcp_timewait_input+0xcc>)
 800f168:	781b      	ldrb	r3, [r3, #0]
 800f16a:	f003 0301 	and.w	r3, r3, #1
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d003      	beq.n	800f17a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f172:	4b17      	ldr	r3, [pc, #92]	; (800f1d0 <tcp_timewait_input+0xf4>)
 800f174:	681a      	ldr	r2, [r3, #0]
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f17a:	4b11      	ldr	r3, [pc, #68]	; (800f1c0 <tcp_timewait_input+0xe4>)
 800f17c:	881b      	ldrh	r3, [r3, #0]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d00d      	beq.n	800f19e <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	8b5b      	ldrh	r3, [r3, #26]
 800f186:	f043 0302 	orr.w	r3, r3, #2
 800f18a:	b29a      	uxth	r2, r3
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f002 fcfd 	bl	8011b90 <tcp_output>
  }
  return;
 800f196:	bf00      	nop
 800f198:	e001      	b.n	800f19e <tcp_timewait_input+0xc2>
    return;
 800f19a:	bf00      	nop
 800f19c:	e000      	b.n	800f1a0 <tcp_timewait_input+0xc4>
  return;
 800f19e:	bf00      	nop
}
 800f1a0:	3708      	adds	r7, #8
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	20008abc 	.word	0x20008abc
 800f1ac:	0801aeac 	.word	0x0801aeac
 800f1b0:	0801b0c4 	.word	0x0801b0c4
 800f1b4:	0801aef8 	.word	0x0801aef8
 800f1b8:	20008ab0 	.word	0x20008ab0
 800f1bc:	20008ab4 	.word	0x20008ab4
 800f1c0:	20008aba 	.word	0x20008aba
 800f1c4:	20008aa0 	.word	0x20008aa0
 800f1c8:	2000bdf0 	.word	0x2000bdf0
 800f1cc:	2000bdf4 	.word	0x2000bdf4
 800f1d0:	2000f518 	.word	0x2000f518

0800f1d4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f1d4:	b590      	push	{r4, r7, lr}
 800f1d6:	b08d      	sub	sp, #52	; 0x34
 800f1d8:	af04      	add	r7, sp, #16
 800f1da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d106      	bne.n	800f1f8 <tcp_process+0x24>
 800f1ea:	4ba5      	ldr	r3, [pc, #660]	; (800f480 <tcp_process+0x2ac>)
 800f1ec:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f1f0:	49a4      	ldr	r1, [pc, #656]	; (800f484 <tcp_process+0x2b0>)
 800f1f2:	48a5      	ldr	r0, [pc, #660]	; (800f488 <tcp_process+0x2b4>)
 800f1f4:	f008 fe58 	bl	8017ea8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f1f8:	4ba4      	ldr	r3, [pc, #656]	; (800f48c <tcp_process+0x2b8>)
 800f1fa:	781b      	ldrb	r3, [r3, #0]
 800f1fc:	f003 0304 	and.w	r3, r3, #4
 800f200:	2b00      	cmp	r3, #0
 800f202:	d04e      	beq.n	800f2a2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	7d1b      	ldrb	r3, [r3, #20]
 800f208:	2b02      	cmp	r3, #2
 800f20a:	d108      	bne.n	800f21e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f210:	4b9f      	ldr	r3, [pc, #636]	; (800f490 <tcp_process+0x2bc>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	429a      	cmp	r2, r3
 800f216:	d123      	bne.n	800f260 <tcp_process+0x8c>
        acceptable = 1;
 800f218:	2301      	movs	r3, #1
 800f21a:	76fb      	strb	r3, [r7, #27]
 800f21c:	e020      	b.n	800f260 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f222:	4b9c      	ldr	r3, [pc, #624]	; (800f494 <tcp_process+0x2c0>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	429a      	cmp	r2, r3
 800f228:	d102      	bne.n	800f230 <tcp_process+0x5c>
        acceptable = 1;
 800f22a:	2301      	movs	r3, #1
 800f22c:	76fb      	strb	r3, [r7, #27]
 800f22e:	e017      	b.n	800f260 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f230:	4b98      	ldr	r3, [pc, #608]	; (800f494 <tcp_process+0x2c0>)
 800f232:	681a      	ldr	r2, [r3, #0]
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f238:	1ad3      	subs	r3, r2, r3
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	db10      	blt.n	800f260 <tcp_process+0x8c>
 800f23e:	4b95      	ldr	r3, [pc, #596]	; (800f494 <tcp_process+0x2c0>)
 800f240:	681a      	ldr	r2, [r3, #0]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f246:	6879      	ldr	r1, [r7, #4]
 800f248:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f24a:	440b      	add	r3, r1
 800f24c:	1ad3      	subs	r3, r2, r3
 800f24e:	2b00      	cmp	r3, #0
 800f250:	dc06      	bgt.n	800f260 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	8b5b      	ldrh	r3, [r3, #26]
 800f256:	f043 0302 	orr.w	r3, r3, #2
 800f25a:	b29a      	uxth	r2, r3
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f260:	7efb      	ldrb	r3, [r7, #27]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d01b      	beq.n	800f29e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	7d1b      	ldrb	r3, [r3, #20]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d106      	bne.n	800f27c <tcp_process+0xa8>
 800f26e:	4b84      	ldr	r3, [pc, #528]	; (800f480 <tcp_process+0x2ac>)
 800f270:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f274:	4988      	ldr	r1, [pc, #544]	; (800f498 <tcp_process+0x2c4>)
 800f276:	4884      	ldr	r0, [pc, #528]	; (800f488 <tcp_process+0x2b4>)
 800f278:	f008 fe16 	bl	8017ea8 <iprintf>
      recv_flags |= TF_RESET;
 800f27c:	4b87      	ldr	r3, [pc, #540]	; (800f49c <tcp_process+0x2c8>)
 800f27e:	781b      	ldrb	r3, [r3, #0]
 800f280:	f043 0308 	orr.w	r3, r3, #8
 800f284:	b2da      	uxtb	r2, r3
 800f286:	4b85      	ldr	r3, [pc, #532]	; (800f49c <tcp_process+0x2c8>)
 800f288:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	8b5b      	ldrh	r3, [r3, #26]
 800f28e:	f023 0301 	bic.w	r3, r3, #1
 800f292:	b29a      	uxth	r2, r3
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f298:	f06f 030d 	mvn.w	r3, #13
 800f29c:	e37a      	b.n	800f994 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	e378      	b.n	800f994 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f2a2:	4b7a      	ldr	r3, [pc, #488]	; (800f48c <tcp_process+0x2b8>)
 800f2a4:	781b      	ldrb	r3, [r3, #0]
 800f2a6:	f003 0302 	and.w	r3, r3, #2
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d010      	beq.n	800f2d0 <tcp_process+0xfc>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	7d1b      	ldrb	r3, [r3, #20]
 800f2b2:	2b02      	cmp	r3, #2
 800f2b4:	d00c      	beq.n	800f2d0 <tcp_process+0xfc>
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	7d1b      	ldrb	r3, [r3, #20]
 800f2ba:	2b03      	cmp	r3, #3
 800f2bc:	d008      	beq.n	800f2d0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	8b5b      	ldrh	r3, [r3, #26]
 800f2c2:	f043 0302 	orr.w	r3, r3, #2
 800f2c6:	b29a      	uxth	r2, r3
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	e361      	b.n	800f994 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	8b5b      	ldrh	r3, [r3, #26]
 800f2d4:	f003 0310 	and.w	r3, r3, #16
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d103      	bne.n	800f2e4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f2dc:	4b70      	ldr	r3, [pc, #448]	; (800f4a0 <tcp_process+0x2cc>)
 800f2de:	681a      	ldr	r2, [r3, #0]
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f001 fc2d 	bl	8010b54 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	7d1b      	ldrb	r3, [r3, #20]
 800f2fe:	3b02      	subs	r3, #2
 800f300:	2b07      	cmp	r3, #7
 800f302:	f200 8337 	bhi.w	800f974 <tcp_process+0x7a0>
 800f306:	a201      	add	r2, pc, #4	; (adr r2, 800f30c <tcp_process+0x138>)
 800f308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f30c:	0800f32d 	.word	0x0800f32d
 800f310:	0800f55d 	.word	0x0800f55d
 800f314:	0800f6d5 	.word	0x0800f6d5
 800f318:	0800f6ff 	.word	0x0800f6ff
 800f31c:	0800f823 	.word	0x0800f823
 800f320:	0800f6d5 	.word	0x0800f6d5
 800f324:	0800f8af 	.word	0x0800f8af
 800f328:	0800f93f 	.word	0x0800f93f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f32c:	4b57      	ldr	r3, [pc, #348]	; (800f48c <tcp_process+0x2b8>)
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	f003 0310 	and.w	r3, r3, #16
 800f334:	2b00      	cmp	r3, #0
 800f336:	f000 80e4 	beq.w	800f502 <tcp_process+0x32e>
 800f33a:	4b54      	ldr	r3, [pc, #336]	; (800f48c <tcp_process+0x2b8>)
 800f33c:	781b      	ldrb	r3, [r3, #0]
 800f33e:	f003 0302 	and.w	r3, r3, #2
 800f342:	2b00      	cmp	r3, #0
 800f344:	f000 80dd 	beq.w	800f502 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f34c:	1c5a      	adds	r2, r3, #1
 800f34e:	4b50      	ldr	r3, [pc, #320]	; (800f490 <tcp_process+0x2bc>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	429a      	cmp	r2, r3
 800f354:	f040 80d5 	bne.w	800f502 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f358:	4b4e      	ldr	r3, [pc, #312]	; (800f494 <tcp_process+0x2c0>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	1c5a      	adds	r2, r3, #1
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f36a:	4b49      	ldr	r3, [pc, #292]	; (800f490 <tcp_process+0x2bc>)
 800f36c:	681a      	ldr	r2, [r3, #0]
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f372:	4b4c      	ldr	r3, [pc, #304]	; (800f4a4 <tcp_process+0x2d0>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	89db      	ldrh	r3, [r3, #14]
 800f378:	b29a      	uxth	r2, r3
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f38c:	4b41      	ldr	r3, [pc, #260]	; (800f494 <tcp_process+0x2c0>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	1e5a      	subs	r2, r3, #1
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2204      	movs	r2, #4
 800f39a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	3304      	adds	r3, #4
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f007 f939 	bl	801661c <ip4_route>
 800f3aa:	4601      	mov	r1, r0
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	3304      	adds	r3, #4
 800f3b0:	461a      	mov	r2, r3
 800f3b2:	4620      	mov	r0, r4
 800f3b4:	f7ff f88e 	bl	800e4d4 <tcp_eff_send_mss_netif>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	461a      	mov	r2, r3
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3c4:	009a      	lsls	r2, r3, #2
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3ca:	005b      	lsls	r3, r3, #1
 800f3cc:	f241 111c 	movw	r1, #4380	; 0x111c
 800f3d0:	428b      	cmp	r3, r1
 800f3d2:	bf38      	it	cc
 800f3d4:	460b      	movcc	r3, r1
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	d204      	bcs.n	800f3e4 <tcp_process+0x210>
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3de:	009b      	lsls	r3, r3, #2
 800f3e0:	b29b      	uxth	r3, r3
 800f3e2:	e00d      	b.n	800f400 <tcp_process+0x22c>
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3e8:	005b      	lsls	r3, r3, #1
 800f3ea:	f241 121c 	movw	r2, #4380	; 0x111c
 800f3ee:	4293      	cmp	r3, r2
 800f3f0:	d904      	bls.n	800f3fc <tcp_process+0x228>
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3f6:	005b      	lsls	r3, r3, #1
 800f3f8:	b29b      	uxth	r3, r3
 800f3fa:	e001      	b.n	800f400 <tcp_process+0x22c>
 800f3fc:	f241 131c 	movw	r3, #4380	; 0x111c
 800f400:	687a      	ldr	r2, [r7, #4]
 800f402:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d106      	bne.n	800f41e <tcp_process+0x24a>
 800f410:	4b1b      	ldr	r3, [pc, #108]	; (800f480 <tcp_process+0x2ac>)
 800f412:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f416:	4924      	ldr	r1, [pc, #144]	; (800f4a8 <tcp_process+0x2d4>)
 800f418:	481b      	ldr	r0, [pc, #108]	; (800f488 <tcp_process+0x2b4>)
 800f41a:	f008 fd45 	bl	8017ea8 <iprintf>
        --pcb->snd_queuelen;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f424:	3b01      	subs	r3, #1
 800f426:	b29a      	uxth	r2, r3
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f432:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f434:	69fb      	ldr	r3, [r7, #28]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d111      	bne.n	800f45e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f43e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f440:	69fb      	ldr	r3, [r7, #28]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d106      	bne.n	800f454 <tcp_process+0x280>
 800f446:	4b0e      	ldr	r3, [pc, #56]	; (800f480 <tcp_process+0x2ac>)
 800f448:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f44c:	4917      	ldr	r1, [pc, #92]	; (800f4ac <tcp_process+0x2d8>)
 800f44e:	480e      	ldr	r0, [pc, #56]	; (800f488 <tcp_process+0x2b4>)
 800f450:	f008 fd2a 	bl	8017ea8 <iprintf>
          pcb->unsent = rseg->next;
 800f454:	69fb      	ldr	r3, [r7, #28]
 800f456:	681a      	ldr	r2, [r3, #0]
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	66da      	str	r2, [r3, #108]	; 0x6c
 800f45c:	e003      	b.n	800f466 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800f45e:	69fb      	ldr	r3, [r7, #28]
 800f460:	681a      	ldr	r2, [r3, #0]
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f466:	69f8      	ldr	r0, [r7, #28]
 800f468:	f7fe fc52 	bl	800dd10 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f470:	2b00      	cmp	r3, #0
 800f472:	d11d      	bne.n	800f4b0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f47a:	861a      	strh	r2, [r3, #48]	; 0x30
 800f47c:	e01f      	b.n	800f4be <tcp_process+0x2ea>
 800f47e:	bf00      	nop
 800f480:	0801aeac 	.word	0x0801aeac
 800f484:	0801b0e4 	.word	0x0801b0e4
 800f488:	0801aef8 	.word	0x0801aef8
 800f48c:	20008abc 	.word	0x20008abc
 800f490:	20008ab4 	.word	0x20008ab4
 800f494:	20008ab0 	.word	0x20008ab0
 800f498:	0801b100 	.word	0x0801b100
 800f49c:	20008abd 	.word	0x20008abd
 800f4a0:	2000f518 	.word	0x2000f518
 800f4a4:	20008aa0 	.word	0x20008aa0
 800f4a8:	0801b120 	.word	0x0801b120
 800f4ac:	0801b138 	.word	0x0801b138
        } else {
          pcb->rtime = 0;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d00a      	beq.n	800f4de <tcp_process+0x30a>
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f4ce:	687a      	ldr	r2, [r7, #4]
 800f4d0:	6910      	ldr	r0, [r2, #16]
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	6879      	ldr	r1, [r7, #4]
 800f4d6:	4798      	blx	r3
 800f4d8:	4603      	mov	r3, r0
 800f4da:	76bb      	strb	r3, [r7, #26]
 800f4dc:	e001      	b.n	800f4e2 <tcp_process+0x30e>
 800f4de:	2300      	movs	r3, #0
 800f4e0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f4e2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f4e6:	f113 0f0d 	cmn.w	r3, #13
 800f4ea:	d102      	bne.n	800f4f2 <tcp_process+0x31e>
          return ERR_ABRT;
 800f4ec:	f06f 030c 	mvn.w	r3, #12
 800f4f0:	e250      	b.n	800f994 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	8b5b      	ldrh	r3, [r3, #26]
 800f4f6:	f043 0302 	orr.w	r3, r3, #2
 800f4fa:	b29a      	uxth	r2, r3
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f500:	e23a      	b.n	800f978 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f502:	4b9d      	ldr	r3, [pc, #628]	; (800f778 <tcp_process+0x5a4>)
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	f003 0310 	and.w	r3, r3, #16
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	f000 8234 	beq.w	800f978 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f510:	4b9a      	ldr	r3, [pc, #616]	; (800f77c <tcp_process+0x5a8>)
 800f512:	6819      	ldr	r1, [r3, #0]
 800f514:	4b9a      	ldr	r3, [pc, #616]	; (800f780 <tcp_process+0x5ac>)
 800f516:	881b      	ldrh	r3, [r3, #0]
 800f518:	461a      	mov	r2, r3
 800f51a:	4b9a      	ldr	r3, [pc, #616]	; (800f784 <tcp_process+0x5b0>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f520:	4b99      	ldr	r3, [pc, #612]	; (800f788 <tcp_process+0x5b4>)
 800f522:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f524:	885b      	ldrh	r3, [r3, #2]
 800f526:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f528:	4a97      	ldr	r2, [pc, #604]	; (800f788 <tcp_process+0x5b4>)
 800f52a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f52c:	8812      	ldrh	r2, [r2, #0]
 800f52e:	b292      	uxth	r2, r2
 800f530:	9202      	str	r2, [sp, #8]
 800f532:	9301      	str	r3, [sp, #4]
 800f534:	4b95      	ldr	r3, [pc, #596]	; (800f78c <tcp_process+0x5b8>)
 800f536:	9300      	str	r3, [sp, #0]
 800f538:	4b95      	ldr	r3, [pc, #596]	; (800f790 <tcp_process+0x5bc>)
 800f53a:	4602      	mov	r2, r0
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f003 f8eb 	bl	8012718 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f548:	2b05      	cmp	r3, #5
 800f54a:	f200 8215 	bhi.w	800f978 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	2200      	movs	r2, #0
 800f552:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f002 feab 	bl	80122b0 <tcp_rexmit_rto>
      break;
 800f55a:	e20d      	b.n	800f978 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f55c:	4b86      	ldr	r3, [pc, #536]	; (800f778 <tcp_process+0x5a4>)
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	f003 0310 	and.w	r3, r3, #16
 800f564:	2b00      	cmp	r3, #0
 800f566:	f000 80a1 	beq.w	800f6ac <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f56a:	4b84      	ldr	r3, [pc, #528]	; (800f77c <tcp_process+0x5a8>)
 800f56c:	681a      	ldr	r2, [r3, #0]
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f572:	1ad3      	subs	r3, r2, r3
 800f574:	3b01      	subs	r3, #1
 800f576:	2b00      	cmp	r3, #0
 800f578:	db7e      	blt.n	800f678 <tcp_process+0x4a4>
 800f57a:	4b80      	ldr	r3, [pc, #512]	; (800f77c <tcp_process+0x5a8>)
 800f57c:	681a      	ldr	r2, [r3, #0]
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f582:	1ad3      	subs	r3, r2, r3
 800f584:	2b00      	cmp	r3, #0
 800f586:	dc77      	bgt.n	800f678 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2204      	movs	r2, #4
 800f58c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f592:	2b00      	cmp	r3, #0
 800f594:	d102      	bne.n	800f59c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f596:	23fa      	movs	r3, #250	; 0xfa
 800f598:	76bb      	strb	r3, [r7, #26]
 800f59a:	e01d      	b.n	800f5d8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5a0:	699b      	ldr	r3, [r3, #24]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d106      	bne.n	800f5b4 <tcp_process+0x3e0>
 800f5a6:	4b7b      	ldr	r3, [pc, #492]	; (800f794 <tcp_process+0x5c0>)
 800f5a8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f5ac:	497a      	ldr	r1, [pc, #488]	; (800f798 <tcp_process+0x5c4>)
 800f5ae:	487b      	ldr	r0, [pc, #492]	; (800f79c <tcp_process+0x5c8>)
 800f5b0:	f008 fc7a 	bl	8017ea8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5b8:	699b      	ldr	r3, [r3, #24]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d00a      	beq.n	800f5d4 <tcp_process+0x400>
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5c2:	699b      	ldr	r3, [r3, #24]
 800f5c4:	687a      	ldr	r2, [r7, #4]
 800f5c6:	6910      	ldr	r0, [r2, #16]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	6879      	ldr	r1, [r7, #4]
 800f5cc:	4798      	blx	r3
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	76bb      	strb	r3, [r7, #26]
 800f5d2:	e001      	b.n	800f5d8 <tcp_process+0x404>
 800f5d4:	23f0      	movs	r3, #240	; 0xf0
 800f5d6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f5d8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d00a      	beq.n	800f5f6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f5e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f5e4:	f113 0f0d 	cmn.w	r3, #13
 800f5e8:	d002      	beq.n	800f5f0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f7fd fcee 	bl	800cfcc <tcp_abort>
            }
            return ERR_ABRT;
 800f5f0:	f06f 030c 	mvn.w	r3, #12
 800f5f4:	e1ce      	b.n	800f994 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f000 fae0 	bl	800fbbc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f5fc:	4b68      	ldr	r3, [pc, #416]	; (800f7a0 <tcp_process+0x5cc>)
 800f5fe:	881b      	ldrh	r3, [r3, #0]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d005      	beq.n	800f610 <tcp_process+0x43c>
            recv_acked--;
 800f604:	4b66      	ldr	r3, [pc, #408]	; (800f7a0 <tcp_process+0x5cc>)
 800f606:	881b      	ldrh	r3, [r3, #0]
 800f608:	3b01      	subs	r3, #1
 800f60a:	b29a      	uxth	r2, r3
 800f60c:	4b64      	ldr	r3, [pc, #400]	; (800f7a0 <tcp_process+0x5cc>)
 800f60e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f614:	009a      	lsls	r2, r3, #2
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f61a:	005b      	lsls	r3, r3, #1
 800f61c:	f241 111c 	movw	r1, #4380	; 0x111c
 800f620:	428b      	cmp	r3, r1
 800f622:	bf38      	it	cc
 800f624:	460b      	movcc	r3, r1
 800f626:	429a      	cmp	r2, r3
 800f628:	d204      	bcs.n	800f634 <tcp_process+0x460>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f62e:	009b      	lsls	r3, r3, #2
 800f630:	b29b      	uxth	r3, r3
 800f632:	e00d      	b.n	800f650 <tcp_process+0x47c>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f638:	005b      	lsls	r3, r3, #1
 800f63a:	f241 121c 	movw	r2, #4380	; 0x111c
 800f63e:	4293      	cmp	r3, r2
 800f640:	d904      	bls.n	800f64c <tcp_process+0x478>
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f646:	005b      	lsls	r3, r3, #1
 800f648:	b29b      	uxth	r3, r3
 800f64a:	e001      	b.n	800f650 <tcp_process+0x47c>
 800f64c:	f241 131c 	movw	r3, #4380	; 0x111c
 800f650:	687a      	ldr	r2, [r7, #4]
 800f652:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f656:	4b53      	ldr	r3, [pc, #332]	; (800f7a4 <tcp_process+0x5d0>)
 800f658:	781b      	ldrb	r3, [r3, #0]
 800f65a:	f003 0320 	and.w	r3, r3, #32
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d037      	beq.n	800f6d2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	8b5b      	ldrh	r3, [r3, #26]
 800f666:	f043 0302 	orr.w	r3, r3, #2
 800f66a:	b29a      	uxth	r2, r3
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2207      	movs	r2, #7
 800f674:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f676:	e02c      	b.n	800f6d2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f678:	4b40      	ldr	r3, [pc, #256]	; (800f77c <tcp_process+0x5a8>)
 800f67a:	6819      	ldr	r1, [r3, #0]
 800f67c:	4b40      	ldr	r3, [pc, #256]	; (800f780 <tcp_process+0x5ac>)
 800f67e:	881b      	ldrh	r3, [r3, #0]
 800f680:	461a      	mov	r2, r3
 800f682:	4b40      	ldr	r3, [pc, #256]	; (800f784 <tcp_process+0x5b0>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f688:	4b3f      	ldr	r3, [pc, #252]	; (800f788 <tcp_process+0x5b4>)
 800f68a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f68c:	885b      	ldrh	r3, [r3, #2]
 800f68e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f690:	4a3d      	ldr	r2, [pc, #244]	; (800f788 <tcp_process+0x5b4>)
 800f692:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f694:	8812      	ldrh	r2, [r2, #0]
 800f696:	b292      	uxth	r2, r2
 800f698:	9202      	str	r2, [sp, #8]
 800f69a:	9301      	str	r3, [sp, #4]
 800f69c:	4b3b      	ldr	r3, [pc, #236]	; (800f78c <tcp_process+0x5b8>)
 800f69e:	9300      	str	r3, [sp, #0]
 800f6a0:	4b3b      	ldr	r3, [pc, #236]	; (800f790 <tcp_process+0x5bc>)
 800f6a2:	4602      	mov	r2, r0
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	f003 f837 	bl	8012718 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f6aa:	e167      	b.n	800f97c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f6ac:	4b32      	ldr	r3, [pc, #200]	; (800f778 <tcp_process+0x5a4>)
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	f003 0302 	and.w	r3, r3, #2
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	f000 8161 	beq.w	800f97c <tcp_process+0x7a8>
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6be:	1e5a      	subs	r2, r3, #1
 800f6c0:	4b30      	ldr	r3, [pc, #192]	; (800f784 <tcp_process+0x5b0>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	f040 8159 	bne.w	800f97c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f002 fe12 	bl	80122f4 <tcp_rexmit>
      break;
 800f6d0:	e154      	b.n	800f97c <tcp_process+0x7a8>
 800f6d2:	e153      	b.n	800f97c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	f000 fa71 	bl	800fbbc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f6da:	4b32      	ldr	r3, [pc, #200]	; (800f7a4 <tcp_process+0x5d0>)
 800f6dc:	781b      	ldrb	r3, [r3, #0]
 800f6de:	f003 0320 	and.w	r3, r3, #32
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	f000 814c 	beq.w	800f980 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	8b5b      	ldrh	r3, [r3, #26]
 800f6ec:	f043 0302 	orr.w	r3, r3, #2
 800f6f0:	b29a      	uxth	r2, r3
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2207      	movs	r2, #7
 800f6fa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f6fc:	e140      	b.n	800f980 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f000 fa5c 	bl	800fbbc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f704:	4b27      	ldr	r3, [pc, #156]	; (800f7a4 <tcp_process+0x5d0>)
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	f003 0320 	and.w	r3, r3, #32
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d071      	beq.n	800f7f4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f710:	4b19      	ldr	r3, [pc, #100]	; (800f778 <tcp_process+0x5a4>)
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	f003 0310 	and.w	r3, r3, #16
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d060      	beq.n	800f7de <tcp_process+0x60a>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f720:	4b16      	ldr	r3, [pc, #88]	; (800f77c <tcp_process+0x5a8>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	429a      	cmp	r2, r3
 800f726:	d15a      	bne.n	800f7de <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d156      	bne.n	800f7de <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	8b5b      	ldrh	r3, [r3, #26]
 800f734:	f043 0302 	orr.w	r3, r3, #2
 800f738:	b29a      	uxth	r2, r3
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f73e:	6878      	ldr	r0, [r7, #4]
 800f740:	f7fe fdbe 	bl	800e2c0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f744:	4b18      	ldr	r3, [pc, #96]	; (800f7a8 <tcp_process+0x5d4>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	687a      	ldr	r2, [r7, #4]
 800f74a:	429a      	cmp	r2, r3
 800f74c:	d105      	bne.n	800f75a <tcp_process+0x586>
 800f74e:	4b16      	ldr	r3, [pc, #88]	; (800f7a8 <tcp_process+0x5d4>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	68db      	ldr	r3, [r3, #12]
 800f754:	4a14      	ldr	r2, [pc, #80]	; (800f7a8 <tcp_process+0x5d4>)
 800f756:	6013      	str	r3, [r2, #0]
 800f758:	e02e      	b.n	800f7b8 <tcp_process+0x5e4>
 800f75a:	4b13      	ldr	r3, [pc, #76]	; (800f7a8 <tcp_process+0x5d4>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	617b      	str	r3, [r7, #20]
 800f760:	e027      	b.n	800f7b2 <tcp_process+0x5de>
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	68db      	ldr	r3, [r3, #12]
 800f766:	687a      	ldr	r2, [r7, #4]
 800f768:	429a      	cmp	r2, r3
 800f76a:	d11f      	bne.n	800f7ac <tcp_process+0x5d8>
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	68da      	ldr	r2, [r3, #12]
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	60da      	str	r2, [r3, #12]
 800f774:	e020      	b.n	800f7b8 <tcp_process+0x5e4>
 800f776:	bf00      	nop
 800f778:	20008abc 	.word	0x20008abc
 800f77c:	20008ab4 	.word	0x20008ab4
 800f780:	20008aba 	.word	0x20008aba
 800f784:	20008ab0 	.word	0x20008ab0
 800f788:	20008aa0 	.word	0x20008aa0
 800f78c:	2000bdf0 	.word	0x2000bdf0
 800f790:	2000bdf4 	.word	0x2000bdf4
 800f794:	0801aeac 	.word	0x0801aeac
 800f798:	0801b14c 	.word	0x0801b14c
 800f79c:	0801aef8 	.word	0x0801aef8
 800f7a0:	20008ab8 	.word	0x20008ab8
 800f7a4:	20008abd 	.word	0x20008abd
 800f7a8:	2000f514 	.word	0x2000f514
 800f7ac:	697b      	ldr	r3, [r7, #20]
 800f7ae:	68db      	ldr	r3, [r3, #12]
 800f7b0:	617b      	str	r3, [r7, #20]
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d1d4      	bne.n	800f762 <tcp_process+0x58e>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	60da      	str	r2, [r3, #12]
 800f7be:	4b77      	ldr	r3, [pc, #476]	; (800f99c <tcp_process+0x7c8>)
 800f7c0:	2201      	movs	r2, #1
 800f7c2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	220a      	movs	r2, #10
 800f7c8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f7ca:	4b75      	ldr	r3, [pc, #468]	; (800f9a0 <tcp_process+0x7cc>)
 800f7cc:	681a      	ldr	r2, [r3, #0]
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	60da      	str	r2, [r3, #12]
 800f7d2:	4a73      	ldr	r2, [pc, #460]	; (800f9a0 <tcp_process+0x7cc>)
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6013      	str	r3, [r2, #0]
 800f7d8:	f003 f960 	bl	8012a9c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f7dc:	e0d2      	b.n	800f984 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	8b5b      	ldrh	r3, [r3, #26]
 800f7e2:	f043 0302 	orr.w	r3, r3, #2
 800f7e6:	b29a      	uxth	r2, r3
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2208      	movs	r2, #8
 800f7f0:	751a      	strb	r2, [r3, #20]
      break;
 800f7f2:	e0c7      	b.n	800f984 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f7f4:	4b6b      	ldr	r3, [pc, #428]	; (800f9a4 <tcp_process+0x7d0>)
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	f003 0310 	and.w	r3, r3, #16
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	f000 80c1 	beq.w	800f984 <tcp_process+0x7b0>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f806:	4b68      	ldr	r3, [pc, #416]	; (800f9a8 <tcp_process+0x7d4>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	429a      	cmp	r2, r3
 800f80c:	f040 80ba 	bne.w	800f984 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f814:	2b00      	cmp	r3, #0
 800f816:	f040 80b5 	bne.w	800f984 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2206      	movs	r2, #6
 800f81e:	751a      	strb	r2, [r3, #20]
      break;
 800f820:	e0b0      	b.n	800f984 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f000 f9ca 	bl	800fbbc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f828:	4b60      	ldr	r3, [pc, #384]	; (800f9ac <tcp_process+0x7d8>)
 800f82a:	781b      	ldrb	r3, [r3, #0]
 800f82c:	f003 0320 	and.w	r3, r3, #32
 800f830:	2b00      	cmp	r3, #0
 800f832:	f000 80a9 	beq.w	800f988 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	8b5b      	ldrh	r3, [r3, #26]
 800f83a:	f043 0302 	orr.w	r3, r3, #2
 800f83e:	b29a      	uxth	r2, r3
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f7fe fd3b 	bl	800e2c0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f84a:	4b59      	ldr	r3, [pc, #356]	; (800f9b0 <tcp_process+0x7dc>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	687a      	ldr	r2, [r7, #4]
 800f850:	429a      	cmp	r2, r3
 800f852:	d105      	bne.n	800f860 <tcp_process+0x68c>
 800f854:	4b56      	ldr	r3, [pc, #344]	; (800f9b0 <tcp_process+0x7dc>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	68db      	ldr	r3, [r3, #12]
 800f85a:	4a55      	ldr	r2, [pc, #340]	; (800f9b0 <tcp_process+0x7dc>)
 800f85c:	6013      	str	r3, [r2, #0]
 800f85e:	e013      	b.n	800f888 <tcp_process+0x6b4>
 800f860:	4b53      	ldr	r3, [pc, #332]	; (800f9b0 <tcp_process+0x7dc>)
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	613b      	str	r3, [r7, #16]
 800f866:	e00c      	b.n	800f882 <tcp_process+0x6ae>
 800f868:	693b      	ldr	r3, [r7, #16]
 800f86a:	68db      	ldr	r3, [r3, #12]
 800f86c:	687a      	ldr	r2, [r7, #4]
 800f86e:	429a      	cmp	r2, r3
 800f870:	d104      	bne.n	800f87c <tcp_process+0x6a8>
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	68da      	ldr	r2, [r3, #12]
 800f876:	693b      	ldr	r3, [r7, #16]
 800f878:	60da      	str	r2, [r3, #12]
 800f87a:	e005      	b.n	800f888 <tcp_process+0x6b4>
 800f87c:	693b      	ldr	r3, [r7, #16]
 800f87e:	68db      	ldr	r3, [r3, #12]
 800f880:	613b      	str	r3, [r7, #16]
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d1ef      	bne.n	800f868 <tcp_process+0x694>
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2200      	movs	r2, #0
 800f88c:	60da      	str	r2, [r3, #12]
 800f88e:	4b43      	ldr	r3, [pc, #268]	; (800f99c <tcp_process+0x7c8>)
 800f890:	2201      	movs	r2, #1
 800f892:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	220a      	movs	r2, #10
 800f898:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f89a:	4b41      	ldr	r3, [pc, #260]	; (800f9a0 <tcp_process+0x7cc>)
 800f89c:	681a      	ldr	r2, [r3, #0]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	60da      	str	r2, [r3, #12]
 800f8a2:	4a3f      	ldr	r2, [pc, #252]	; (800f9a0 <tcp_process+0x7cc>)
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	6013      	str	r3, [r2, #0]
 800f8a8:	f003 f8f8 	bl	8012a9c <tcp_timer_needed>
      }
      break;
 800f8ac:	e06c      	b.n	800f988 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f8ae:	6878      	ldr	r0, [r7, #4]
 800f8b0:	f000 f984 	bl	800fbbc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f8b4:	4b3b      	ldr	r3, [pc, #236]	; (800f9a4 <tcp_process+0x7d0>)
 800f8b6:	781b      	ldrb	r3, [r3, #0]
 800f8b8:	f003 0310 	and.w	r3, r3, #16
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d065      	beq.n	800f98c <tcp_process+0x7b8>
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f8c4:	4b38      	ldr	r3, [pc, #224]	; (800f9a8 <tcp_process+0x7d4>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d15f      	bne.n	800f98c <tcp_process+0x7b8>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d15b      	bne.n	800f98c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f7fe fcf3 	bl	800e2c0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f8da:	4b35      	ldr	r3, [pc, #212]	; (800f9b0 <tcp_process+0x7dc>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	687a      	ldr	r2, [r7, #4]
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d105      	bne.n	800f8f0 <tcp_process+0x71c>
 800f8e4:	4b32      	ldr	r3, [pc, #200]	; (800f9b0 <tcp_process+0x7dc>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	68db      	ldr	r3, [r3, #12]
 800f8ea:	4a31      	ldr	r2, [pc, #196]	; (800f9b0 <tcp_process+0x7dc>)
 800f8ec:	6013      	str	r3, [r2, #0]
 800f8ee:	e013      	b.n	800f918 <tcp_process+0x744>
 800f8f0:	4b2f      	ldr	r3, [pc, #188]	; (800f9b0 <tcp_process+0x7dc>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	60fb      	str	r3, [r7, #12]
 800f8f6:	e00c      	b.n	800f912 <tcp_process+0x73e>
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	68db      	ldr	r3, [r3, #12]
 800f8fc:	687a      	ldr	r2, [r7, #4]
 800f8fe:	429a      	cmp	r2, r3
 800f900:	d104      	bne.n	800f90c <tcp_process+0x738>
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	68da      	ldr	r2, [r3, #12]
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	60da      	str	r2, [r3, #12]
 800f90a:	e005      	b.n	800f918 <tcp_process+0x744>
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	68db      	ldr	r3, [r3, #12]
 800f910:	60fb      	str	r3, [r7, #12]
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d1ef      	bne.n	800f8f8 <tcp_process+0x724>
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2200      	movs	r2, #0
 800f91c:	60da      	str	r2, [r3, #12]
 800f91e:	4b1f      	ldr	r3, [pc, #124]	; (800f99c <tcp_process+0x7c8>)
 800f920:	2201      	movs	r2, #1
 800f922:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	220a      	movs	r2, #10
 800f928:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f92a:	4b1d      	ldr	r3, [pc, #116]	; (800f9a0 <tcp_process+0x7cc>)
 800f92c:	681a      	ldr	r2, [r3, #0]
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	60da      	str	r2, [r3, #12]
 800f932:	4a1b      	ldr	r2, [pc, #108]	; (800f9a0 <tcp_process+0x7cc>)
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6013      	str	r3, [r2, #0]
 800f938:	f003 f8b0 	bl	8012a9c <tcp_timer_needed>
      }
      break;
 800f93c:	e026      	b.n	800f98c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f000 f93c 	bl	800fbbc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f944:	4b17      	ldr	r3, [pc, #92]	; (800f9a4 <tcp_process+0x7d0>)
 800f946:	781b      	ldrb	r3, [r3, #0]
 800f948:	f003 0310 	and.w	r3, r3, #16
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d01f      	beq.n	800f990 <tcp_process+0x7bc>
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f954:	4b14      	ldr	r3, [pc, #80]	; (800f9a8 <tcp_process+0x7d4>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	429a      	cmp	r2, r3
 800f95a:	d119      	bne.n	800f990 <tcp_process+0x7bc>
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f960:	2b00      	cmp	r3, #0
 800f962:	d115      	bne.n	800f990 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f964:	4b11      	ldr	r3, [pc, #68]	; (800f9ac <tcp_process+0x7d8>)
 800f966:	781b      	ldrb	r3, [r3, #0]
 800f968:	f043 0310 	orr.w	r3, r3, #16
 800f96c:	b2da      	uxtb	r2, r3
 800f96e:	4b0f      	ldr	r3, [pc, #60]	; (800f9ac <tcp_process+0x7d8>)
 800f970:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f972:	e00d      	b.n	800f990 <tcp_process+0x7bc>
    default:
      break;
 800f974:	bf00      	nop
 800f976:	e00c      	b.n	800f992 <tcp_process+0x7be>
      break;
 800f978:	bf00      	nop
 800f97a:	e00a      	b.n	800f992 <tcp_process+0x7be>
      break;
 800f97c:	bf00      	nop
 800f97e:	e008      	b.n	800f992 <tcp_process+0x7be>
      break;
 800f980:	bf00      	nop
 800f982:	e006      	b.n	800f992 <tcp_process+0x7be>
      break;
 800f984:	bf00      	nop
 800f986:	e004      	b.n	800f992 <tcp_process+0x7be>
      break;
 800f988:	bf00      	nop
 800f98a:	e002      	b.n	800f992 <tcp_process+0x7be>
      break;
 800f98c:	bf00      	nop
 800f98e:	e000      	b.n	800f992 <tcp_process+0x7be>
      break;
 800f990:	bf00      	nop
  }
  return ERR_OK;
 800f992:	2300      	movs	r3, #0
}
 800f994:	4618      	mov	r0, r3
 800f996:	3724      	adds	r7, #36	; 0x24
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd90      	pop	{r4, r7, pc}
 800f99c:	2000f510 	.word	0x2000f510
 800f9a0:	2000f524 	.word	0x2000f524
 800f9a4:	20008abc 	.word	0x20008abc
 800f9a8:	20008ab4 	.word	0x20008ab4
 800f9ac:	20008abd 	.word	0x20008abd
 800f9b0:	2000f514 	.word	0x2000f514

0800f9b4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f9b4:	b590      	push	{r4, r7, lr}
 800f9b6:	b085      	sub	sp, #20
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d106      	bne.n	800f9d2 <tcp_oos_insert_segment+0x1e>
 800f9c4:	4b3b      	ldr	r3, [pc, #236]	; (800fab4 <tcp_oos_insert_segment+0x100>)
 800f9c6:	f240 421f 	movw	r2, #1055	; 0x41f
 800f9ca:	493b      	ldr	r1, [pc, #236]	; (800fab8 <tcp_oos_insert_segment+0x104>)
 800f9cc:	483b      	ldr	r0, [pc, #236]	; (800fabc <tcp_oos_insert_segment+0x108>)
 800f9ce:	f008 fa6b 	bl	8017ea8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	68db      	ldr	r3, [r3, #12]
 800f9d6:	899b      	ldrh	r3, [r3, #12]
 800f9d8:	b29b      	uxth	r3, r3
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7fb f916 	bl	800ac0c <lwip_htons>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	b2db      	uxtb	r3, r3
 800f9e4:	f003 0301 	and.w	r3, r3, #1
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d028      	beq.n	800fa3e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f9ec:	6838      	ldr	r0, [r7, #0]
 800f9ee:	f7fe f97b 	bl	800dce8 <tcp_segs_free>
    next = NULL;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	603b      	str	r3, [r7, #0]
 800f9f6:	e056      	b.n	800faa6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	68db      	ldr	r3, [r3, #12]
 800f9fc:	899b      	ldrh	r3, [r3, #12]
 800f9fe:	b29b      	uxth	r3, r3
 800fa00:	4618      	mov	r0, r3
 800fa02:	f7fb f903 	bl	800ac0c <lwip_htons>
 800fa06:	4603      	mov	r3, r0
 800fa08:	b2db      	uxtb	r3, r3
 800fa0a:	f003 0301 	and.w	r3, r3, #1
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d00d      	beq.n	800fa2e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	68db      	ldr	r3, [r3, #12]
 800fa16:	899b      	ldrh	r3, [r3, #12]
 800fa18:	b29c      	uxth	r4, r3
 800fa1a:	2001      	movs	r0, #1
 800fa1c:	f7fb f8f6 	bl	800ac0c <lwip_htons>
 800fa20:	4603      	mov	r3, r0
 800fa22:	461a      	mov	r2, r3
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	68db      	ldr	r3, [r3, #12]
 800fa28:	4322      	orrs	r2, r4
 800fa2a:	b292      	uxth	r2, r2
 800fa2c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800fa38:	68f8      	ldr	r0, [r7, #12]
 800fa3a:	f7fe f969 	bl	800dd10 <tcp_seg_free>
    while (next &&
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d00e      	beq.n	800fa62 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	891b      	ldrh	r3, [r3, #8]
 800fa48:	461a      	mov	r2, r3
 800fa4a:	4b1d      	ldr	r3, [pc, #116]	; (800fac0 <tcp_oos_insert_segment+0x10c>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	441a      	add	r2, r3
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	68db      	ldr	r3, [r3, #12]
 800fa54:	685b      	ldr	r3, [r3, #4]
 800fa56:	6839      	ldr	r1, [r7, #0]
 800fa58:	8909      	ldrh	r1, [r1, #8]
 800fa5a:	440b      	add	r3, r1
 800fa5c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	daca      	bge.n	800f9f8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d01e      	beq.n	800faa6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	891b      	ldrh	r3, [r3, #8]
 800fa6c:	461a      	mov	r2, r3
 800fa6e:	4b14      	ldr	r3, [pc, #80]	; (800fac0 <tcp_oos_insert_segment+0x10c>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	441a      	add	r2, r3
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	68db      	ldr	r3, [r3, #12]
 800fa78:	685b      	ldr	r3, [r3, #4]
 800fa7a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	dd12      	ble.n	800faa6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	68db      	ldr	r3, [r3, #12]
 800fa84:	685b      	ldr	r3, [r3, #4]
 800fa86:	b29a      	uxth	r2, r3
 800fa88:	4b0d      	ldr	r3, [pc, #52]	; (800fac0 <tcp_oos_insert_segment+0x10c>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	1ad3      	subs	r3, r2, r3
 800fa90:	b29a      	uxth	r2, r3
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	685a      	ldr	r2, [r3, #4]
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	891b      	ldrh	r3, [r3, #8]
 800fa9e:	4619      	mov	r1, r3
 800faa0:	4610      	mov	r0, r2
 800faa2:	f7fc fb17 	bl	800c0d4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	683a      	ldr	r2, [r7, #0]
 800faaa:	601a      	str	r2, [r3, #0]
}
 800faac:	bf00      	nop
 800faae:	3714      	adds	r7, #20
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd90      	pop	{r4, r7, pc}
 800fab4:	0801aeac 	.word	0x0801aeac
 800fab8:	0801b16c 	.word	0x0801b16c
 800fabc:	0801aef8 	.word	0x0801aef8
 800fac0:	20008ab0 	.word	0x20008ab0

0800fac4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800fac4:	b5b0      	push	{r4, r5, r7, lr}
 800fac6:	b086      	sub	sp, #24
 800fac8:	af00      	add	r7, sp, #0
 800faca:	60f8      	str	r0, [r7, #12]
 800facc:	60b9      	str	r1, [r7, #8]
 800face:	607a      	str	r2, [r7, #4]
 800fad0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800fad2:	e03e      	b.n	800fb52 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800fade:	697b      	ldr	r3, [r7, #20]
 800fae0:	685b      	ldr	r3, [r3, #4]
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7fc fd0a 	bl	800c4fc <pbuf_clen>
 800fae8:	4603      	mov	r3, r0
 800faea:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800faf2:	8a7a      	ldrh	r2, [r7, #18]
 800faf4:	429a      	cmp	r2, r3
 800faf6:	d906      	bls.n	800fb06 <tcp_free_acked_segments+0x42>
 800faf8:	4b2a      	ldr	r3, [pc, #168]	; (800fba4 <tcp_free_acked_segments+0xe0>)
 800fafa:	f240 4257 	movw	r2, #1111	; 0x457
 800fafe:	492a      	ldr	r1, [pc, #168]	; (800fba8 <tcp_free_acked_segments+0xe4>)
 800fb00:	482a      	ldr	r0, [pc, #168]	; (800fbac <tcp_free_acked_segments+0xe8>)
 800fb02:	f008 f9d1 	bl	8017ea8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800fb0c:	8a7b      	ldrh	r3, [r7, #18]
 800fb0e:	1ad3      	subs	r3, r2, r3
 800fb10:	b29a      	uxth	r2, r3
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800fb18:	697b      	ldr	r3, [r7, #20]
 800fb1a:	891a      	ldrh	r2, [r3, #8]
 800fb1c:	4b24      	ldr	r3, [pc, #144]	; (800fbb0 <tcp_free_acked_segments+0xec>)
 800fb1e:	881b      	ldrh	r3, [r3, #0]
 800fb20:	4413      	add	r3, r2
 800fb22:	b29a      	uxth	r2, r3
 800fb24:	4b22      	ldr	r3, [pc, #136]	; (800fbb0 <tcp_free_acked_segments+0xec>)
 800fb26:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800fb28:	6978      	ldr	r0, [r7, #20]
 800fb2a:	f7fe f8f1 	bl	800dd10 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d00c      	beq.n	800fb52 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d109      	bne.n	800fb52 <tcp_free_acked_segments+0x8e>
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d106      	bne.n	800fb52 <tcp_free_acked_segments+0x8e>
 800fb44:	4b17      	ldr	r3, [pc, #92]	; (800fba4 <tcp_free_acked_segments+0xe0>)
 800fb46:	f240 4262 	movw	r2, #1122	; 0x462
 800fb4a:	491a      	ldr	r1, [pc, #104]	; (800fbb4 <tcp_free_acked_segments+0xf0>)
 800fb4c:	4817      	ldr	r0, [pc, #92]	; (800fbac <tcp_free_acked_segments+0xe8>)
 800fb4e:	f008 f9ab 	bl	8017ea8 <iprintf>
  while (seg_list != NULL &&
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d020      	beq.n	800fb9a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	68db      	ldr	r3, [r3, #12]
 800fb5c:	685b      	ldr	r3, [r3, #4]
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7fb f869 	bl	800ac36 <lwip_htonl>
 800fb64:	4604      	mov	r4, r0
 800fb66:	68bb      	ldr	r3, [r7, #8]
 800fb68:	891b      	ldrh	r3, [r3, #8]
 800fb6a:	461d      	mov	r5, r3
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	68db      	ldr	r3, [r3, #12]
 800fb70:	899b      	ldrh	r3, [r3, #12]
 800fb72:	b29b      	uxth	r3, r3
 800fb74:	4618      	mov	r0, r3
 800fb76:	f7fb f849 	bl	800ac0c <lwip_htons>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	b2db      	uxtb	r3, r3
 800fb7e:	f003 0303 	and.w	r3, r3, #3
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d001      	beq.n	800fb8a <tcp_free_acked_segments+0xc6>
 800fb86:	2301      	movs	r3, #1
 800fb88:	e000      	b.n	800fb8c <tcp_free_acked_segments+0xc8>
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	442b      	add	r3, r5
 800fb8e:	18e2      	adds	r2, r4, r3
 800fb90:	4b09      	ldr	r3, [pc, #36]	; (800fbb8 <tcp_free_acked_segments+0xf4>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	dd9c      	ble.n	800fad4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800fb9a:	68bb      	ldr	r3, [r7, #8]
}
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3718      	adds	r7, #24
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bdb0      	pop	{r4, r5, r7, pc}
 800fba4:	0801aeac 	.word	0x0801aeac
 800fba8:	0801b194 	.word	0x0801b194
 800fbac:	0801aef8 	.word	0x0801aef8
 800fbb0:	20008ab8 	.word	0x20008ab8
 800fbb4:	0801b1bc 	.word	0x0801b1bc
 800fbb8:	20008ab4 	.word	0x20008ab4

0800fbbc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800fbbc:	b5b0      	push	{r4, r5, r7, lr}
 800fbbe:	b094      	sub	sp, #80	; 0x50
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d106      	bne.n	800fbdc <tcp_receive+0x20>
 800fbce:	4ba6      	ldr	r3, [pc, #664]	; (800fe68 <tcp_receive+0x2ac>)
 800fbd0:	f240 427b 	movw	r2, #1147	; 0x47b
 800fbd4:	49a5      	ldr	r1, [pc, #660]	; (800fe6c <tcp_receive+0x2b0>)
 800fbd6:	48a6      	ldr	r0, [pc, #664]	; (800fe70 <tcp_receive+0x2b4>)
 800fbd8:	f008 f966 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	7d1b      	ldrb	r3, [r3, #20]
 800fbe0:	2b03      	cmp	r3, #3
 800fbe2:	d806      	bhi.n	800fbf2 <tcp_receive+0x36>
 800fbe4:	4ba0      	ldr	r3, [pc, #640]	; (800fe68 <tcp_receive+0x2ac>)
 800fbe6:	f240 427c 	movw	r2, #1148	; 0x47c
 800fbea:	49a2      	ldr	r1, [pc, #648]	; (800fe74 <tcp_receive+0x2b8>)
 800fbec:	48a0      	ldr	r0, [pc, #640]	; (800fe70 <tcp_receive+0x2b4>)
 800fbee:	f008 f95b 	bl	8017ea8 <iprintf>

  if (flags & TCP_ACK) {
 800fbf2:	4ba1      	ldr	r3, [pc, #644]	; (800fe78 <tcp_receive+0x2bc>)
 800fbf4:	781b      	ldrb	r3, [r3, #0]
 800fbf6:	f003 0310 	and.w	r3, r3, #16
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	f000 8263 	beq.w	80100c6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fc06:	461a      	mov	r2, r3
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc0c:	4413      	add	r3, r2
 800fc0e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fc14:	4b99      	ldr	r3, [pc, #612]	; (800fe7c <tcp_receive+0x2c0>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	1ad3      	subs	r3, r2, r3
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	db1b      	blt.n	800fc56 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fc22:	4b96      	ldr	r3, [pc, #600]	; (800fe7c <tcp_receive+0x2c0>)
 800fc24:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d106      	bne.n	800fc38 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fc2e:	4b94      	ldr	r3, [pc, #592]	; (800fe80 <tcp_receive+0x2c4>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	1ad3      	subs	r3, r2, r3
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	db0e      	blt.n	800fc56 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fc3c:	4b90      	ldr	r3, [pc, #576]	; (800fe80 <tcp_receive+0x2c4>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fc40:	429a      	cmp	r2, r3
 800fc42:	d125      	bne.n	800fc90 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fc44:	4b8f      	ldr	r3, [pc, #572]	; (800fe84 <tcp_receive+0x2c8>)
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	89db      	ldrh	r3, [r3, #14]
 800fc4a:	b29a      	uxth	r2, r3
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fc52:	429a      	cmp	r2, r3
 800fc54:	d91c      	bls.n	800fc90 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800fc56:	4b8b      	ldr	r3, [pc, #556]	; (800fe84 <tcp_receive+0x2c8>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	89db      	ldrh	r3, [r3, #14]
 800fc5c:	b29a      	uxth	r2, r3
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fc70:	429a      	cmp	r2, r3
 800fc72:	d205      	bcs.n	800fc80 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800fc80:	4b7e      	ldr	r3, [pc, #504]	; (800fe7c <tcp_receive+0x2c0>)
 800fc82:	681a      	ldr	r2, [r3, #0]
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800fc88:	4b7d      	ldr	r3, [pc, #500]	; (800fe80 <tcp_receive+0x2c4>)
 800fc8a:	681a      	ldr	r2, [r3, #0]
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800fc90:	4b7b      	ldr	r3, [pc, #492]	; (800fe80 <tcp_receive+0x2c4>)
 800fc92:	681a      	ldr	r2, [r3, #0]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc98:	1ad3      	subs	r3, r2, r3
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	dc58      	bgt.n	800fd50 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800fc9e:	4b7a      	ldr	r3, [pc, #488]	; (800fe88 <tcp_receive+0x2cc>)
 800fca0:	881b      	ldrh	r3, [r3, #0]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d14b      	bne.n	800fd3e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcaa:	687a      	ldr	r2, [r7, #4]
 800fcac:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800fcb0:	4413      	add	r3, r2
 800fcb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d142      	bne.n	800fd3e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	db3d      	blt.n	800fd3e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fcc6:	4b6e      	ldr	r3, [pc, #440]	; (800fe80 <tcp_receive+0x2c4>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d137      	bne.n	800fd3e <tcp_receive+0x182>
              found_dupack = 1;
 800fcce:	2301      	movs	r3, #1
 800fcd0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fcd8:	2bff      	cmp	r3, #255	; 0xff
 800fcda:	d007      	beq.n	800fcec <tcp_receive+0x130>
                ++pcb->dupacks;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fce2:	3301      	adds	r3, #1
 800fce4:	b2da      	uxtb	r2, r3
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fcf2:	2b03      	cmp	r3, #3
 800fcf4:	d91b      	bls.n	800fd2e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd00:	4413      	add	r3, r2
 800fd02:	b29a      	uxth	r2, r3
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	d30a      	bcc.n	800fd24 <tcp_receive+0x168>
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd18:	4413      	add	r3, r2
 800fd1a:	b29a      	uxth	r2, r3
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fd22:	e004      	b.n	800fd2e <tcp_receive+0x172>
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fd34:	2b02      	cmp	r3, #2
 800fd36:	d902      	bls.n	800fd3e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f002 fb47 	bl	80123cc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800fd3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	f040 8160 	bne.w	8010006 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fd4e:	e15a      	b.n	8010006 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd50:	4b4b      	ldr	r3, [pc, #300]	; (800fe80 <tcp_receive+0x2c4>)
 800fd52:	681a      	ldr	r2, [r3, #0]
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd58:	1ad3      	subs	r3, r2, r3
 800fd5a:	3b01      	subs	r3, #1
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	f2c0 814d 	blt.w	800fffc <tcp_receive+0x440>
 800fd62:	4b47      	ldr	r3, [pc, #284]	; (800fe80 <tcp_receive+0x2c4>)
 800fd64:	681a      	ldr	r2, [r3, #0]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd6a:	1ad3      	subs	r3, r2, r3
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	f300 8145 	bgt.w	800fffc <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	8b5b      	ldrh	r3, [r3, #26]
 800fd76:	f003 0304 	and.w	r3, r3, #4
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d010      	beq.n	800fda0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	8b5b      	ldrh	r3, [r3, #26]
 800fd82:	f023 0304 	bic.w	r3, r3, #4
 800fd86:	b29a      	uxth	r2, r3
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2200      	movs	r2, #0
 800fda4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fdae:	10db      	asrs	r3, r3, #3
 800fdb0:	b21b      	sxth	r3, r3
 800fdb2:	b29a      	uxth	r2, r3
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fdba:	b29b      	uxth	r3, r3
 800fdbc:	4413      	add	r3, r2
 800fdbe:	b29b      	uxth	r3, r3
 800fdc0:	b21a      	sxth	r2, r3
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800fdc8:	4b2d      	ldr	r3, [pc, #180]	; (800fe80 <tcp_receive+0x2c4>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	b29a      	uxth	r2, r3
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fdd2:	b29b      	uxth	r3, r3
 800fdd4:	1ad3      	subs	r3, r2, r3
 800fdd6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2200      	movs	r2, #0
 800fddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800fde0:	4b27      	ldr	r3, [pc, #156]	; (800fe80 <tcp_receive+0x2c4>)
 800fde2:	681a      	ldr	r2, [r3, #0]
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	7d1b      	ldrb	r3, [r3, #20]
 800fdec:	2b03      	cmp	r3, #3
 800fdee:	f240 8096 	bls.w	800ff1e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fdfe:	429a      	cmp	r2, r3
 800fe00:	d244      	bcs.n	800fe8c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	8b5b      	ldrh	r3, [r3, #26]
 800fe06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d001      	beq.n	800fe12 <tcp_receive+0x256>
 800fe0e:	2301      	movs	r3, #1
 800fe10:	e000      	b.n	800fe14 <tcp_receive+0x258>
 800fe12:	2302      	movs	r3, #2
 800fe14:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800fe18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fe1c:	b29a      	uxth	r2, r3
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe22:	fb12 f303 	smulbb	r3, r2, r3
 800fe26:	b29b      	uxth	r3, r3
 800fe28:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fe2a:	4293      	cmp	r3, r2
 800fe2c:	bf28      	it	cs
 800fe2e:	4613      	movcs	r3, r2
 800fe30:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fe38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fe3a:	4413      	add	r3, r2
 800fe3c:	b29a      	uxth	r2, r3
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fe44:	429a      	cmp	r2, r3
 800fe46:	d309      	bcc.n	800fe5c <tcp_receive+0x2a0>
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fe4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fe50:	4413      	add	r3, r2
 800fe52:	b29a      	uxth	r2, r3
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fe5a:	e060      	b.n	800ff1e <tcp_receive+0x362>
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fe66:	e05a      	b.n	800ff1e <tcp_receive+0x362>
 800fe68:	0801aeac 	.word	0x0801aeac
 800fe6c:	0801b1dc 	.word	0x0801b1dc
 800fe70:	0801aef8 	.word	0x0801aef8
 800fe74:	0801b1f8 	.word	0x0801b1f8
 800fe78:	20008abc 	.word	0x20008abc
 800fe7c:	20008ab0 	.word	0x20008ab0
 800fe80:	20008ab4 	.word	0x20008ab4
 800fe84:	20008aa0 	.word	0x20008aa0
 800fe88:	20008aba 	.word	0x20008aba
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fe92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fe94:	4413      	add	r3, r2
 800fe96:	b29a      	uxth	r2, r3
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d309      	bcc.n	800feb6 <tcp_receive+0x2fa>
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fea8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800feaa:	4413      	add	r3, r2
 800feac:	b29a      	uxth	r2, r3
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800feb4:	e004      	b.n	800fec0 <tcp_receive+0x304>
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800febc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fecc:	429a      	cmp	r2, r3
 800fece:	d326      	bcc.n	800ff1e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fedc:	1ad3      	subs	r3, r2, r3
 800fede:	b29a      	uxth	r2, r3
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fef0:	4413      	add	r3, r2
 800fef2:	b29a      	uxth	r2, r3
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d30a      	bcc.n	800ff14 <tcp_receive+0x358>
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff08:	4413      	add	r3, r2
 800ff0a:	b29a      	uxth	r2, r3
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ff12:	e004      	b.n	800ff1e <tcp_receive+0x362>
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff26:	4a98      	ldr	r2, [pc, #608]	; (8010188 <tcp_receive+0x5cc>)
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f7ff fdcb 	bl	800fac4 <tcp_free_acked_segments>
 800ff2e:	4602      	mov	r2, r0
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff3c:	4a93      	ldr	r2, [pc, #588]	; (801018c <tcp_receive+0x5d0>)
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f7ff fdc0 	bl	800fac4 <tcp_free_acked_segments>
 800ff44:	4602      	mov	r2, r0
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d104      	bne.n	800ff5c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff58:	861a      	strh	r2, [r3, #48]	; 0x30
 800ff5a:	e002      	b.n	800ff62 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2200      	movs	r2, #0
 800ff66:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d103      	bne.n	800ff78 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2200      	movs	r2, #0
 800ff74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ff7e:	4b84      	ldr	r3, [pc, #528]	; (8010190 <tcp_receive+0x5d4>)
 800ff80:	881b      	ldrh	r3, [r3, #0]
 800ff82:	4413      	add	r3, r2
 800ff84:	b29a      	uxth	r2, r3
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	8b5b      	ldrh	r3, [r3, #26]
 800ff90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d035      	beq.n	8010004 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d118      	bne.n	800ffd2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d00c      	beq.n	800ffc2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffb0:	68db      	ldr	r3, [r3, #12]
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	f7fa fe3e 	bl	800ac36 <lwip_htonl>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	dc20      	bgt.n	8010004 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	8b5b      	ldrh	r3, [r3, #26]
 800ffc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ffca:	b29a      	uxth	r2, r3
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ffd0:	e018      	b.n	8010004 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffda:	68db      	ldr	r3, [r3, #12]
 800ffdc:	685b      	ldr	r3, [r3, #4]
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f7fa fe29 	bl	800ac36 <lwip_htonl>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	1ae3      	subs	r3, r4, r3
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	dc0b      	bgt.n	8010004 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	8b5b      	ldrh	r3, [r3, #26]
 800fff0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fff4:	b29a      	uxth	r2, r3
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fffa:	e003      	b.n	8010004 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f002 fbdd 	bl	80127bc <tcp_send_empty_ack>
 8010002:	e000      	b.n	8010006 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010004:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801000a:	2b00      	cmp	r3, #0
 801000c:	d05b      	beq.n	80100c6 <tcp_receive+0x50a>
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010012:	4b60      	ldr	r3, [pc, #384]	; (8010194 <tcp_receive+0x5d8>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	1ad3      	subs	r3, r2, r3
 8010018:	2b00      	cmp	r3, #0
 801001a:	da54      	bge.n	80100c6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801001c:	4b5e      	ldr	r3, [pc, #376]	; (8010198 <tcp_receive+0x5dc>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	b29a      	uxth	r2, r3
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010026:	b29b      	uxth	r3, r3
 8010028:	1ad3      	subs	r3, r2, r3
 801002a:	b29b      	uxth	r3, r3
 801002c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010030:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801003a:	10db      	asrs	r3, r3, #3
 801003c:	b21b      	sxth	r3, r3
 801003e:	b29b      	uxth	r3, r3
 8010040:	1ad3      	subs	r3, r2, r3
 8010042:	b29b      	uxth	r3, r3
 8010044:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801004e:	b29a      	uxth	r2, r3
 8010050:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010054:	4413      	add	r3, r2
 8010056:	b29b      	uxth	r3, r3
 8010058:	b21a      	sxth	r2, r3
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801005e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010062:	2b00      	cmp	r3, #0
 8010064:	da05      	bge.n	8010072 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8010066:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801006a:	425b      	negs	r3, r3
 801006c:	b29b      	uxth	r3, r3
 801006e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010072:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801007c:	109b      	asrs	r3, r3, #2
 801007e:	b21b      	sxth	r3, r3
 8010080:	b29b      	uxth	r3, r3
 8010082:	1ad3      	subs	r3, r2, r3
 8010084:	b29b      	uxth	r3, r3
 8010086:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010090:	b29a      	uxth	r2, r3
 8010092:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010096:	4413      	add	r3, r2
 8010098:	b29b      	uxth	r3, r3
 801009a:	b21a      	sxth	r2, r3
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80100a6:	10db      	asrs	r3, r3, #3
 80100a8:	b21b      	sxth	r3, r3
 80100aa:	b29a      	uxth	r2, r3
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80100b2:	b29b      	uxth	r3, r3
 80100b4:	4413      	add	r3, r2
 80100b6:	b29b      	uxth	r3, r3
 80100b8:	b21a      	sxth	r2, r3
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2200      	movs	r2, #0
 80100c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80100c6:	4b35      	ldr	r3, [pc, #212]	; (801019c <tcp_receive+0x5e0>)
 80100c8:	881b      	ldrh	r3, [r3, #0]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	f000 84e1 	beq.w	8010a92 <tcp_receive+0xed6>
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	7d1b      	ldrb	r3, [r3, #20]
 80100d4:	2b06      	cmp	r3, #6
 80100d6:	f200 84dc 	bhi.w	8010a92 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100de:	4b30      	ldr	r3, [pc, #192]	; (80101a0 <tcp_receive+0x5e4>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	1ad3      	subs	r3, r2, r3
 80100e4:	3b01      	subs	r3, #1
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	f2c0 808e 	blt.w	8010208 <tcp_receive+0x64c>
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100f0:	4b2a      	ldr	r3, [pc, #168]	; (801019c <tcp_receive+0x5e0>)
 80100f2:	881b      	ldrh	r3, [r3, #0]
 80100f4:	4619      	mov	r1, r3
 80100f6:	4b2a      	ldr	r3, [pc, #168]	; (80101a0 <tcp_receive+0x5e4>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	440b      	add	r3, r1
 80100fc:	1ad3      	subs	r3, r2, r3
 80100fe:	3301      	adds	r3, #1
 8010100:	2b00      	cmp	r3, #0
 8010102:	f300 8081 	bgt.w	8010208 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010106:	4b27      	ldr	r3, [pc, #156]	; (80101a4 <tcp_receive+0x5e8>)
 8010108:	685b      	ldr	r3, [r3, #4]
 801010a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010110:	4b23      	ldr	r3, [pc, #140]	; (80101a0 <tcp_receive+0x5e4>)
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	1ad3      	subs	r3, r2, r3
 8010116:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010118:	4b22      	ldr	r3, [pc, #136]	; (80101a4 <tcp_receive+0x5e8>)
 801011a:	685b      	ldr	r3, [r3, #4]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d106      	bne.n	801012e <tcp_receive+0x572>
 8010120:	4b21      	ldr	r3, [pc, #132]	; (80101a8 <tcp_receive+0x5ec>)
 8010122:	f240 5294 	movw	r2, #1428	; 0x594
 8010126:	4921      	ldr	r1, [pc, #132]	; (80101ac <tcp_receive+0x5f0>)
 8010128:	4821      	ldr	r0, [pc, #132]	; (80101b0 <tcp_receive+0x5f4>)
 801012a:	f007 febd 	bl	8017ea8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801012e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010130:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010134:	4293      	cmp	r3, r2
 8010136:	d906      	bls.n	8010146 <tcp_receive+0x58a>
 8010138:	4b1b      	ldr	r3, [pc, #108]	; (80101a8 <tcp_receive+0x5ec>)
 801013a:	f240 5295 	movw	r2, #1429	; 0x595
 801013e:	491d      	ldr	r1, [pc, #116]	; (80101b4 <tcp_receive+0x5f8>)
 8010140:	481b      	ldr	r0, [pc, #108]	; (80101b0 <tcp_receive+0x5f4>)
 8010142:	f007 feb1 	bl	8017ea8 <iprintf>
      off = (u16_t)off32;
 8010146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010148:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801014c:	4b15      	ldr	r3, [pc, #84]	; (80101a4 <tcp_receive+0x5e8>)
 801014e:	685b      	ldr	r3, [r3, #4]
 8010150:	891b      	ldrh	r3, [r3, #8]
 8010152:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010156:	429a      	cmp	r2, r3
 8010158:	d906      	bls.n	8010168 <tcp_receive+0x5ac>
 801015a:	4b13      	ldr	r3, [pc, #76]	; (80101a8 <tcp_receive+0x5ec>)
 801015c:	f240 5297 	movw	r2, #1431	; 0x597
 8010160:	4915      	ldr	r1, [pc, #84]	; (80101b8 <tcp_receive+0x5fc>)
 8010162:	4813      	ldr	r0, [pc, #76]	; (80101b0 <tcp_receive+0x5f4>)
 8010164:	f007 fea0 	bl	8017ea8 <iprintf>
      inseg.len -= off;
 8010168:	4b0e      	ldr	r3, [pc, #56]	; (80101a4 <tcp_receive+0x5e8>)
 801016a:	891a      	ldrh	r2, [r3, #8]
 801016c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010170:	1ad3      	subs	r3, r2, r3
 8010172:	b29a      	uxth	r2, r3
 8010174:	4b0b      	ldr	r3, [pc, #44]	; (80101a4 <tcp_receive+0x5e8>)
 8010176:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010178:	4b0a      	ldr	r3, [pc, #40]	; (80101a4 <tcp_receive+0x5e8>)
 801017a:	685b      	ldr	r3, [r3, #4]
 801017c:	891a      	ldrh	r2, [r3, #8]
 801017e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010182:	1ad3      	subs	r3, r2, r3
 8010184:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010186:	e029      	b.n	80101dc <tcp_receive+0x620>
 8010188:	0801b214 	.word	0x0801b214
 801018c:	0801b21c 	.word	0x0801b21c
 8010190:	20008ab8 	.word	0x20008ab8
 8010194:	20008ab4 	.word	0x20008ab4
 8010198:	2000f518 	.word	0x2000f518
 801019c:	20008aba 	.word	0x20008aba
 80101a0:	20008ab0 	.word	0x20008ab0
 80101a4:	20008a90 	.word	0x20008a90
 80101a8:	0801aeac 	.word	0x0801aeac
 80101ac:	0801b224 	.word	0x0801b224
 80101b0:	0801aef8 	.word	0x0801aef8
 80101b4:	0801b234 	.word	0x0801b234
 80101b8:	0801b244 	.word	0x0801b244
        off -= p->len;
 80101bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101be:	895b      	ldrh	r3, [r3, #10]
 80101c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80101c4:	1ad3      	subs	r3, r2, r3
 80101c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80101ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80101ce:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80101d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101d2:	2200      	movs	r2, #0
 80101d4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80101d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80101dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101de:	895b      	ldrh	r3, [r3, #10]
 80101e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80101e4:	429a      	cmp	r2, r3
 80101e6:	d8e9      	bhi.n	80101bc <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80101e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80101ec:	4619      	mov	r1, r3
 80101ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80101f0:	f7fc f870 	bl	800c2d4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101f8:	4a91      	ldr	r2, [pc, #580]	; (8010440 <tcp_receive+0x884>)
 80101fa:	6013      	str	r3, [r2, #0]
 80101fc:	4b91      	ldr	r3, [pc, #580]	; (8010444 <tcp_receive+0x888>)
 80101fe:	68db      	ldr	r3, [r3, #12]
 8010200:	4a8f      	ldr	r2, [pc, #572]	; (8010440 <tcp_receive+0x884>)
 8010202:	6812      	ldr	r2, [r2, #0]
 8010204:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010206:	e00d      	b.n	8010224 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010208:	4b8d      	ldr	r3, [pc, #564]	; (8010440 <tcp_receive+0x884>)
 801020a:	681a      	ldr	r2, [r3, #0]
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010210:	1ad3      	subs	r3, r2, r3
 8010212:	2b00      	cmp	r3, #0
 8010214:	da06      	bge.n	8010224 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	8b5b      	ldrh	r3, [r3, #26]
 801021a:	f043 0302 	orr.w	r3, r3, #2
 801021e:	b29a      	uxth	r2, r3
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010224:	4b86      	ldr	r3, [pc, #536]	; (8010440 <tcp_receive+0x884>)
 8010226:	681a      	ldr	r2, [r3, #0]
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801022c:	1ad3      	subs	r3, r2, r3
 801022e:	2b00      	cmp	r3, #0
 8010230:	f2c0 842a 	blt.w	8010a88 <tcp_receive+0xecc>
 8010234:	4b82      	ldr	r3, [pc, #520]	; (8010440 <tcp_receive+0x884>)
 8010236:	681a      	ldr	r2, [r3, #0]
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801023c:	6879      	ldr	r1, [r7, #4]
 801023e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010240:	440b      	add	r3, r1
 8010242:	1ad3      	subs	r3, r2, r3
 8010244:	3301      	adds	r3, #1
 8010246:	2b00      	cmp	r3, #0
 8010248:	f300 841e 	bgt.w	8010a88 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010250:	4b7b      	ldr	r3, [pc, #492]	; (8010440 <tcp_receive+0x884>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	429a      	cmp	r2, r3
 8010256:	f040 829a 	bne.w	801078e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801025a:	4b7a      	ldr	r3, [pc, #488]	; (8010444 <tcp_receive+0x888>)
 801025c:	891c      	ldrh	r4, [r3, #8]
 801025e:	4b79      	ldr	r3, [pc, #484]	; (8010444 <tcp_receive+0x888>)
 8010260:	68db      	ldr	r3, [r3, #12]
 8010262:	899b      	ldrh	r3, [r3, #12]
 8010264:	b29b      	uxth	r3, r3
 8010266:	4618      	mov	r0, r3
 8010268:	f7fa fcd0 	bl	800ac0c <lwip_htons>
 801026c:	4603      	mov	r3, r0
 801026e:	b2db      	uxtb	r3, r3
 8010270:	f003 0303 	and.w	r3, r3, #3
 8010274:	2b00      	cmp	r3, #0
 8010276:	d001      	beq.n	801027c <tcp_receive+0x6c0>
 8010278:	2301      	movs	r3, #1
 801027a:	e000      	b.n	801027e <tcp_receive+0x6c2>
 801027c:	2300      	movs	r3, #0
 801027e:	4423      	add	r3, r4
 8010280:	b29a      	uxth	r2, r3
 8010282:	4b71      	ldr	r3, [pc, #452]	; (8010448 <tcp_receive+0x88c>)
 8010284:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801028a:	4b6f      	ldr	r3, [pc, #444]	; (8010448 <tcp_receive+0x88c>)
 801028c:	881b      	ldrh	r3, [r3, #0]
 801028e:	429a      	cmp	r2, r3
 8010290:	d275      	bcs.n	801037e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010292:	4b6c      	ldr	r3, [pc, #432]	; (8010444 <tcp_receive+0x888>)
 8010294:	68db      	ldr	r3, [r3, #12]
 8010296:	899b      	ldrh	r3, [r3, #12]
 8010298:	b29b      	uxth	r3, r3
 801029a:	4618      	mov	r0, r3
 801029c:	f7fa fcb6 	bl	800ac0c <lwip_htons>
 80102a0:	4603      	mov	r3, r0
 80102a2:	b2db      	uxtb	r3, r3
 80102a4:	f003 0301 	and.w	r3, r3, #1
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d01f      	beq.n	80102ec <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80102ac:	4b65      	ldr	r3, [pc, #404]	; (8010444 <tcp_receive+0x888>)
 80102ae:	68db      	ldr	r3, [r3, #12]
 80102b0:	899b      	ldrh	r3, [r3, #12]
 80102b2:	b29b      	uxth	r3, r3
 80102b4:	b21b      	sxth	r3, r3
 80102b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80102ba:	b21c      	sxth	r4, r3
 80102bc:	4b61      	ldr	r3, [pc, #388]	; (8010444 <tcp_receive+0x888>)
 80102be:	68db      	ldr	r3, [r3, #12]
 80102c0:	899b      	ldrh	r3, [r3, #12]
 80102c2:	b29b      	uxth	r3, r3
 80102c4:	4618      	mov	r0, r3
 80102c6:	f7fa fca1 	bl	800ac0c <lwip_htons>
 80102ca:	4603      	mov	r3, r0
 80102cc:	b2db      	uxtb	r3, r3
 80102ce:	b29b      	uxth	r3, r3
 80102d0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80102d4:	b29b      	uxth	r3, r3
 80102d6:	4618      	mov	r0, r3
 80102d8:	f7fa fc98 	bl	800ac0c <lwip_htons>
 80102dc:	4603      	mov	r3, r0
 80102de:	b21b      	sxth	r3, r3
 80102e0:	4323      	orrs	r3, r4
 80102e2:	b21a      	sxth	r2, r3
 80102e4:	4b57      	ldr	r3, [pc, #348]	; (8010444 <tcp_receive+0x888>)
 80102e6:	68db      	ldr	r3, [r3, #12]
 80102e8:	b292      	uxth	r2, r2
 80102ea:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80102f0:	4b54      	ldr	r3, [pc, #336]	; (8010444 <tcp_receive+0x888>)
 80102f2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80102f4:	4b53      	ldr	r3, [pc, #332]	; (8010444 <tcp_receive+0x888>)
 80102f6:	68db      	ldr	r3, [r3, #12]
 80102f8:	899b      	ldrh	r3, [r3, #12]
 80102fa:	b29b      	uxth	r3, r3
 80102fc:	4618      	mov	r0, r3
 80102fe:	f7fa fc85 	bl	800ac0c <lwip_htons>
 8010302:	4603      	mov	r3, r0
 8010304:	b2db      	uxtb	r3, r3
 8010306:	f003 0302 	and.w	r3, r3, #2
 801030a:	2b00      	cmp	r3, #0
 801030c:	d005      	beq.n	801031a <tcp_receive+0x75e>
            inseg.len -= 1;
 801030e:	4b4d      	ldr	r3, [pc, #308]	; (8010444 <tcp_receive+0x888>)
 8010310:	891b      	ldrh	r3, [r3, #8]
 8010312:	3b01      	subs	r3, #1
 8010314:	b29a      	uxth	r2, r3
 8010316:	4b4b      	ldr	r3, [pc, #300]	; (8010444 <tcp_receive+0x888>)
 8010318:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801031a:	4b4a      	ldr	r3, [pc, #296]	; (8010444 <tcp_receive+0x888>)
 801031c:	685a      	ldr	r2, [r3, #4]
 801031e:	4b49      	ldr	r3, [pc, #292]	; (8010444 <tcp_receive+0x888>)
 8010320:	891b      	ldrh	r3, [r3, #8]
 8010322:	4619      	mov	r1, r3
 8010324:	4610      	mov	r0, r2
 8010326:	f7fb fed5 	bl	800c0d4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801032a:	4b46      	ldr	r3, [pc, #280]	; (8010444 <tcp_receive+0x888>)
 801032c:	891c      	ldrh	r4, [r3, #8]
 801032e:	4b45      	ldr	r3, [pc, #276]	; (8010444 <tcp_receive+0x888>)
 8010330:	68db      	ldr	r3, [r3, #12]
 8010332:	899b      	ldrh	r3, [r3, #12]
 8010334:	b29b      	uxth	r3, r3
 8010336:	4618      	mov	r0, r3
 8010338:	f7fa fc68 	bl	800ac0c <lwip_htons>
 801033c:	4603      	mov	r3, r0
 801033e:	b2db      	uxtb	r3, r3
 8010340:	f003 0303 	and.w	r3, r3, #3
 8010344:	2b00      	cmp	r3, #0
 8010346:	d001      	beq.n	801034c <tcp_receive+0x790>
 8010348:	2301      	movs	r3, #1
 801034a:	e000      	b.n	801034e <tcp_receive+0x792>
 801034c:	2300      	movs	r3, #0
 801034e:	4423      	add	r3, r4
 8010350:	b29a      	uxth	r2, r3
 8010352:	4b3d      	ldr	r3, [pc, #244]	; (8010448 <tcp_receive+0x88c>)
 8010354:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010356:	4b3c      	ldr	r3, [pc, #240]	; (8010448 <tcp_receive+0x88c>)
 8010358:	881b      	ldrh	r3, [r3, #0]
 801035a:	461a      	mov	r2, r3
 801035c:	4b38      	ldr	r3, [pc, #224]	; (8010440 <tcp_receive+0x884>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	441a      	add	r2, r3
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010366:	6879      	ldr	r1, [r7, #4]
 8010368:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801036a:	440b      	add	r3, r1
 801036c:	429a      	cmp	r2, r3
 801036e:	d006      	beq.n	801037e <tcp_receive+0x7c2>
 8010370:	4b36      	ldr	r3, [pc, #216]	; (801044c <tcp_receive+0x890>)
 8010372:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8010376:	4936      	ldr	r1, [pc, #216]	; (8010450 <tcp_receive+0x894>)
 8010378:	4836      	ldr	r0, [pc, #216]	; (8010454 <tcp_receive+0x898>)
 801037a:	f007 fd95 	bl	8017ea8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010382:	2b00      	cmp	r3, #0
 8010384:	f000 80e7 	beq.w	8010556 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010388:	4b2e      	ldr	r3, [pc, #184]	; (8010444 <tcp_receive+0x888>)
 801038a:	68db      	ldr	r3, [r3, #12]
 801038c:	899b      	ldrh	r3, [r3, #12]
 801038e:	b29b      	uxth	r3, r3
 8010390:	4618      	mov	r0, r3
 8010392:	f7fa fc3b 	bl	800ac0c <lwip_htons>
 8010396:	4603      	mov	r3, r0
 8010398:	b2db      	uxtb	r3, r3
 801039a:	f003 0301 	and.w	r3, r3, #1
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d010      	beq.n	80103c4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80103a2:	e00a      	b.n	80103ba <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103a8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103ae:	681a      	ldr	r2, [r3, #0]
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80103b4:	68f8      	ldr	r0, [r7, #12]
 80103b6:	f7fd fcab 	bl	800dd10 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d1f0      	bne.n	80103a4 <tcp_receive+0x7e8>
 80103c2:	e0c8      	b.n	8010556 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103c8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80103ca:	e052      	b.n	8010472 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80103cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103ce:	68db      	ldr	r3, [r3, #12]
 80103d0:	899b      	ldrh	r3, [r3, #12]
 80103d2:	b29b      	uxth	r3, r3
 80103d4:	4618      	mov	r0, r3
 80103d6:	f7fa fc19 	bl	800ac0c <lwip_htons>
 80103da:	4603      	mov	r3, r0
 80103dc:	b2db      	uxtb	r3, r3
 80103de:	f003 0301 	and.w	r3, r3, #1
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d03d      	beq.n	8010462 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80103e6:	4b17      	ldr	r3, [pc, #92]	; (8010444 <tcp_receive+0x888>)
 80103e8:	68db      	ldr	r3, [r3, #12]
 80103ea:	899b      	ldrh	r3, [r3, #12]
 80103ec:	b29b      	uxth	r3, r3
 80103ee:	4618      	mov	r0, r3
 80103f0:	f7fa fc0c 	bl	800ac0c <lwip_htons>
 80103f4:	4603      	mov	r3, r0
 80103f6:	b2db      	uxtb	r3, r3
 80103f8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d130      	bne.n	8010462 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010400:	4b10      	ldr	r3, [pc, #64]	; (8010444 <tcp_receive+0x888>)
 8010402:	68db      	ldr	r3, [r3, #12]
 8010404:	899b      	ldrh	r3, [r3, #12]
 8010406:	b29c      	uxth	r4, r3
 8010408:	2001      	movs	r0, #1
 801040a:	f7fa fbff 	bl	800ac0c <lwip_htons>
 801040e:	4603      	mov	r3, r0
 8010410:	461a      	mov	r2, r3
 8010412:	4b0c      	ldr	r3, [pc, #48]	; (8010444 <tcp_receive+0x888>)
 8010414:	68db      	ldr	r3, [r3, #12]
 8010416:	4322      	orrs	r2, r4
 8010418:	b292      	uxth	r2, r2
 801041a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801041c:	4b09      	ldr	r3, [pc, #36]	; (8010444 <tcp_receive+0x888>)
 801041e:	891c      	ldrh	r4, [r3, #8]
 8010420:	4b08      	ldr	r3, [pc, #32]	; (8010444 <tcp_receive+0x888>)
 8010422:	68db      	ldr	r3, [r3, #12]
 8010424:	899b      	ldrh	r3, [r3, #12]
 8010426:	b29b      	uxth	r3, r3
 8010428:	4618      	mov	r0, r3
 801042a:	f7fa fbef 	bl	800ac0c <lwip_htons>
 801042e:	4603      	mov	r3, r0
 8010430:	b2db      	uxtb	r3, r3
 8010432:	f003 0303 	and.w	r3, r3, #3
 8010436:	2b00      	cmp	r3, #0
 8010438:	d00e      	beq.n	8010458 <tcp_receive+0x89c>
 801043a:	2301      	movs	r3, #1
 801043c:	e00d      	b.n	801045a <tcp_receive+0x89e>
 801043e:	bf00      	nop
 8010440:	20008ab0 	.word	0x20008ab0
 8010444:	20008a90 	.word	0x20008a90
 8010448:	20008aba 	.word	0x20008aba
 801044c:	0801aeac 	.word	0x0801aeac
 8010450:	0801b254 	.word	0x0801b254
 8010454:	0801aef8 	.word	0x0801aef8
 8010458:	2300      	movs	r3, #0
 801045a:	4423      	add	r3, r4
 801045c:	b29a      	uxth	r2, r3
 801045e:	4b98      	ldr	r3, [pc, #608]	; (80106c0 <tcp_receive+0xb04>)
 8010460:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010464:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801046c:	6938      	ldr	r0, [r7, #16]
 801046e:	f7fd fc4f 	bl	800dd10 <tcp_seg_free>
            while (next &&
 8010472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010474:	2b00      	cmp	r3, #0
 8010476:	d00e      	beq.n	8010496 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010478:	4b91      	ldr	r3, [pc, #580]	; (80106c0 <tcp_receive+0xb04>)
 801047a:	881b      	ldrh	r3, [r3, #0]
 801047c:	461a      	mov	r2, r3
 801047e:	4b91      	ldr	r3, [pc, #580]	; (80106c4 <tcp_receive+0xb08>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	441a      	add	r2, r3
 8010484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010486:	68db      	ldr	r3, [r3, #12]
 8010488:	685b      	ldr	r3, [r3, #4]
 801048a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801048c:	8909      	ldrh	r1, [r1, #8]
 801048e:	440b      	add	r3, r1
 8010490:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010492:	2b00      	cmp	r3, #0
 8010494:	da9a      	bge.n	80103cc <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010498:	2b00      	cmp	r3, #0
 801049a:	d059      	beq.n	8010550 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801049c:	4b88      	ldr	r3, [pc, #544]	; (80106c0 <tcp_receive+0xb04>)
 801049e:	881b      	ldrh	r3, [r3, #0]
 80104a0:	461a      	mov	r2, r3
 80104a2:	4b88      	ldr	r3, [pc, #544]	; (80106c4 <tcp_receive+0xb08>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	441a      	add	r2, r3
 80104a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104aa:	68db      	ldr	r3, [r3, #12]
 80104ac:	685b      	ldr	r3, [r3, #4]
 80104ae:	1ad3      	subs	r3, r2, r3
            if (next &&
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	dd4d      	ble.n	8010550 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80104b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104b6:	68db      	ldr	r3, [r3, #12]
 80104b8:	685b      	ldr	r3, [r3, #4]
 80104ba:	b29a      	uxth	r2, r3
 80104bc:	4b81      	ldr	r3, [pc, #516]	; (80106c4 <tcp_receive+0xb08>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	b29b      	uxth	r3, r3
 80104c2:	1ad3      	subs	r3, r2, r3
 80104c4:	b29a      	uxth	r2, r3
 80104c6:	4b80      	ldr	r3, [pc, #512]	; (80106c8 <tcp_receive+0xb0c>)
 80104c8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80104ca:	4b7f      	ldr	r3, [pc, #508]	; (80106c8 <tcp_receive+0xb0c>)
 80104cc:	68db      	ldr	r3, [r3, #12]
 80104ce:	899b      	ldrh	r3, [r3, #12]
 80104d0:	b29b      	uxth	r3, r3
 80104d2:	4618      	mov	r0, r3
 80104d4:	f7fa fb9a 	bl	800ac0c <lwip_htons>
 80104d8:	4603      	mov	r3, r0
 80104da:	b2db      	uxtb	r3, r3
 80104dc:	f003 0302 	and.w	r3, r3, #2
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d005      	beq.n	80104f0 <tcp_receive+0x934>
                inseg.len -= 1;
 80104e4:	4b78      	ldr	r3, [pc, #480]	; (80106c8 <tcp_receive+0xb0c>)
 80104e6:	891b      	ldrh	r3, [r3, #8]
 80104e8:	3b01      	subs	r3, #1
 80104ea:	b29a      	uxth	r2, r3
 80104ec:	4b76      	ldr	r3, [pc, #472]	; (80106c8 <tcp_receive+0xb0c>)
 80104ee:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80104f0:	4b75      	ldr	r3, [pc, #468]	; (80106c8 <tcp_receive+0xb0c>)
 80104f2:	685a      	ldr	r2, [r3, #4]
 80104f4:	4b74      	ldr	r3, [pc, #464]	; (80106c8 <tcp_receive+0xb0c>)
 80104f6:	891b      	ldrh	r3, [r3, #8]
 80104f8:	4619      	mov	r1, r3
 80104fa:	4610      	mov	r0, r2
 80104fc:	f7fb fdea 	bl	800c0d4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010500:	4b71      	ldr	r3, [pc, #452]	; (80106c8 <tcp_receive+0xb0c>)
 8010502:	891c      	ldrh	r4, [r3, #8]
 8010504:	4b70      	ldr	r3, [pc, #448]	; (80106c8 <tcp_receive+0xb0c>)
 8010506:	68db      	ldr	r3, [r3, #12]
 8010508:	899b      	ldrh	r3, [r3, #12]
 801050a:	b29b      	uxth	r3, r3
 801050c:	4618      	mov	r0, r3
 801050e:	f7fa fb7d 	bl	800ac0c <lwip_htons>
 8010512:	4603      	mov	r3, r0
 8010514:	b2db      	uxtb	r3, r3
 8010516:	f003 0303 	and.w	r3, r3, #3
 801051a:	2b00      	cmp	r3, #0
 801051c:	d001      	beq.n	8010522 <tcp_receive+0x966>
 801051e:	2301      	movs	r3, #1
 8010520:	e000      	b.n	8010524 <tcp_receive+0x968>
 8010522:	2300      	movs	r3, #0
 8010524:	4423      	add	r3, r4
 8010526:	b29a      	uxth	r2, r3
 8010528:	4b65      	ldr	r3, [pc, #404]	; (80106c0 <tcp_receive+0xb04>)
 801052a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801052c:	4b64      	ldr	r3, [pc, #400]	; (80106c0 <tcp_receive+0xb04>)
 801052e:	881b      	ldrh	r3, [r3, #0]
 8010530:	461a      	mov	r2, r3
 8010532:	4b64      	ldr	r3, [pc, #400]	; (80106c4 <tcp_receive+0xb08>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	441a      	add	r2, r3
 8010538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801053a:	68db      	ldr	r3, [r3, #12]
 801053c:	685b      	ldr	r3, [r3, #4]
 801053e:	429a      	cmp	r2, r3
 8010540:	d006      	beq.n	8010550 <tcp_receive+0x994>
 8010542:	4b62      	ldr	r3, [pc, #392]	; (80106cc <tcp_receive+0xb10>)
 8010544:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8010548:	4961      	ldr	r1, [pc, #388]	; (80106d0 <tcp_receive+0xb14>)
 801054a:	4862      	ldr	r0, [pc, #392]	; (80106d4 <tcp_receive+0xb18>)
 801054c:	f007 fcac 	bl	8017ea8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010554:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010556:	4b5a      	ldr	r3, [pc, #360]	; (80106c0 <tcp_receive+0xb04>)
 8010558:	881b      	ldrh	r3, [r3, #0]
 801055a:	461a      	mov	r2, r3
 801055c:	4b59      	ldr	r3, [pc, #356]	; (80106c4 <tcp_receive+0xb08>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	441a      	add	r2, r3
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801056a:	4b55      	ldr	r3, [pc, #340]	; (80106c0 <tcp_receive+0xb04>)
 801056c:	881b      	ldrh	r3, [r3, #0]
 801056e:	429a      	cmp	r2, r3
 8010570:	d206      	bcs.n	8010580 <tcp_receive+0x9c4>
 8010572:	4b56      	ldr	r3, [pc, #344]	; (80106cc <tcp_receive+0xb10>)
 8010574:	f240 6207 	movw	r2, #1543	; 0x607
 8010578:	4957      	ldr	r1, [pc, #348]	; (80106d8 <tcp_receive+0xb1c>)
 801057a:	4856      	ldr	r0, [pc, #344]	; (80106d4 <tcp_receive+0xb18>)
 801057c:	f007 fc94 	bl	8017ea8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010584:	4b4e      	ldr	r3, [pc, #312]	; (80106c0 <tcp_receive+0xb04>)
 8010586:	881b      	ldrh	r3, [r3, #0]
 8010588:	1ad3      	subs	r3, r2, r3
 801058a:	b29a      	uxth	r2, r3
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010590:	6878      	ldr	r0, [r7, #4]
 8010592:	f7fc fe9b 	bl	800d2cc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010596:	4b4c      	ldr	r3, [pc, #304]	; (80106c8 <tcp_receive+0xb0c>)
 8010598:	685b      	ldr	r3, [r3, #4]
 801059a:	891b      	ldrh	r3, [r3, #8]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d006      	beq.n	80105ae <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80105a0:	4b49      	ldr	r3, [pc, #292]	; (80106c8 <tcp_receive+0xb0c>)
 80105a2:	685b      	ldr	r3, [r3, #4]
 80105a4:	4a4d      	ldr	r2, [pc, #308]	; (80106dc <tcp_receive+0xb20>)
 80105a6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80105a8:	4b47      	ldr	r3, [pc, #284]	; (80106c8 <tcp_receive+0xb0c>)
 80105aa:	2200      	movs	r2, #0
 80105ac:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80105ae:	4b46      	ldr	r3, [pc, #280]	; (80106c8 <tcp_receive+0xb0c>)
 80105b0:	68db      	ldr	r3, [r3, #12]
 80105b2:	899b      	ldrh	r3, [r3, #12]
 80105b4:	b29b      	uxth	r3, r3
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7fa fb28 	bl	800ac0c <lwip_htons>
 80105bc:	4603      	mov	r3, r0
 80105be:	b2db      	uxtb	r3, r3
 80105c0:	f003 0301 	and.w	r3, r3, #1
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	f000 80b8 	beq.w	801073a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80105ca:	4b45      	ldr	r3, [pc, #276]	; (80106e0 <tcp_receive+0xb24>)
 80105cc:	781b      	ldrb	r3, [r3, #0]
 80105ce:	f043 0320 	orr.w	r3, r3, #32
 80105d2:	b2da      	uxtb	r2, r3
 80105d4:	4b42      	ldr	r3, [pc, #264]	; (80106e0 <tcp_receive+0xb24>)
 80105d6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80105d8:	e0af      	b.n	801073a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105de:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105e4:	68db      	ldr	r3, [r3, #12]
 80105e6:	685b      	ldr	r3, [r3, #4]
 80105e8:	4a36      	ldr	r2, [pc, #216]	; (80106c4 <tcp_receive+0xb08>)
 80105ea:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	891b      	ldrh	r3, [r3, #8]
 80105f0:	461c      	mov	r4, r3
 80105f2:	68bb      	ldr	r3, [r7, #8]
 80105f4:	68db      	ldr	r3, [r3, #12]
 80105f6:	899b      	ldrh	r3, [r3, #12]
 80105f8:	b29b      	uxth	r3, r3
 80105fa:	4618      	mov	r0, r3
 80105fc:	f7fa fb06 	bl	800ac0c <lwip_htons>
 8010600:	4603      	mov	r3, r0
 8010602:	b2db      	uxtb	r3, r3
 8010604:	f003 0303 	and.w	r3, r3, #3
 8010608:	2b00      	cmp	r3, #0
 801060a:	d001      	beq.n	8010610 <tcp_receive+0xa54>
 801060c:	2301      	movs	r3, #1
 801060e:	e000      	b.n	8010612 <tcp_receive+0xa56>
 8010610:	2300      	movs	r3, #0
 8010612:	191a      	adds	r2, r3, r4
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010618:	441a      	add	r2, r3
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010622:	461c      	mov	r4, r3
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	891b      	ldrh	r3, [r3, #8]
 8010628:	461d      	mov	r5, r3
 801062a:	68bb      	ldr	r3, [r7, #8]
 801062c:	68db      	ldr	r3, [r3, #12]
 801062e:	899b      	ldrh	r3, [r3, #12]
 8010630:	b29b      	uxth	r3, r3
 8010632:	4618      	mov	r0, r3
 8010634:	f7fa faea 	bl	800ac0c <lwip_htons>
 8010638:	4603      	mov	r3, r0
 801063a:	b2db      	uxtb	r3, r3
 801063c:	f003 0303 	and.w	r3, r3, #3
 8010640:	2b00      	cmp	r3, #0
 8010642:	d001      	beq.n	8010648 <tcp_receive+0xa8c>
 8010644:	2301      	movs	r3, #1
 8010646:	e000      	b.n	801064a <tcp_receive+0xa8e>
 8010648:	2300      	movs	r3, #0
 801064a:	442b      	add	r3, r5
 801064c:	429c      	cmp	r4, r3
 801064e:	d206      	bcs.n	801065e <tcp_receive+0xaa2>
 8010650:	4b1e      	ldr	r3, [pc, #120]	; (80106cc <tcp_receive+0xb10>)
 8010652:	f240 622c 	movw	r2, #1580	; 0x62c
 8010656:	4923      	ldr	r1, [pc, #140]	; (80106e4 <tcp_receive+0xb28>)
 8010658:	481e      	ldr	r0, [pc, #120]	; (80106d4 <tcp_receive+0xb18>)
 801065a:	f007 fc25 	bl	8017ea8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	891b      	ldrh	r3, [r3, #8]
 8010662:	461c      	mov	r4, r3
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	68db      	ldr	r3, [r3, #12]
 8010668:	899b      	ldrh	r3, [r3, #12]
 801066a:	b29b      	uxth	r3, r3
 801066c:	4618      	mov	r0, r3
 801066e:	f7fa facd 	bl	800ac0c <lwip_htons>
 8010672:	4603      	mov	r3, r0
 8010674:	b2db      	uxtb	r3, r3
 8010676:	f003 0303 	and.w	r3, r3, #3
 801067a:	2b00      	cmp	r3, #0
 801067c:	d001      	beq.n	8010682 <tcp_receive+0xac6>
 801067e:	2301      	movs	r3, #1
 8010680:	e000      	b.n	8010684 <tcp_receive+0xac8>
 8010682:	2300      	movs	r3, #0
 8010684:	1919      	adds	r1, r3, r4
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801068a:	b28b      	uxth	r3, r1
 801068c:	1ad3      	subs	r3, r2, r3
 801068e:	b29a      	uxth	r2, r3
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	f7fc fe19 	bl	800d2cc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	685b      	ldr	r3, [r3, #4]
 801069e:	891b      	ldrh	r3, [r3, #8]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d028      	beq.n	80106f6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80106a4:	4b0d      	ldr	r3, [pc, #52]	; (80106dc <tcp_receive+0xb20>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d01d      	beq.n	80106e8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80106ac:	4b0b      	ldr	r3, [pc, #44]	; (80106dc <tcp_receive+0xb20>)
 80106ae:	681a      	ldr	r2, [r3, #0]
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	685b      	ldr	r3, [r3, #4]
 80106b4:	4619      	mov	r1, r3
 80106b6:	4610      	mov	r0, r2
 80106b8:	f7fb ff60 	bl	800c57c <pbuf_cat>
 80106bc:	e018      	b.n	80106f0 <tcp_receive+0xb34>
 80106be:	bf00      	nop
 80106c0:	20008aba 	.word	0x20008aba
 80106c4:	20008ab0 	.word	0x20008ab0
 80106c8:	20008a90 	.word	0x20008a90
 80106cc:	0801aeac 	.word	0x0801aeac
 80106d0:	0801b28c 	.word	0x0801b28c
 80106d4:	0801aef8 	.word	0x0801aef8
 80106d8:	0801b2c8 	.word	0x0801b2c8
 80106dc:	20008ac0 	.word	0x20008ac0
 80106e0:	20008abd 	.word	0x20008abd
 80106e4:	0801b2e8 	.word	0x0801b2e8
            } else {
              recv_data = cseg->p;
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	685b      	ldr	r3, [r3, #4]
 80106ec:	4a70      	ldr	r2, [pc, #448]	; (80108b0 <tcp_receive+0xcf4>)
 80106ee:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	2200      	movs	r2, #0
 80106f4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80106f6:	68bb      	ldr	r3, [r7, #8]
 80106f8:	68db      	ldr	r3, [r3, #12]
 80106fa:	899b      	ldrh	r3, [r3, #12]
 80106fc:	b29b      	uxth	r3, r3
 80106fe:	4618      	mov	r0, r3
 8010700:	f7fa fa84 	bl	800ac0c <lwip_htons>
 8010704:	4603      	mov	r3, r0
 8010706:	b2db      	uxtb	r3, r3
 8010708:	f003 0301 	and.w	r3, r3, #1
 801070c:	2b00      	cmp	r3, #0
 801070e:	d00d      	beq.n	801072c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010710:	4b68      	ldr	r3, [pc, #416]	; (80108b4 <tcp_receive+0xcf8>)
 8010712:	781b      	ldrb	r3, [r3, #0]
 8010714:	f043 0320 	orr.w	r3, r3, #32
 8010718:	b2da      	uxtb	r2, r3
 801071a:	4b66      	ldr	r3, [pc, #408]	; (80108b4 <tcp_receive+0xcf8>)
 801071c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	7d1b      	ldrb	r3, [r3, #20]
 8010722:	2b04      	cmp	r3, #4
 8010724:	d102      	bne.n	801072c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2207      	movs	r2, #7
 801072a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801072c:	68bb      	ldr	r3, [r7, #8]
 801072e:	681a      	ldr	r2, [r3, #0]
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010734:	68b8      	ldr	r0, [r7, #8]
 8010736:	f7fd faeb 	bl	800dd10 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801073e:	2b00      	cmp	r3, #0
 8010740:	d008      	beq.n	8010754 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010746:	68db      	ldr	r3, [r3, #12]
 8010748:	685a      	ldr	r2, [r3, #4]
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801074e:	429a      	cmp	r2, r3
 8010750:	f43f af43 	beq.w	80105da <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	8b5b      	ldrh	r3, [r3, #26]
 8010758:	f003 0301 	and.w	r3, r3, #1
 801075c:	2b00      	cmp	r3, #0
 801075e:	d00e      	beq.n	801077e <tcp_receive+0xbc2>
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	8b5b      	ldrh	r3, [r3, #26]
 8010764:	f023 0301 	bic.w	r3, r3, #1
 8010768:	b29a      	uxth	r2, r3
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	835a      	strh	r2, [r3, #26]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	8b5b      	ldrh	r3, [r3, #26]
 8010772:	f043 0302 	orr.w	r3, r3, #2
 8010776:	b29a      	uxth	r2, r3
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801077c:	e188      	b.n	8010a90 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	8b5b      	ldrh	r3, [r3, #26]
 8010782:	f043 0301 	orr.w	r3, r3, #1
 8010786:	b29a      	uxth	r2, r3
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801078c:	e180      	b.n	8010a90 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010792:	2b00      	cmp	r3, #0
 8010794:	d106      	bne.n	80107a4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010796:	4848      	ldr	r0, [pc, #288]	; (80108b8 <tcp_receive+0xcfc>)
 8010798:	f7fd faf0 	bl	800dd7c <tcp_seg_copy>
 801079c:	4602      	mov	r2, r0
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	675a      	str	r2, [r3, #116]	; 0x74
 80107a2:	e16d      	b.n	8010a80 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80107a4:	2300      	movs	r3, #0
 80107a6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80107ae:	e157      	b.n	8010a60 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80107b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107b2:	68db      	ldr	r3, [r3, #12]
 80107b4:	685a      	ldr	r2, [r3, #4]
 80107b6:	4b41      	ldr	r3, [pc, #260]	; (80108bc <tcp_receive+0xd00>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	429a      	cmp	r2, r3
 80107bc:	d11d      	bne.n	80107fa <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80107be:	4b3e      	ldr	r3, [pc, #248]	; (80108b8 <tcp_receive+0xcfc>)
 80107c0:	891a      	ldrh	r2, [r3, #8]
 80107c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107c4:	891b      	ldrh	r3, [r3, #8]
 80107c6:	429a      	cmp	r2, r3
 80107c8:	f240 814f 	bls.w	8010a6a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80107cc:	483a      	ldr	r0, [pc, #232]	; (80108b8 <tcp_receive+0xcfc>)
 80107ce:	f7fd fad5 	bl	800dd7c <tcp_seg_copy>
 80107d2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	f000 8149 	beq.w	8010a6e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80107dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d003      	beq.n	80107ea <tcp_receive+0xc2e>
                    prev->next = cseg;
 80107e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107e4:	697a      	ldr	r2, [r7, #20]
 80107e6:	601a      	str	r2, [r3, #0]
 80107e8:	e002      	b.n	80107f0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	697a      	ldr	r2, [r7, #20]
 80107ee:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80107f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80107f2:	6978      	ldr	r0, [r7, #20]
 80107f4:	f7ff f8de 	bl	800f9b4 <tcp_oos_insert_segment>
                }
                break;
 80107f8:	e139      	b.n	8010a6e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80107fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d117      	bne.n	8010830 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010800:	4b2e      	ldr	r3, [pc, #184]	; (80108bc <tcp_receive+0xd00>)
 8010802:	681a      	ldr	r2, [r3, #0]
 8010804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010806:	68db      	ldr	r3, [r3, #12]
 8010808:	685b      	ldr	r3, [r3, #4]
 801080a:	1ad3      	subs	r3, r2, r3
 801080c:	2b00      	cmp	r3, #0
 801080e:	da57      	bge.n	80108c0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010810:	4829      	ldr	r0, [pc, #164]	; (80108b8 <tcp_receive+0xcfc>)
 8010812:	f7fd fab3 	bl	800dd7c <tcp_seg_copy>
 8010816:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010818:	69bb      	ldr	r3, [r7, #24]
 801081a:	2b00      	cmp	r3, #0
 801081c:	f000 8129 	beq.w	8010a72 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	69ba      	ldr	r2, [r7, #24]
 8010824:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010826:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010828:	69b8      	ldr	r0, [r7, #24]
 801082a:	f7ff f8c3 	bl	800f9b4 <tcp_oos_insert_segment>
                  }
                  break;
 801082e:	e120      	b.n	8010a72 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010830:	4b22      	ldr	r3, [pc, #136]	; (80108bc <tcp_receive+0xd00>)
 8010832:	681a      	ldr	r2, [r3, #0]
 8010834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010836:	68db      	ldr	r3, [r3, #12]
 8010838:	685b      	ldr	r3, [r3, #4]
 801083a:	1ad3      	subs	r3, r2, r3
 801083c:	3b01      	subs	r3, #1
 801083e:	2b00      	cmp	r3, #0
 8010840:	db3e      	blt.n	80108c0 <tcp_receive+0xd04>
 8010842:	4b1e      	ldr	r3, [pc, #120]	; (80108bc <tcp_receive+0xd00>)
 8010844:	681a      	ldr	r2, [r3, #0]
 8010846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010848:	68db      	ldr	r3, [r3, #12]
 801084a:	685b      	ldr	r3, [r3, #4]
 801084c:	1ad3      	subs	r3, r2, r3
 801084e:	3301      	adds	r3, #1
 8010850:	2b00      	cmp	r3, #0
 8010852:	dc35      	bgt.n	80108c0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010854:	4818      	ldr	r0, [pc, #96]	; (80108b8 <tcp_receive+0xcfc>)
 8010856:	f7fd fa91 	bl	800dd7c <tcp_seg_copy>
 801085a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801085c:	69fb      	ldr	r3, [r7, #28]
 801085e:	2b00      	cmp	r3, #0
 8010860:	f000 8109 	beq.w	8010a76 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010866:	68db      	ldr	r3, [r3, #12]
 8010868:	685b      	ldr	r3, [r3, #4]
 801086a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801086c:	8912      	ldrh	r2, [r2, #8]
 801086e:	441a      	add	r2, r3
 8010870:	4b12      	ldr	r3, [pc, #72]	; (80108bc <tcp_receive+0xd00>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	1ad3      	subs	r3, r2, r3
 8010876:	2b00      	cmp	r3, #0
 8010878:	dd12      	ble.n	80108a0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801087a:	4b10      	ldr	r3, [pc, #64]	; (80108bc <tcp_receive+0xd00>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	b29a      	uxth	r2, r3
 8010880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010882:	68db      	ldr	r3, [r3, #12]
 8010884:	685b      	ldr	r3, [r3, #4]
 8010886:	b29b      	uxth	r3, r3
 8010888:	1ad3      	subs	r3, r2, r3
 801088a:	b29a      	uxth	r2, r3
 801088c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801088e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010892:	685a      	ldr	r2, [r3, #4]
 8010894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010896:	891b      	ldrh	r3, [r3, #8]
 8010898:	4619      	mov	r1, r3
 801089a:	4610      	mov	r0, r2
 801089c:	f7fb fc1a 	bl	800c0d4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80108a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108a2:	69fa      	ldr	r2, [r7, #28]
 80108a4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80108a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80108a8:	69f8      	ldr	r0, [r7, #28]
 80108aa:	f7ff f883 	bl	800f9b4 <tcp_oos_insert_segment>
                  }
                  break;
 80108ae:	e0e2      	b.n	8010a76 <tcp_receive+0xeba>
 80108b0:	20008ac0 	.word	0x20008ac0
 80108b4:	20008abd 	.word	0x20008abd
 80108b8:	20008a90 	.word	0x20008a90
 80108bc:	20008ab0 	.word	0x20008ab0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80108c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108c2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80108c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	f040 80c6 	bne.w	8010a5a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80108ce:	4b80      	ldr	r3, [pc, #512]	; (8010ad0 <tcp_receive+0xf14>)
 80108d0:	681a      	ldr	r2, [r3, #0]
 80108d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108d4:	68db      	ldr	r3, [r3, #12]
 80108d6:	685b      	ldr	r3, [r3, #4]
 80108d8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80108da:	2b00      	cmp	r3, #0
 80108dc:	f340 80bd 	ble.w	8010a5a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80108e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108e2:	68db      	ldr	r3, [r3, #12]
 80108e4:	899b      	ldrh	r3, [r3, #12]
 80108e6:	b29b      	uxth	r3, r3
 80108e8:	4618      	mov	r0, r3
 80108ea:	f7fa f98f 	bl	800ac0c <lwip_htons>
 80108ee:	4603      	mov	r3, r0
 80108f0:	b2db      	uxtb	r3, r3
 80108f2:	f003 0301 	and.w	r3, r3, #1
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	f040 80bf 	bne.w	8010a7a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80108fc:	4875      	ldr	r0, [pc, #468]	; (8010ad4 <tcp_receive+0xf18>)
 80108fe:	f7fd fa3d 	bl	800dd7c <tcp_seg_copy>
 8010902:	4602      	mov	r2, r0
 8010904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010906:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	2b00      	cmp	r3, #0
 801090e:	f000 80b6 	beq.w	8010a7e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010914:	68db      	ldr	r3, [r3, #12]
 8010916:	685b      	ldr	r3, [r3, #4]
 8010918:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801091a:	8912      	ldrh	r2, [r2, #8]
 801091c:	441a      	add	r2, r3
 801091e:	4b6c      	ldr	r3, [pc, #432]	; (8010ad0 <tcp_receive+0xf14>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	1ad3      	subs	r3, r2, r3
 8010924:	2b00      	cmp	r3, #0
 8010926:	dd12      	ble.n	801094e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010928:	4b69      	ldr	r3, [pc, #420]	; (8010ad0 <tcp_receive+0xf14>)
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	b29a      	uxth	r2, r3
 801092e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010930:	68db      	ldr	r3, [r3, #12]
 8010932:	685b      	ldr	r3, [r3, #4]
 8010934:	b29b      	uxth	r3, r3
 8010936:	1ad3      	subs	r3, r2, r3
 8010938:	b29a      	uxth	r2, r3
 801093a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801093c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801093e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010940:	685a      	ldr	r2, [r3, #4]
 8010942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010944:	891b      	ldrh	r3, [r3, #8]
 8010946:	4619      	mov	r1, r3
 8010948:	4610      	mov	r0, r2
 801094a:	f7fb fbc3 	bl	800c0d4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801094e:	4b62      	ldr	r3, [pc, #392]	; (8010ad8 <tcp_receive+0xf1c>)
 8010950:	881b      	ldrh	r3, [r3, #0]
 8010952:	461a      	mov	r2, r3
 8010954:	4b5e      	ldr	r3, [pc, #376]	; (8010ad0 <tcp_receive+0xf14>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	441a      	add	r2, r3
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801095e:	6879      	ldr	r1, [r7, #4]
 8010960:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010962:	440b      	add	r3, r1
 8010964:	1ad3      	subs	r3, r2, r3
 8010966:	2b00      	cmp	r3, #0
 8010968:	f340 8089 	ble.w	8010a7e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801096c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	68db      	ldr	r3, [r3, #12]
 8010972:	899b      	ldrh	r3, [r3, #12]
 8010974:	b29b      	uxth	r3, r3
 8010976:	4618      	mov	r0, r3
 8010978:	f7fa f948 	bl	800ac0c <lwip_htons>
 801097c:	4603      	mov	r3, r0
 801097e:	b2db      	uxtb	r3, r3
 8010980:	f003 0301 	and.w	r3, r3, #1
 8010984:	2b00      	cmp	r3, #0
 8010986:	d022      	beq.n	80109ce <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	68db      	ldr	r3, [r3, #12]
 801098e:	899b      	ldrh	r3, [r3, #12]
 8010990:	b29b      	uxth	r3, r3
 8010992:	b21b      	sxth	r3, r3
 8010994:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010998:	b21c      	sxth	r4, r3
 801099a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	68db      	ldr	r3, [r3, #12]
 80109a0:	899b      	ldrh	r3, [r3, #12]
 80109a2:	b29b      	uxth	r3, r3
 80109a4:	4618      	mov	r0, r3
 80109a6:	f7fa f931 	bl	800ac0c <lwip_htons>
 80109aa:	4603      	mov	r3, r0
 80109ac:	b2db      	uxtb	r3, r3
 80109ae:	b29b      	uxth	r3, r3
 80109b0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80109b4:	b29b      	uxth	r3, r3
 80109b6:	4618      	mov	r0, r3
 80109b8:	f7fa f928 	bl	800ac0c <lwip_htons>
 80109bc:	4603      	mov	r3, r0
 80109be:	b21b      	sxth	r3, r3
 80109c0:	4323      	orrs	r3, r4
 80109c2:	b21a      	sxth	r2, r3
 80109c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	68db      	ldr	r3, [r3, #12]
 80109ca:	b292      	uxth	r2, r2
 80109cc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109d2:	b29a      	uxth	r2, r3
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80109d8:	4413      	add	r3, r2
 80109da:	b299      	uxth	r1, r3
 80109dc:	4b3c      	ldr	r3, [pc, #240]	; (8010ad0 <tcp_receive+0xf14>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	b29a      	uxth	r2, r3
 80109e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	1a8a      	subs	r2, r1, r2
 80109e8:	b292      	uxth	r2, r2
 80109ea:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80109ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	685a      	ldr	r2, [r3, #4]
 80109f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	891b      	ldrh	r3, [r3, #8]
 80109f8:	4619      	mov	r1, r3
 80109fa:	4610      	mov	r0, r2
 80109fc:	f7fb fb6a 	bl	800c0d4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	891c      	ldrh	r4, [r3, #8]
 8010a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	68db      	ldr	r3, [r3, #12]
 8010a0c:	899b      	ldrh	r3, [r3, #12]
 8010a0e:	b29b      	uxth	r3, r3
 8010a10:	4618      	mov	r0, r3
 8010a12:	f7fa f8fb 	bl	800ac0c <lwip_htons>
 8010a16:	4603      	mov	r3, r0
 8010a18:	b2db      	uxtb	r3, r3
 8010a1a:	f003 0303 	and.w	r3, r3, #3
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d001      	beq.n	8010a26 <tcp_receive+0xe6a>
 8010a22:	2301      	movs	r3, #1
 8010a24:	e000      	b.n	8010a28 <tcp_receive+0xe6c>
 8010a26:	2300      	movs	r3, #0
 8010a28:	4423      	add	r3, r4
 8010a2a:	b29a      	uxth	r2, r3
 8010a2c:	4b2a      	ldr	r3, [pc, #168]	; (8010ad8 <tcp_receive+0xf1c>)
 8010a2e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010a30:	4b29      	ldr	r3, [pc, #164]	; (8010ad8 <tcp_receive+0xf1c>)
 8010a32:	881b      	ldrh	r3, [r3, #0]
 8010a34:	461a      	mov	r2, r3
 8010a36:	4b26      	ldr	r3, [pc, #152]	; (8010ad0 <tcp_receive+0xf14>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	441a      	add	r2, r3
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a40:	6879      	ldr	r1, [r7, #4]
 8010a42:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010a44:	440b      	add	r3, r1
 8010a46:	429a      	cmp	r2, r3
 8010a48:	d019      	beq.n	8010a7e <tcp_receive+0xec2>
 8010a4a:	4b24      	ldr	r3, [pc, #144]	; (8010adc <tcp_receive+0xf20>)
 8010a4c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010a50:	4923      	ldr	r1, [pc, #140]	; (8010ae0 <tcp_receive+0xf24>)
 8010a52:	4824      	ldr	r0, [pc, #144]	; (8010ae4 <tcp_receive+0xf28>)
 8010a54:	f007 fa28 	bl	8017ea8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010a58:	e011      	b.n	8010a7e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	f47f aea4 	bne.w	80107b0 <tcp_receive+0xbf4>
 8010a68:	e00a      	b.n	8010a80 <tcp_receive+0xec4>
                break;
 8010a6a:	bf00      	nop
 8010a6c:	e008      	b.n	8010a80 <tcp_receive+0xec4>
                break;
 8010a6e:	bf00      	nop
 8010a70:	e006      	b.n	8010a80 <tcp_receive+0xec4>
                  break;
 8010a72:	bf00      	nop
 8010a74:	e004      	b.n	8010a80 <tcp_receive+0xec4>
                  break;
 8010a76:	bf00      	nop
 8010a78:	e002      	b.n	8010a80 <tcp_receive+0xec4>
                  break;
 8010a7a:	bf00      	nop
 8010a7c:	e000      	b.n	8010a80 <tcp_receive+0xec4>
                break;
 8010a7e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f001 fe9b 	bl	80127bc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010a86:	e003      	b.n	8010a90 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010a88:	6878      	ldr	r0, [r7, #4]
 8010a8a:	f001 fe97 	bl	80127bc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010a8e:	e01a      	b.n	8010ac6 <tcp_receive+0xf0a>
 8010a90:	e019      	b.n	8010ac6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010a92:	4b0f      	ldr	r3, [pc, #60]	; (8010ad0 <tcp_receive+0xf14>)
 8010a94:	681a      	ldr	r2, [r3, #0]
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a9a:	1ad3      	subs	r3, r2, r3
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	db0a      	blt.n	8010ab6 <tcp_receive+0xefa>
 8010aa0:	4b0b      	ldr	r3, [pc, #44]	; (8010ad0 <tcp_receive+0xf14>)
 8010aa2:	681a      	ldr	r2, [r3, #0]
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010aa8:	6879      	ldr	r1, [r7, #4]
 8010aaa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010aac:	440b      	add	r3, r1
 8010aae:	1ad3      	subs	r3, r2, r3
 8010ab0:	3301      	adds	r3, #1
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	dd07      	ble.n	8010ac6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	8b5b      	ldrh	r3, [r3, #26]
 8010aba:	f043 0302 	orr.w	r3, r3, #2
 8010abe:	b29a      	uxth	r2, r3
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010ac4:	e7ff      	b.n	8010ac6 <tcp_receive+0xf0a>
 8010ac6:	bf00      	nop
 8010ac8:	3750      	adds	r7, #80	; 0x50
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bdb0      	pop	{r4, r5, r7, pc}
 8010ace:	bf00      	nop
 8010ad0:	20008ab0 	.word	0x20008ab0
 8010ad4:	20008a90 	.word	0x20008a90
 8010ad8:	20008aba 	.word	0x20008aba
 8010adc:	0801aeac 	.word	0x0801aeac
 8010ae0:	0801b254 	.word	0x0801b254
 8010ae4:	0801aef8 	.word	0x0801aef8

08010ae8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010ae8:	b480      	push	{r7}
 8010aea:	b083      	sub	sp, #12
 8010aec:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010aee:	4b15      	ldr	r3, [pc, #84]	; (8010b44 <tcp_get_next_optbyte+0x5c>)
 8010af0:	881b      	ldrh	r3, [r3, #0]
 8010af2:	1c5a      	adds	r2, r3, #1
 8010af4:	b291      	uxth	r1, r2
 8010af6:	4a13      	ldr	r2, [pc, #76]	; (8010b44 <tcp_get_next_optbyte+0x5c>)
 8010af8:	8011      	strh	r1, [r2, #0]
 8010afa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010afc:	4b12      	ldr	r3, [pc, #72]	; (8010b48 <tcp_get_next_optbyte+0x60>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d004      	beq.n	8010b0e <tcp_get_next_optbyte+0x26>
 8010b04:	4b11      	ldr	r3, [pc, #68]	; (8010b4c <tcp_get_next_optbyte+0x64>)
 8010b06:	881b      	ldrh	r3, [r3, #0]
 8010b08:	88fa      	ldrh	r2, [r7, #6]
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d208      	bcs.n	8010b20 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010b0e:	4b10      	ldr	r3, [pc, #64]	; (8010b50 <tcp_get_next_optbyte+0x68>)
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	3314      	adds	r3, #20
 8010b14:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010b16:	88fb      	ldrh	r3, [r7, #6]
 8010b18:	683a      	ldr	r2, [r7, #0]
 8010b1a:	4413      	add	r3, r2
 8010b1c:	781b      	ldrb	r3, [r3, #0]
 8010b1e:	e00b      	b.n	8010b38 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010b20:	88fb      	ldrh	r3, [r7, #6]
 8010b22:	b2da      	uxtb	r2, r3
 8010b24:	4b09      	ldr	r3, [pc, #36]	; (8010b4c <tcp_get_next_optbyte+0x64>)
 8010b26:	881b      	ldrh	r3, [r3, #0]
 8010b28:	b2db      	uxtb	r3, r3
 8010b2a:	1ad3      	subs	r3, r2, r3
 8010b2c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010b2e:	4b06      	ldr	r3, [pc, #24]	; (8010b48 <tcp_get_next_optbyte+0x60>)
 8010b30:	681a      	ldr	r2, [r3, #0]
 8010b32:	797b      	ldrb	r3, [r7, #5]
 8010b34:	4413      	add	r3, r2
 8010b36:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010b38:	4618      	mov	r0, r3
 8010b3a:	370c      	adds	r7, #12
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b42:	4770      	bx	lr
 8010b44:	20008aac 	.word	0x20008aac
 8010b48:	20008aa8 	.word	0x20008aa8
 8010b4c:	20008aa6 	.word	0x20008aa6
 8010b50:	20008aa0 	.word	0x20008aa0

08010b54 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b084      	sub	sp, #16
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d106      	bne.n	8010b70 <tcp_parseopt+0x1c>
 8010b62:	4b31      	ldr	r3, [pc, #196]	; (8010c28 <tcp_parseopt+0xd4>)
 8010b64:	f240 727d 	movw	r2, #1917	; 0x77d
 8010b68:	4930      	ldr	r1, [pc, #192]	; (8010c2c <tcp_parseopt+0xd8>)
 8010b6a:	4831      	ldr	r0, [pc, #196]	; (8010c30 <tcp_parseopt+0xdc>)
 8010b6c:	f007 f99c 	bl	8017ea8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010b70:	4b30      	ldr	r3, [pc, #192]	; (8010c34 <tcp_parseopt+0xe0>)
 8010b72:	881b      	ldrh	r3, [r3, #0]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d053      	beq.n	8010c20 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010b78:	4b2f      	ldr	r3, [pc, #188]	; (8010c38 <tcp_parseopt+0xe4>)
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	801a      	strh	r2, [r3, #0]
 8010b7e:	e043      	b.n	8010c08 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8010b80:	f7ff ffb2 	bl	8010ae8 <tcp_get_next_optbyte>
 8010b84:	4603      	mov	r3, r0
 8010b86:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010b88:	7bfb      	ldrb	r3, [r7, #15]
 8010b8a:	2b01      	cmp	r3, #1
 8010b8c:	d03c      	beq.n	8010c08 <tcp_parseopt+0xb4>
 8010b8e:	2b02      	cmp	r3, #2
 8010b90:	d002      	beq.n	8010b98 <tcp_parseopt+0x44>
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d03f      	beq.n	8010c16 <tcp_parseopt+0xc2>
 8010b96:	e026      	b.n	8010be6 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010b98:	f7ff ffa6 	bl	8010ae8 <tcp_get_next_optbyte>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	2b04      	cmp	r3, #4
 8010ba0:	d13b      	bne.n	8010c1a <tcp_parseopt+0xc6>
 8010ba2:	4b25      	ldr	r3, [pc, #148]	; (8010c38 <tcp_parseopt+0xe4>)
 8010ba4:	881b      	ldrh	r3, [r3, #0]
 8010ba6:	3302      	adds	r3, #2
 8010ba8:	4a22      	ldr	r2, [pc, #136]	; (8010c34 <tcp_parseopt+0xe0>)
 8010baa:	8812      	ldrh	r2, [r2, #0]
 8010bac:	4293      	cmp	r3, r2
 8010bae:	dc34      	bgt.n	8010c1a <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010bb0:	f7ff ff9a 	bl	8010ae8 <tcp_get_next_optbyte>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	b29b      	uxth	r3, r3
 8010bb8:	021b      	lsls	r3, r3, #8
 8010bba:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010bbc:	f7ff ff94 	bl	8010ae8 <tcp_get_next_optbyte>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	b29a      	uxth	r2, r3
 8010bc4:	89bb      	ldrh	r3, [r7, #12]
 8010bc6:	4313      	orrs	r3, r2
 8010bc8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010bca:	89bb      	ldrh	r3, [r7, #12]
 8010bcc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010bd0:	d804      	bhi.n	8010bdc <tcp_parseopt+0x88>
 8010bd2:	89bb      	ldrh	r3, [r7, #12]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d001      	beq.n	8010bdc <tcp_parseopt+0x88>
 8010bd8:	89ba      	ldrh	r2, [r7, #12]
 8010bda:	e001      	b.n	8010be0 <tcp_parseopt+0x8c>
 8010bdc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010be4:	e010      	b.n	8010c08 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010be6:	f7ff ff7f 	bl	8010ae8 <tcp_get_next_optbyte>
 8010bea:	4603      	mov	r3, r0
 8010bec:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010bee:	7afb      	ldrb	r3, [r7, #11]
 8010bf0:	2b01      	cmp	r3, #1
 8010bf2:	d914      	bls.n	8010c1e <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010bf4:	7afb      	ldrb	r3, [r7, #11]
 8010bf6:	b29a      	uxth	r2, r3
 8010bf8:	4b0f      	ldr	r3, [pc, #60]	; (8010c38 <tcp_parseopt+0xe4>)
 8010bfa:	881b      	ldrh	r3, [r3, #0]
 8010bfc:	4413      	add	r3, r2
 8010bfe:	b29b      	uxth	r3, r3
 8010c00:	3b02      	subs	r3, #2
 8010c02:	b29a      	uxth	r2, r3
 8010c04:	4b0c      	ldr	r3, [pc, #48]	; (8010c38 <tcp_parseopt+0xe4>)
 8010c06:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010c08:	4b0b      	ldr	r3, [pc, #44]	; (8010c38 <tcp_parseopt+0xe4>)
 8010c0a:	881a      	ldrh	r2, [r3, #0]
 8010c0c:	4b09      	ldr	r3, [pc, #36]	; (8010c34 <tcp_parseopt+0xe0>)
 8010c0e:	881b      	ldrh	r3, [r3, #0]
 8010c10:	429a      	cmp	r2, r3
 8010c12:	d3b5      	bcc.n	8010b80 <tcp_parseopt+0x2c>
 8010c14:	e004      	b.n	8010c20 <tcp_parseopt+0xcc>
          return;
 8010c16:	bf00      	nop
 8010c18:	e002      	b.n	8010c20 <tcp_parseopt+0xcc>
            return;
 8010c1a:	bf00      	nop
 8010c1c:	e000      	b.n	8010c20 <tcp_parseopt+0xcc>
            return;
 8010c1e:	bf00      	nop
      }
    }
  }
}
 8010c20:	3710      	adds	r7, #16
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}
 8010c26:	bf00      	nop
 8010c28:	0801aeac 	.word	0x0801aeac
 8010c2c:	0801b310 	.word	0x0801b310
 8010c30:	0801aef8 	.word	0x0801aef8
 8010c34:	20008aa4 	.word	0x20008aa4
 8010c38:	20008aac 	.word	0x20008aac

08010c3c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010c3c:	b480      	push	{r7}
 8010c3e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010c40:	4b05      	ldr	r3, [pc, #20]	; (8010c58 <tcp_trigger_input_pcb_close+0x1c>)
 8010c42:	781b      	ldrb	r3, [r3, #0]
 8010c44:	f043 0310 	orr.w	r3, r3, #16
 8010c48:	b2da      	uxtb	r2, r3
 8010c4a:	4b03      	ldr	r3, [pc, #12]	; (8010c58 <tcp_trigger_input_pcb_close+0x1c>)
 8010c4c:	701a      	strb	r2, [r3, #0]
}
 8010c4e:	bf00      	nop
 8010c50:	46bd      	mov	sp, r7
 8010c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c56:	4770      	bx	lr
 8010c58:	20008abd 	.word	0x20008abd

08010c5c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b084      	sub	sp, #16
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	60f8      	str	r0, [r7, #12]
 8010c64:	60b9      	str	r1, [r7, #8]
 8010c66:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d00a      	beq.n	8010c84 <tcp_route+0x28>
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	7a1b      	ldrb	r3, [r3, #8]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d006      	beq.n	8010c84 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	7a1b      	ldrb	r3, [r3, #8]
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f7fb f826 	bl	800bccc <netif_get_by_index>
 8010c80:	4603      	mov	r3, r0
 8010c82:	e003      	b.n	8010c8c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f005 fcc9 	bl	801661c <ip4_route>
 8010c8a:	4603      	mov	r3, r0
  }
}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3710      	adds	r7, #16
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}

08010c94 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010c94:	b590      	push	{r4, r7, lr}
 8010c96:	b087      	sub	sp, #28
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	60f8      	str	r0, [r7, #12]
 8010c9c:	60b9      	str	r1, [r7, #8]
 8010c9e:	603b      	str	r3, [r7, #0]
 8010ca0:	4613      	mov	r3, r2
 8010ca2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d105      	bne.n	8010cb6 <tcp_create_segment+0x22>
 8010caa:	4b44      	ldr	r3, [pc, #272]	; (8010dbc <tcp_create_segment+0x128>)
 8010cac:	22a3      	movs	r2, #163	; 0xa3
 8010cae:	4944      	ldr	r1, [pc, #272]	; (8010dc0 <tcp_create_segment+0x12c>)
 8010cb0:	4844      	ldr	r0, [pc, #272]	; (8010dc4 <tcp_create_segment+0x130>)
 8010cb2:	f007 f8f9 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010cb6:	68bb      	ldr	r3, [r7, #8]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d105      	bne.n	8010cc8 <tcp_create_segment+0x34>
 8010cbc:	4b3f      	ldr	r3, [pc, #252]	; (8010dbc <tcp_create_segment+0x128>)
 8010cbe:	22a4      	movs	r2, #164	; 0xa4
 8010cc0:	4941      	ldr	r1, [pc, #260]	; (8010dc8 <tcp_create_segment+0x134>)
 8010cc2:	4840      	ldr	r0, [pc, #256]	; (8010dc4 <tcp_create_segment+0x130>)
 8010cc4:	f007 f8f0 	bl	8017ea8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010cc8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010ccc:	009b      	lsls	r3, r3, #2
 8010cce:	b2db      	uxtb	r3, r3
 8010cd0:	f003 0304 	and.w	r3, r3, #4
 8010cd4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010cd6:	2003      	movs	r0, #3
 8010cd8:	f7fa fc84 	bl	800b5e4 <memp_malloc>
 8010cdc:	6138      	str	r0, [r7, #16]
 8010cde:	693b      	ldr	r3, [r7, #16]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d104      	bne.n	8010cee <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010ce4:	68b8      	ldr	r0, [r7, #8]
 8010ce6:	f7fb fb7b 	bl	800c3e0 <pbuf_free>
    return NULL;
 8010cea:	2300      	movs	r3, #0
 8010cec:	e061      	b.n	8010db2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010cf4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010cf6:	693b      	ldr	r3, [r7, #16]
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010cfc:	693b      	ldr	r3, [r7, #16]
 8010cfe:	68ba      	ldr	r2, [r7, #8]
 8010d00:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010d02:	68bb      	ldr	r3, [r7, #8]
 8010d04:	891a      	ldrh	r2, [r3, #8]
 8010d06:	7dfb      	ldrb	r3, [r7, #23]
 8010d08:	b29b      	uxth	r3, r3
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d205      	bcs.n	8010d1a <tcp_create_segment+0x86>
 8010d0e:	4b2b      	ldr	r3, [pc, #172]	; (8010dbc <tcp_create_segment+0x128>)
 8010d10:	22b0      	movs	r2, #176	; 0xb0
 8010d12:	492e      	ldr	r1, [pc, #184]	; (8010dcc <tcp_create_segment+0x138>)
 8010d14:	482b      	ldr	r0, [pc, #172]	; (8010dc4 <tcp_create_segment+0x130>)
 8010d16:	f007 f8c7 	bl	8017ea8 <iprintf>
  seg->len = p->tot_len - optlen;
 8010d1a:	68bb      	ldr	r3, [r7, #8]
 8010d1c:	891a      	ldrh	r2, [r3, #8]
 8010d1e:	7dfb      	ldrb	r3, [r7, #23]
 8010d20:	b29b      	uxth	r3, r3
 8010d22:	1ad3      	subs	r3, r2, r3
 8010d24:	b29a      	uxth	r2, r3
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010d2a:	2114      	movs	r1, #20
 8010d2c:	68b8      	ldr	r0, [r7, #8]
 8010d2e:	f7fb fac1 	bl	800c2b4 <pbuf_add_header>
 8010d32:	4603      	mov	r3, r0
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d004      	beq.n	8010d42 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010d38:	6938      	ldr	r0, [r7, #16]
 8010d3a:	f7fc ffe9 	bl	800dd10 <tcp_seg_free>
    return NULL;
 8010d3e:	2300      	movs	r3, #0
 8010d40:	e037      	b.n	8010db2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010d42:	693b      	ldr	r3, [r7, #16]
 8010d44:	685b      	ldr	r3, [r3, #4]
 8010d46:	685a      	ldr	r2, [r3, #4]
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	8ada      	ldrh	r2, [r3, #22]
 8010d50:	693b      	ldr	r3, [r7, #16]
 8010d52:	68dc      	ldr	r4, [r3, #12]
 8010d54:	4610      	mov	r0, r2
 8010d56:	f7f9 ff59 	bl	800ac0c <lwip_htons>
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	8b1a      	ldrh	r2, [r3, #24]
 8010d62:	693b      	ldr	r3, [r7, #16]
 8010d64:	68dc      	ldr	r4, [r3, #12]
 8010d66:	4610      	mov	r0, r2
 8010d68:	f7f9 ff50 	bl	800ac0c <lwip_htons>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010d70:	693b      	ldr	r3, [r7, #16]
 8010d72:	68dc      	ldr	r4, [r3, #12]
 8010d74:	6838      	ldr	r0, [r7, #0]
 8010d76:	f7f9 ff5e 	bl	800ac36 <lwip_htonl>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010d7e:	7dfb      	ldrb	r3, [r7, #23]
 8010d80:	089b      	lsrs	r3, r3, #2
 8010d82:	b2db      	uxtb	r3, r3
 8010d84:	b29b      	uxth	r3, r3
 8010d86:	3305      	adds	r3, #5
 8010d88:	b29b      	uxth	r3, r3
 8010d8a:	031b      	lsls	r3, r3, #12
 8010d8c:	b29a      	uxth	r2, r3
 8010d8e:	79fb      	ldrb	r3, [r7, #7]
 8010d90:	b29b      	uxth	r3, r3
 8010d92:	4313      	orrs	r3, r2
 8010d94:	b29a      	uxth	r2, r3
 8010d96:	693b      	ldr	r3, [r7, #16]
 8010d98:	68dc      	ldr	r4, [r3, #12]
 8010d9a:	4610      	mov	r0, r2
 8010d9c:	f7f9 ff36 	bl	800ac0c <lwip_htons>
 8010da0:	4603      	mov	r3, r0
 8010da2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010da4:	693b      	ldr	r3, [r7, #16]
 8010da6:	68db      	ldr	r3, [r3, #12]
 8010da8:	2200      	movs	r2, #0
 8010daa:	749a      	strb	r2, [r3, #18]
 8010dac:	2200      	movs	r2, #0
 8010dae:	74da      	strb	r2, [r3, #19]
  return seg;
 8010db0:	693b      	ldr	r3, [r7, #16]
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	371c      	adds	r7, #28
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd90      	pop	{r4, r7, pc}
 8010dba:	bf00      	nop
 8010dbc:	0801b32c 	.word	0x0801b32c
 8010dc0:	0801b360 	.word	0x0801b360
 8010dc4:	0801b380 	.word	0x0801b380
 8010dc8:	0801b3a8 	.word	0x0801b3a8
 8010dcc:	0801b3cc 	.word	0x0801b3cc

08010dd0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b086      	sub	sp, #24
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	607b      	str	r3, [r7, #4]
 8010dd8:	4603      	mov	r3, r0
 8010dda:	73fb      	strb	r3, [r7, #15]
 8010ddc:	460b      	mov	r3, r1
 8010dde:	81bb      	strh	r3, [r7, #12]
 8010de0:	4613      	mov	r3, r2
 8010de2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010de4:	89bb      	ldrh	r3, [r7, #12]
 8010de6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d105      	bne.n	8010dfa <tcp_pbuf_prealloc+0x2a>
 8010dee:	4b30      	ldr	r3, [pc, #192]	; (8010eb0 <tcp_pbuf_prealloc+0xe0>)
 8010df0:	22e8      	movs	r2, #232	; 0xe8
 8010df2:	4930      	ldr	r1, [pc, #192]	; (8010eb4 <tcp_pbuf_prealloc+0xe4>)
 8010df4:	4830      	ldr	r0, [pc, #192]	; (8010eb8 <tcp_pbuf_prealloc+0xe8>)
 8010df6:	f007 f857 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010dfa:	6a3b      	ldr	r3, [r7, #32]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d105      	bne.n	8010e0c <tcp_pbuf_prealloc+0x3c>
 8010e00:	4b2b      	ldr	r3, [pc, #172]	; (8010eb0 <tcp_pbuf_prealloc+0xe0>)
 8010e02:	22e9      	movs	r2, #233	; 0xe9
 8010e04:	492d      	ldr	r1, [pc, #180]	; (8010ebc <tcp_pbuf_prealloc+0xec>)
 8010e06:	482c      	ldr	r0, [pc, #176]	; (8010eb8 <tcp_pbuf_prealloc+0xe8>)
 8010e08:	f007 f84e 	bl	8017ea8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010e0c:	89ba      	ldrh	r2, [r7, #12]
 8010e0e:	897b      	ldrh	r3, [r7, #10]
 8010e10:	429a      	cmp	r2, r3
 8010e12:	d221      	bcs.n	8010e58 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010e14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010e18:	f003 0302 	and.w	r3, r3, #2
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d111      	bne.n	8010e44 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010e20:	6a3b      	ldr	r3, [r7, #32]
 8010e22:	8b5b      	ldrh	r3, [r3, #26]
 8010e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d115      	bne.n	8010e58 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010e2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d007      	beq.n	8010e44 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010e34:	6a3b      	ldr	r3, [r7, #32]
 8010e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d103      	bne.n	8010e44 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010e3c:	6a3b      	ldr	r3, [r7, #32]
 8010e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d009      	beq.n	8010e58 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010e44:	89bb      	ldrh	r3, [r7, #12]
 8010e46:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8010e4a:	f023 0203 	bic.w	r2, r3, #3
 8010e4e:	897b      	ldrh	r3, [r7, #10]
 8010e50:	4293      	cmp	r3, r2
 8010e52:	bf28      	it	cs
 8010e54:	4613      	movcs	r3, r2
 8010e56:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010e58:	8af9      	ldrh	r1, [r7, #22]
 8010e5a:	7bfb      	ldrb	r3, [r7, #15]
 8010e5c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010e60:	4618      	mov	r0, r3
 8010e62:	f7fa ffdd 	bl	800be20 <pbuf_alloc>
 8010e66:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010e68:	693b      	ldr	r3, [r7, #16]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d101      	bne.n	8010e72 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	e019      	b.n	8010ea6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010e72:	693b      	ldr	r3, [r7, #16]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d006      	beq.n	8010e88 <tcp_pbuf_prealloc+0xb8>
 8010e7a:	4b0d      	ldr	r3, [pc, #52]	; (8010eb0 <tcp_pbuf_prealloc+0xe0>)
 8010e7c:	f240 120b 	movw	r2, #267	; 0x10b
 8010e80:	490f      	ldr	r1, [pc, #60]	; (8010ec0 <tcp_pbuf_prealloc+0xf0>)
 8010e82:	480d      	ldr	r0, [pc, #52]	; (8010eb8 <tcp_pbuf_prealloc+0xe8>)
 8010e84:	f007 f810 	bl	8017ea8 <iprintf>
  *oversize = p->len - length;
 8010e88:	693b      	ldr	r3, [r7, #16]
 8010e8a:	895a      	ldrh	r2, [r3, #10]
 8010e8c:	89bb      	ldrh	r3, [r7, #12]
 8010e8e:	1ad3      	subs	r3, r2, r3
 8010e90:	b29a      	uxth	r2, r3
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010e96:	693b      	ldr	r3, [r7, #16]
 8010e98:	89ba      	ldrh	r2, [r7, #12]
 8010e9a:	811a      	strh	r2, [r3, #8]
 8010e9c:	693b      	ldr	r3, [r7, #16]
 8010e9e:	891a      	ldrh	r2, [r3, #8]
 8010ea0:	693b      	ldr	r3, [r7, #16]
 8010ea2:	815a      	strh	r2, [r3, #10]
  return p;
 8010ea4:	693b      	ldr	r3, [r7, #16]
}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	3718      	adds	r7, #24
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}
 8010eae:	bf00      	nop
 8010eb0:	0801b32c 	.word	0x0801b32c
 8010eb4:	0801b3e4 	.word	0x0801b3e4
 8010eb8:	0801b380 	.word	0x0801b380
 8010ebc:	0801b408 	.word	0x0801b408
 8010ec0:	0801b428 	.word	0x0801b428

08010ec4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
 8010ecc:	460b      	mov	r3, r1
 8010ece:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d106      	bne.n	8010ee4 <tcp_write_checks+0x20>
 8010ed6:	4b33      	ldr	r3, [pc, #204]	; (8010fa4 <tcp_write_checks+0xe0>)
 8010ed8:	f240 1233 	movw	r2, #307	; 0x133
 8010edc:	4932      	ldr	r1, [pc, #200]	; (8010fa8 <tcp_write_checks+0xe4>)
 8010ede:	4833      	ldr	r0, [pc, #204]	; (8010fac <tcp_write_checks+0xe8>)
 8010ee0:	f006 ffe2 	bl	8017ea8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	7d1b      	ldrb	r3, [r3, #20]
 8010ee8:	2b04      	cmp	r3, #4
 8010eea:	d00e      	beq.n	8010f0a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010ef0:	2b07      	cmp	r3, #7
 8010ef2:	d00a      	beq.n	8010f0a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010ef8:	2b02      	cmp	r3, #2
 8010efa:	d006      	beq.n	8010f0a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010f00:	2b03      	cmp	r3, #3
 8010f02:	d002      	beq.n	8010f0a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010f04:	f06f 030a 	mvn.w	r3, #10
 8010f08:	e048      	b.n	8010f9c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8010f0a:	887b      	ldrh	r3, [r7, #2]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d101      	bne.n	8010f14 <tcp_write_checks+0x50>
    return ERR_OK;
 8010f10:	2300      	movs	r3, #0
 8010f12:	e043      	b.n	8010f9c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010f1a:	887a      	ldrh	r2, [r7, #2]
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d909      	bls.n	8010f34 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	8b5b      	ldrh	r3, [r3, #26]
 8010f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f28:	b29a      	uxth	r2, r3
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8010f32:	e033      	b.n	8010f9c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f3a:	2b08      	cmp	r3, #8
 8010f3c:	d909      	bls.n	8010f52 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	8b5b      	ldrh	r3, [r3, #26]
 8010f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f46:	b29a      	uxth	r2, r3
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8010f50:	e024      	b.n	8010f9c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d00f      	beq.n	8010f7c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d11a      	bne.n	8010f9a <tcp_write_checks+0xd6>
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d116      	bne.n	8010f9a <tcp_write_checks+0xd6>
 8010f6c:	4b0d      	ldr	r3, [pc, #52]	; (8010fa4 <tcp_write_checks+0xe0>)
 8010f6e:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8010f72:	490f      	ldr	r1, [pc, #60]	; (8010fb0 <tcp_write_checks+0xec>)
 8010f74:	480d      	ldr	r0, [pc, #52]	; (8010fac <tcp_write_checks+0xe8>)
 8010f76:	f006 ff97 	bl	8017ea8 <iprintf>
 8010f7a:	e00e      	b.n	8010f9a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d103      	bne.n	8010f8c <tcp_write_checks+0xc8>
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d006      	beq.n	8010f9a <tcp_write_checks+0xd6>
 8010f8c:	4b05      	ldr	r3, [pc, #20]	; (8010fa4 <tcp_write_checks+0xe0>)
 8010f8e:	f240 1259 	movw	r2, #345	; 0x159
 8010f92:	4908      	ldr	r1, [pc, #32]	; (8010fb4 <tcp_write_checks+0xf0>)
 8010f94:	4805      	ldr	r0, [pc, #20]	; (8010fac <tcp_write_checks+0xe8>)
 8010f96:	f006 ff87 	bl	8017ea8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010f9a:	2300      	movs	r3, #0
}
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	3708      	adds	r7, #8
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}
 8010fa4:	0801b32c 	.word	0x0801b32c
 8010fa8:	0801b43c 	.word	0x0801b43c
 8010fac:	0801b380 	.word	0x0801b380
 8010fb0:	0801b45c 	.word	0x0801b45c
 8010fb4:	0801b498 	.word	0x0801b498

08010fb8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010fb8:	b590      	push	{r4, r7, lr}
 8010fba:	b09b      	sub	sp, #108	; 0x6c
 8010fbc:	af04      	add	r7, sp, #16
 8010fbe:	60f8      	str	r0, [r7, #12]
 8010fc0:	60b9      	str	r1, [r7, #8]
 8010fc2:	4611      	mov	r1, r2
 8010fc4:	461a      	mov	r2, r3
 8010fc6:	460b      	mov	r3, r1
 8010fc8:	80fb      	strh	r3, [r7, #6]
 8010fca:	4613      	mov	r3, r2
 8010fcc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010fce:	2300      	movs	r3, #0
 8010fd0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	653b      	str	r3, [r7, #80]	; 0x50
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010fda:	2300      	movs	r3, #0
 8010fdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8010fde:	2300      	movs	r3, #0
 8010fe0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010fe8:	2300      	movs	r3, #0
 8010fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d109      	bne.n	8011014 <tcp_write+0x5c>
 8011000:	4ba5      	ldr	r3, [pc, #660]	; (8011298 <tcp_write+0x2e0>)
 8011002:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011006:	49a5      	ldr	r1, [pc, #660]	; (801129c <tcp_write+0x2e4>)
 8011008:	48a5      	ldr	r0, [pc, #660]	; (80112a0 <tcp_write+0x2e8>)
 801100a:	f006 ff4d 	bl	8017ea8 <iprintf>
 801100e:	f06f 030f 	mvn.w	r3, #15
 8011012:	e32c      	b.n	801166e <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801101a:	085b      	lsrs	r3, r3, #1
 801101c:	b29a      	uxth	r2, r3
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011022:	4293      	cmp	r3, r2
 8011024:	bf28      	it	cs
 8011026:	4613      	movcs	r3, r2
 8011028:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801102a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801102c:	2b00      	cmp	r3, #0
 801102e:	d102      	bne.n	8011036 <tcp_write+0x7e>
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011034:	e000      	b.n	8011038 <tcp_write+0x80>
 8011036:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011038:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d109      	bne.n	8011054 <tcp_write+0x9c>
 8011040:	4b95      	ldr	r3, [pc, #596]	; (8011298 <tcp_write+0x2e0>)
 8011042:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8011046:	4997      	ldr	r1, [pc, #604]	; (80112a4 <tcp_write+0x2ec>)
 8011048:	4895      	ldr	r0, [pc, #596]	; (80112a0 <tcp_write+0x2e8>)
 801104a:	f006 ff2d 	bl	8017ea8 <iprintf>
 801104e:	f06f 030f 	mvn.w	r3, #15
 8011052:	e30c      	b.n	801166e <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011054:	88fb      	ldrh	r3, [r7, #6]
 8011056:	4619      	mov	r1, r3
 8011058:	68f8      	ldr	r0, [r7, #12]
 801105a:	f7ff ff33 	bl	8010ec4 <tcp_write_checks>
 801105e:	4603      	mov	r3, r0
 8011060:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011064:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011068:	2b00      	cmp	r3, #0
 801106a:	d002      	beq.n	8011072 <tcp_write+0xba>
    return err;
 801106c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011070:	e2fd      	b.n	801166e <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011078:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801107c:	2300      	movs	r3, #0
 801107e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011086:	2b00      	cmp	r3, #0
 8011088:	f000 80f7 	beq.w	801127a <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011090:	653b      	str	r3, [r7, #80]	; 0x50
 8011092:	e002      	b.n	801109a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801109a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d1f8      	bne.n	8011094 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80110a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110a4:	7a9b      	ldrb	r3, [r3, #10]
 80110a6:	009b      	lsls	r3, r3, #2
 80110a8:	b29b      	uxth	r3, r3
 80110aa:	f003 0304 	and.w	r3, r3, #4
 80110ae:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80110b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80110b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110b4:	891b      	ldrh	r3, [r3, #8]
 80110b6:	4619      	mov	r1, r3
 80110b8:	8c3b      	ldrh	r3, [r7, #32]
 80110ba:	440b      	add	r3, r1
 80110bc:	429a      	cmp	r2, r3
 80110be:	da06      	bge.n	80110ce <tcp_write+0x116>
 80110c0:	4b75      	ldr	r3, [pc, #468]	; (8011298 <tcp_write+0x2e0>)
 80110c2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80110c6:	4978      	ldr	r1, [pc, #480]	; (80112a8 <tcp_write+0x2f0>)
 80110c8:	4875      	ldr	r0, [pc, #468]	; (80112a0 <tcp_write+0x2e8>)
 80110ca:	f006 feed 	bl	8017ea8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80110ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110d0:	891a      	ldrh	r2, [r3, #8]
 80110d2:	8c3b      	ldrh	r3, [r7, #32]
 80110d4:	4413      	add	r3, r2
 80110d6:	b29b      	uxth	r3, r3
 80110d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80110da:	1ad3      	subs	r3, r2, r3
 80110dc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80110e4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80110e6:	8a7b      	ldrh	r3, [r7, #18]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d027      	beq.n	801113c <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80110ec:	8a7b      	ldrh	r3, [r7, #18]
 80110ee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80110f0:	429a      	cmp	r2, r3
 80110f2:	d206      	bcs.n	8011102 <tcp_write+0x14a>
 80110f4:	4b68      	ldr	r3, [pc, #416]	; (8011298 <tcp_write+0x2e0>)
 80110f6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80110fa:	496c      	ldr	r1, [pc, #432]	; (80112ac <tcp_write+0x2f4>)
 80110fc:	4868      	ldr	r0, [pc, #416]	; (80112a0 <tcp_write+0x2e8>)
 80110fe:	f006 fed3 	bl	8017ea8 <iprintf>
      seg = last_unsent;
 8011102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011104:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011106:	8a7b      	ldrh	r3, [r7, #18]
 8011108:	88fa      	ldrh	r2, [r7, #6]
 801110a:	429a      	cmp	r2, r3
 801110c:	d901      	bls.n	8011112 <tcp_write+0x15a>
 801110e:	8a7b      	ldrh	r3, [r7, #18]
 8011110:	e000      	b.n	8011114 <tcp_write+0x15c>
 8011112:	88fb      	ldrh	r3, [r7, #6]
 8011114:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011116:	4293      	cmp	r3, r2
 8011118:	bfa8      	it	ge
 801111a:	4613      	movge	r3, r2
 801111c:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801111e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011122:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011124:	4413      	add	r3, r2
 8011126:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801112a:	8a7a      	ldrh	r2, [r7, #18]
 801112c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801112e:	1ad3      	subs	r3, r2, r3
 8011130:	b29b      	uxth	r3, r3
 8011132:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011134:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011136:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011138:	1ad3      	subs	r3, r2, r3
 801113a:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801113c:	8a7b      	ldrh	r3, [r7, #18]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d00b      	beq.n	801115a <tcp_write+0x1a2>
 8011142:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011146:	88fb      	ldrh	r3, [r7, #6]
 8011148:	429a      	cmp	r2, r3
 801114a:	d006      	beq.n	801115a <tcp_write+0x1a2>
 801114c:	4b52      	ldr	r3, [pc, #328]	; (8011298 <tcp_write+0x2e0>)
 801114e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011152:	4957      	ldr	r1, [pc, #348]	; (80112b0 <tcp_write+0x2f8>)
 8011154:	4852      	ldr	r0, [pc, #328]	; (80112a0 <tcp_write+0x2e8>)
 8011156:	f006 fea7 	bl	8017ea8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801115a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801115e:	88fb      	ldrh	r3, [r7, #6]
 8011160:	429a      	cmp	r2, r3
 8011162:	f080 8168 	bcs.w	8011436 <tcp_write+0x47e>
 8011166:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011168:	2b00      	cmp	r3, #0
 801116a:	f000 8164 	beq.w	8011436 <tcp_write+0x47e>
 801116e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011170:	891b      	ldrh	r3, [r3, #8]
 8011172:	2b00      	cmp	r3, #0
 8011174:	f000 815f 	beq.w	8011436 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011178:	88fa      	ldrh	r2, [r7, #6]
 801117a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801117e:	1ad2      	subs	r2, r2, r3
 8011180:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011182:	4293      	cmp	r3, r2
 8011184:	bfa8      	it	ge
 8011186:	4613      	movge	r3, r2
 8011188:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801118a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801118c:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801118e:	797b      	ldrb	r3, [r7, #5]
 8011190:	f003 0301 	and.w	r3, r3, #1
 8011194:	2b00      	cmp	r3, #0
 8011196:	d027      	beq.n	80111e8 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011198:	f107 0012 	add.w	r0, r7, #18
 801119c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801119e:	8bf9      	ldrh	r1, [r7, #30]
 80111a0:	2301      	movs	r3, #1
 80111a2:	9302      	str	r3, [sp, #8]
 80111a4:	797b      	ldrb	r3, [r7, #5]
 80111a6:	9301      	str	r3, [sp, #4]
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	9300      	str	r3, [sp, #0]
 80111ac:	4603      	mov	r3, r0
 80111ae:	2000      	movs	r0, #0
 80111b0:	f7ff fe0e 	bl	8010dd0 <tcp_pbuf_prealloc>
 80111b4:	6578      	str	r0, [r7, #84]	; 0x54
 80111b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	f000 8226 	beq.w	801160a <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80111be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80111c0:	6858      	ldr	r0, [r3, #4]
 80111c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80111c6:	68ba      	ldr	r2, [r7, #8]
 80111c8:	4413      	add	r3, r2
 80111ca:	8bfa      	ldrh	r2, [r7, #30]
 80111cc:	4619      	mov	r1, r3
 80111ce:	f006 fe58 	bl	8017e82 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80111d2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80111d4:	f7fb f992 	bl	800c4fc <pbuf_clen>
 80111d8:	4603      	mov	r3, r0
 80111da:	461a      	mov	r2, r3
 80111dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80111e0:	4413      	add	r3, r2
 80111e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80111e6:	e041      	b.n	801126c <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80111e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111ea:	685b      	ldr	r3, [r3, #4]
 80111ec:	637b      	str	r3, [r7, #52]	; 0x34
 80111ee:	e002      	b.n	80111f6 <tcp_write+0x23e>
 80111f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	637b      	str	r3, [r7, #52]	; 0x34
 80111f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d1f8      	bne.n	80111f0 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80111fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011200:	7b1b      	ldrb	r3, [r3, #12]
 8011202:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011206:	2b00      	cmp	r3, #0
 8011208:	d115      	bne.n	8011236 <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801120a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801120c:	685b      	ldr	r3, [r3, #4]
 801120e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011210:	8952      	ldrh	r2, [r2, #10]
 8011212:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011214:	68ba      	ldr	r2, [r7, #8]
 8011216:	429a      	cmp	r2, r3
 8011218:	d10d      	bne.n	8011236 <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801121a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801121e:	2b00      	cmp	r3, #0
 8011220:	d006      	beq.n	8011230 <tcp_write+0x278>
 8011222:	4b1d      	ldr	r3, [pc, #116]	; (8011298 <tcp_write+0x2e0>)
 8011224:	f240 2231 	movw	r2, #561	; 0x231
 8011228:	4922      	ldr	r1, [pc, #136]	; (80112b4 <tcp_write+0x2fc>)
 801122a:	481d      	ldr	r0, [pc, #116]	; (80112a0 <tcp_write+0x2e8>)
 801122c:	f006 fe3c 	bl	8017ea8 <iprintf>
          extendlen = seglen;
 8011230:	8bfb      	ldrh	r3, [r7, #30]
 8011232:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011234:	e01a      	b.n	801126c <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011236:	8bfb      	ldrh	r3, [r7, #30]
 8011238:	2201      	movs	r2, #1
 801123a:	4619      	mov	r1, r3
 801123c:	2000      	movs	r0, #0
 801123e:	f7fa fdef 	bl	800be20 <pbuf_alloc>
 8011242:	6578      	str	r0, [r7, #84]	; 0x54
 8011244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011246:	2b00      	cmp	r3, #0
 8011248:	f000 81e1 	beq.w	801160e <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801124c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011250:	68ba      	ldr	r2, [r7, #8]
 8011252:	441a      	add	r2, r3
 8011254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011256:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011258:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801125a:	f7fb f94f 	bl	800c4fc <pbuf_clen>
 801125e:	4603      	mov	r3, r0
 8011260:	461a      	mov	r2, r3
 8011262:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011266:	4413      	add	r3, r2
 8011268:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801126c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011270:	8bfb      	ldrh	r3, [r7, #30]
 8011272:	4413      	add	r3, r2
 8011274:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011278:	e0dd      	b.n	8011436 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011280:	2b00      	cmp	r3, #0
 8011282:	f000 80d8 	beq.w	8011436 <tcp_write+0x47e>
 8011286:	4b04      	ldr	r3, [pc, #16]	; (8011298 <tcp_write+0x2e0>)
 8011288:	f240 224b 	movw	r2, #587	; 0x24b
 801128c:	490a      	ldr	r1, [pc, #40]	; (80112b8 <tcp_write+0x300>)
 801128e:	4804      	ldr	r0, [pc, #16]	; (80112a0 <tcp_write+0x2e8>)
 8011290:	f006 fe0a 	bl	8017ea8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011294:	e0cf      	b.n	8011436 <tcp_write+0x47e>
 8011296:	bf00      	nop
 8011298:	0801b32c 	.word	0x0801b32c
 801129c:	0801b4cc 	.word	0x0801b4cc
 80112a0:	0801b380 	.word	0x0801b380
 80112a4:	0801b4e4 	.word	0x0801b4e4
 80112a8:	0801b518 	.word	0x0801b518
 80112ac:	0801b530 	.word	0x0801b530
 80112b0:	0801b550 	.word	0x0801b550
 80112b4:	0801b570 	.word	0x0801b570
 80112b8:	0801b59c 	.word	0x0801b59c
    struct pbuf *p;
    u16_t left = len - pos;
 80112bc:	88fa      	ldrh	r2, [r7, #6]
 80112be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80112c2:	1ad3      	subs	r3, r2, r3
 80112c4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80112c6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80112ca:	b29b      	uxth	r3, r3
 80112cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80112ce:	1ad3      	subs	r3, r2, r3
 80112d0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80112d2:	8b7a      	ldrh	r2, [r7, #26]
 80112d4:	8bbb      	ldrh	r3, [r7, #28]
 80112d6:	4293      	cmp	r3, r2
 80112d8:	bf28      	it	cs
 80112da:	4613      	movcs	r3, r2
 80112dc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80112de:	797b      	ldrb	r3, [r7, #5]
 80112e0:	f003 0301 	and.w	r3, r3, #1
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d036      	beq.n	8011356 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80112e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80112ec:	b29a      	uxth	r2, r3
 80112ee:	8b3b      	ldrh	r3, [r7, #24]
 80112f0:	4413      	add	r3, r2
 80112f2:	b299      	uxth	r1, r3
 80112f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	bf0c      	ite	eq
 80112fa:	2301      	moveq	r3, #1
 80112fc:	2300      	movne	r3, #0
 80112fe:	b2db      	uxtb	r3, r3
 8011300:	f107 0012 	add.w	r0, r7, #18
 8011304:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011306:	9302      	str	r3, [sp, #8]
 8011308:	797b      	ldrb	r3, [r7, #5]
 801130a:	9301      	str	r3, [sp, #4]
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	9300      	str	r3, [sp, #0]
 8011310:	4603      	mov	r3, r0
 8011312:	2036      	movs	r0, #54	; 0x36
 8011314:	f7ff fd5c 	bl	8010dd0 <tcp_pbuf_prealloc>
 8011318:	6338      	str	r0, [r7, #48]	; 0x30
 801131a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801131c:	2b00      	cmp	r3, #0
 801131e:	f000 8178 	beq.w	8011612 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011324:	895b      	ldrh	r3, [r3, #10]
 8011326:	8b3a      	ldrh	r2, [r7, #24]
 8011328:	429a      	cmp	r2, r3
 801132a:	d906      	bls.n	801133a <tcp_write+0x382>
 801132c:	4b8c      	ldr	r3, [pc, #560]	; (8011560 <tcp_write+0x5a8>)
 801132e:	f240 2267 	movw	r2, #615	; 0x267
 8011332:	498c      	ldr	r1, [pc, #560]	; (8011564 <tcp_write+0x5ac>)
 8011334:	488c      	ldr	r0, [pc, #560]	; (8011568 <tcp_write+0x5b0>)
 8011336:	f006 fdb7 	bl	8017ea8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801133a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801133c:	685a      	ldr	r2, [r3, #4]
 801133e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011342:	18d0      	adds	r0, r2, r3
 8011344:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011348:	68ba      	ldr	r2, [r7, #8]
 801134a:	4413      	add	r3, r2
 801134c:	8b3a      	ldrh	r2, [r7, #24]
 801134e:	4619      	mov	r1, r3
 8011350:	f006 fd97 	bl	8017e82 <memcpy>
 8011354:	e02f      	b.n	80113b6 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011356:	8a7b      	ldrh	r3, [r7, #18]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d006      	beq.n	801136a <tcp_write+0x3b2>
 801135c:	4b80      	ldr	r3, [pc, #512]	; (8011560 <tcp_write+0x5a8>)
 801135e:	f240 2271 	movw	r2, #625	; 0x271
 8011362:	4982      	ldr	r1, [pc, #520]	; (801156c <tcp_write+0x5b4>)
 8011364:	4880      	ldr	r0, [pc, #512]	; (8011568 <tcp_write+0x5b0>)
 8011366:	f006 fd9f 	bl	8017ea8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801136a:	8b3b      	ldrh	r3, [r7, #24]
 801136c:	2201      	movs	r2, #1
 801136e:	4619      	mov	r1, r3
 8011370:	2036      	movs	r0, #54	; 0x36
 8011372:	f7fa fd55 	bl	800be20 <pbuf_alloc>
 8011376:	6178      	str	r0, [r7, #20]
 8011378:	697b      	ldr	r3, [r7, #20]
 801137a:	2b00      	cmp	r3, #0
 801137c:	f000 814b 	beq.w	8011616 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011380:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011384:	68ba      	ldr	r2, [r7, #8]
 8011386:	441a      	add	r2, r3
 8011388:	697b      	ldr	r3, [r7, #20]
 801138a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801138c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011390:	b29b      	uxth	r3, r3
 8011392:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011396:	4619      	mov	r1, r3
 8011398:	2036      	movs	r0, #54	; 0x36
 801139a:	f7fa fd41 	bl	800be20 <pbuf_alloc>
 801139e:	6338      	str	r0, [r7, #48]	; 0x30
 80113a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d103      	bne.n	80113ae <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80113a6:	6978      	ldr	r0, [r7, #20]
 80113a8:	f7fb f81a 	bl	800c3e0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80113ac:	e136      	b.n	801161c <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80113ae:	6979      	ldr	r1, [r7, #20]
 80113b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80113b2:	f7fb f8e3 	bl	800c57c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80113b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80113b8:	f7fb f8a0 	bl	800c4fc <pbuf_clen>
 80113bc:	4603      	mov	r3, r0
 80113be:	461a      	mov	r2, r3
 80113c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80113c4:	4413      	add	r3, r2
 80113c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80113ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80113ce:	2b09      	cmp	r3, #9
 80113d0:	d903      	bls.n	80113da <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80113d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80113d4:	f7fb f804 	bl	800c3e0 <pbuf_free>
      goto memerr;
 80113d8:	e120      	b.n	801161c <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80113de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80113e2:	441a      	add	r2, r3
 80113e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113e8:	9300      	str	r3, [sp, #0]
 80113ea:	4613      	mov	r3, r2
 80113ec:	2200      	movs	r2, #0
 80113ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80113f0:	68f8      	ldr	r0, [r7, #12]
 80113f2:	f7ff fc4f 	bl	8010c94 <tcp_create_segment>
 80113f6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80113f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	f000 810d 	beq.w	801161a <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011402:	2b00      	cmp	r3, #0
 8011404:	d102      	bne.n	801140c <tcp_write+0x454>
      queue = seg;
 8011406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011408:	647b      	str	r3, [r7, #68]	; 0x44
 801140a:	e00c      	b.n	8011426 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801140c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801140e:	2b00      	cmp	r3, #0
 8011410:	d106      	bne.n	8011420 <tcp_write+0x468>
 8011412:	4b53      	ldr	r3, [pc, #332]	; (8011560 <tcp_write+0x5a8>)
 8011414:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011418:	4955      	ldr	r1, [pc, #340]	; (8011570 <tcp_write+0x5b8>)
 801141a:	4853      	ldr	r0, [pc, #332]	; (8011568 <tcp_write+0x5b0>)
 801141c:	f006 fd44 	bl	8017ea8 <iprintf>
      prev_seg->next = seg;
 8011420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011422:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011424:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011428:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801142a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801142e:	8b3b      	ldrh	r3, [r7, #24]
 8011430:	4413      	add	r3, r2
 8011432:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011436:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801143a:	88fb      	ldrh	r3, [r7, #6]
 801143c:	429a      	cmp	r2, r3
 801143e:	f4ff af3d 	bcc.w	80112bc <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011442:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011444:	2b00      	cmp	r3, #0
 8011446:	d02c      	beq.n	80114a2 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801144a:	685b      	ldr	r3, [r3, #4]
 801144c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801144e:	e01e      	b.n	801148e <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8011450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011452:	891a      	ldrh	r2, [r3, #8]
 8011454:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011456:	4413      	add	r3, r2
 8011458:	b29a      	uxth	r2, r3
 801145a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801145c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801145e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d110      	bne.n	8011488 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011468:	685b      	ldr	r3, [r3, #4]
 801146a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801146c:	8952      	ldrh	r2, [r2, #10]
 801146e:	4413      	add	r3, r2
 8011470:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011472:	68b9      	ldr	r1, [r7, #8]
 8011474:	4618      	mov	r0, r3
 8011476:	f006 fd04 	bl	8017e82 <memcpy>
        p->len += oversize_used;
 801147a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801147c:	895a      	ldrh	r2, [r3, #10]
 801147e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011480:	4413      	add	r3, r2
 8011482:	b29a      	uxth	r2, r3
 8011484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011486:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801148e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011490:	2b00      	cmp	r3, #0
 8011492:	d1dd      	bne.n	8011450 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 8011494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011496:	891a      	ldrh	r2, [r3, #8]
 8011498:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801149a:	4413      	add	r3, r2
 801149c:	b29a      	uxth	r2, r3
 801149e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114a0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80114a2:	8a7a      	ldrh	r2, [r7, #18]
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80114aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d018      	beq.n	80114e2 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80114b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d106      	bne.n	80114c4 <tcp_write+0x50c>
 80114b6:	4b2a      	ldr	r3, [pc, #168]	; (8011560 <tcp_write+0x5a8>)
 80114b8:	f240 22e1 	movw	r2, #737	; 0x2e1
 80114bc:	492d      	ldr	r1, [pc, #180]	; (8011574 <tcp_write+0x5bc>)
 80114be:	482a      	ldr	r0, [pc, #168]	; (8011568 <tcp_write+0x5b0>)
 80114c0:	f006 fcf2 	bl	8017ea8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80114c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114c6:	685b      	ldr	r3, [r3, #4]
 80114c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80114ca:	4618      	mov	r0, r3
 80114cc:	f7fb f856 	bl	800c57c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80114d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114d2:	891a      	ldrh	r2, [r3, #8]
 80114d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114d6:	891b      	ldrh	r3, [r3, #8]
 80114d8:	4413      	add	r3, r2
 80114da:	b29a      	uxth	r2, r3
 80114dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114de:	811a      	strh	r2, [r3, #8]
 80114e0:	e037      	b.n	8011552 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 80114e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d034      	beq.n	8011552 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80114e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d003      	beq.n	80114f6 <tcp_write+0x53e>
 80114ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114f0:	685b      	ldr	r3, [r3, #4]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d106      	bne.n	8011504 <tcp_write+0x54c>
 80114f6:	4b1a      	ldr	r3, [pc, #104]	; (8011560 <tcp_write+0x5a8>)
 80114f8:	f240 22e7 	movw	r2, #743	; 0x2e7
 80114fc:	491e      	ldr	r1, [pc, #120]	; (8011578 <tcp_write+0x5c0>)
 80114fe:	481a      	ldr	r0, [pc, #104]	; (8011568 <tcp_write+0x5b0>)
 8011500:	f006 fcd2 	bl	8017ea8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011506:	685b      	ldr	r3, [r3, #4]
 8011508:	62bb      	str	r3, [r7, #40]	; 0x28
 801150a:	e009      	b.n	8011520 <tcp_write+0x568>
      p->tot_len += extendlen;
 801150c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801150e:	891a      	ldrh	r2, [r3, #8]
 8011510:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011512:	4413      	add	r3, r2
 8011514:	b29a      	uxth	r2, r3
 8011516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011518:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801151a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d1f1      	bne.n	801150c <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8011528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801152a:	891a      	ldrh	r2, [r3, #8]
 801152c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801152e:	4413      	add	r3, r2
 8011530:	b29a      	uxth	r2, r3
 8011532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011534:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011538:	895a      	ldrh	r2, [r3, #10]
 801153a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801153c:	4413      	add	r3, r2
 801153e:	b29a      	uxth	r2, r3
 8011540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011542:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011546:	891a      	ldrh	r2, [r3, #8]
 8011548:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801154a:	4413      	add	r3, r2
 801154c:	b29a      	uxth	r2, r3
 801154e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011550:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011554:	2b00      	cmp	r3, #0
 8011556:	d111      	bne.n	801157c <tcp_write+0x5c4>
    pcb->unsent = queue;
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801155c:	66da      	str	r2, [r3, #108]	; 0x6c
 801155e:	e010      	b.n	8011582 <tcp_write+0x5ca>
 8011560:	0801b32c 	.word	0x0801b32c
 8011564:	0801b5cc 	.word	0x0801b5cc
 8011568:	0801b380 	.word	0x0801b380
 801156c:	0801b60c 	.word	0x0801b60c
 8011570:	0801b61c 	.word	0x0801b61c
 8011574:	0801b630 	.word	0x0801b630
 8011578:	0801b668 	.word	0x0801b668
  } else {
    last_unsent->next = queue;
 801157c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801157e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011580:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011586:	88fb      	ldrh	r3, [r7, #6]
 8011588:	441a      	add	r2, r3
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011594:	88fb      	ldrh	r3, [r7, #6]
 8011596:	1ad3      	subs	r3, r2, r3
 8011598:	b29a      	uxth	r2, r3
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80115a6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d00e      	beq.n	80115d2 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d10a      	bne.n	80115d2 <tcp_write+0x61a>
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d106      	bne.n	80115d2 <tcp_write+0x61a>
 80115c4:	4b2c      	ldr	r3, [pc, #176]	; (8011678 <tcp_write+0x6c0>)
 80115c6:	f240 3213 	movw	r2, #787	; 0x313
 80115ca:	492c      	ldr	r1, [pc, #176]	; (801167c <tcp_write+0x6c4>)
 80115cc:	482c      	ldr	r0, [pc, #176]	; (8011680 <tcp_write+0x6c8>)
 80115ce:	f006 fc6b 	bl	8017ea8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80115d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d016      	beq.n	8011606 <tcp_write+0x64e>
 80115d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115da:	68db      	ldr	r3, [r3, #12]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d012      	beq.n	8011606 <tcp_write+0x64e>
 80115e0:	797b      	ldrb	r3, [r7, #5]
 80115e2:	f003 0302 	and.w	r3, r3, #2
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d10d      	bne.n	8011606 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80115ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115ec:	68db      	ldr	r3, [r3, #12]
 80115ee:	899b      	ldrh	r3, [r3, #12]
 80115f0:	b29c      	uxth	r4, r3
 80115f2:	2008      	movs	r0, #8
 80115f4:	f7f9 fb0a 	bl	800ac0c <lwip_htons>
 80115f8:	4603      	mov	r3, r0
 80115fa:	461a      	mov	r2, r3
 80115fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115fe:	68db      	ldr	r3, [r3, #12]
 8011600:	4322      	orrs	r2, r4
 8011602:	b292      	uxth	r2, r2
 8011604:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011606:	2300      	movs	r3, #0
 8011608:	e031      	b.n	801166e <tcp_write+0x6b6>
          goto memerr;
 801160a:	bf00      	nop
 801160c:	e006      	b.n	801161c <tcp_write+0x664>
            goto memerr;
 801160e:	bf00      	nop
 8011610:	e004      	b.n	801161c <tcp_write+0x664>
        goto memerr;
 8011612:	bf00      	nop
 8011614:	e002      	b.n	801161c <tcp_write+0x664>
        goto memerr;
 8011616:	bf00      	nop
 8011618:	e000      	b.n	801161c <tcp_write+0x664>
      goto memerr;
 801161a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	8b5b      	ldrh	r3, [r3, #26]
 8011620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011624:	b29a      	uxth	r2, r3
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801162a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801162c:	2b00      	cmp	r3, #0
 801162e:	d002      	beq.n	8011636 <tcp_write+0x67e>
    pbuf_free(concat_p);
 8011630:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011632:	f7fa fed5 	bl	800c3e0 <pbuf_free>
  }
  if (queue != NULL) {
 8011636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011638:	2b00      	cmp	r3, #0
 801163a:	d002      	beq.n	8011642 <tcp_write+0x68a>
    tcp_segs_free(queue);
 801163c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801163e:	f7fc fb53 	bl	800dce8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011648:	2b00      	cmp	r3, #0
 801164a:	d00e      	beq.n	801166a <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011650:	2b00      	cmp	r3, #0
 8011652:	d10a      	bne.n	801166a <tcp_write+0x6b2>
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011658:	2b00      	cmp	r3, #0
 801165a:	d106      	bne.n	801166a <tcp_write+0x6b2>
 801165c:	4b06      	ldr	r3, [pc, #24]	; (8011678 <tcp_write+0x6c0>)
 801165e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8011662:	4906      	ldr	r1, [pc, #24]	; (801167c <tcp_write+0x6c4>)
 8011664:	4806      	ldr	r0, [pc, #24]	; (8011680 <tcp_write+0x6c8>)
 8011666:	f006 fc1f 	bl	8017ea8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801166a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801166e:	4618      	mov	r0, r3
 8011670:	375c      	adds	r7, #92	; 0x5c
 8011672:	46bd      	mov	sp, r7
 8011674:	bd90      	pop	{r4, r7, pc}
 8011676:	bf00      	nop
 8011678:	0801b32c 	.word	0x0801b32c
 801167c:	0801b6a0 	.word	0x0801b6a0
 8011680:	0801b380 	.word	0x0801b380

08011684 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011684:	b590      	push	{r4, r7, lr}
 8011686:	b08b      	sub	sp, #44	; 0x2c
 8011688:	af02      	add	r7, sp, #8
 801168a:	6078      	str	r0, [r7, #4]
 801168c:	460b      	mov	r3, r1
 801168e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011690:	2300      	movs	r3, #0
 8011692:	61fb      	str	r3, [r7, #28]
 8011694:	2300      	movs	r3, #0
 8011696:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011698:	2300      	movs	r3, #0
 801169a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d106      	bne.n	80116b0 <tcp_split_unsent_seg+0x2c>
 80116a2:	4b95      	ldr	r3, [pc, #596]	; (80118f8 <tcp_split_unsent_seg+0x274>)
 80116a4:	f240 324b 	movw	r2, #843	; 0x34b
 80116a8:	4994      	ldr	r1, [pc, #592]	; (80118fc <tcp_split_unsent_seg+0x278>)
 80116aa:	4895      	ldr	r0, [pc, #596]	; (8011900 <tcp_split_unsent_seg+0x27c>)
 80116ac:	f006 fbfc 	bl	8017ea8 <iprintf>

  useg = pcb->unsent;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116b4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d102      	bne.n	80116c2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80116bc:	f04f 33ff 	mov.w	r3, #4294967295
 80116c0:	e116      	b.n	80118f0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80116c2:	887b      	ldrh	r3, [r7, #2]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d109      	bne.n	80116dc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80116c8:	4b8b      	ldr	r3, [pc, #556]	; (80118f8 <tcp_split_unsent_seg+0x274>)
 80116ca:	f240 3253 	movw	r2, #851	; 0x353
 80116ce:	498d      	ldr	r1, [pc, #564]	; (8011904 <tcp_split_unsent_seg+0x280>)
 80116d0:	488b      	ldr	r0, [pc, #556]	; (8011900 <tcp_split_unsent_seg+0x27c>)
 80116d2:	f006 fbe9 	bl	8017ea8 <iprintf>
    return ERR_VAL;
 80116d6:	f06f 0305 	mvn.w	r3, #5
 80116da:	e109      	b.n	80118f0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80116dc:	697b      	ldr	r3, [r7, #20]
 80116de:	891b      	ldrh	r3, [r3, #8]
 80116e0:	887a      	ldrh	r2, [r7, #2]
 80116e2:	429a      	cmp	r2, r3
 80116e4:	d301      	bcc.n	80116ea <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80116e6:	2300      	movs	r3, #0
 80116e8:	e102      	b.n	80118f0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116ee:	887a      	ldrh	r2, [r7, #2]
 80116f0:	429a      	cmp	r2, r3
 80116f2:	d906      	bls.n	8011702 <tcp_split_unsent_seg+0x7e>
 80116f4:	4b80      	ldr	r3, [pc, #512]	; (80118f8 <tcp_split_unsent_seg+0x274>)
 80116f6:	f240 325b 	movw	r2, #859	; 0x35b
 80116fa:	4983      	ldr	r1, [pc, #524]	; (8011908 <tcp_split_unsent_seg+0x284>)
 80116fc:	4880      	ldr	r0, [pc, #512]	; (8011900 <tcp_split_unsent_seg+0x27c>)
 80116fe:	f006 fbd3 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011702:	697b      	ldr	r3, [r7, #20]
 8011704:	891b      	ldrh	r3, [r3, #8]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d106      	bne.n	8011718 <tcp_split_unsent_seg+0x94>
 801170a:	4b7b      	ldr	r3, [pc, #492]	; (80118f8 <tcp_split_unsent_seg+0x274>)
 801170c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011710:	497e      	ldr	r1, [pc, #504]	; (801190c <tcp_split_unsent_seg+0x288>)
 8011712:	487b      	ldr	r0, [pc, #492]	; (8011900 <tcp_split_unsent_seg+0x27c>)
 8011714:	f006 fbc8 	bl	8017ea8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011718:	697b      	ldr	r3, [r7, #20]
 801171a:	7a9b      	ldrb	r3, [r3, #10]
 801171c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801171e:	7bfb      	ldrb	r3, [r7, #15]
 8011720:	009b      	lsls	r3, r3, #2
 8011722:	b2db      	uxtb	r3, r3
 8011724:	f003 0304 	and.w	r3, r3, #4
 8011728:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801172a:	697b      	ldr	r3, [r7, #20]
 801172c:	891a      	ldrh	r2, [r3, #8]
 801172e:	887b      	ldrh	r3, [r7, #2]
 8011730:	1ad3      	subs	r3, r2, r3
 8011732:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011734:	7bbb      	ldrb	r3, [r7, #14]
 8011736:	b29a      	uxth	r2, r3
 8011738:	89bb      	ldrh	r3, [r7, #12]
 801173a:	4413      	add	r3, r2
 801173c:	b29b      	uxth	r3, r3
 801173e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011742:	4619      	mov	r1, r3
 8011744:	2036      	movs	r0, #54	; 0x36
 8011746:	f7fa fb6b 	bl	800be20 <pbuf_alloc>
 801174a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801174c:	693b      	ldr	r3, [r7, #16]
 801174e:	2b00      	cmp	r3, #0
 8011750:	f000 80b7 	beq.w	80118c2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011754:	697b      	ldr	r3, [r7, #20]
 8011756:	685b      	ldr	r3, [r3, #4]
 8011758:	891a      	ldrh	r2, [r3, #8]
 801175a:	697b      	ldr	r3, [r7, #20]
 801175c:	891b      	ldrh	r3, [r3, #8]
 801175e:	1ad3      	subs	r3, r2, r3
 8011760:	b29a      	uxth	r2, r3
 8011762:	887b      	ldrh	r3, [r7, #2]
 8011764:	4413      	add	r3, r2
 8011766:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	6858      	ldr	r0, [r3, #4]
 801176c:	693b      	ldr	r3, [r7, #16]
 801176e:	685a      	ldr	r2, [r3, #4]
 8011770:	7bbb      	ldrb	r3, [r7, #14]
 8011772:	18d1      	adds	r1, r2, r3
 8011774:	897b      	ldrh	r3, [r7, #10]
 8011776:	89ba      	ldrh	r2, [r7, #12]
 8011778:	f7fb f838 	bl	800c7ec <pbuf_copy_partial>
 801177c:	4603      	mov	r3, r0
 801177e:	461a      	mov	r2, r3
 8011780:	89bb      	ldrh	r3, [r7, #12]
 8011782:	4293      	cmp	r3, r2
 8011784:	f040 809f 	bne.w	80118c6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	68db      	ldr	r3, [r3, #12]
 801178c:	899b      	ldrh	r3, [r3, #12]
 801178e:	b29b      	uxth	r3, r3
 8011790:	4618      	mov	r0, r3
 8011792:	f7f9 fa3b 	bl	800ac0c <lwip_htons>
 8011796:	4603      	mov	r3, r0
 8011798:	b2db      	uxtb	r3, r3
 801179a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801179e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80117a0:	2300      	movs	r3, #0
 80117a2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80117a4:	7efb      	ldrb	r3, [r7, #27]
 80117a6:	f003 0308 	and.w	r3, r3, #8
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d007      	beq.n	80117be <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80117ae:	7efb      	ldrb	r3, [r7, #27]
 80117b0:	f023 0308 	bic.w	r3, r3, #8
 80117b4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80117b6:	7ebb      	ldrb	r3, [r7, #26]
 80117b8:	f043 0308 	orr.w	r3, r3, #8
 80117bc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80117be:	7efb      	ldrb	r3, [r7, #27]
 80117c0:	f003 0301 	and.w	r3, r3, #1
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d007      	beq.n	80117d8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80117c8:	7efb      	ldrb	r3, [r7, #27]
 80117ca:	f023 0301 	bic.w	r3, r3, #1
 80117ce:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80117d0:	7ebb      	ldrb	r3, [r7, #26]
 80117d2:	f043 0301 	orr.w	r3, r3, #1
 80117d6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80117d8:	697b      	ldr	r3, [r7, #20]
 80117da:	68db      	ldr	r3, [r3, #12]
 80117dc:	685b      	ldr	r3, [r3, #4]
 80117de:	4618      	mov	r0, r3
 80117e0:	f7f9 fa29 	bl	800ac36 <lwip_htonl>
 80117e4:	4602      	mov	r2, r0
 80117e6:	887b      	ldrh	r3, [r7, #2]
 80117e8:	18d1      	adds	r1, r2, r3
 80117ea:	7eba      	ldrb	r2, [r7, #26]
 80117ec:	7bfb      	ldrb	r3, [r7, #15]
 80117ee:	9300      	str	r3, [sp, #0]
 80117f0:	460b      	mov	r3, r1
 80117f2:	6939      	ldr	r1, [r7, #16]
 80117f4:	6878      	ldr	r0, [r7, #4]
 80117f6:	f7ff fa4d 	bl	8010c94 <tcp_create_segment>
 80117fa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80117fc:	69fb      	ldr	r3, [r7, #28]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d063      	beq.n	80118ca <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	685b      	ldr	r3, [r3, #4]
 8011806:	4618      	mov	r0, r3
 8011808:	f7fa fe78 	bl	800c4fc <pbuf_clen>
 801180c:	4603      	mov	r3, r0
 801180e:	461a      	mov	r2, r3
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011816:	1a9b      	subs	r3, r3, r2
 8011818:	b29a      	uxth	r2, r3
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011820:	697b      	ldr	r3, [r7, #20]
 8011822:	6858      	ldr	r0, [r3, #4]
 8011824:	697b      	ldr	r3, [r7, #20]
 8011826:	685b      	ldr	r3, [r3, #4]
 8011828:	891a      	ldrh	r2, [r3, #8]
 801182a:	89bb      	ldrh	r3, [r7, #12]
 801182c:	1ad3      	subs	r3, r2, r3
 801182e:	b29b      	uxth	r3, r3
 8011830:	4619      	mov	r1, r3
 8011832:	f7fa fc4f 	bl	800c0d4 <pbuf_realloc>
  useg->len -= remainder;
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	891a      	ldrh	r2, [r3, #8]
 801183a:	89bb      	ldrh	r3, [r7, #12]
 801183c:	1ad3      	subs	r3, r2, r3
 801183e:	b29a      	uxth	r2, r3
 8011840:	697b      	ldr	r3, [r7, #20]
 8011842:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011844:	697b      	ldr	r3, [r7, #20]
 8011846:	68db      	ldr	r3, [r3, #12]
 8011848:	899b      	ldrh	r3, [r3, #12]
 801184a:	b29c      	uxth	r4, r3
 801184c:	7efb      	ldrb	r3, [r7, #27]
 801184e:	b29b      	uxth	r3, r3
 8011850:	4618      	mov	r0, r3
 8011852:	f7f9 f9db 	bl	800ac0c <lwip_htons>
 8011856:	4603      	mov	r3, r0
 8011858:	461a      	mov	r2, r3
 801185a:	697b      	ldr	r3, [r7, #20]
 801185c:	68db      	ldr	r3, [r3, #12]
 801185e:	4322      	orrs	r2, r4
 8011860:	b292      	uxth	r2, r2
 8011862:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011864:	697b      	ldr	r3, [r7, #20]
 8011866:	685b      	ldr	r3, [r3, #4]
 8011868:	4618      	mov	r0, r3
 801186a:	f7fa fe47 	bl	800c4fc <pbuf_clen>
 801186e:	4603      	mov	r3, r0
 8011870:	461a      	mov	r2, r3
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011878:	4413      	add	r3, r2
 801187a:	b29a      	uxth	r2, r3
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011882:	69fb      	ldr	r3, [r7, #28]
 8011884:	685b      	ldr	r3, [r3, #4]
 8011886:	4618      	mov	r0, r3
 8011888:	f7fa fe38 	bl	800c4fc <pbuf_clen>
 801188c:	4603      	mov	r3, r0
 801188e:	461a      	mov	r2, r3
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011896:	4413      	add	r3, r2
 8011898:	b29a      	uxth	r2, r3
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80118a0:	697b      	ldr	r3, [r7, #20]
 80118a2:	681a      	ldr	r2, [r3, #0]
 80118a4:	69fb      	ldr	r3, [r7, #28]
 80118a6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80118a8:	697b      	ldr	r3, [r7, #20]
 80118aa:	69fa      	ldr	r2, [r7, #28]
 80118ac:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80118ae:	69fb      	ldr	r3, [r7, #28]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d103      	bne.n	80118be <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2200      	movs	r2, #0
 80118ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80118be:	2300      	movs	r3, #0
 80118c0:	e016      	b.n	80118f0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80118c2:	bf00      	nop
 80118c4:	e002      	b.n	80118cc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80118c6:	bf00      	nop
 80118c8:	e000      	b.n	80118cc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80118ca:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80118cc:	69fb      	ldr	r3, [r7, #28]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d006      	beq.n	80118e0 <tcp_split_unsent_seg+0x25c>
 80118d2:	4b09      	ldr	r3, [pc, #36]	; (80118f8 <tcp_split_unsent_seg+0x274>)
 80118d4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80118d8:	490d      	ldr	r1, [pc, #52]	; (8011910 <tcp_split_unsent_seg+0x28c>)
 80118da:	4809      	ldr	r0, [pc, #36]	; (8011900 <tcp_split_unsent_seg+0x27c>)
 80118dc:	f006 fae4 	bl	8017ea8 <iprintf>
  if (p != NULL) {
 80118e0:	693b      	ldr	r3, [r7, #16]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d002      	beq.n	80118ec <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80118e6:	6938      	ldr	r0, [r7, #16]
 80118e8:	f7fa fd7a 	bl	800c3e0 <pbuf_free>
  }

  return ERR_MEM;
 80118ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80118f0:	4618      	mov	r0, r3
 80118f2:	3724      	adds	r7, #36	; 0x24
 80118f4:	46bd      	mov	sp, r7
 80118f6:	bd90      	pop	{r4, r7, pc}
 80118f8:	0801b32c 	.word	0x0801b32c
 80118fc:	0801b6c0 	.word	0x0801b6c0
 8011900:	0801b380 	.word	0x0801b380
 8011904:	0801b6e4 	.word	0x0801b6e4
 8011908:	0801b708 	.word	0x0801b708
 801190c:	0801b718 	.word	0x0801b718
 8011910:	0801b728 	.word	0x0801b728

08011914 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011914:	b590      	push	{r4, r7, lr}
 8011916:	b085      	sub	sp, #20
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d106      	bne.n	8011930 <tcp_send_fin+0x1c>
 8011922:	4b21      	ldr	r3, [pc, #132]	; (80119a8 <tcp_send_fin+0x94>)
 8011924:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011928:	4920      	ldr	r1, [pc, #128]	; (80119ac <tcp_send_fin+0x98>)
 801192a:	4821      	ldr	r0, [pc, #132]	; (80119b0 <tcp_send_fin+0x9c>)
 801192c:	f006 fabc 	bl	8017ea8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011934:	2b00      	cmp	r3, #0
 8011936:	d02e      	beq.n	8011996 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801193c:	60fb      	str	r3, [r7, #12]
 801193e:	e002      	b.n	8011946 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d1f8      	bne.n	8011940 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	68db      	ldr	r3, [r3, #12]
 8011952:	899b      	ldrh	r3, [r3, #12]
 8011954:	b29b      	uxth	r3, r3
 8011956:	4618      	mov	r0, r3
 8011958:	f7f9 f958 	bl	800ac0c <lwip_htons>
 801195c:	4603      	mov	r3, r0
 801195e:	b2db      	uxtb	r3, r3
 8011960:	f003 0307 	and.w	r3, r3, #7
 8011964:	2b00      	cmp	r3, #0
 8011966:	d116      	bne.n	8011996 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	68db      	ldr	r3, [r3, #12]
 801196c:	899b      	ldrh	r3, [r3, #12]
 801196e:	b29c      	uxth	r4, r3
 8011970:	2001      	movs	r0, #1
 8011972:	f7f9 f94b 	bl	800ac0c <lwip_htons>
 8011976:	4603      	mov	r3, r0
 8011978:	461a      	mov	r2, r3
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	68db      	ldr	r3, [r3, #12]
 801197e:	4322      	orrs	r2, r4
 8011980:	b292      	uxth	r2, r2
 8011982:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	8b5b      	ldrh	r3, [r3, #26]
 8011988:	f043 0320 	orr.w	r3, r3, #32
 801198c:	b29a      	uxth	r2, r3
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011992:	2300      	movs	r3, #0
 8011994:	e004      	b.n	80119a0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011996:	2101      	movs	r1, #1
 8011998:	6878      	ldr	r0, [r7, #4]
 801199a:	f000 f80b 	bl	80119b4 <tcp_enqueue_flags>
 801199e:	4603      	mov	r3, r0
}
 80119a0:	4618      	mov	r0, r3
 80119a2:	3714      	adds	r7, #20
 80119a4:	46bd      	mov	sp, r7
 80119a6:	bd90      	pop	{r4, r7, pc}
 80119a8:	0801b32c 	.word	0x0801b32c
 80119ac:	0801b734 	.word	0x0801b734
 80119b0:	0801b380 	.word	0x0801b380

080119b4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b08a      	sub	sp, #40	; 0x28
 80119b8:	af02      	add	r7, sp, #8
 80119ba:	6078      	str	r0, [r7, #4]
 80119bc:	460b      	mov	r3, r1
 80119be:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80119c0:	2300      	movs	r3, #0
 80119c2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80119c4:	2300      	movs	r3, #0
 80119c6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80119c8:	78fb      	ldrb	r3, [r7, #3]
 80119ca:	f003 0303 	and.w	r3, r3, #3
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d106      	bne.n	80119e0 <tcp_enqueue_flags+0x2c>
 80119d2:	4b67      	ldr	r3, [pc, #412]	; (8011b70 <tcp_enqueue_flags+0x1bc>)
 80119d4:	f240 4212 	movw	r2, #1042	; 0x412
 80119d8:	4966      	ldr	r1, [pc, #408]	; (8011b74 <tcp_enqueue_flags+0x1c0>)
 80119da:	4867      	ldr	r0, [pc, #412]	; (8011b78 <tcp_enqueue_flags+0x1c4>)
 80119dc:	f006 fa64 	bl	8017ea8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d106      	bne.n	80119f4 <tcp_enqueue_flags+0x40>
 80119e6:	4b62      	ldr	r3, [pc, #392]	; (8011b70 <tcp_enqueue_flags+0x1bc>)
 80119e8:	f240 4213 	movw	r2, #1043	; 0x413
 80119ec:	4963      	ldr	r1, [pc, #396]	; (8011b7c <tcp_enqueue_flags+0x1c8>)
 80119ee:	4862      	ldr	r0, [pc, #392]	; (8011b78 <tcp_enqueue_flags+0x1c4>)
 80119f0:	f006 fa5a 	bl	8017ea8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80119f4:	78fb      	ldrb	r3, [r7, #3]
 80119f6:	f003 0302 	and.w	r3, r3, #2
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d001      	beq.n	8011a02 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80119fe:	2301      	movs	r3, #1
 8011a00:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011a02:	7ffb      	ldrb	r3, [r7, #31]
 8011a04:	009b      	lsls	r3, r3, #2
 8011a06:	b2db      	uxtb	r3, r3
 8011a08:	f003 0304 	and.w	r3, r3, #4
 8011a0c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011a0e:	7dfb      	ldrb	r3, [r7, #23]
 8011a10:	b29b      	uxth	r3, r3
 8011a12:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011a16:	4619      	mov	r1, r3
 8011a18:	2036      	movs	r0, #54	; 0x36
 8011a1a:	f7fa fa01 	bl	800be20 <pbuf_alloc>
 8011a1e:	6138      	str	r0, [r7, #16]
 8011a20:	693b      	ldr	r3, [r7, #16]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d109      	bne.n	8011a3a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	8b5b      	ldrh	r3, [r3, #26]
 8011a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a2e:	b29a      	uxth	r2, r3
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011a34:	f04f 33ff 	mov.w	r3, #4294967295
 8011a38:	e095      	b.n	8011b66 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011a3a:	693b      	ldr	r3, [r7, #16]
 8011a3c:	895a      	ldrh	r2, [r3, #10]
 8011a3e:	7dfb      	ldrb	r3, [r7, #23]
 8011a40:	b29b      	uxth	r3, r3
 8011a42:	429a      	cmp	r2, r3
 8011a44:	d206      	bcs.n	8011a54 <tcp_enqueue_flags+0xa0>
 8011a46:	4b4a      	ldr	r3, [pc, #296]	; (8011b70 <tcp_enqueue_flags+0x1bc>)
 8011a48:	f240 423a 	movw	r2, #1082	; 0x43a
 8011a4c:	494c      	ldr	r1, [pc, #304]	; (8011b80 <tcp_enqueue_flags+0x1cc>)
 8011a4e:	484a      	ldr	r0, [pc, #296]	; (8011b78 <tcp_enqueue_flags+0x1c4>)
 8011a50:	f006 fa2a 	bl	8017ea8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011a58:	78fa      	ldrb	r2, [r7, #3]
 8011a5a:	7ffb      	ldrb	r3, [r7, #31]
 8011a5c:	9300      	str	r3, [sp, #0]
 8011a5e:	460b      	mov	r3, r1
 8011a60:	6939      	ldr	r1, [r7, #16]
 8011a62:	6878      	ldr	r0, [r7, #4]
 8011a64:	f7ff f916 	bl	8010c94 <tcp_create_segment>
 8011a68:	60f8      	str	r0, [r7, #12]
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d109      	bne.n	8011a84 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	8b5b      	ldrh	r3, [r3, #26]
 8011a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a78:	b29a      	uxth	r2, r3
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8011a82:	e070      	b.n	8011b66 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	68db      	ldr	r3, [r3, #12]
 8011a88:	f003 0303 	and.w	r3, r3, #3
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d006      	beq.n	8011a9e <tcp_enqueue_flags+0xea>
 8011a90:	4b37      	ldr	r3, [pc, #220]	; (8011b70 <tcp_enqueue_flags+0x1bc>)
 8011a92:	f240 4242 	movw	r2, #1090	; 0x442
 8011a96:	493b      	ldr	r1, [pc, #236]	; (8011b84 <tcp_enqueue_flags+0x1d0>)
 8011a98:	4837      	ldr	r0, [pc, #220]	; (8011b78 <tcp_enqueue_flags+0x1c4>)
 8011a9a:	f006 fa05 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	891b      	ldrh	r3, [r3, #8]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d006      	beq.n	8011ab4 <tcp_enqueue_flags+0x100>
 8011aa6:	4b32      	ldr	r3, [pc, #200]	; (8011b70 <tcp_enqueue_flags+0x1bc>)
 8011aa8:	f240 4243 	movw	r2, #1091	; 0x443
 8011aac:	4936      	ldr	r1, [pc, #216]	; (8011b88 <tcp_enqueue_flags+0x1d4>)
 8011aae:	4832      	ldr	r0, [pc, #200]	; (8011b78 <tcp_enqueue_flags+0x1c4>)
 8011ab0:	f006 f9fa 	bl	8017ea8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d103      	bne.n	8011ac4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	68fa      	ldr	r2, [r7, #12]
 8011ac0:	66da      	str	r2, [r3, #108]	; 0x6c
 8011ac2:	e00d      	b.n	8011ae0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ac8:	61bb      	str	r3, [r7, #24]
 8011aca:	e002      	b.n	8011ad2 <tcp_enqueue_flags+0x11e>
 8011acc:	69bb      	ldr	r3, [r7, #24]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	61bb      	str	r3, [r7, #24]
 8011ad2:	69bb      	ldr	r3, [r7, #24]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d1f8      	bne.n	8011acc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011ada:	69bb      	ldr	r3, [r7, #24]
 8011adc:	68fa      	ldr	r2, [r7, #12]
 8011ade:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011ae8:	78fb      	ldrb	r3, [r7, #3]
 8011aea:	f003 0302 	and.w	r3, r3, #2
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d104      	bne.n	8011afc <tcp_enqueue_flags+0x148>
 8011af2:	78fb      	ldrb	r3, [r7, #3]
 8011af4:	f003 0301 	and.w	r3, r3, #1
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d004      	beq.n	8011b06 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011b00:	1c5a      	adds	r2, r3, #1
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011b06:	78fb      	ldrb	r3, [r7, #3]
 8011b08:	f003 0301 	and.w	r3, r3, #1
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d006      	beq.n	8011b1e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	8b5b      	ldrh	r3, [r3, #26]
 8011b14:	f043 0320 	orr.w	r3, r3, #32
 8011b18:	b29a      	uxth	r2, r3
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	685b      	ldr	r3, [r3, #4]
 8011b22:	4618      	mov	r0, r3
 8011b24:	f7fa fcea 	bl	800c4fc <pbuf_clen>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	461a      	mov	r2, r3
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011b32:	4413      	add	r3, r2
 8011b34:	b29a      	uxth	r2, r3
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d00e      	beq.n	8011b64 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d10a      	bne.n	8011b64 <tcp_enqueue_flags+0x1b0>
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d106      	bne.n	8011b64 <tcp_enqueue_flags+0x1b0>
 8011b56:	4b06      	ldr	r3, [pc, #24]	; (8011b70 <tcp_enqueue_flags+0x1bc>)
 8011b58:	f240 4266 	movw	r2, #1126	; 0x466
 8011b5c:	490b      	ldr	r1, [pc, #44]	; (8011b8c <tcp_enqueue_flags+0x1d8>)
 8011b5e:	4806      	ldr	r0, [pc, #24]	; (8011b78 <tcp_enqueue_flags+0x1c4>)
 8011b60:	f006 f9a2 	bl	8017ea8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011b64:	2300      	movs	r3, #0
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	3720      	adds	r7, #32
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bd80      	pop	{r7, pc}
 8011b6e:	bf00      	nop
 8011b70:	0801b32c 	.word	0x0801b32c
 8011b74:	0801b750 	.word	0x0801b750
 8011b78:	0801b380 	.word	0x0801b380
 8011b7c:	0801b7a8 	.word	0x0801b7a8
 8011b80:	0801b7c8 	.word	0x0801b7c8
 8011b84:	0801b804 	.word	0x0801b804
 8011b88:	0801b81c 	.word	0x0801b81c
 8011b8c:	0801b848 	.word	0x0801b848

08011b90 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011b90:	b5b0      	push	{r4, r5, r7, lr}
 8011b92:	b08a      	sub	sp, #40	; 0x28
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d106      	bne.n	8011bac <tcp_output+0x1c>
 8011b9e:	4ba0      	ldr	r3, [pc, #640]	; (8011e20 <tcp_output+0x290>)
 8011ba0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011ba4:	499f      	ldr	r1, [pc, #636]	; (8011e24 <tcp_output+0x294>)
 8011ba6:	48a0      	ldr	r0, [pc, #640]	; (8011e28 <tcp_output+0x298>)
 8011ba8:	f006 f97e 	bl	8017ea8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	7d1b      	ldrb	r3, [r3, #20]
 8011bb0:	2b01      	cmp	r3, #1
 8011bb2:	d106      	bne.n	8011bc2 <tcp_output+0x32>
 8011bb4:	4b9a      	ldr	r3, [pc, #616]	; (8011e20 <tcp_output+0x290>)
 8011bb6:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8011bba:	499c      	ldr	r1, [pc, #624]	; (8011e2c <tcp_output+0x29c>)
 8011bbc:	489a      	ldr	r0, [pc, #616]	; (8011e28 <tcp_output+0x298>)
 8011bbe:	f006 f973 	bl	8017ea8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011bc2:	4b9b      	ldr	r3, [pc, #620]	; (8011e30 <tcp_output+0x2a0>)
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	687a      	ldr	r2, [r7, #4]
 8011bc8:	429a      	cmp	r2, r3
 8011bca:	d101      	bne.n	8011bd0 <tcp_output+0x40>
    return ERR_OK;
 8011bcc:	2300      	movs	r3, #0
 8011bce:	e1d2      	b.n	8011f76 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011bdc:	429a      	cmp	r2, r3
 8011bde:	d203      	bcs.n	8011be8 <tcp_output+0x58>
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011be6:	e002      	b.n	8011bee <tcp_output+0x5e>
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011bee:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bf4:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d10b      	bne.n	8011c14 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	8b5b      	ldrh	r3, [r3, #26]
 8011c00:	f003 0302 	and.w	r3, r3, #2
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	f000 81a9 	beq.w	8011f5c <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8011c0a:	6878      	ldr	r0, [r7, #4]
 8011c0c:	f000 fdd6 	bl	80127bc <tcp_send_empty_ack>
 8011c10:	4603      	mov	r3, r0
 8011c12:	e1b0      	b.n	8011f76 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011c14:	6879      	ldr	r1, [r7, #4]
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	3304      	adds	r3, #4
 8011c1a:	461a      	mov	r2, r3
 8011c1c:	6878      	ldr	r0, [r7, #4]
 8011c1e:	f7ff f81d 	bl	8010c5c <tcp_route>
 8011c22:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011c24:	697b      	ldr	r3, [r7, #20]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d102      	bne.n	8011c30 <tcp_output+0xa0>
    return ERR_RTE;
 8011c2a:	f06f 0303 	mvn.w	r3, #3
 8011c2e:	e1a2      	b.n	8011f76 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d003      	beq.n	8011c3e <tcp_output+0xae>
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d111      	bne.n	8011c62 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011c3e:	697b      	ldr	r3, [r7, #20]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d002      	beq.n	8011c4a <tcp_output+0xba>
 8011c44:	697b      	ldr	r3, [r7, #20]
 8011c46:	3304      	adds	r3, #4
 8011c48:	e000      	b.n	8011c4c <tcp_output+0xbc>
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011c4e:	693b      	ldr	r3, [r7, #16]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d102      	bne.n	8011c5a <tcp_output+0xca>
      return ERR_RTE;
 8011c54:	f06f 0303 	mvn.w	r3, #3
 8011c58:	e18d      	b.n	8011f76 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011c5a:	693b      	ldr	r3, [r7, #16]
 8011c5c:	681a      	ldr	r2, [r3, #0]
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c64:	68db      	ldr	r3, [r3, #12]
 8011c66:	685b      	ldr	r3, [r3, #4]
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f7f8 ffe4 	bl	800ac36 <lwip_htonl>
 8011c6e:	4602      	mov	r2, r0
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c74:	1ad3      	subs	r3, r2, r3
 8011c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c78:	8912      	ldrh	r2, [r2, #8]
 8011c7a:	4413      	add	r3, r2
 8011c7c:	69ba      	ldr	r2, [r7, #24]
 8011c7e:	429a      	cmp	r2, r3
 8011c80:	d227      	bcs.n	8011cd2 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011c88:	461a      	mov	r2, r3
 8011c8a:	69bb      	ldr	r3, [r7, #24]
 8011c8c:	4293      	cmp	r3, r2
 8011c8e:	d114      	bne.n	8011cba <tcp_output+0x12a>
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d110      	bne.n	8011cba <tcp_output+0x12a>
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d10b      	bne.n	8011cba <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	2201      	movs	r2, #1
 8011cae:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	8b5b      	ldrh	r3, [r3, #26]
 8011cbe:	f003 0302 	and.w	r3, r3, #2
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	f000 814c 	beq.w	8011f60 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8011cc8:	6878      	ldr	r0, [r7, #4]
 8011cca:	f000 fd77 	bl	80127bc <tcp_send_empty_ack>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	e151      	b.n	8011f76 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cde:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011ce0:	6a3b      	ldr	r3, [r7, #32]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	f000 811b 	beq.w	8011f1e <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8011ce8:	e002      	b.n	8011cf0 <tcp_output+0x160>
 8011cea:	6a3b      	ldr	r3, [r7, #32]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	623b      	str	r3, [r7, #32]
 8011cf0:	6a3b      	ldr	r3, [r7, #32]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d1f8      	bne.n	8011cea <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011cf8:	e111      	b.n	8011f1e <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cfc:	68db      	ldr	r3, [r3, #12]
 8011cfe:	899b      	ldrh	r3, [r3, #12]
 8011d00:	b29b      	uxth	r3, r3
 8011d02:	4618      	mov	r0, r3
 8011d04:	f7f8 ff82 	bl	800ac0c <lwip_htons>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	b2db      	uxtb	r3, r3
 8011d0c:	f003 0304 	and.w	r3, r3, #4
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d006      	beq.n	8011d22 <tcp_output+0x192>
 8011d14:	4b42      	ldr	r3, [pc, #264]	; (8011e20 <tcp_output+0x290>)
 8011d16:	f240 5237 	movw	r2, #1335	; 0x537
 8011d1a:	4946      	ldr	r1, [pc, #280]	; (8011e34 <tcp_output+0x2a4>)
 8011d1c:	4842      	ldr	r0, [pc, #264]	; (8011e28 <tcp_output+0x298>)
 8011d1e:	f006 f8c3 	bl	8017ea8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d01f      	beq.n	8011d6a <tcp_output+0x1da>
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	8b5b      	ldrh	r3, [r3, #26]
 8011d2e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d119      	bne.n	8011d6a <tcp_output+0x1da>
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d00b      	beq.n	8011d56 <tcp_output+0x1c6>
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d110      	bne.n	8011d6a <tcp_output+0x1da>
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d4c:	891a      	ldrh	r2, [r3, #8]
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011d52:	429a      	cmp	r2, r3
 8011d54:	d209      	bcs.n	8011d6a <tcp_output+0x1da>
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d004      	beq.n	8011d6a <tcp_output+0x1da>
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d66:	2b08      	cmp	r3, #8
 8011d68:	d901      	bls.n	8011d6e <tcp_output+0x1de>
 8011d6a:	2301      	movs	r3, #1
 8011d6c:	e000      	b.n	8011d70 <tcp_output+0x1e0>
 8011d6e:	2300      	movs	r3, #0
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d106      	bne.n	8011d82 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	8b5b      	ldrh	r3, [r3, #26]
 8011d78:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	f000 80e3 	beq.w	8011f48 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	7d1b      	ldrb	r3, [r3, #20]
 8011d86:	2b02      	cmp	r3, #2
 8011d88:	d00d      	beq.n	8011da6 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d8c:	68db      	ldr	r3, [r3, #12]
 8011d8e:	899b      	ldrh	r3, [r3, #12]
 8011d90:	b29c      	uxth	r4, r3
 8011d92:	2010      	movs	r0, #16
 8011d94:	f7f8 ff3a 	bl	800ac0c <lwip_htons>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	461a      	mov	r2, r3
 8011d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d9e:	68db      	ldr	r3, [r3, #12]
 8011da0:	4322      	orrs	r2, r4
 8011da2:	b292      	uxth	r2, r2
 8011da4:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011da6:	697a      	ldr	r2, [r7, #20]
 8011da8:	6879      	ldr	r1, [r7, #4]
 8011daa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011dac:	f000 f908 	bl	8011fc0 <tcp_output_segment>
 8011db0:	4603      	mov	r3, r0
 8011db2:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d009      	beq.n	8011dd0 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	8b5b      	ldrh	r3, [r3, #26]
 8011dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011dc4:	b29a      	uxth	r2, r3
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	835a      	strh	r2, [r3, #26]
      return err;
 8011dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011dce:	e0d2      	b.n	8011f76 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd2:	681a      	ldr	r2, [r3, #0]
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	7d1b      	ldrb	r3, [r3, #20]
 8011ddc:	2b02      	cmp	r3, #2
 8011dde:	d006      	beq.n	8011dee <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	8b5b      	ldrh	r3, [r3, #26]
 8011de4:	f023 0303 	bic.w	r3, r3, #3
 8011de8:	b29a      	uxth	r2, r3
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df0:	68db      	ldr	r3, [r3, #12]
 8011df2:	685b      	ldr	r3, [r3, #4]
 8011df4:	4618      	mov	r0, r3
 8011df6:	f7f8 ff1e 	bl	800ac36 <lwip_htonl>
 8011dfa:	4604      	mov	r4, r0
 8011dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dfe:	891b      	ldrh	r3, [r3, #8]
 8011e00:	461d      	mov	r5, r3
 8011e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e04:	68db      	ldr	r3, [r3, #12]
 8011e06:	899b      	ldrh	r3, [r3, #12]
 8011e08:	b29b      	uxth	r3, r3
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f7f8 fefe 	bl	800ac0c <lwip_htons>
 8011e10:	4603      	mov	r3, r0
 8011e12:	b2db      	uxtb	r3, r3
 8011e14:	f003 0303 	and.w	r3, r3, #3
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d00d      	beq.n	8011e38 <tcp_output+0x2a8>
 8011e1c:	2301      	movs	r3, #1
 8011e1e:	e00c      	b.n	8011e3a <tcp_output+0x2aa>
 8011e20:	0801b32c 	.word	0x0801b32c
 8011e24:	0801b870 	.word	0x0801b870
 8011e28:	0801b380 	.word	0x0801b380
 8011e2c:	0801b888 	.word	0x0801b888
 8011e30:	2000f528 	.word	0x2000f528
 8011e34:	0801b8b0 	.word	0x0801b8b0
 8011e38:	2300      	movs	r3, #0
 8011e3a:	442b      	add	r3, r5
 8011e3c:	4423      	add	r3, r4
 8011e3e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011e44:	68bb      	ldr	r3, [r7, #8]
 8011e46:	1ad3      	subs	r3, r2, r3
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	da02      	bge.n	8011e52 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	68ba      	ldr	r2, [r7, #8]
 8011e50:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e54:	891b      	ldrh	r3, [r3, #8]
 8011e56:	461c      	mov	r4, r3
 8011e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e5a:	68db      	ldr	r3, [r3, #12]
 8011e5c:	899b      	ldrh	r3, [r3, #12]
 8011e5e:	b29b      	uxth	r3, r3
 8011e60:	4618      	mov	r0, r3
 8011e62:	f7f8 fed3 	bl	800ac0c <lwip_htons>
 8011e66:	4603      	mov	r3, r0
 8011e68:	b2db      	uxtb	r3, r3
 8011e6a:	f003 0303 	and.w	r3, r3, #3
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d001      	beq.n	8011e76 <tcp_output+0x2e6>
 8011e72:	2301      	movs	r3, #1
 8011e74:	e000      	b.n	8011e78 <tcp_output+0x2e8>
 8011e76:	2300      	movs	r3, #0
 8011e78:	4423      	add	r3, r4
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d049      	beq.n	8011f12 <tcp_output+0x382>
      seg->next = NULL;
 8011e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e80:	2200      	movs	r2, #0
 8011e82:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d105      	bne.n	8011e98 <tcp_output+0x308>
        pcb->unacked = seg;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e90:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e94:	623b      	str	r3, [r7, #32]
 8011e96:	e03f      	b.n	8011f18 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e9a:	68db      	ldr	r3, [r3, #12]
 8011e9c:	685b      	ldr	r3, [r3, #4]
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f7f8 fec9 	bl	800ac36 <lwip_htonl>
 8011ea4:	4604      	mov	r4, r0
 8011ea6:	6a3b      	ldr	r3, [r7, #32]
 8011ea8:	68db      	ldr	r3, [r3, #12]
 8011eaa:	685b      	ldr	r3, [r3, #4]
 8011eac:	4618      	mov	r0, r3
 8011eae:	f7f8 fec2 	bl	800ac36 <lwip_htonl>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	1ae3      	subs	r3, r4, r3
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	da24      	bge.n	8011f04 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	3370      	adds	r3, #112	; 0x70
 8011ebe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011ec0:	e002      	b.n	8011ec8 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011ec2:	69fb      	ldr	r3, [r7, #28]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011ec8:	69fb      	ldr	r3, [r7, #28]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d011      	beq.n	8011ef4 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011ed0:	69fb      	ldr	r3, [r7, #28]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	68db      	ldr	r3, [r3, #12]
 8011ed6:	685b      	ldr	r3, [r3, #4]
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f7f8 feac 	bl	800ac36 <lwip_htonl>
 8011ede:	4604      	mov	r4, r0
 8011ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee2:	68db      	ldr	r3, [r3, #12]
 8011ee4:	685b      	ldr	r3, [r3, #4]
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7f8 fea5 	bl	800ac36 <lwip_htonl>
 8011eec:	4603      	mov	r3, r0
 8011eee:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	dbe6      	blt.n	8011ec2 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8011ef4:	69fb      	ldr	r3, [r7, #28]
 8011ef6:	681a      	ldr	r2, [r3, #0]
 8011ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011efa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011efc:	69fb      	ldr	r3, [r7, #28]
 8011efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f00:	601a      	str	r2, [r3, #0]
 8011f02:	e009      	b.n	8011f18 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011f04:	6a3b      	ldr	r3, [r7, #32]
 8011f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f08:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011f0a:	6a3b      	ldr	r3, [r7, #32]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	623b      	str	r3, [r7, #32]
 8011f10:	e002      	b.n	8011f18 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011f12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f14:	f7fb fefc 	bl	800dd10 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f1c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d012      	beq.n	8011f4a <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f26:	68db      	ldr	r3, [r3, #12]
 8011f28:	685b      	ldr	r3, [r3, #4]
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f7f8 fe83 	bl	800ac36 <lwip_htonl>
 8011f30:	4602      	mov	r2, r0
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f36:	1ad3      	subs	r3, r2, r3
 8011f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f3a:	8912      	ldrh	r2, [r2, #8]
 8011f3c:	4413      	add	r3, r2
  while (seg != NULL &&
 8011f3e:	69ba      	ldr	r2, [r7, #24]
 8011f40:	429a      	cmp	r2, r3
 8011f42:	f4bf aeda 	bcs.w	8011cfa <tcp_output+0x16a>
 8011f46:	e000      	b.n	8011f4a <tcp_output+0x3ba>
      break;
 8011f48:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d108      	bne.n	8011f64 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2200      	movs	r2, #0
 8011f56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011f5a:	e004      	b.n	8011f66 <tcp_output+0x3d6>
    goto output_done;
 8011f5c:	bf00      	nop
 8011f5e:	e002      	b.n	8011f66 <tcp_output+0x3d6>
    goto output_done;
 8011f60:	bf00      	nop
 8011f62:	e000      	b.n	8011f66 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011f64:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	8b5b      	ldrh	r3, [r3, #26]
 8011f6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011f6e:	b29a      	uxth	r2, r3
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011f74:	2300      	movs	r3, #0
}
 8011f76:	4618      	mov	r0, r3
 8011f78:	3728      	adds	r7, #40	; 0x28
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8011f7e:	bf00      	nop

08011f80 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b082      	sub	sp, #8
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d106      	bne.n	8011f9c <tcp_output_segment_busy+0x1c>
 8011f8e:	4b09      	ldr	r3, [pc, #36]	; (8011fb4 <tcp_output_segment_busy+0x34>)
 8011f90:	f240 529a 	movw	r2, #1434	; 0x59a
 8011f94:	4908      	ldr	r1, [pc, #32]	; (8011fb8 <tcp_output_segment_busy+0x38>)
 8011f96:	4809      	ldr	r0, [pc, #36]	; (8011fbc <tcp_output_segment_busy+0x3c>)
 8011f98:	f005 ff86 	bl	8017ea8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	685b      	ldr	r3, [r3, #4]
 8011fa0:	7b9b      	ldrb	r3, [r3, #14]
 8011fa2:	2b01      	cmp	r3, #1
 8011fa4:	d001      	beq.n	8011faa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	e000      	b.n	8011fac <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011faa:	2300      	movs	r3, #0
}
 8011fac:	4618      	mov	r0, r3
 8011fae:	3708      	adds	r7, #8
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}
 8011fb4:	0801b32c 	.word	0x0801b32c
 8011fb8:	0801b8c8 	.word	0x0801b8c8
 8011fbc:	0801b380 	.word	0x0801b380

08011fc0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011fc0:	b5b0      	push	{r4, r5, r7, lr}
 8011fc2:	b08c      	sub	sp, #48	; 0x30
 8011fc4:	af04      	add	r7, sp, #16
 8011fc6:	60f8      	str	r0, [r7, #12]
 8011fc8:	60b9      	str	r1, [r7, #8]
 8011fca:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d106      	bne.n	8011fe0 <tcp_output_segment+0x20>
 8011fd2:	4b64      	ldr	r3, [pc, #400]	; (8012164 <tcp_output_segment+0x1a4>)
 8011fd4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011fd8:	4963      	ldr	r1, [pc, #396]	; (8012168 <tcp_output_segment+0x1a8>)
 8011fda:	4864      	ldr	r0, [pc, #400]	; (801216c <tcp_output_segment+0x1ac>)
 8011fdc:	f005 ff64 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011fe0:	68bb      	ldr	r3, [r7, #8]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d106      	bne.n	8011ff4 <tcp_output_segment+0x34>
 8011fe6:	4b5f      	ldr	r3, [pc, #380]	; (8012164 <tcp_output_segment+0x1a4>)
 8011fe8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011fec:	4960      	ldr	r1, [pc, #384]	; (8012170 <tcp_output_segment+0x1b0>)
 8011fee:	485f      	ldr	r0, [pc, #380]	; (801216c <tcp_output_segment+0x1ac>)
 8011ff0:	f005 ff5a 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d106      	bne.n	8012008 <tcp_output_segment+0x48>
 8011ffa:	4b5a      	ldr	r3, [pc, #360]	; (8012164 <tcp_output_segment+0x1a4>)
 8011ffc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012000:	495c      	ldr	r1, [pc, #368]	; (8012174 <tcp_output_segment+0x1b4>)
 8012002:	485a      	ldr	r0, [pc, #360]	; (801216c <tcp_output_segment+0x1ac>)
 8012004:	f005 ff50 	bl	8017ea8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012008:	68f8      	ldr	r0, [r7, #12]
 801200a:	f7ff ffb9 	bl	8011f80 <tcp_output_segment_busy>
 801200e:	4603      	mov	r3, r0
 8012010:	2b00      	cmp	r3, #0
 8012012:	d001      	beq.n	8012018 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012014:	2300      	movs	r3, #0
 8012016:	e0a0      	b.n	801215a <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012018:	68bb      	ldr	r3, [r7, #8]
 801201a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	68dc      	ldr	r4, [r3, #12]
 8012020:	4610      	mov	r0, r2
 8012022:	f7f8 fe08 	bl	800ac36 <lwip_htonl>
 8012026:	4603      	mov	r3, r0
 8012028:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801202a:	68bb      	ldr	r3, [r7, #8]
 801202c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	68dc      	ldr	r4, [r3, #12]
 8012032:	4610      	mov	r0, r2
 8012034:	f7f8 fdea 	bl	800ac0c <lwip_htons>
 8012038:	4603      	mov	r3, r0
 801203a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012040:	68ba      	ldr	r2, [r7, #8]
 8012042:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012044:	441a      	add	r2, r3
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	68db      	ldr	r3, [r3, #12]
 801204e:	3314      	adds	r3, #20
 8012050:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	7a9b      	ldrb	r3, [r3, #10]
 8012056:	f003 0301 	and.w	r3, r3, #1
 801205a:	2b00      	cmp	r3, #0
 801205c:	d015      	beq.n	801208a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801205e:	68bb      	ldr	r3, [r7, #8]
 8012060:	3304      	adds	r3, #4
 8012062:	461a      	mov	r2, r3
 8012064:	6879      	ldr	r1, [r7, #4]
 8012066:	f44f 7006 	mov.w	r0, #536	; 0x218
 801206a:	f7fc fa33 	bl	800e4d4 <tcp_eff_send_mss_netif>
 801206e:	4603      	mov	r3, r0
 8012070:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012072:	8b7b      	ldrh	r3, [r7, #26]
 8012074:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012078:	4618      	mov	r0, r3
 801207a:	f7f8 fddc 	bl	800ac36 <lwip_htonl>
 801207e:	4602      	mov	r2, r0
 8012080:	69fb      	ldr	r3, [r7, #28]
 8012082:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012084:	69fb      	ldr	r3, [r7, #28]
 8012086:	3304      	adds	r3, #4
 8012088:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801208a:	68bb      	ldr	r3, [r7, #8]
 801208c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012090:	2b00      	cmp	r3, #0
 8012092:	da02      	bge.n	801209a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012094:	68bb      	ldr	r3, [r7, #8]
 8012096:	2200      	movs	r2, #0
 8012098:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801209a:	68bb      	ldr	r3, [r7, #8]
 801209c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d10c      	bne.n	80120bc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80120a2:	4b35      	ldr	r3, [pc, #212]	; (8012178 <tcp_output_segment+0x1b8>)
 80120a4:	681a      	ldr	r2, [r3, #0]
 80120a6:	68bb      	ldr	r3, [r7, #8]
 80120a8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	68db      	ldr	r3, [r3, #12]
 80120ae:	685b      	ldr	r3, [r3, #4]
 80120b0:	4618      	mov	r0, r3
 80120b2:	f7f8 fdc0 	bl	800ac36 <lwip_htonl>
 80120b6:	4602      	mov	r2, r0
 80120b8:	68bb      	ldr	r3, [r7, #8]
 80120ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	68db      	ldr	r3, [r3, #12]
 80120c0:	461a      	mov	r2, r3
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	685b      	ldr	r3, [r3, #4]
 80120c6:	685b      	ldr	r3, [r3, #4]
 80120c8:	1ad3      	subs	r3, r2, r3
 80120ca:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	685b      	ldr	r3, [r3, #4]
 80120d0:	8959      	ldrh	r1, [r3, #10]
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	685b      	ldr	r3, [r3, #4]
 80120d6:	8b3a      	ldrh	r2, [r7, #24]
 80120d8:	1a8a      	subs	r2, r1, r2
 80120da:	b292      	uxth	r2, r2
 80120dc:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	685b      	ldr	r3, [r3, #4]
 80120e2:	8919      	ldrh	r1, [r3, #8]
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	685b      	ldr	r3, [r3, #4]
 80120e8:	8b3a      	ldrh	r2, [r7, #24]
 80120ea:	1a8a      	subs	r2, r1, r2
 80120ec:	b292      	uxth	r2, r2
 80120ee:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	685b      	ldr	r3, [r3, #4]
 80120f4:	68fa      	ldr	r2, [r7, #12]
 80120f6:	68d2      	ldr	r2, [r2, #12]
 80120f8:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	68db      	ldr	r3, [r3, #12]
 80120fe:	2200      	movs	r2, #0
 8012100:	741a      	strb	r2, [r3, #16]
 8012102:	2200      	movs	r2, #0
 8012104:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	68db      	ldr	r3, [r3, #12]
 801210a:	f103 0214 	add.w	r2, r3, #20
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	7a9b      	ldrb	r3, [r3, #10]
 8012112:	009b      	lsls	r3, r3, #2
 8012114:	f003 0304 	and.w	r3, r3, #4
 8012118:	4413      	add	r3, r2
 801211a:	69fa      	ldr	r2, [r7, #28]
 801211c:	429a      	cmp	r2, r3
 801211e:	d006      	beq.n	801212e <tcp_output_segment+0x16e>
 8012120:	4b10      	ldr	r3, [pc, #64]	; (8012164 <tcp_output_segment+0x1a4>)
 8012122:	f240 621c 	movw	r2, #1564	; 0x61c
 8012126:	4915      	ldr	r1, [pc, #84]	; (801217c <tcp_output_segment+0x1bc>)
 8012128:	4810      	ldr	r0, [pc, #64]	; (801216c <tcp_output_segment+0x1ac>)
 801212a:	f005 febd 	bl	8017ea8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	6858      	ldr	r0, [r3, #4]
 8012132:	68b9      	ldr	r1, [r7, #8]
 8012134:	68bb      	ldr	r3, [r7, #8]
 8012136:	1d1c      	adds	r4, r3, #4
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	7add      	ldrb	r5, [r3, #11]
 801213c:	68bb      	ldr	r3, [r7, #8]
 801213e:	7a9b      	ldrb	r3, [r3, #10]
 8012140:	687a      	ldr	r2, [r7, #4]
 8012142:	9202      	str	r2, [sp, #8]
 8012144:	2206      	movs	r2, #6
 8012146:	9201      	str	r2, [sp, #4]
 8012148:	9300      	str	r3, [sp, #0]
 801214a:	462b      	mov	r3, r5
 801214c:	4622      	mov	r2, r4
 801214e:	f004 fc3f 	bl	80169d0 <ip4_output_if>
 8012152:	4603      	mov	r3, r0
 8012154:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012156:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801215a:	4618      	mov	r0, r3
 801215c:	3720      	adds	r7, #32
 801215e:	46bd      	mov	sp, r7
 8012160:	bdb0      	pop	{r4, r5, r7, pc}
 8012162:	bf00      	nop
 8012164:	0801b32c 	.word	0x0801b32c
 8012168:	0801b8f0 	.word	0x0801b8f0
 801216c:	0801b380 	.word	0x0801b380
 8012170:	0801b910 	.word	0x0801b910
 8012174:	0801b930 	.word	0x0801b930
 8012178:	2000f518 	.word	0x2000f518
 801217c:	0801b954 	.word	0x0801b954

08012180 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012180:	b5b0      	push	{r4, r5, r7, lr}
 8012182:	b084      	sub	sp, #16
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d106      	bne.n	801219c <tcp_rexmit_rto_prepare+0x1c>
 801218e:	4b31      	ldr	r3, [pc, #196]	; (8012254 <tcp_rexmit_rto_prepare+0xd4>)
 8012190:	f240 6263 	movw	r2, #1635	; 0x663
 8012194:	4930      	ldr	r1, [pc, #192]	; (8012258 <tcp_rexmit_rto_prepare+0xd8>)
 8012196:	4831      	ldr	r0, [pc, #196]	; (801225c <tcp_rexmit_rto_prepare+0xdc>)
 8012198:	f005 fe86 	bl	8017ea8 <iprintf>

  if (pcb->unacked == NULL) {
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d102      	bne.n	80121aa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80121a4:	f06f 0305 	mvn.w	r3, #5
 80121a8:	e050      	b.n	801224c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121ae:	60fb      	str	r3, [r7, #12]
 80121b0:	e00b      	b.n	80121ca <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80121b2:	68f8      	ldr	r0, [r7, #12]
 80121b4:	f7ff fee4 	bl	8011f80 <tcp_output_segment_busy>
 80121b8:	4603      	mov	r3, r0
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d002      	beq.n	80121c4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80121be:	f06f 0305 	mvn.w	r3, #5
 80121c2:	e043      	b.n	801224c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	60fb      	str	r3, [r7, #12]
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d1ef      	bne.n	80121b2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80121d2:	68f8      	ldr	r0, [r7, #12]
 80121d4:	f7ff fed4 	bl	8011f80 <tcp_output_segment_busy>
 80121d8:	4603      	mov	r3, r0
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d002      	beq.n	80121e4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80121de:	f06f 0305 	mvn.w	r3, #5
 80121e2:	e033      	b.n	801224c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	2200      	movs	r2, #0
 80121f8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	8b5b      	ldrh	r3, [r3, #26]
 80121fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012202:	b29a      	uxth	r2, r3
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	68db      	ldr	r3, [r3, #12]
 801220c:	685b      	ldr	r3, [r3, #4]
 801220e:	4618      	mov	r0, r3
 8012210:	f7f8 fd11 	bl	800ac36 <lwip_htonl>
 8012214:	4604      	mov	r4, r0
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	891b      	ldrh	r3, [r3, #8]
 801221a:	461d      	mov	r5, r3
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	68db      	ldr	r3, [r3, #12]
 8012220:	899b      	ldrh	r3, [r3, #12]
 8012222:	b29b      	uxth	r3, r3
 8012224:	4618      	mov	r0, r3
 8012226:	f7f8 fcf1 	bl	800ac0c <lwip_htons>
 801222a:	4603      	mov	r3, r0
 801222c:	b2db      	uxtb	r3, r3
 801222e:	f003 0303 	and.w	r3, r3, #3
 8012232:	2b00      	cmp	r3, #0
 8012234:	d001      	beq.n	801223a <tcp_rexmit_rto_prepare+0xba>
 8012236:	2301      	movs	r3, #1
 8012238:	e000      	b.n	801223c <tcp_rexmit_rto_prepare+0xbc>
 801223a:	2300      	movs	r3, #0
 801223c:	442b      	add	r3, r5
 801223e:	18e2      	adds	r2, r4, r3
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	2200      	movs	r2, #0
 8012248:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801224a:	2300      	movs	r3, #0
}
 801224c:	4618      	mov	r0, r3
 801224e:	3710      	adds	r7, #16
 8012250:	46bd      	mov	sp, r7
 8012252:	bdb0      	pop	{r4, r5, r7, pc}
 8012254:	0801b32c 	.word	0x0801b32c
 8012258:	0801b968 	.word	0x0801b968
 801225c:	0801b380 	.word	0x0801b380

08012260 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b082      	sub	sp, #8
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d106      	bne.n	801227c <tcp_rexmit_rto_commit+0x1c>
 801226e:	4b0d      	ldr	r3, [pc, #52]	; (80122a4 <tcp_rexmit_rto_commit+0x44>)
 8012270:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012274:	490c      	ldr	r1, [pc, #48]	; (80122a8 <tcp_rexmit_rto_commit+0x48>)
 8012276:	480d      	ldr	r0, [pc, #52]	; (80122ac <tcp_rexmit_rto_commit+0x4c>)
 8012278:	f005 fe16 	bl	8017ea8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012282:	2bff      	cmp	r3, #255	; 0xff
 8012284:	d007      	beq.n	8012296 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801228c:	3301      	adds	r3, #1
 801228e:	b2da      	uxtb	r2, r3
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012296:	6878      	ldr	r0, [r7, #4]
 8012298:	f7ff fc7a 	bl	8011b90 <tcp_output>
}
 801229c:	bf00      	nop
 801229e:	3708      	adds	r7, #8
 80122a0:	46bd      	mov	sp, r7
 80122a2:	bd80      	pop	{r7, pc}
 80122a4:	0801b32c 	.word	0x0801b32c
 80122a8:	0801b98c 	.word	0x0801b98c
 80122ac:	0801b380 	.word	0x0801b380

080122b0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b082      	sub	sp, #8
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d106      	bne.n	80122cc <tcp_rexmit_rto+0x1c>
 80122be:	4b0a      	ldr	r3, [pc, #40]	; (80122e8 <tcp_rexmit_rto+0x38>)
 80122c0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80122c4:	4909      	ldr	r1, [pc, #36]	; (80122ec <tcp_rexmit_rto+0x3c>)
 80122c6:	480a      	ldr	r0, [pc, #40]	; (80122f0 <tcp_rexmit_rto+0x40>)
 80122c8:	f005 fdee 	bl	8017ea8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80122cc:	6878      	ldr	r0, [r7, #4]
 80122ce:	f7ff ff57 	bl	8012180 <tcp_rexmit_rto_prepare>
 80122d2:	4603      	mov	r3, r0
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d102      	bne.n	80122de <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80122d8:	6878      	ldr	r0, [r7, #4]
 80122da:	f7ff ffc1 	bl	8012260 <tcp_rexmit_rto_commit>
  }
}
 80122de:	bf00      	nop
 80122e0:	3708      	adds	r7, #8
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}
 80122e6:	bf00      	nop
 80122e8:	0801b32c 	.word	0x0801b32c
 80122ec:	0801b9b0 	.word	0x0801b9b0
 80122f0:	0801b380 	.word	0x0801b380

080122f4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80122f4:	b590      	push	{r4, r7, lr}
 80122f6:	b085      	sub	sp, #20
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d106      	bne.n	8012310 <tcp_rexmit+0x1c>
 8012302:	4b2f      	ldr	r3, [pc, #188]	; (80123c0 <tcp_rexmit+0xcc>)
 8012304:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012308:	492e      	ldr	r1, [pc, #184]	; (80123c4 <tcp_rexmit+0xd0>)
 801230a:	482f      	ldr	r0, [pc, #188]	; (80123c8 <tcp_rexmit+0xd4>)
 801230c:	f005 fdcc 	bl	8017ea8 <iprintf>

  if (pcb->unacked == NULL) {
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012314:	2b00      	cmp	r3, #0
 8012316:	d102      	bne.n	801231e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012318:	f06f 0305 	mvn.w	r3, #5
 801231c:	e04c      	b.n	80123b8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012322:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012324:	68b8      	ldr	r0, [r7, #8]
 8012326:	f7ff fe2b 	bl	8011f80 <tcp_output_segment_busy>
 801232a:	4603      	mov	r3, r0
 801232c:	2b00      	cmp	r3, #0
 801232e:	d002      	beq.n	8012336 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012330:	f06f 0305 	mvn.w	r3, #5
 8012334:	e040      	b.n	80123b8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012336:	68bb      	ldr	r3, [r7, #8]
 8012338:	681a      	ldr	r2, [r3, #0]
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	336c      	adds	r3, #108	; 0x6c
 8012342:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012344:	e002      	b.n	801234c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d011      	beq.n	8012378 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	68db      	ldr	r3, [r3, #12]
 801235a:	685b      	ldr	r3, [r3, #4]
 801235c:	4618      	mov	r0, r3
 801235e:	f7f8 fc6a 	bl	800ac36 <lwip_htonl>
 8012362:	4604      	mov	r4, r0
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	68db      	ldr	r3, [r3, #12]
 8012368:	685b      	ldr	r3, [r3, #4]
 801236a:	4618      	mov	r0, r3
 801236c:	f7f8 fc63 	bl	800ac36 <lwip_htonl>
 8012370:	4603      	mov	r3, r0
 8012372:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012374:	2b00      	cmp	r3, #0
 8012376:	dbe6      	blt.n	8012346 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	681a      	ldr	r2, [r3, #0]
 801237c:	68bb      	ldr	r3, [r7, #8]
 801237e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	68ba      	ldr	r2, [r7, #8]
 8012384:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012386:	68bb      	ldr	r3, [r7, #8]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d103      	bne.n	8012396 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2200      	movs	r2, #0
 8012392:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801239c:	2bff      	cmp	r3, #255	; 0xff
 801239e:	d007      	beq.n	80123b0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80123a6:	3301      	adds	r3, #1
 80123a8:	b2da      	uxtb	r2, r3
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	2200      	movs	r2, #0
 80123b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80123b6:	2300      	movs	r3, #0
}
 80123b8:	4618      	mov	r0, r3
 80123ba:	3714      	adds	r7, #20
 80123bc:	46bd      	mov	sp, r7
 80123be:	bd90      	pop	{r4, r7, pc}
 80123c0:	0801b32c 	.word	0x0801b32c
 80123c4:	0801b9cc 	.word	0x0801b9cc
 80123c8:	0801b380 	.word	0x0801b380

080123cc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b082      	sub	sp, #8
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d106      	bne.n	80123e8 <tcp_rexmit_fast+0x1c>
 80123da:	4b2e      	ldr	r3, [pc, #184]	; (8012494 <tcp_rexmit_fast+0xc8>)
 80123dc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80123e0:	492d      	ldr	r1, [pc, #180]	; (8012498 <tcp_rexmit_fast+0xcc>)
 80123e2:	482e      	ldr	r0, [pc, #184]	; (801249c <tcp_rexmit_fast+0xd0>)
 80123e4:	f005 fd60 	bl	8017ea8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d04d      	beq.n	801248c <tcp_rexmit_fast+0xc0>
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	8b5b      	ldrh	r3, [r3, #26]
 80123f4:	f003 0304 	and.w	r3, r3, #4
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d147      	bne.n	801248c <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80123fc:	6878      	ldr	r0, [r7, #4]
 80123fe:	f7ff ff79 	bl	80122f4 <tcp_rexmit>
 8012402:	4603      	mov	r3, r0
 8012404:	2b00      	cmp	r3, #0
 8012406:	d141      	bne.n	801248c <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012414:	429a      	cmp	r2, r3
 8012416:	d207      	bcs.n	8012428 <tcp_rexmit_fast+0x5c>
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801241e:	0fda      	lsrs	r2, r3, #31
 8012420:	4413      	add	r3, r2
 8012422:	105b      	asrs	r3, r3, #1
 8012424:	b29b      	uxth	r3, r3
 8012426:	e006      	b.n	8012436 <tcp_rexmit_fast+0x6a>
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801242e:	0fda      	lsrs	r2, r3, #31
 8012430:	4413      	add	r3, r2
 8012432:	105b      	asrs	r3, r3, #1
 8012434:	b29b      	uxth	r3, r3
 8012436:	687a      	ldr	r2, [r7, #4]
 8012438:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012442:	461a      	mov	r2, r3
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012448:	005b      	lsls	r3, r3, #1
 801244a:	429a      	cmp	r2, r3
 801244c:	d206      	bcs.n	801245c <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012452:	005b      	lsls	r3, r3, #1
 8012454:	b29a      	uxth	r2, r3
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012466:	4619      	mov	r1, r3
 8012468:	0049      	lsls	r1, r1, #1
 801246a:	440b      	add	r3, r1
 801246c:	b29b      	uxth	r3, r3
 801246e:	4413      	add	r3, r2
 8012470:	b29a      	uxth	r2, r3
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	8b5b      	ldrh	r3, [r3, #26]
 801247c:	f043 0304 	orr.w	r3, r3, #4
 8012480:	b29a      	uxth	r2, r3
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	2200      	movs	r2, #0
 801248a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801248c:	bf00      	nop
 801248e:	3708      	adds	r7, #8
 8012490:	46bd      	mov	sp, r7
 8012492:	bd80      	pop	{r7, pc}
 8012494:	0801b32c 	.word	0x0801b32c
 8012498:	0801b9e4 	.word	0x0801b9e4
 801249c:	0801b380 	.word	0x0801b380

080124a0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b086      	sub	sp, #24
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	60f8      	str	r0, [r7, #12]
 80124a8:	607b      	str	r3, [r7, #4]
 80124aa:	460b      	mov	r3, r1
 80124ac:	817b      	strh	r3, [r7, #10]
 80124ae:	4613      	mov	r3, r2
 80124b0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80124b2:	897a      	ldrh	r2, [r7, #10]
 80124b4:	893b      	ldrh	r3, [r7, #8]
 80124b6:	4413      	add	r3, r2
 80124b8:	b29b      	uxth	r3, r3
 80124ba:	3314      	adds	r3, #20
 80124bc:	b29b      	uxth	r3, r3
 80124be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80124c2:	4619      	mov	r1, r3
 80124c4:	2022      	movs	r0, #34	; 0x22
 80124c6:	f7f9 fcab 	bl	800be20 <pbuf_alloc>
 80124ca:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80124cc:	697b      	ldr	r3, [r7, #20]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d04e      	beq.n	8012570 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80124d2:	697b      	ldr	r3, [r7, #20]
 80124d4:	895b      	ldrh	r3, [r3, #10]
 80124d6:	461a      	mov	r2, r3
 80124d8:	897b      	ldrh	r3, [r7, #10]
 80124da:	3314      	adds	r3, #20
 80124dc:	429a      	cmp	r2, r3
 80124de:	da06      	bge.n	80124ee <tcp_output_alloc_header_common+0x4e>
 80124e0:	4b26      	ldr	r3, [pc, #152]	; (801257c <tcp_output_alloc_header_common+0xdc>)
 80124e2:	f240 7224 	movw	r2, #1828	; 0x724
 80124e6:	4926      	ldr	r1, [pc, #152]	; (8012580 <tcp_output_alloc_header_common+0xe0>)
 80124e8:	4826      	ldr	r0, [pc, #152]	; (8012584 <tcp_output_alloc_header_common+0xe4>)
 80124ea:	f005 fcdd 	bl	8017ea8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80124ee:	697b      	ldr	r3, [r7, #20]
 80124f0:	685b      	ldr	r3, [r3, #4]
 80124f2:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80124f4:	8c3b      	ldrh	r3, [r7, #32]
 80124f6:	4618      	mov	r0, r3
 80124f8:	f7f8 fb88 	bl	800ac0c <lwip_htons>
 80124fc:	4603      	mov	r3, r0
 80124fe:	461a      	mov	r2, r3
 8012500:	693b      	ldr	r3, [r7, #16]
 8012502:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012504:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012506:	4618      	mov	r0, r3
 8012508:	f7f8 fb80 	bl	800ac0c <lwip_htons>
 801250c:	4603      	mov	r3, r0
 801250e:	461a      	mov	r2, r3
 8012510:	693b      	ldr	r3, [r7, #16]
 8012512:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012514:	693b      	ldr	r3, [r7, #16]
 8012516:	687a      	ldr	r2, [r7, #4]
 8012518:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801251a:	68f8      	ldr	r0, [r7, #12]
 801251c:	f7f8 fb8b 	bl	800ac36 <lwip_htonl>
 8012520:	4602      	mov	r2, r0
 8012522:	693b      	ldr	r3, [r7, #16]
 8012524:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012526:	897b      	ldrh	r3, [r7, #10]
 8012528:	089b      	lsrs	r3, r3, #2
 801252a:	b29b      	uxth	r3, r3
 801252c:	3305      	adds	r3, #5
 801252e:	b29b      	uxth	r3, r3
 8012530:	031b      	lsls	r3, r3, #12
 8012532:	b29a      	uxth	r2, r3
 8012534:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012538:	b29b      	uxth	r3, r3
 801253a:	4313      	orrs	r3, r2
 801253c:	b29b      	uxth	r3, r3
 801253e:	4618      	mov	r0, r3
 8012540:	f7f8 fb64 	bl	800ac0c <lwip_htons>
 8012544:	4603      	mov	r3, r0
 8012546:	461a      	mov	r2, r3
 8012548:	693b      	ldr	r3, [r7, #16]
 801254a:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801254c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801254e:	4618      	mov	r0, r3
 8012550:	f7f8 fb5c 	bl	800ac0c <lwip_htons>
 8012554:	4603      	mov	r3, r0
 8012556:	461a      	mov	r2, r3
 8012558:	693b      	ldr	r3, [r7, #16]
 801255a:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801255c:	693b      	ldr	r3, [r7, #16]
 801255e:	2200      	movs	r2, #0
 8012560:	741a      	strb	r2, [r3, #16]
 8012562:	2200      	movs	r2, #0
 8012564:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012566:	693b      	ldr	r3, [r7, #16]
 8012568:	2200      	movs	r2, #0
 801256a:	749a      	strb	r2, [r3, #18]
 801256c:	2200      	movs	r2, #0
 801256e:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012570:	697b      	ldr	r3, [r7, #20]
}
 8012572:	4618      	mov	r0, r3
 8012574:	3718      	adds	r7, #24
 8012576:	46bd      	mov	sp, r7
 8012578:	bd80      	pop	{r7, pc}
 801257a:	bf00      	nop
 801257c:	0801b32c 	.word	0x0801b32c
 8012580:	0801ba04 	.word	0x0801ba04
 8012584:	0801b380 	.word	0x0801b380

08012588 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012588:	b5b0      	push	{r4, r5, r7, lr}
 801258a:	b08a      	sub	sp, #40	; 0x28
 801258c:	af04      	add	r7, sp, #16
 801258e:	60f8      	str	r0, [r7, #12]
 8012590:	607b      	str	r3, [r7, #4]
 8012592:	460b      	mov	r3, r1
 8012594:	817b      	strh	r3, [r7, #10]
 8012596:	4613      	mov	r3, r2
 8012598:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d106      	bne.n	80125ae <tcp_output_alloc_header+0x26>
 80125a0:	4b15      	ldr	r3, [pc, #84]	; (80125f8 <tcp_output_alloc_header+0x70>)
 80125a2:	f240 7242 	movw	r2, #1858	; 0x742
 80125a6:	4915      	ldr	r1, [pc, #84]	; (80125fc <tcp_output_alloc_header+0x74>)
 80125a8:	4815      	ldr	r0, [pc, #84]	; (8012600 <tcp_output_alloc_header+0x78>)
 80125aa:	f005 fc7d 	bl	8017ea8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	8adb      	ldrh	r3, [r3, #22]
 80125b6:	68fa      	ldr	r2, [r7, #12]
 80125b8:	8b12      	ldrh	r2, [r2, #24]
 80125ba:	68f9      	ldr	r1, [r7, #12]
 80125bc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80125be:	893d      	ldrh	r5, [r7, #8]
 80125c0:	897c      	ldrh	r4, [r7, #10]
 80125c2:	9103      	str	r1, [sp, #12]
 80125c4:	2110      	movs	r1, #16
 80125c6:	9102      	str	r1, [sp, #8]
 80125c8:	9201      	str	r2, [sp, #4]
 80125ca:	9300      	str	r3, [sp, #0]
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	462a      	mov	r2, r5
 80125d0:	4621      	mov	r1, r4
 80125d2:	f7ff ff65 	bl	80124a0 <tcp_output_alloc_header_common>
 80125d6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d006      	beq.n	80125ec <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125e2:	68fa      	ldr	r2, [r7, #12]
 80125e4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80125e6:	441a      	add	r2, r3
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80125ec:	697b      	ldr	r3, [r7, #20]
}
 80125ee:	4618      	mov	r0, r3
 80125f0:	3718      	adds	r7, #24
 80125f2:	46bd      	mov	sp, r7
 80125f4:	bdb0      	pop	{r4, r5, r7, pc}
 80125f6:	bf00      	nop
 80125f8:	0801b32c 	.word	0x0801b32c
 80125fc:	0801ba34 	.word	0x0801ba34
 8012600:	0801b380 	.word	0x0801b380

08012604 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012604:	b580      	push	{r7, lr}
 8012606:	b088      	sub	sp, #32
 8012608:	af00      	add	r7, sp, #0
 801260a:	60f8      	str	r0, [r7, #12]
 801260c:	60b9      	str	r1, [r7, #8]
 801260e:	4611      	mov	r1, r2
 8012610:	461a      	mov	r2, r3
 8012612:	460b      	mov	r3, r1
 8012614:	71fb      	strb	r3, [r7, #7]
 8012616:	4613      	mov	r3, r2
 8012618:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801261a:	2300      	movs	r3, #0
 801261c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801261e:	68bb      	ldr	r3, [r7, #8]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d106      	bne.n	8012632 <tcp_output_fill_options+0x2e>
 8012624:	4b13      	ldr	r3, [pc, #76]	; (8012674 <tcp_output_fill_options+0x70>)
 8012626:	f240 7256 	movw	r2, #1878	; 0x756
 801262a:	4913      	ldr	r1, [pc, #76]	; (8012678 <tcp_output_fill_options+0x74>)
 801262c:	4813      	ldr	r0, [pc, #76]	; (801267c <tcp_output_fill_options+0x78>)
 801262e:	f005 fc3b 	bl	8017ea8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012632:	68bb      	ldr	r3, [r7, #8]
 8012634:	685b      	ldr	r3, [r3, #4]
 8012636:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012638:	69bb      	ldr	r3, [r7, #24]
 801263a:	3314      	adds	r3, #20
 801263c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801263e:	69bb      	ldr	r3, [r7, #24]
 8012640:	f103 0214 	add.w	r2, r3, #20
 8012644:	8bfb      	ldrh	r3, [r7, #30]
 8012646:	009b      	lsls	r3, r3, #2
 8012648:	4619      	mov	r1, r3
 801264a:	79fb      	ldrb	r3, [r7, #7]
 801264c:	009b      	lsls	r3, r3, #2
 801264e:	f003 0304 	and.w	r3, r3, #4
 8012652:	440b      	add	r3, r1
 8012654:	4413      	add	r3, r2
 8012656:	697a      	ldr	r2, [r7, #20]
 8012658:	429a      	cmp	r2, r3
 801265a:	d006      	beq.n	801266a <tcp_output_fill_options+0x66>
 801265c:	4b05      	ldr	r3, [pc, #20]	; (8012674 <tcp_output_fill_options+0x70>)
 801265e:	f240 7275 	movw	r2, #1909	; 0x775
 8012662:	4907      	ldr	r1, [pc, #28]	; (8012680 <tcp_output_fill_options+0x7c>)
 8012664:	4805      	ldr	r0, [pc, #20]	; (801267c <tcp_output_fill_options+0x78>)
 8012666:	f005 fc1f 	bl	8017ea8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801266a:	bf00      	nop
 801266c:	3720      	adds	r7, #32
 801266e:	46bd      	mov	sp, r7
 8012670:	bd80      	pop	{r7, pc}
 8012672:	bf00      	nop
 8012674:	0801b32c 	.word	0x0801b32c
 8012678:	0801ba5c 	.word	0x0801ba5c
 801267c:	0801b380 	.word	0x0801b380
 8012680:	0801b954 	.word	0x0801b954

08012684 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b08a      	sub	sp, #40	; 0x28
 8012688:	af04      	add	r7, sp, #16
 801268a:	60f8      	str	r0, [r7, #12]
 801268c:	60b9      	str	r1, [r7, #8]
 801268e:	607a      	str	r2, [r7, #4]
 8012690:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012692:	68bb      	ldr	r3, [r7, #8]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d106      	bne.n	80126a6 <tcp_output_control_segment+0x22>
 8012698:	4b1c      	ldr	r3, [pc, #112]	; (801270c <tcp_output_control_segment+0x88>)
 801269a:	f240 7287 	movw	r2, #1927	; 0x787
 801269e:	491c      	ldr	r1, [pc, #112]	; (8012710 <tcp_output_control_segment+0x8c>)
 80126a0:	481c      	ldr	r0, [pc, #112]	; (8012714 <tcp_output_control_segment+0x90>)
 80126a2:	f005 fc01 	bl	8017ea8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80126a6:	683a      	ldr	r2, [r7, #0]
 80126a8:	6879      	ldr	r1, [r7, #4]
 80126aa:	68f8      	ldr	r0, [r7, #12]
 80126ac:	f7fe fad6 	bl	8010c5c <tcp_route>
 80126b0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80126b2:	693b      	ldr	r3, [r7, #16]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d102      	bne.n	80126be <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80126b8:	23fc      	movs	r3, #252	; 0xfc
 80126ba:	75fb      	strb	r3, [r7, #23]
 80126bc:	e01c      	b.n	80126f8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d006      	beq.n	80126d2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	7adb      	ldrb	r3, [r3, #11]
 80126c8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	7a9b      	ldrb	r3, [r3, #10]
 80126ce:	757b      	strb	r3, [r7, #21]
 80126d0:	e003      	b.n	80126da <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80126d2:	23ff      	movs	r3, #255	; 0xff
 80126d4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80126d6:	2300      	movs	r3, #0
 80126d8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80126da:	7dba      	ldrb	r2, [r7, #22]
 80126dc:	693b      	ldr	r3, [r7, #16]
 80126de:	9302      	str	r3, [sp, #8]
 80126e0:	2306      	movs	r3, #6
 80126e2:	9301      	str	r3, [sp, #4]
 80126e4:	7d7b      	ldrb	r3, [r7, #21]
 80126e6:	9300      	str	r3, [sp, #0]
 80126e8:	4613      	mov	r3, r2
 80126ea:	683a      	ldr	r2, [r7, #0]
 80126ec:	6879      	ldr	r1, [r7, #4]
 80126ee:	68b8      	ldr	r0, [r7, #8]
 80126f0:	f004 f96e 	bl	80169d0 <ip4_output_if>
 80126f4:	4603      	mov	r3, r0
 80126f6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80126f8:	68b8      	ldr	r0, [r7, #8]
 80126fa:	f7f9 fe71 	bl	800c3e0 <pbuf_free>
  return err;
 80126fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012702:	4618      	mov	r0, r3
 8012704:	3718      	adds	r7, #24
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}
 801270a:	bf00      	nop
 801270c:	0801b32c 	.word	0x0801b32c
 8012710:	0801ba84 	.word	0x0801ba84
 8012714:	0801b380 	.word	0x0801b380

08012718 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012718:	b590      	push	{r4, r7, lr}
 801271a:	b08b      	sub	sp, #44	; 0x2c
 801271c:	af04      	add	r7, sp, #16
 801271e:	60f8      	str	r0, [r7, #12]
 8012720:	60b9      	str	r1, [r7, #8]
 8012722:	607a      	str	r2, [r7, #4]
 8012724:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d106      	bne.n	801273a <tcp_rst+0x22>
 801272c:	4b1f      	ldr	r3, [pc, #124]	; (80127ac <tcp_rst+0x94>)
 801272e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012732:	491f      	ldr	r1, [pc, #124]	; (80127b0 <tcp_rst+0x98>)
 8012734:	481f      	ldr	r0, [pc, #124]	; (80127b4 <tcp_rst+0x9c>)
 8012736:	f005 fbb7 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801273c:	2b00      	cmp	r3, #0
 801273e:	d106      	bne.n	801274e <tcp_rst+0x36>
 8012740:	4b1a      	ldr	r3, [pc, #104]	; (80127ac <tcp_rst+0x94>)
 8012742:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012746:	491c      	ldr	r1, [pc, #112]	; (80127b8 <tcp_rst+0xa0>)
 8012748:	481a      	ldr	r0, [pc, #104]	; (80127b4 <tcp_rst+0x9c>)
 801274a:	f005 fbad 	bl	8017ea8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801274e:	2300      	movs	r3, #0
 8012750:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012752:	f246 0308 	movw	r3, #24584	; 0x6008
 8012756:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012758:	7dfb      	ldrb	r3, [r7, #23]
 801275a:	b29c      	uxth	r4, r3
 801275c:	68b8      	ldr	r0, [r7, #8]
 801275e:	f7f8 fa6a 	bl	800ac36 <lwip_htonl>
 8012762:	4602      	mov	r2, r0
 8012764:	8abb      	ldrh	r3, [r7, #20]
 8012766:	9303      	str	r3, [sp, #12]
 8012768:	2314      	movs	r3, #20
 801276a:	9302      	str	r3, [sp, #8]
 801276c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801276e:	9301      	str	r3, [sp, #4]
 8012770:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012772:	9300      	str	r3, [sp, #0]
 8012774:	4613      	mov	r3, r2
 8012776:	2200      	movs	r2, #0
 8012778:	4621      	mov	r1, r4
 801277a:	6878      	ldr	r0, [r7, #4]
 801277c:	f7ff fe90 	bl	80124a0 <tcp_output_alloc_header_common>
 8012780:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012782:	693b      	ldr	r3, [r7, #16]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d00c      	beq.n	80127a2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012788:	7dfb      	ldrb	r3, [r7, #23]
 801278a:	2200      	movs	r2, #0
 801278c:	6939      	ldr	r1, [r7, #16]
 801278e:	68f8      	ldr	r0, [r7, #12]
 8012790:	f7ff ff38 	bl	8012604 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012796:	683a      	ldr	r2, [r7, #0]
 8012798:	6939      	ldr	r1, [r7, #16]
 801279a:	68f8      	ldr	r0, [r7, #12]
 801279c:	f7ff ff72 	bl	8012684 <tcp_output_control_segment>
 80127a0:	e000      	b.n	80127a4 <tcp_rst+0x8c>
    return;
 80127a2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80127a4:	371c      	adds	r7, #28
 80127a6:	46bd      	mov	sp, r7
 80127a8:	bd90      	pop	{r4, r7, pc}
 80127aa:	bf00      	nop
 80127ac:	0801b32c 	.word	0x0801b32c
 80127b0:	0801bab0 	.word	0x0801bab0
 80127b4:	0801b380 	.word	0x0801b380
 80127b8:	0801bacc 	.word	0x0801bacc

080127bc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80127bc:	b590      	push	{r4, r7, lr}
 80127be:	b087      	sub	sp, #28
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80127c4:	2300      	movs	r3, #0
 80127c6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80127c8:	2300      	movs	r3, #0
 80127ca:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d106      	bne.n	80127e0 <tcp_send_empty_ack+0x24>
 80127d2:	4b28      	ldr	r3, [pc, #160]	; (8012874 <tcp_send_empty_ack+0xb8>)
 80127d4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80127d8:	4927      	ldr	r1, [pc, #156]	; (8012878 <tcp_send_empty_ack+0xbc>)
 80127da:	4828      	ldr	r0, [pc, #160]	; (801287c <tcp_send_empty_ack+0xc0>)
 80127dc:	f005 fb64 	bl	8017ea8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80127e0:	7dfb      	ldrb	r3, [r7, #23]
 80127e2:	009b      	lsls	r3, r3, #2
 80127e4:	b2db      	uxtb	r3, r3
 80127e6:	f003 0304 	and.w	r3, r3, #4
 80127ea:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80127ec:	7d7b      	ldrb	r3, [r7, #21]
 80127ee:	b29c      	uxth	r4, r3
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80127f4:	4618      	mov	r0, r3
 80127f6:	f7f8 fa1e 	bl	800ac36 <lwip_htonl>
 80127fa:	4603      	mov	r3, r0
 80127fc:	2200      	movs	r2, #0
 80127fe:	4621      	mov	r1, r4
 8012800:	6878      	ldr	r0, [r7, #4]
 8012802:	f7ff fec1 	bl	8012588 <tcp_output_alloc_header>
 8012806:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012808:	693b      	ldr	r3, [r7, #16]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d109      	bne.n	8012822 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	8b5b      	ldrh	r3, [r3, #26]
 8012812:	f043 0303 	orr.w	r3, r3, #3
 8012816:	b29a      	uxth	r2, r3
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801281c:	f06f 0301 	mvn.w	r3, #1
 8012820:	e023      	b.n	801286a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012822:	7dbb      	ldrb	r3, [r7, #22]
 8012824:	7dfa      	ldrb	r2, [r7, #23]
 8012826:	6939      	ldr	r1, [r7, #16]
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f7ff feeb 	bl	8012604 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801282e:	687a      	ldr	r2, [r7, #4]
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	3304      	adds	r3, #4
 8012834:	6939      	ldr	r1, [r7, #16]
 8012836:	6878      	ldr	r0, [r7, #4]
 8012838:	f7ff ff24 	bl	8012684 <tcp_output_control_segment>
 801283c:	4603      	mov	r3, r0
 801283e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d007      	beq.n	8012858 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	8b5b      	ldrh	r3, [r3, #26]
 801284c:	f043 0303 	orr.w	r3, r3, #3
 8012850:	b29a      	uxth	r2, r3
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	835a      	strh	r2, [r3, #26]
 8012856:	e006      	b.n	8012866 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	8b5b      	ldrh	r3, [r3, #26]
 801285c:	f023 0303 	bic.w	r3, r3, #3
 8012860:	b29a      	uxth	r2, r3
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012866:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801286a:	4618      	mov	r0, r3
 801286c:	371c      	adds	r7, #28
 801286e:	46bd      	mov	sp, r7
 8012870:	bd90      	pop	{r4, r7, pc}
 8012872:	bf00      	nop
 8012874:	0801b32c 	.word	0x0801b32c
 8012878:	0801bae8 	.word	0x0801bae8
 801287c:	0801b380 	.word	0x0801b380

08012880 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012880:	b590      	push	{r4, r7, lr}
 8012882:	b087      	sub	sp, #28
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012888:	2300      	movs	r3, #0
 801288a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d106      	bne.n	80128a0 <tcp_keepalive+0x20>
 8012892:	4b18      	ldr	r3, [pc, #96]	; (80128f4 <tcp_keepalive+0x74>)
 8012894:	f640 0224 	movw	r2, #2084	; 0x824
 8012898:	4917      	ldr	r1, [pc, #92]	; (80128f8 <tcp_keepalive+0x78>)
 801289a:	4818      	ldr	r0, [pc, #96]	; (80128fc <tcp_keepalive+0x7c>)
 801289c:	f005 fb04 	bl	8017ea8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80128a0:	7dfb      	ldrb	r3, [r7, #23]
 80128a2:	b29c      	uxth	r4, r3
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80128a8:	3b01      	subs	r3, #1
 80128aa:	4618      	mov	r0, r3
 80128ac:	f7f8 f9c3 	bl	800ac36 <lwip_htonl>
 80128b0:	4603      	mov	r3, r0
 80128b2:	2200      	movs	r2, #0
 80128b4:	4621      	mov	r1, r4
 80128b6:	6878      	ldr	r0, [r7, #4]
 80128b8:	f7ff fe66 	bl	8012588 <tcp_output_alloc_header>
 80128bc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80128be:	693b      	ldr	r3, [r7, #16]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d102      	bne.n	80128ca <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80128c4:	f04f 33ff 	mov.w	r3, #4294967295
 80128c8:	e010      	b.n	80128ec <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80128ca:	7dfb      	ldrb	r3, [r7, #23]
 80128cc:	2200      	movs	r2, #0
 80128ce:	6939      	ldr	r1, [r7, #16]
 80128d0:	6878      	ldr	r0, [r7, #4]
 80128d2:	f7ff fe97 	bl	8012604 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80128d6:	687a      	ldr	r2, [r7, #4]
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	3304      	adds	r3, #4
 80128dc:	6939      	ldr	r1, [r7, #16]
 80128de:	6878      	ldr	r0, [r7, #4]
 80128e0:	f7ff fed0 	bl	8012684 <tcp_output_control_segment>
 80128e4:	4603      	mov	r3, r0
 80128e6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80128e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80128ec:	4618      	mov	r0, r3
 80128ee:	371c      	adds	r7, #28
 80128f0:	46bd      	mov	sp, r7
 80128f2:	bd90      	pop	{r4, r7, pc}
 80128f4:	0801b32c 	.word	0x0801b32c
 80128f8:	0801bb08 	.word	0x0801bb08
 80128fc:	0801b380 	.word	0x0801b380

08012900 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012900:	b590      	push	{r4, r7, lr}
 8012902:	b08b      	sub	sp, #44	; 0x2c
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012908:	2300      	movs	r3, #0
 801290a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d106      	bne.n	8012922 <tcp_zero_window_probe+0x22>
 8012914:	4b4c      	ldr	r3, [pc, #304]	; (8012a48 <tcp_zero_window_probe+0x148>)
 8012916:	f640 024f 	movw	r2, #2127	; 0x84f
 801291a:	494c      	ldr	r1, [pc, #304]	; (8012a4c <tcp_zero_window_probe+0x14c>)
 801291c:	484c      	ldr	r0, [pc, #304]	; (8012a50 <tcp_zero_window_probe+0x150>)
 801291e:	f005 fac3 	bl	8017ea8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012926:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012928:	6a3b      	ldr	r3, [r7, #32]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d101      	bne.n	8012932 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801292e:	2300      	movs	r3, #0
 8012930:	e086      	b.n	8012a40 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012938:	2bff      	cmp	r3, #255	; 0xff
 801293a:	d007      	beq.n	801294c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012942:	3301      	adds	r3, #1
 8012944:	b2da      	uxtb	r2, r3
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801294c:	6a3b      	ldr	r3, [r7, #32]
 801294e:	68db      	ldr	r3, [r3, #12]
 8012950:	899b      	ldrh	r3, [r3, #12]
 8012952:	b29b      	uxth	r3, r3
 8012954:	4618      	mov	r0, r3
 8012956:	f7f8 f959 	bl	800ac0c <lwip_htons>
 801295a:	4603      	mov	r3, r0
 801295c:	b2db      	uxtb	r3, r3
 801295e:	f003 0301 	and.w	r3, r3, #1
 8012962:	2b00      	cmp	r3, #0
 8012964:	d005      	beq.n	8012972 <tcp_zero_window_probe+0x72>
 8012966:	6a3b      	ldr	r3, [r7, #32]
 8012968:	891b      	ldrh	r3, [r3, #8]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d101      	bne.n	8012972 <tcp_zero_window_probe+0x72>
 801296e:	2301      	movs	r3, #1
 8012970:	e000      	b.n	8012974 <tcp_zero_window_probe+0x74>
 8012972:	2300      	movs	r3, #0
 8012974:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012976:	7ffb      	ldrb	r3, [r7, #31]
 8012978:	2b00      	cmp	r3, #0
 801297a:	bf0c      	ite	eq
 801297c:	2301      	moveq	r3, #1
 801297e:	2300      	movne	r3, #0
 8012980:	b2db      	uxtb	r3, r3
 8012982:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012988:	b299      	uxth	r1, r3
 801298a:	6a3b      	ldr	r3, [r7, #32]
 801298c:	68db      	ldr	r3, [r3, #12]
 801298e:	685b      	ldr	r3, [r3, #4]
 8012990:	8bba      	ldrh	r2, [r7, #28]
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	f7ff fdf8 	bl	8012588 <tcp_output_alloc_header>
 8012998:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801299a:	69bb      	ldr	r3, [r7, #24]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d102      	bne.n	80129a6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80129a0:	f04f 33ff 	mov.w	r3, #4294967295
 80129a4:	e04c      	b.n	8012a40 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80129a6:	69bb      	ldr	r3, [r7, #24]
 80129a8:	685b      	ldr	r3, [r3, #4]
 80129aa:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80129ac:	7ffb      	ldrb	r3, [r7, #31]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d011      	beq.n	80129d6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80129b2:	697b      	ldr	r3, [r7, #20]
 80129b4:	899b      	ldrh	r3, [r3, #12]
 80129b6:	b29b      	uxth	r3, r3
 80129b8:	b21b      	sxth	r3, r3
 80129ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80129be:	b21c      	sxth	r4, r3
 80129c0:	2011      	movs	r0, #17
 80129c2:	f7f8 f923 	bl	800ac0c <lwip_htons>
 80129c6:	4603      	mov	r3, r0
 80129c8:	b21b      	sxth	r3, r3
 80129ca:	4323      	orrs	r3, r4
 80129cc:	b21b      	sxth	r3, r3
 80129ce:	b29a      	uxth	r2, r3
 80129d0:	697b      	ldr	r3, [r7, #20]
 80129d2:	819a      	strh	r2, [r3, #12]
 80129d4:	e010      	b.n	80129f8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80129d6:	69bb      	ldr	r3, [r7, #24]
 80129d8:	685b      	ldr	r3, [r3, #4]
 80129da:	3314      	adds	r3, #20
 80129dc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80129de:	6a3b      	ldr	r3, [r7, #32]
 80129e0:	6858      	ldr	r0, [r3, #4]
 80129e2:	6a3b      	ldr	r3, [r7, #32]
 80129e4:	685b      	ldr	r3, [r3, #4]
 80129e6:	891a      	ldrh	r2, [r3, #8]
 80129e8:	6a3b      	ldr	r3, [r7, #32]
 80129ea:	891b      	ldrh	r3, [r3, #8]
 80129ec:	1ad3      	subs	r3, r2, r3
 80129ee:	b29b      	uxth	r3, r3
 80129f0:	2201      	movs	r2, #1
 80129f2:	6939      	ldr	r1, [r7, #16]
 80129f4:	f7f9 fefa 	bl	800c7ec <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80129f8:	6a3b      	ldr	r3, [r7, #32]
 80129fa:	68db      	ldr	r3, [r3, #12]
 80129fc:	685b      	ldr	r3, [r3, #4]
 80129fe:	4618      	mov	r0, r3
 8012a00:	f7f8 f919 	bl	800ac36 <lwip_htonl>
 8012a04:	4603      	mov	r3, r0
 8012a06:	3301      	adds	r3, #1
 8012a08:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	1ad3      	subs	r3, r2, r3
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	da02      	bge.n	8012a1c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	68fa      	ldr	r2, [r7, #12]
 8012a1a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a20:	2200      	movs	r2, #0
 8012a22:	69b9      	ldr	r1, [r7, #24]
 8012a24:	6878      	ldr	r0, [r7, #4]
 8012a26:	f7ff fded 	bl	8012604 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012a2a:	687a      	ldr	r2, [r7, #4]
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	3304      	adds	r3, #4
 8012a30:	69b9      	ldr	r1, [r7, #24]
 8012a32:	6878      	ldr	r0, [r7, #4]
 8012a34:	f7ff fe26 	bl	8012684 <tcp_output_control_segment>
 8012a38:	4603      	mov	r3, r0
 8012a3a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012a3c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012a40:	4618      	mov	r0, r3
 8012a42:	372c      	adds	r7, #44	; 0x2c
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd90      	pop	{r4, r7, pc}
 8012a48:	0801b32c 	.word	0x0801b32c
 8012a4c:	0801bb24 	.word	0x0801bb24
 8012a50:	0801b380 	.word	0x0801b380

08012a54 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b082      	sub	sp, #8
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012a5c:	f7f9 ffb4 	bl	800c9c8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012a60:	4b0a      	ldr	r3, [pc, #40]	; (8012a8c <tcpip_tcp_timer+0x38>)
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d103      	bne.n	8012a70 <tcpip_tcp_timer+0x1c>
 8012a68:	4b09      	ldr	r3, [pc, #36]	; (8012a90 <tcpip_tcp_timer+0x3c>)
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d005      	beq.n	8012a7c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012a70:	2200      	movs	r2, #0
 8012a72:	4908      	ldr	r1, [pc, #32]	; (8012a94 <tcpip_tcp_timer+0x40>)
 8012a74:	20fa      	movs	r0, #250	; 0xfa
 8012a76:	f000 f8f1 	bl	8012c5c <sys_timeout>
 8012a7a:	e002      	b.n	8012a82 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012a7c:	4b06      	ldr	r3, [pc, #24]	; (8012a98 <tcpip_tcp_timer+0x44>)
 8012a7e:	2200      	movs	r2, #0
 8012a80:	601a      	str	r2, [r3, #0]
  }
}
 8012a82:	bf00      	nop
 8012a84:	3708      	adds	r7, #8
 8012a86:	46bd      	mov	sp, r7
 8012a88:	bd80      	pop	{r7, pc}
 8012a8a:	bf00      	nop
 8012a8c:	2000f514 	.word	0x2000f514
 8012a90:	2000f524 	.word	0x2000f524
 8012a94:	08012a55 	.word	0x08012a55
 8012a98:	20008acc 	.word	0x20008acc

08012a9c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012aa0:	4b0a      	ldr	r3, [pc, #40]	; (8012acc <tcp_timer_needed+0x30>)
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d10f      	bne.n	8012ac8 <tcp_timer_needed+0x2c>
 8012aa8:	4b09      	ldr	r3, [pc, #36]	; (8012ad0 <tcp_timer_needed+0x34>)
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d103      	bne.n	8012ab8 <tcp_timer_needed+0x1c>
 8012ab0:	4b08      	ldr	r3, [pc, #32]	; (8012ad4 <tcp_timer_needed+0x38>)
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d007      	beq.n	8012ac8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012ab8:	4b04      	ldr	r3, [pc, #16]	; (8012acc <tcp_timer_needed+0x30>)
 8012aba:	2201      	movs	r2, #1
 8012abc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012abe:	2200      	movs	r2, #0
 8012ac0:	4905      	ldr	r1, [pc, #20]	; (8012ad8 <tcp_timer_needed+0x3c>)
 8012ac2:	20fa      	movs	r0, #250	; 0xfa
 8012ac4:	f000 f8ca 	bl	8012c5c <sys_timeout>
  }
}
 8012ac8:	bf00      	nop
 8012aca:	bd80      	pop	{r7, pc}
 8012acc:	20008acc 	.word	0x20008acc
 8012ad0:	2000f514 	.word	0x2000f514
 8012ad4:	2000f524 	.word	0x2000f524
 8012ad8:	08012a55 	.word	0x08012a55

08012adc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b086      	sub	sp, #24
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	60f8      	str	r0, [r7, #12]
 8012ae4:	60b9      	str	r1, [r7, #8]
 8012ae6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012ae8:	200a      	movs	r0, #10
 8012aea:	f7f8 fd7b 	bl	800b5e4 <memp_malloc>
 8012aee:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012af0:	693b      	ldr	r3, [r7, #16]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d109      	bne.n	8012b0a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012af6:	693b      	ldr	r3, [r7, #16]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d151      	bne.n	8012ba0 <sys_timeout_abs+0xc4>
 8012afc:	4b2a      	ldr	r3, [pc, #168]	; (8012ba8 <sys_timeout_abs+0xcc>)
 8012afe:	22be      	movs	r2, #190	; 0xbe
 8012b00:	492a      	ldr	r1, [pc, #168]	; (8012bac <sys_timeout_abs+0xd0>)
 8012b02:	482b      	ldr	r0, [pc, #172]	; (8012bb0 <sys_timeout_abs+0xd4>)
 8012b04:	f005 f9d0 	bl	8017ea8 <iprintf>
    return;
 8012b08:	e04a      	b.n	8012ba0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012b0a:	693b      	ldr	r3, [r7, #16]
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012b10:	693b      	ldr	r3, [r7, #16]
 8012b12:	68ba      	ldr	r2, [r7, #8]
 8012b14:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012b16:	693b      	ldr	r3, [r7, #16]
 8012b18:	687a      	ldr	r2, [r7, #4]
 8012b1a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012b1c:	693b      	ldr	r3, [r7, #16]
 8012b1e:	68fa      	ldr	r2, [r7, #12]
 8012b20:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012b22:	4b24      	ldr	r3, [pc, #144]	; (8012bb4 <sys_timeout_abs+0xd8>)
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d103      	bne.n	8012b32 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012b2a:	4a22      	ldr	r2, [pc, #136]	; (8012bb4 <sys_timeout_abs+0xd8>)
 8012b2c:	693b      	ldr	r3, [r7, #16]
 8012b2e:	6013      	str	r3, [r2, #0]
    return;
 8012b30:	e037      	b.n	8012ba2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012b32:	693b      	ldr	r3, [r7, #16]
 8012b34:	685a      	ldr	r2, [r3, #4]
 8012b36:	4b1f      	ldr	r3, [pc, #124]	; (8012bb4 <sys_timeout_abs+0xd8>)
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	685b      	ldr	r3, [r3, #4]
 8012b3c:	1ad3      	subs	r3, r2, r3
 8012b3e:	0fdb      	lsrs	r3, r3, #31
 8012b40:	f003 0301 	and.w	r3, r3, #1
 8012b44:	b2db      	uxtb	r3, r3
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d007      	beq.n	8012b5a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012b4a:	4b1a      	ldr	r3, [pc, #104]	; (8012bb4 <sys_timeout_abs+0xd8>)
 8012b4c:	681a      	ldr	r2, [r3, #0]
 8012b4e:	693b      	ldr	r3, [r7, #16]
 8012b50:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012b52:	4a18      	ldr	r2, [pc, #96]	; (8012bb4 <sys_timeout_abs+0xd8>)
 8012b54:	693b      	ldr	r3, [r7, #16]
 8012b56:	6013      	str	r3, [r2, #0]
 8012b58:	e023      	b.n	8012ba2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012b5a:	4b16      	ldr	r3, [pc, #88]	; (8012bb4 <sys_timeout_abs+0xd8>)
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	617b      	str	r3, [r7, #20]
 8012b60:	e01a      	b.n	8012b98 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012b62:	697b      	ldr	r3, [r7, #20]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d00b      	beq.n	8012b82 <sys_timeout_abs+0xa6>
 8012b6a:	693b      	ldr	r3, [r7, #16]
 8012b6c:	685a      	ldr	r2, [r3, #4]
 8012b6e:	697b      	ldr	r3, [r7, #20]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	685b      	ldr	r3, [r3, #4]
 8012b74:	1ad3      	subs	r3, r2, r3
 8012b76:	0fdb      	lsrs	r3, r3, #31
 8012b78:	f003 0301 	and.w	r3, r3, #1
 8012b7c:	b2db      	uxtb	r3, r3
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d007      	beq.n	8012b92 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012b82:	697b      	ldr	r3, [r7, #20]
 8012b84:	681a      	ldr	r2, [r3, #0]
 8012b86:	693b      	ldr	r3, [r7, #16]
 8012b88:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012b8a:	697b      	ldr	r3, [r7, #20]
 8012b8c:	693a      	ldr	r2, [r7, #16]
 8012b8e:	601a      	str	r2, [r3, #0]
        break;
 8012b90:	e007      	b.n	8012ba2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012b92:	697b      	ldr	r3, [r7, #20]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	617b      	str	r3, [r7, #20]
 8012b98:	697b      	ldr	r3, [r7, #20]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d1e1      	bne.n	8012b62 <sys_timeout_abs+0x86>
 8012b9e:	e000      	b.n	8012ba2 <sys_timeout_abs+0xc6>
    return;
 8012ba0:	bf00      	nop
      }
    }
  }
}
 8012ba2:	3718      	adds	r7, #24
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	bd80      	pop	{r7, pc}
 8012ba8:	0801bb48 	.word	0x0801bb48
 8012bac:	0801bb7c 	.word	0x0801bb7c
 8012bb0:	0801bbbc 	.word	0x0801bbbc
 8012bb4:	20008ac4 	.word	0x20008ac4

08012bb8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b086      	sub	sp, #24
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012bc4:	697b      	ldr	r3, [r7, #20]
 8012bc6:	685b      	ldr	r3, [r3, #4]
 8012bc8:	4798      	blx	r3

  now = sys_now();
 8012bca:	f7f1 fe9f 	bl	800490c <sys_now>
 8012bce:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012bd0:	697b      	ldr	r3, [r7, #20]
 8012bd2:	681a      	ldr	r2, [r3, #0]
 8012bd4:	4b0f      	ldr	r3, [pc, #60]	; (8012c14 <lwip_cyclic_timer+0x5c>)
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	4413      	add	r3, r2
 8012bda:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012bdc:	68fa      	ldr	r2, [r7, #12]
 8012bde:	693b      	ldr	r3, [r7, #16]
 8012be0:	1ad3      	subs	r3, r2, r3
 8012be2:	0fdb      	lsrs	r3, r3, #31
 8012be4:	f003 0301 	and.w	r3, r3, #1
 8012be8:	b2db      	uxtb	r3, r3
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d009      	beq.n	8012c02 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012bee:	697b      	ldr	r3, [r7, #20]
 8012bf0:	681a      	ldr	r2, [r3, #0]
 8012bf2:	693b      	ldr	r3, [r7, #16]
 8012bf4:	4413      	add	r3, r2
 8012bf6:	687a      	ldr	r2, [r7, #4]
 8012bf8:	4907      	ldr	r1, [pc, #28]	; (8012c18 <lwip_cyclic_timer+0x60>)
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f7ff ff6e 	bl	8012adc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012c00:	e004      	b.n	8012c0c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012c02:	687a      	ldr	r2, [r7, #4]
 8012c04:	4904      	ldr	r1, [pc, #16]	; (8012c18 <lwip_cyclic_timer+0x60>)
 8012c06:	68f8      	ldr	r0, [r7, #12]
 8012c08:	f7ff ff68 	bl	8012adc <sys_timeout_abs>
}
 8012c0c:	bf00      	nop
 8012c0e:	3718      	adds	r7, #24
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}
 8012c14:	20008ac8 	.word	0x20008ac8
 8012c18:	08012bb9 	.word	0x08012bb9

08012c1c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b082      	sub	sp, #8
 8012c20:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012c22:	2301      	movs	r3, #1
 8012c24:	607b      	str	r3, [r7, #4]
 8012c26:	e00e      	b.n	8012c46 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012c28:	4a0a      	ldr	r2, [pc, #40]	; (8012c54 <sys_timeouts_init+0x38>)
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	00db      	lsls	r3, r3, #3
 8012c34:	4a07      	ldr	r2, [pc, #28]	; (8012c54 <sys_timeouts_init+0x38>)
 8012c36:	4413      	add	r3, r2
 8012c38:	461a      	mov	r2, r3
 8012c3a:	4907      	ldr	r1, [pc, #28]	; (8012c58 <sys_timeouts_init+0x3c>)
 8012c3c:	f000 f80e 	bl	8012c5c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	3301      	adds	r3, #1
 8012c44:	607b      	str	r3, [r7, #4]
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	2b04      	cmp	r3, #4
 8012c4a:	d9ed      	bls.n	8012c28 <sys_timeouts_init+0xc>
  }
}
 8012c4c:	bf00      	nop
 8012c4e:	3708      	adds	r7, #8
 8012c50:	46bd      	mov	sp, r7
 8012c52:	bd80      	pop	{r7, pc}
 8012c54:	08026c44 	.word	0x08026c44
 8012c58:	08012bb9 	.word	0x08012bb9

08012c5c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b086      	sub	sp, #24
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	60f8      	str	r0, [r7, #12]
 8012c64:	60b9      	str	r1, [r7, #8]
 8012c66:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012c6e:	d306      	bcc.n	8012c7e <sys_timeout+0x22>
 8012c70:	4b0a      	ldr	r3, [pc, #40]	; (8012c9c <sys_timeout+0x40>)
 8012c72:	f240 1229 	movw	r2, #297	; 0x129
 8012c76:	490a      	ldr	r1, [pc, #40]	; (8012ca0 <sys_timeout+0x44>)
 8012c78:	480a      	ldr	r0, [pc, #40]	; (8012ca4 <sys_timeout+0x48>)
 8012c7a:	f005 f915 	bl	8017ea8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012c7e:	f7f1 fe45 	bl	800490c <sys_now>
 8012c82:	4602      	mov	r2, r0
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	4413      	add	r3, r2
 8012c88:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012c8a:	687a      	ldr	r2, [r7, #4]
 8012c8c:	68b9      	ldr	r1, [r7, #8]
 8012c8e:	6978      	ldr	r0, [r7, #20]
 8012c90:	f7ff ff24 	bl	8012adc <sys_timeout_abs>
#endif
}
 8012c94:	bf00      	nop
 8012c96:	3718      	adds	r7, #24
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	bd80      	pop	{r7, pc}
 8012c9c:	0801bb48 	.word	0x0801bb48
 8012ca0:	0801bbe4 	.word	0x0801bbe4
 8012ca4:	0801bbbc 	.word	0x0801bbbc

08012ca8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b084      	sub	sp, #16
 8012cac:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012cae:	f7f1 fe2d 	bl	800490c <sys_now>
 8012cb2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012cb4:	4b17      	ldr	r3, [pc, #92]	; (8012d14 <sys_check_timeouts+0x6c>)
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012cba:	68bb      	ldr	r3, [r7, #8]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d022      	beq.n	8012d06 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012cc0:	68bb      	ldr	r3, [r7, #8]
 8012cc2:	685b      	ldr	r3, [r3, #4]
 8012cc4:	68fa      	ldr	r2, [r7, #12]
 8012cc6:	1ad3      	subs	r3, r2, r3
 8012cc8:	0fdb      	lsrs	r3, r3, #31
 8012cca:	f003 0301 	and.w	r3, r3, #1
 8012cce:	b2db      	uxtb	r3, r3
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d11a      	bne.n	8012d0a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012cd4:	68bb      	ldr	r3, [r7, #8]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	4a0e      	ldr	r2, [pc, #56]	; (8012d14 <sys_check_timeouts+0x6c>)
 8012cda:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012cdc:	68bb      	ldr	r3, [r7, #8]
 8012cde:	689b      	ldr	r3, [r3, #8]
 8012ce0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012ce2:	68bb      	ldr	r3, [r7, #8]
 8012ce4:	68db      	ldr	r3, [r3, #12]
 8012ce6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012ce8:	68bb      	ldr	r3, [r7, #8]
 8012cea:	685b      	ldr	r3, [r3, #4]
 8012cec:	4a0a      	ldr	r2, [pc, #40]	; (8012d18 <sys_check_timeouts+0x70>)
 8012cee:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012cf0:	68b9      	ldr	r1, [r7, #8]
 8012cf2:	200a      	movs	r0, #10
 8012cf4:	f7f8 fcc8 	bl	800b688 <memp_free>
    if (handler != NULL) {
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d0da      	beq.n	8012cb4 <sys_check_timeouts+0xc>
      handler(arg);
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	6838      	ldr	r0, [r7, #0]
 8012d02:	4798      	blx	r3
  do {
 8012d04:	e7d6      	b.n	8012cb4 <sys_check_timeouts+0xc>
      return;
 8012d06:	bf00      	nop
 8012d08:	e000      	b.n	8012d0c <sys_check_timeouts+0x64>
      return;
 8012d0a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012d0c:	3710      	adds	r7, #16
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	bd80      	pop	{r7, pc}
 8012d12:	bf00      	nop
 8012d14:	20008ac4 	.word	0x20008ac4
 8012d18:	20008ac8 	.word	0x20008ac8

08012d1c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b082      	sub	sp, #8
 8012d20:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012d22:	4b16      	ldr	r3, [pc, #88]	; (8012d7c <sys_timeouts_sleeptime+0x60>)
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d102      	bne.n	8012d30 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8012d2e:	e020      	b.n	8012d72 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012d30:	f7f1 fdec 	bl	800490c <sys_now>
 8012d34:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012d36:	4b11      	ldr	r3, [pc, #68]	; (8012d7c <sys_timeouts_sleeptime+0x60>)
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	685a      	ldr	r2, [r3, #4]
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	1ad3      	subs	r3, r2, r3
 8012d40:	0fdb      	lsrs	r3, r3, #31
 8012d42:	f003 0301 	and.w	r3, r3, #1
 8012d46:	b2db      	uxtb	r3, r3
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d001      	beq.n	8012d50 <sys_timeouts_sleeptime+0x34>
    return 0;
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	e010      	b.n	8012d72 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012d50:	4b0a      	ldr	r3, [pc, #40]	; (8012d7c <sys_timeouts_sleeptime+0x60>)
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	685a      	ldr	r2, [r3, #4]
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	1ad3      	subs	r3, r2, r3
 8012d5a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012d5c:	683b      	ldr	r3, [r7, #0]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	da06      	bge.n	8012d70 <sys_timeouts_sleeptime+0x54>
 8012d62:	4b07      	ldr	r3, [pc, #28]	; (8012d80 <sys_timeouts_sleeptime+0x64>)
 8012d64:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012d68:	4906      	ldr	r1, [pc, #24]	; (8012d84 <sys_timeouts_sleeptime+0x68>)
 8012d6a:	4807      	ldr	r0, [pc, #28]	; (8012d88 <sys_timeouts_sleeptime+0x6c>)
 8012d6c:	f005 f89c 	bl	8017ea8 <iprintf>
    return ret;
 8012d70:	683b      	ldr	r3, [r7, #0]
  }
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	3708      	adds	r7, #8
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bd80      	pop	{r7, pc}
 8012d7a:	bf00      	nop
 8012d7c:	20008ac4 	.word	0x20008ac4
 8012d80:	0801bb48 	.word	0x0801bb48
 8012d84:	0801bc1c 	.word	0x0801bc1c
 8012d88:	0801bbbc 	.word	0x0801bbbc

08012d8c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012d90:	f005 f8a2 	bl	8017ed8 <rand>
 8012d94:	4603      	mov	r3, r0
 8012d96:	b29b      	uxth	r3, r3
 8012d98:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012d9c:	b29b      	uxth	r3, r3
 8012d9e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012da2:	b29a      	uxth	r2, r3
 8012da4:	4b01      	ldr	r3, [pc, #4]	; (8012dac <udp_init+0x20>)
 8012da6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012da8:	bf00      	nop
 8012daa:	bd80      	pop	{r7, pc}
 8012dac:	20000018 	.word	0x20000018

08012db0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012db0:	b480      	push	{r7}
 8012db2:	b083      	sub	sp, #12
 8012db4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012db6:	2300      	movs	r3, #0
 8012db8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012dba:	4b17      	ldr	r3, [pc, #92]	; (8012e18 <udp_new_port+0x68>)
 8012dbc:	881b      	ldrh	r3, [r3, #0]
 8012dbe:	1c5a      	adds	r2, r3, #1
 8012dc0:	b291      	uxth	r1, r2
 8012dc2:	4a15      	ldr	r2, [pc, #84]	; (8012e18 <udp_new_port+0x68>)
 8012dc4:	8011      	strh	r1, [r2, #0]
 8012dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012dca:	4293      	cmp	r3, r2
 8012dcc:	d103      	bne.n	8012dd6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012dce:	4b12      	ldr	r3, [pc, #72]	; (8012e18 <udp_new_port+0x68>)
 8012dd0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012dd4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012dd6:	4b11      	ldr	r3, [pc, #68]	; (8012e1c <udp_new_port+0x6c>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	603b      	str	r3, [r7, #0]
 8012ddc:	e011      	b.n	8012e02 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012dde:	683b      	ldr	r3, [r7, #0]
 8012de0:	8a5a      	ldrh	r2, [r3, #18]
 8012de2:	4b0d      	ldr	r3, [pc, #52]	; (8012e18 <udp_new_port+0x68>)
 8012de4:	881b      	ldrh	r3, [r3, #0]
 8012de6:	429a      	cmp	r2, r3
 8012de8:	d108      	bne.n	8012dfc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012dea:	88fb      	ldrh	r3, [r7, #6]
 8012dec:	3301      	adds	r3, #1
 8012dee:	80fb      	strh	r3, [r7, #6]
 8012df0:	88fb      	ldrh	r3, [r7, #6]
 8012df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012df6:	d3e0      	bcc.n	8012dba <udp_new_port+0xa>
        return 0;
 8012df8:	2300      	movs	r3, #0
 8012dfa:	e007      	b.n	8012e0c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012dfc:	683b      	ldr	r3, [r7, #0]
 8012dfe:	68db      	ldr	r3, [r3, #12]
 8012e00:	603b      	str	r3, [r7, #0]
 8012e02:	683b      	ldr	r3, [r7, #0]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d1ea      	bne.n	8012dde <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012e08:	4b03      	ldr	r3, [pc, #12]	; (8012e18 <udp_new_port+0x68>)
 8012e0a:	881b      	ldrh	r3, [r3, #0]
}
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	370c      	adds	r7, #12
 8012e10:	46bd      	mov	sp, r7
 8012e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e16:	4770      	bx	lr
 8012e18:	20000018 	.word	0x20000018
 8012e1c:	2000f52c 	.word	0x2000f52c

08012e20 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b084      	sub	sp, #16
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	60f8      	str	r0, [r7, #12]
 8012e28:	60b9      	str	r1, [r7, #8]
 8012e2a:	4613      	mov	r3, r2
 8012e2c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d105      	bne.n	8012e40 <udp_input_local_match+0x20>
 8012e34:	4b27      	ldr	r3, [pc, #156]	; (8012ed4 <udp_input_local_match+0xb4>)
 8012e36:	2287      	movs	r2, #135	; 0x87
 8012e38:	4927      	ldr	r1, [pc, #156]	; (8012ed8 <udp_input_local_match+0xb8>)
 8012e3a:	4828      	ldr	r0, [pc, #160]	; (8012edc <udp_input_local_match+0xbc>)
 8012e3c:	f005 f834 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d105      	bne.n	8012e52 <udp_input_local_match+0x32>
 8012e46:	4b23      	ldr	r3, [pc, #140]	; (8012ed4 <udp_input_local_match+0xb4>)
 8012e48:	2288      	movs	r2, #136	; 0x88
 8012e4a:	4925      	ldr	r1, [pc, #148]	; (8012ee0 <udp_input_local_match+0xc0>)
 8012e4c:	4823      	ldr	r0, [pc, #140]	; (8012edc <udp_input_local_match+0xbc>)
 8012e4e:	f005 f82b 	bl	8017ea8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	7a1b      	ldrb	r3, [r3, #8]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d00b      	beq.n	8012e72 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	7a1a      	ldrb	r2, [r3, #8]
 8012e5e:	4b21      	ldr	r3, [pc, #132]	; (8012ee4 <udp_input_local_match+0xc4>)
 8012e60:	685b      	ldr	r3, [r3, #4]
 8012e62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012e66:	3301      	adds	r3, #1
 8012e68:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012e6a:	429a      	cmp	r2, r3
 8012e6c:	d001      	beq.n	8012e72 <udp_input_local_match+0x52>
    return 0;
 8012e6e:	2300      	movs	r3, #0
 8012e70:	e02b      	b.n	8012eca <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012e72:	79fb      	ldrb	r3, [r7, #7]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d018      	beq.n	8012eaa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d013      	beq.n	8012ea6 <udp_input_local_match+0x86>
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d00f      	beq.n	8012ea6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012e86:	4b17      	ldr	r3, [pc, #92]	; (8012ee4 <udp_input_local_match+0xc4>)
 8012e88:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e8e:	d00a      	beq.n	8012ea6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	681a      	ldr	r2, [r3, #0]
 8012e94:	4b13      	ldr	r3, [pc, #76]	; (8012ee4 <udp_input_local_match+0xc4>)
 8012e96:	695b      	ldr	r3, [r3, #20]
 8012e98:	405a      	eors	r2, r3
 8012e9a:	68bb      	ldr	r3, [r7, #8]
 8012e9c:	3308      	adds	r3, #8
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d110      	bne.n	8012ec8 <udp_input_local_match+0xa8>
          return 1;
 8012ea6:	2301      	movs	r3, #1
 8012ea8:	e00f      	b.n	8012eca <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d009      	beq.n	8012ec4 <udp_input_local_match+0xa4>
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d005      	beq.n	8012ec4 <udp_input_local_match+0xa4>
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	681a      	ldr	r2, [r3, #0]
 8012ebc:	4b09      	ldr	r3, [pc, #36]	; (8012ee4 <udp_input_local_match+0xc4>)
 8012ebe:	695b      	ldr	r3, [r3, #20]
 8012ec0:	429a      	cmp	r2, r3
 8012ec2:	d101      	bne.n	8012ec8 <udp_input_local_match+0xa8>
        return 1;
 8012ec4:	2301      	movs	r3, #1
 8012ec6:	e000      	b.n	8012eca <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012ec8:	2300      	movs	r3, #0
}
 8012eca:	4618      	mov	r0, r3
 8012ecc:	3710      	adds	r7, #16
 8012ece:	46bd      	mov	sp, r7
 8012ed0:	bd80      	pop	{r7, pc}
 8012ed2:	bf00      	nop
 8012ed4:	0801bc30 	.word	0x0801bc30
 8012ed8:	0801bc60 	.word	0x0801bc60
 8012edc:	0801bc84 	.word	0x0801bc84
 8012ee0:	0801bcac 	.word	0x0801bcac
 8012ee4:	2000bde0 	.word	0x2000bde0

08012ee8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012ee8:	b590      	push	{r4, r7, lr}
 8012eea:	b08d      	sub	sp, #52	; 0x34
 8012eec:	af02      	add	r7, sp, #8
 8012eee:	6078      	str	r0, [r7, #4]
 8012ef0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d105      	bne.n	8012f08 <udp_input+0x20>
 8012efc:	4b7c      	ldr	r3, [pc, #496]	; (80130f0 <udp_input+0x208>)
 8012efe:	22cf      	movs	r2, #207	; 0xcf
 8012f00:	497c      	ldr	r1, [pc, #496]	; (80130f4 <udp_input+0x20c>)
 8012f02:	487d      	ldr	r0, [pc, #500]	; (80130f8 <udp_input+0x210>)
 8012f04:	f004 ffd0 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012f08:	683b      	ldr	r3, [r7, #0]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d105      	bne.n	8012f1a <udp_input+0x32>
 8012f0e:	4b78      	ldr	r3, [pc, #480]	; (80130f0 <udp_input+0x208>)
 8012f10:	22d0      	movs	r2, #208	; 0xd0
 8012f12:	497a      	ldr	r1, [pc, #488]	; (80130fc <udp_input+0x214>)
 8012f14:	4878      	ldr	r0, [pc, #480]	; (80130f8 <udp_input+0x210>)
 8012f16:	f004 ffc7 	bl	8017ea8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	895b      	ldrh	r3, [r3, #10]
 8012f1e:	2b07      	cmp	r3, #7
 8012f20:	d803      	bhi.n	8012f2a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012f22:	6878      	ldr	r0, [r7, #4]
 8012f24:	f7f9 fa5c 	bl	800c3e0 <pbuf_free>
    goto end;
 8012f28:	e0de      	b.n	80130e8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	685b      	ldr	r3, [r3, #4]
 8012f2e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012f30:	4b73      	ldr	r3, [pc, #460]	; (8013100 <udp_input+0x218>)
 8012f32:	695a      	ldr	r2, [r3, #20]
 8012f34:	4b72      	ldr	r3, [pc, #456]	; (8013100 <udp_input+0x218>)
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	4619      	mov	r1, r3
 8012f3a:	4610      	mov	r0, r2
 8012f3c:	f003 fe20 	bl	8016b80 <ip4_addr_isbroadcast_u32>
 8012f40:	4603      	mov	r3, r0
 8012f42:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012f44:	697b      	ldr	r3, [r7, #20]
 8012f46:	881b      	ldrh	r3, [r3, #0]
 8012f48:	b29b      	uxth	r3, r3
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f7f7 fe5e 	bl	800ac0c <lwip_htons>
 8012f50:	4603      	mov	r3, r0
 8012f52:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012f54:	697b      	ldr	r3, [r7, #20]
 8012f56:	885b      	ldrh	r3, [r3, #2]
 8012f58:	b29b      	uxth	r3, r3
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f7f7 fe56 	bl	800ac0c <lwip_htons>
 8012f60:	4603      	mov	r3, r0
 8012f62:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012f64:	2300      	movs	r3, #0
 8012f66:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012f68:	2300      	movs	r3, #0
 8012f6a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f70:	4b64      	ldr	r3, [pc, #400]	; (8013104 <udp_input+0x21c>)
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	627b      	str	r3, [r7, #36]	; 0x24
 8012f76:	e054      	b.n	8013022 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f7a:	8a5b      	ldrh	r3, [r3, #18]
 8012f7c:	89fa      	ldrh	r2, [r7, #14]
 8012f7e:	429a      	cmp	r2, r3
 8012f80:	d14a      	bne.n	8013018 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012f82:	7cfb      	ldrb	r3, [r7, #19]
 8012f84:	461a      	mov	r2, r3
 8012f86:	6839      	ldr	r1, [r7, #0]
 8012f88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f8a:	f7ff ff49 	bl	8012e20 <udp_input_local_match>
 8012f8e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d041      	beq.n	8013018 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f96:	7c1b      	ldrb	r3, [r3, #16]
 8012f98:	f003 0304 	and.w	r3, r3, #4
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d11d      	bne.n	8012fdc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012fa0:	69fb      	ldr	r3, [r7, #28]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d102      	bne.n	8012fac <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa8:	61fb      	str	r3, [r7, #28]
 8012faa:	e017      	b.n	8012fdc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012fac:	7cfb      	ldrb	r3, [r7, #19]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d014      	beq.n	8012fdc <udp_input+0xf4>
 8012fb2:	4b53      	ldr	r3, [pc, #332]	; (8013100 <udp_input+0x218>)
 8012fb4:	695b      	ldr	r3, [r3, #20]
 8012fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fba:	d10f      	bne.n	8012fdc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012fbc:	69fb      	ldr	r3, [r7, #28]
 8012fbe:	681a      	ldr	r2, [r3, #0]
 8012fc0:	683b      	ldr	r3, [r7, #0]
 8012fc2:	3304      	adds	r3, #4
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	429a      	cmp	r2, r3
 8012fc8:	d008      	beq.n	8012fdc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fcc:	681a      	ldr	r2, [r3, #0]
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	3304      	adds	r3, #4
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	d101      	bne.n	8012fdc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fda:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fde:	8a9b      	ldrh	r3, [r3, #20]
 8012fe0:	8a3a      	ldrh	r2, [r7, #16]
 8012fe2:	429a      	cmp	r2, r3
 8012fe4:	d118      	bne.n	8013018 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fe8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d005      	beq.n	8012ffa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ff0:	685a      	ldr	r2, [r3, #4]
 8012ff2:	4b43      	ldr	r3, [pc, #268]	; (8013100 <udp_input+0x218>)
 8012ff4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012ff6:	429a      	cmp	r2, r3
 8012ff8:	d10e      	bne.n	8013018 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012ffa:	6a3b      	ldr	r3, [r7, #32]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d014      	beq.n	801302a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013002:	68da      	ldr	r2, [r3, #12]
 8013004:	6a3b      	ldr	r3, [r7, #32]
 8013006:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013008:	4b3e      	ldr	r3, [pc, #248]	; (8013104 <udp_input+0x21c>)
 801300a:	681a      	ldr	r2, [r3, #0]
 801300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801300e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013010:	4a3c      	ldr	r2, [pc, #240]	; (8013104 <udp_input+0x21c>)
 8013012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013014:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013016:	e008      	b.n	801302a <udp_input+0x142>
      }
    }

    prev = pcb;
 8013018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801301a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801301e:	68db      	ldr	r3, [r3, #12]
 8013020:	627b      	str	r3, [r7, #36]	; 0x24
 8013022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013024:	2b00      	cmp	r3, #0
 8013026:	d1a7      	bne.n	8012f78 <udp_input+0x90>
 8013028:	e000      	b.n	801302c <udp_input+0x144>
        break;
 801302a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801302e:	2b00      	cmp	r3, #0
 8013030:	d101      	bne.n	8013036 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013032:	69fb      	ldr	r3, [r7, #28]
 8013034:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013038:	2b00      	cmp	r3, #0
 801303a:	d002      	beq.n	8013042 <udp_input+0x15a>
    for_us = 1;
 801303c:	2301      	movs	r3, #1
 801303e:	76fb      	strb	r3, [r7, #27]
 8013040:	e00a      	b.n	8013058 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	3304      	adds	r3, #4
 8013046:	681a      	ldr	r2, [r3, #0]
 8013048:	4b2d      	ldr	r3, [pc, #180]	; (8013100 <udp_input+0x218>)
 801304a:	695b      	ldr	r3, [r3, #20]
 801304c:	429a      	cmp	r2, r3
 801304e:	bf0c      	ite	eq
 8013050:	2301      	moveq	r3, #1
 8013052:	2300      	movne	r3, #0
 8013054:	b2db      	uxtb	r3, r3
 8013056:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013058:	7efb      	ldrb	r3, [r7, #27]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d041      	beq.n	80130e2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801305e:	2108      	movs	r1, #8
 8013060:	6878      	ldr	r0, [r7, #4]
 8013062:	f7f9 f937 	bl	800c2d4 <pbuf_remove_header>
 8013066:	4603      	mov	r3, r0
 8013068:	2b00      	cmp	r3, #0
 801306a:	d00a      	beq.n	8013082 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801306c:	4b20      	ldr	r3, [pc, #128]	; (80130f0 <udp_input+0x208>)
 801306e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013072:	4925      	ldr	r1, [pc, #148]	; (8013108 <udp_input+0x220>)
 8013074:	4820      	ldr	r0, [pc, #128]	; (80130f8 <udp_input+0x210>)
 8013076:	f004 ff17 	bl	8017ea8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801307a:	6878      	ldr	r0, [r7, #4]
 801307c:	f7f9 f9b0 	bl	800c3e0 <pbuf_free>
      goto end;
 8013080:	e032      	b.n	80130e8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013084:	2b00      	cmp	r3, #0
 8013086:	d012      	beq.n	80130ae <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801308a:	699b      	ldr	r3, [r3, #24]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d00a      	beq.n	80130a6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013092:	699c      	ldr	r4, [r3, #24]
 8013094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013096:	69d8      	ldr	r0, [r3, #28]
 8013098:	8a3b      	ldrh	r3, [r7, #16]
 801309a:	9300      	str	r3, [sp, #0]
 801309c:	4b1b      	ldr	r3, [pc, #108]	; (801310c <udp_input+0x224>)
 801309e:	687a      	ldr	r2, [r7, #4]
 80130a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80130a2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80130a4:	e021      	b.n	80130ea <udp_input+0x202>
        pbuf_free(p);
 80130a6:	6878      	ldr	r0, [r7, #4]
 80130a8:	f7f9 f99a 	bl	800c3e0 <pbuf_free>
        goto end;
 80130ac:	e01c      	b.n	80130e8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80130ae:	7cfb      	ldrb	r3, [r7, #19]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d112      	bne.n	80130da <udp_input+0x1f2>
 80130b4:	4b12      	ldr	r3, [pc, #72]	; (8013100 <udp_input+0x218>)
 80130b6:	695b      	ldr	r3, [r3, #20]
 80130b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80130bc:	2be0      	cmp	r3, #224	; 0xe0
 80130be:	d00c      	beq.n	80130da <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80130c0:	4b0f      	ldr	r3, [pc, #60]	; (8013100 <udp_input+0x218>)
 80130c2:	899b      	ldrh	r3, [r3, #12]
 80130c4:	3308      	adds	r3, #8
 80130c6:	b29b      	uxth	r3, r3
 80130c8:	b21b      	sxth	r3, r3
 80130ca:	4619      	mov	r1, r3
 80130cc:	6878      	ldr	r0, [r7, #4]
 80130ce:	f7f9 f974 	bl	800c3ba <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80130d2:	2103      	movs	r1, #3
 80130d4:	6878      	ldr	r0, [r7, #4]
 80130d6:	f003 fa17 	bl	8016508 <icmp_dest_unreach>
      pbuf_free(p);
 80130da:	6878      	ldr	r0, [r7, #4]
 80130dc:	f7f9 f980 	bl	800c3e0 <pbuf_free>
  return;
 80130e0:	e003      	b.n	80130ea <udp_input+0x202>
    pbuf_free(p);
 80130e2:	6878      	ldr	r0, [r7, #4]
 80130e4:	f7f9 f97c 	bl	800c3e0 <pbuf_free>
  return;
 80130e8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80130ea:	372c      	adds	r7, #44	; 0x2c
 80130ec:	46bd      	mov	sp, r7
 80130ee:	bd90      	pop	{r4, r7, pc}
 80130f0:	0801bc30 	.word	0x0801bc30
 80130f4:	0801bcd4 	.word	0x0801bcd4
 80130f8:	0801bc84 	.word	0x0801bc84
 80130fc:	0801bcec 	.word	0x0801bcec
 8013100:	2000bde0 	.word	0x2000bde0
 8013104:	2000f52c 	.word	0x2000f52c
 8013108:	0801bd08 	.word	0x0801bd08
 801310c:	2000bdf0 	.word	0x2000bdf0

08013110 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b088      	sub	sp, #32
 8013114:	af02      	add	r7, sp, #8
 8013116:	60f8      	str	r0, [r7, #12]
 8013118:	60b9      	str	r1, [r7, #8]
 801311a:	607a      	str	r2, [r7, #4]
 801311c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d109      	bne.n	8013138 <udp_sendto_if+0x28>
 8013124:	4b2e      	ldr	r3, [pc, #184]	; (80131e0 <udp_sendto_if+0xd0>)
 8013126:	f44f 7220 	mov.w	r2, #640	; 0x280
 801312a:	492e      	ldr	r1, [pc, #184]	; (80131e4 <udp_sendto_if+0xd4>)
 801312c:	482e      	ldr	r0, [pc, #184]	; (80131e8 <udp_sendto_if+0xd8>)
 801312e:	f004 febb 	bl	8017ea8 <iprintf>
 8013132:	f06f 030f 	mvn.w	r3, #15
 8013136:	e04f      	b.n	80131d8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013138:	68bb      	ldr	r3, [r7, #8]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d109      	bne.n	8013152 <udp_sendto_if+0x42>
 801313e:	4b28      	ldr	r3, [pc, #160]	; (80131e0 <udp_sendto_if+0xd0>)
 8013140:	f240 2281 	movw	r2, #641	; 0x281
 8013144:	4929      	ldr	r1, [pc, #164]	; (80131ec <udp_sendto_if+0xdc>)
 8013146:	4828      	ldr	r0, [pc, #160]	; (80131e8 <udp_sendto_if+0xd8>)
 8013148:	f004 feae 	bl	8017ea8 <iprintf>
 801314c:	f06f 030f 	mvn.w	r3, #15
 8013150:	e042      	b.n	80131d8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d109      	bne.n	801316c <udp_sendto_if+0x5c>
 8013158:	4b21      	ldr	r3, [pc, #132]	; (80131e0 <udp_sendto_if+0xd0>)
 801315a:	f240 2282 	movw	r2, #642	; 0x282
 801315e:	4924      	ldr	r1, [pc, #144]	; (80131f0 <udp_sendto_if+0xe0>)
 8013160:	4821      	ldr	r0, [pc, #132]	; (80131e8 <udp_sendto_if+0xd8>)
 8013162:	f004 fea1 	bl	8017ea8 <iprintf>
 8013166:	f06f 030f 	mvn.w	r3, #15
 801316a:	e035      	b.n	80131d8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801316c:	6a3b      	ldr	r3, [r7, #32]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d109      	bne.n	8013186 <udp_sendto_if+0x76>
 8013172:	4b1b      	ldr	r3, [pc, #108]	; (80131e0 <udp_sendto_if+0xd0>)
 8013174:	f240 2283 	movw	r2, #643	; 0x283
 8013178:	491e      	ldr	r1, [pc, #120]	; (80131f4 <udp_sendto_if+0xe4>)
 801317a:	481b      	ldr	r0, [pc, #108]	; (80131e8 <udp_sendto_if+0xd8>)
 801317c:	f004 fe94 	bl	8017ea8 <iprintf>
 8013180:	f06f 030f 	mvn.w	r3, #15
 8013184:	e028      	b.n	80131d8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d009      	beq.n	80131a0 <udp_sendto_if+0x90>
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d005      	beq.n	80131a0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801319c:	2be0      	cmp	r3, #224	; 0xe0
 801319e:	d103      	bne.n	80131a8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80131a0:	6a3b      	ldr	r3, [r7, #32]
 80131a2:	3304      	adds	r3, #4
 80131a4:	617b      	str	r3, [r7, #20]
 80131a6:	e00b      	b.n	80131c0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	681a      	ldr	r2, [r3, #0]
 80131ac:	6a3b      	ldr	r3, [r7, #32]
 80131ae:	3304      	adds	r3, #4
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	429a      	cmp	r2, r3
 80131b4:	d002      	beq.n	80131bc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80131b6:	f06f 0303 	mvn.w	r3, #3
 80131ba:	e00d      	b.n	80131d8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80131c0:	887a      	ldrh	r2, [r7, #2]
 80131c2:	697b      	ldr	r3, [r7, #20]
 80131c4:	9301      	str	r3, [sp, #4]
 80131c6:	6a3b      	ldr	r3, [r7, #32]
 80131c8:	9300      	str	r3, [sp, #0]
 80131ca:	4613      	mov	r3, r2
 80131cc:	687a      	ldr	r2, [r7, #4]
 80131ce:	68b9      	ldr	r1, [r7, #8]
 80131d0:	68f8      	ldr	r0, [r7, #12]
 80131d2:	f000 f811 	bl	80131f8 <udp_sendto_if_src>
 80131d6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80131d8:	4618      	mov	r0, r3
 80131da:	3718      	adds	r7, #24
 80131dc:	46bd      	mov	sp, r7
 80131de:	bd80      	pop	{r7, pc}
 80131e0:	0801bc30 	.word	0x0801bc30
 80131e4:	0801bda4 	.word	0x0801bda4
 80131e8:	0801bc84 	.word	0x0801bc84
 80131ec:	0801bdc0 	.word	0x0801bdc0
 80131f0:	0801bddc 	.word	0x0801bddc
 80131f4:	0801bdfc 	.word	0x0801bdfc

080131f8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b08c      	sub	sp, #48	; 0x30
 80131fc:	af04      	add	r7, sp, #16
 80131fe:	60f8      	str	r0, [r7, #12]
 8013200:	60b9      	str	r1, [r7, #8]
 8013202:	607a      	str	r2, [r7, #4]
 8013204:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d109      	bne.n	8013220 <udp_sendto_if_src+0x28>
 801320c:	4b65      	ldr	r3, [pc, #404]	; (80133a4 <udp_sendto_if_src+0x1ac>)
 801320e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013212:	4965      	ldr	r1, [pc, #404]	; (80133a8 <udp_sendto_if_src+0x1b0>)
 8013214:	4865      	ldr	r0, [pc, #404]	; (80133ac <udp_sendto_if_src+0x1b4>)
 8013216:	f004 fe47 	bl	8017ea8 <iprintf>
 801321a:	f06f 030f 	mvn.w	r3, #15
 801321e:	e0bc      	b.n	801339a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013220:	68bb      	ldr	r3, [r7, #8]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d109      	bne.n	801323a <udp_sendto_if_src+0x42>
 8013226:	4b5f      	ldr	r3, [pc, #380]	; (80133a4 <udp_sendto_if_src+0x1ac>)
 8013228:	f240 22d2 	movw	r2, #722	; 0x2d2
 801322c:	4960      	ldr	r1, [pc, #384]	; (80133b0 <udp_sendto_if_src+0x1b8>)
 801322e:	485f      	ldr	r0, [pc, #380]	; (80133ac <udp_sendto_if_src+0x1b4>)
 8013230:	f004 fe3a 	bl	8017ea8 <iprintf>
 8013234:	f06f 030f 	mvn.w	r3, #15
 8013238:	e0af      	b.n	801339a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d109      	bne.n	8013254 <udp_sendto_if_src+0x5c>
 8013240:	4b58      	ldr	r3, [pc, #352]	; (80133a4 <udp_sendto_if_src+0x1ac>)
 8013242:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013246:	495b      	ldr	r1, [pc, #364]	; (80133b4 <udp_sendto_if_src+0x1bc>)
 8013248:	4858      	ldr	r0, [pc, #352]	; (80133ac <udp_sendto_if_src+0x1b4>)
 801324a:	f004 fe2d 	bl	8017ea8 <iprintf>
 801324e:	f06f 030f 	mvn.w	r3, #15
 8013252:	e0a2      	b.n	801339a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013256:	2b00      	cmp	r3, #0
 8013258:	d109      	bne.n	801326e <udp_sendto_if_src+0x76>
 801325a:	4b52      	ldr	r3, [pc, #328]	; (80133a4 <udp_sendto_if_src+0x1ac>)
 801325c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013260:	4955      	ldr	r1, [pc, #340]	; (80133b8 <udp_sendto_if_src+0x1c0>)
 8013262:	4852      	ldr	r0, [pc, #328]	; (80133ac <udp_sendto_if_src+0x1b4>)
 8013264:	f004 fe20 	bl	8017ea8 <iprintf>
 8013268:	f06f 030f 	mvn.w	r3, #15
 801326c:	e095      	b.n	801339a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013270:	2b00      	cmp	r3, #0
 8013272:	d109      	bne.n	8013288 <udp_sendto_if_src+0x90>
 8013274:	4b4b      	ldr	r3, [pc, #300]	; (80133a4 <udp_sendto_if_src+0x1ac>)
 8013276:	f240 22d5 	movw	r2, #725	; 0x2d5
 801327a:	4950      	ldr	r1, [pc, #320]	; (80133bc <udp_sendto_if_src+0x1c4>)
 801327c:	484b      	ldr	r0, [pc, #300]	; (80133ac <udp_sendto_if_src+0x1b4>)
 801327e:	f004 fe13 	bl	8017ea8 <iprintf>
 8013282:	f06f 030f 	mvn.w	r3, #15
 8013286:	e088      	b.n	801339a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	8a5b      	ldrh	r3, [r3, #18]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d10f      	bne.n	80132b0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013290:	68f9      	ldr	r1, [r7, #12]
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	8a5b      	ldrh	r3, [r3, #18]
 8013296:	461a      	mov	r2, r3
 8013298:	68f8      	ldr	r0, [r7, #12]
 801329a:	f000 f893 	bl	80133c4 <udp_bind>
 801329e:	4603      	mov	r3, r0
 80132a0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80132a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d002      	beq.n	80132b0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80132aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80132ae:	e074      	b.n	801339a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80132b0:	68bb      	ldr	r3, [r7, #8]
 80132b2:	891b      	ldrh	r3, [r3, #8]
 80132b4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80132b8:	4293      	cmp	r3, r2
 80132ba:	d902      	bls.n	80132c2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80132bc:	f04f 33ff 	mov.w	r3, #4294967295
 80132c0:	e06b      	b.n	801339a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80132c2:	2108      	movs	r1, #8
 80132c4:	68b8      	ldr	r0, [r7, #8]
 80132c6:	f7f8 fff5 	bl	800c2b4 <pbuf_add_header>
 80132ca:	4603      	mov	r3, r0
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d015      	beq.n	80132fc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80132d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80132d4:	2108      	movs	r1, #8
 80132d6:	2022      	movs	r0, #34	; 0x22
 80132d8:	f7f8 fda2 	bl	800be20 <pbuf_alloc>
 80132dc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80132de:	69fb      	ldr	r3, [r7, #28]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d102      	bne.n	80132ea <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80132e4:	f04f 33ff 	mov.w	r3, #4294967295
 80132e8:	e057      	b.n	801339a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80132ea:	68bb      	ldr	r3, [r7, #8]
 80132ec:	891b      	ldrh	r3, [r3, #8]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d006      	beq.n	8013300 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80132f2:	68b9      	ldr	r1, [r7, #8]
 80132f4:	69f8      	ldr	r0, [r7, #28]
 80132f6:	f7f9 f997 	bl	800c628 <pbuf_chain>
 80132fa:	e001      	b.n	8013300 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80132fc:	68bb      	ldr	r3, [r7, #8]
 80132fe:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013300:	69fb      	ldr	r3, [r7, #28]
 8013302:	895b      	ldrh	r3, [r3, #10]
 8013304:	2b07      	cmp	r3, #7
 8013306:	d806      	bhi.n	8013316 <udp_sendto_if_src+0x11e>
 8013308:	4b26      	ldr	r3, [pc, #152]	; (80133a4 <udp_sendto_if_src+0x1ac>)
 801330a:	f240 320e 	movw	r2, #782	; 0x30e
 801330e:	492c      	ldr	r1, [pc, #176]	; (80133c0 <udp_sendto_if_src+0x1c8>)
 8013310:	4826      	ldr	r0, [pc, #152]	; (80133ac <udp_sendto_if_src+0x1b4>)
 8013312:	f004 fdc9 	bl	8017ea8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013316:	69fb      	ldr	r3, [r7, #28]
 8013318:	685b      	ldr	r3, [r3, #4]
 801331a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	8a5b      	ldrh	r3, [r3, #18]
 8013320:	4618      	mov	r0, r3
 8013322:	f7f7 fc73 	bl	800ac0c <lwip_htons>
 8013326:	4603      	mov	r3, r0
 8013328:	461a      	mov	r2, r3
 801332a:	697b      	ldr	r3, [r7, #20]
 801332c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801332e:	887b      	ldrh	r3, [r7, #2]
 8013330:	4618      	mov	r0, r3
 8013332:	f7f7 fc6b 	bl	800ac0c <lwip_htons>
 8013336:	4603      	mov	r3, r0
 8013338:	461a      	mov	r2, r3
 801333a:	697b      	ldr	r3, [r7, #20]
 801333c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	2200      	movs	r2, #0
 8013342:	719a      	strb	r2, [r3, #6]
 8013344:	2200      	movs	r2, #0
 8013346:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013348:	69fb      	ldr	r3, [r7, #28]
 801334a:	891b      	ldrh	r3, [r3, #8]
 801334c:	4618      	mov	r0, r3
 801334e:	f7f7 fc5d 	bl	800ac0c <lwip_htons>
 8013352:	4603      	mov	r3, r0
 8013354:	461a      	mov	r2, r3
 8013356:	697b      	ldr	r3, [r7, #20]
 8013358:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801335a:	2311      	movs	r3, #17
 801335c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	7adb      	ldrb	r3, [r3, #11]
 8013362:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	7a9b      	ldrb	r3, [r3, #10]
 8013368:	7cb9      	ldrb	r1, [r7, #18]
 801336a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801336c:	9202      	str	r2, [sp, #8]
 801336e:	7cfa      	ldrb	r2, [r7, #19]
 8013370:	9201      	str	r2, [sp, #4]
 8013372:	9300      	str	r3, [sp, #0]
 8013374:	460b      	mov	r3, r1
 8013376:	687a      	ldr	r2, [r7, #4]
 8013378:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801337a:	69f8      	ldr	r0, [r7, #28]
 801337c:	f003 fb52 	bl	8016a24 <ip4_output_if_src>
 8013380:	4603      	mov	r3, r0
 8013382:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013384:	69fa      	ldr	r2, [r7, #28]
 8013386:	68bb      	ldr	r3, [r7, #8]
 8013388:	429a      	cmp	r2, r3
 801338a:	d004      	beq.n	8013396 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801338c:	69f8      	ldr	r0, [r7, #28]
 801338e:	f7f9 f827 	bl	800c3e0 <pbuf_free>
    q = NULL;
 8013392:	2300      	movs	r3, #0
 8013394:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013396:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801339a:	4618      	mov	r0, r3
 801339c:	3720      	adds	r7, #32
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd80      	pop	{r7, pc}
 80133a2:	bf00      	nop
 80133a4:	0801bc30 	.word	0x0801bc30
 80133a8:	0801be1c 	.word	0x0801be1c
 80133ac:	0801bc84 	.word	0x0801bc84
 80133b0:	0801be3c 	.word	0x0801be3c
 80133b4:	0801be5c 	.word	0x0801be5c
 80133b8:	0801be80 	.word	0x0801be80
 80133bc:	0801bea4 	.word	0x0801bea4
 80133c0:	0801bec8 	.word	0x0801bec8

080133c4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b086      	sub	sp, #24
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	60f8      	str	r0, [r7, #12]
 80133cc:	60b9      	str	r1, [r7, #8]
 80133ce:	4613      	mov	r3, r2
 80133d0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80133d2:	68bb      	ldr	r3, [r7, #8]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d101      	bne.n	80133dc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80133d8:	4b39      	ldr	r3, [pc, #228]	; (80134c0 <udp_bind+0xfc>)
 80133da:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d109      	bne.n	80133f6 <udp_bind+0x32>
 80133e2:	4b38      	ldr	r3, [pc, #224]	; (80134c4 <udp_bind+0x100>)
 80133e4:	f240 32b7 	movw	r2, #951	; 0x3b7
 80133e8:	4937      	ldr	r1, [pc, #220]	; (80134c8 <udp_bind+0x104>)
 80133ea:	4838      	ldr	r0, [pc, #224]	; (80134cc <udp_bind+0x108>)
 80133ec:	f004 fd5c 	bl	8017ea8 <iprintf>
 80133f0:	f06f 030f 	mvn.w	r3, #15
 80133f4:	e060      	b.n	80134b8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80133f6:	2300      	movs	r3, #0
 80133f8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80133fa:	4b35      	ldr	r3, [pc, #212]	; (80134d0 <udp_bind+0x10c>)
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	617b      	str	r3, [r7, #20]
 8013400:	e009      	b.n	8013416 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013402:	68fa      	ldr	r2, [r7, #12]
 8013404:	697b      	ldr	r3, [r7, #20]
 8013406:	429a      	cmp	r2, r3
 8013408:	d102      	bne.n	8013410 <udp_bind+0x4c>
      rebind = 1;
 801340a:	2301      	movs	r3, #1
 801340c:	74fb      	strb	r3, [r7, #19]
      break;
 801340e:	e005      	b.n	801341c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013410:	697b      	ldr	r3, [r7, #20]
 8013412:	68db      	ldr	r3, [r3, #12]
 8013414:	617b      	str	r3, [r7, #20]
 8013416:	697b      	ldr	r3, [r7, #20]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d1f2      	bne.n	8013402 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801341c:	88fb      	ldrh	r3, [r7, #6]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d109      	bne.n	8013436 <udp_bind+0x72>
    port = udp_new_port();
 8013422:	f7ff fcc5 	bl	8012db0 <udp_new_port>
 8013426:	4603      	mov	r3, r0
 8013428:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801342a:	88fb      	ldrh	r3, [r7, #6]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d12c      	bne.n	801348a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013430:	f06f 0307 	mvn.w	r3, #7
 8013434:	e040      	b.n	80134b8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013436:	4b26      	ldr	r3, [pc, #152]	; (80134d0 <udp_bind+0x10c>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	617b      	str	r3, [r7, #20]
 801343c:	e022      	b.n	8013484 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801343e:	68fa      	ldr	r2, [r7, #12]
 8013440:	697b      	ldr	r3, [r7, #20]
 8013442:	429a      	cmp	r2, r3
 8013444:	d01b      	beq.n	801347e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013446:	697b      	ldr	r3, [r7, #20]
 8013448:	8a5b      	ldrh	r3, [r3, #18]
 801344a:	88fa      	ldrh	r2, [r7, #6]
 801344c:	429a      	cmp	r2, r3
 801344e:	d116      	bne.n	801347e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013450:	697b      	ldr	r3, [r7, #20]
 8013452:	681a      	ldr	r2, [r3, #0]
 8013454:	68bb      	ldr	r3, [r7, #8]
 8013456:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013458:	429a      	cmp	r2, r3
 801345a:	d00d      	beq.n	8013478 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801345c:	68bb      	ldr	r3, [r7, #8]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d00a      	beq.n	8013478 <udp_bind+0xb4>
 8013462:	68bb      	ldr	r3, [r7, #8]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d006      	beq.n	8013478 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801346a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801346c:	2b00      	cmp	r3, #0
 801346e:	d003      	beq.n	8013478 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013470:	697b      	ldr	r3, [r7, #20]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d102      	bne.n	801347e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013478:	f06f 0307 	mvn.w	r3, #7
 801347c:	e01c      	b.n	80134b8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801347e:	697b      	ldr	r3, [r7, #20]
 8013480:	68db      	ldr	r3, [r3, #12]
 8013482:	617b      	str	r3, [r7, #20]
 8013484:	697b      	ldr	r3, [r7, #20]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d1d9      	bne.n	801343e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801348a:	68bb      	ldr	r3, [r7, #8]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d002      	beq.n	8013496 <udp_bind+0xd2>
 8013490:	68bb      	ldr	r3, [r7, #8]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	e000      	b.n	8013498 <udp_bind+0xd4>
 8013496:	2300      	movs	r3, #0
 8013498:	68fa      	ldr	r2, [r7, #12]
 801349a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	88fa      	ldrh	r2, [r7, #6]
 80134a0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80134a2:	7cfb      	ldrb	r3, [r7, #19]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d106      	bne.n	80134b6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80134a8:	4b09      	ldr	r3, [pc, #36]	; (80134d0 <udp_bind+0x10c>)
 80134aa:	681a      	ldr	r2, [r3, #0]
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80134b0:	4a07      	ldr	r2, [pc, #28]	; (80134d0 <udp_bind+0x10c>)
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80134b6:	2300      	movs	r3, #0
}
 80134b8:	4618      	mov	r0, r3
 80134ba:	3718      	adds	r7, #24
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}
 80134c0:	08026c6c 	.word	0x08026c6c
 80134c4:	0801bc30 	.word	0x0801bc30
 80134c8:	0801bef8 	.word	0x0801bef8
 80134cc:	0801bc84 	.word	0x0801bc84
 80134d0:	2000f52c 	.word	0x2000f52c

080134d4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b086      	sub	sp, #24
 80134d8:	af00      	add	r7, sp, #0
 80134da:	60f8      	str	r0, [r7, #12]
 80134dc:	60b9      	str	r1, [r7, #8]
 80134de:	4613      	mov	r3, r2
 80134e0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d109      	bne.n	80134fc <udp_connect+0x28>
 80134e8:	4b2c      	ldr	r3, [pc, #176]	; (801359c <udp_connect+0xc8>)
 80134ea:	f240 4235 	movw	r2, #1077	; 0x435
 80134ee:	492c      	ldr	r1, [pc, #176]	; (80135a0 <udp_connect+0xcc>)
 80134f0:	482c      	ldr	r0, [pc, #176]	; (80135a4 <udp_connect+0xd0>)
 80134f2:	f004 fcd9 	bl	8017ea8 <iprintf>
 80134f6:	f06f 030f 	mvn.w	r3, #15
 80134fa:	e04b      	b.n	8013594 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80134fc:	68bb      	ldr	r3, [r7, #8]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d109      	bne.n	8013516 <udp_connect+0x42>
 8013502:	4b26      	ldr	r3, [pc, #152]	; (801359c <udp_connect+0xc8>)
 8013504:	f240 4236 	movw	r2, #1078	; 0x436
 8013508:	4927      	ldr	r1, [pc, #156]	; (80135a8 <udp_connect+0xd4>)
 801350a:	4826      	ldr	r0, [pc, #152]	; (80135a4 <udp_connect+0xd0>)
 801350c:	f004 fccc 	bl	8017ea8 <iprintf>
 8013510:	f06f 030f 	mvn.w	r3, #15
 8013514:	e03e      	b.n	8013594 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	8a5b      	ldrh	r3, [r3, #18]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d10f      	bne.n	801353e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801351e:	68f9      	ldr	r1, [r7, #12]
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	8a5b      	ldrh	r3, [r3, #18]
 8013524:	461a      	mov	r2, r3
 8013526:	68f8      	ldr	r0, [r7, #12]
 8013528:	f7ff ff4c 	bl	80133c4 <udp_bind>
 801352c:	4603      	mov	r3, r0
 801352e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013530:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d002      	beq.n	801353e <udp_connect+0x6a>
      return err;
 8013538:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801353c:	e02a      	b.n	8013594 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801353e:	68bb      	ldr	r3, [r7, #8]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d002      	beq.n	801354a <udp_connect+0x76>
 8013544:	68bb      	ldr	r3, [r7, #8]
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	e000      	b.n	801354c <udp_connect+0x78>
 801354a:	2300      	movs	r3, #0
 801354c:	68fa      	ldr	r2, [r7, #12]
 801354e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	88fa      	ldrh	r2, [r7, #6]
 8013554:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	7c1b      	ldrb	r3, [r3, #16]
 801355a:	f043 0304 	orr.w	r3, r3, #4
 801355e:	b2da      	uxtb	r2, r3
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013564:	4b11      	ldr	r3, [pc, #68]	; (80135ac <udp_connect+0xd8>)
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	617b      	str	r3, [r7, #20]
 801356a:	e008      	b.n	801357e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801356c:	68fa      	ldr	r2, [r7, #12]
 801356e:	697b      	ldr	r3, [r7, #20]
 8013570:	429a      	cmp	r2, r3
 8013572:	d101      	bne.n	8013578 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8013574:	2300      	movs	r3, #0
 8013576:	e00d      	b.n	8013594 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	68db      	ldr	r3, [r3, #12]
 801357c:	617b      	str	r3, [r7, #20]
 801357e:	697b      	ldr	r3, [r7, #20]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d1f3      	bne.n	801356c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013584:	4b09      	ldr	r3, [pc, #36]	; (80135ac <udp_connect+0xd8>)
 8013586:	681a      	ldr	r2, [r3, #0]
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801358c:	4a07      	ldr	r2, [pc, #28]	; (80135ac <udp_connect+0xd8>)
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013592:	2300      	movs	r3, #0
}
 8013594:	4618      	mov	r0, r3
 8013596:	3718      	adds	r7, #24
 8013598:	46bd      	mov	sp, r7
 801359a:	bd80      	pop	{r7, pc}
 801359c:	0801bc30 	.word	0x0801bc30
 80135a0:	0801bf10 	.word	0x0801bf10
 80135a4:	0801bc84 	.word	0x0801bc84
 80135a8:	0801bf2c 	.word	0x0801bf2c
 80135ac:	2000f52c 	.word	0x2000f52c

080135b0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b084      	sub	sp, #16
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	60f8      	str	r0, [r7, #12]
 80135b8:	60b9      	str	r1, [r7, #8]
 80135ba:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d107      	bne.n	80135d2 <udp_recv+0x22>
 80135c2:	4b08      	ldr	r3, [pc, #32]	; (80135e4 <udp_recv+0x34>)
 80135c4:	f240 428a 	movw	r2, #1162	; 0x48a
 80135c8:	4907      	ldr	r1, [pc, #28]	; (80135e8 <udp_recv+0x38>)
 80135ca:	4808      	ldr	r0, [pc, #32]	; (80135ec <udp_recv+0x3c>)
 80135cc:	f004 fc6c 	bl	8017ea8 <iprintf>
 80135d0:	e005      	b.n	80135de <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	68ba      	ldr	r2, [r7, #8]
 80135d6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	687a      	ldr	r2, [r7, #4]
 80135dc:	61da      	str	r2, [r3, #28]
}
 80135de:	3710      	adds	r7, #16
 80135e0:	46bd      	mov	sp, r7
 80135e2:	bd80      	pop	{r7, pc}
 80135e4:	0801bc30 	.word	0x0801bc30
 80135e8:	0801bf64 	.word	0x0801bf64
 80135ec:	0801bc84 	.word	0x0801bc84

080135f0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b084      	sub	sp, #16
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d107      	bne.n	801360e <udp_remove+0x1e>
 80135fe:	4b19      	ldr	r3, [pc, #100]	; (8013664 <udp_remove+0x74>)
 8013600:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013604:	4918      	ldr	r1, [pc, #96]	; (8013668 <udp_remove+0x78>)
 8013606:	4819      	ldr	r0, [pc, #100]	; (801366c <udp_remove+0x7c>)
 8013608:	f004 fc4e 	bl	8017ea8 <iprintf>
 801360c:	e026      	b.n	801365c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801360e:	4b18      	ldr	r3, [pc, #96]	; (8013670 <udp_remove+0x80>)
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	687a      	ldr	r2, [r7, #4]
 8013614:	429a      	cmp	r2, r3
 8013616:	d105      	bne.n	8013624 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013618:	4b15      	ldr	r3, [pc, #84]	; (8013670 <udp_remove+0x80>)
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	68db      	ldr	r3, [r3, #12]
 801361e:	4a14      	ldr	r2, [pc, #80]	; (8013670 <udp_remove+0x80>)
 8013620:	6013      	str	r3, [r2, #0]
 8013622:	e017      	b.n	8013654 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013624:	4b12      	ldr	r3, [pc, #72]	; (8013670 <udp_remove+0x80>)
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	60fb      	str	r3, [r7, #12]
 801362a:	e010      	b.n	801364e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	68db      	ldr	r3, [r3, #12]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d009      	beq.n	8013648 <udp_remove+0x58>
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	68db      	ldr	r3, [r3, #12]
 8013638:	687a      	ldr	r2, [r7, #4]
 801363a:	429a      	cmp	r2, r3
 801363c:	d104      	bne.n	8013648 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	68da      	ldr	r2, [r3, #12]
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	60da      	str	r2, [r3, #12]
        break;
 8013646:	e005      	b.n	8013654 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	68db      	ldr	r3, [r3, #12]
 801364c:	60fb      	str	r3, [r7, #12]
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d1eb      	bne.n	801362c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013654:	6879      	ldr	r1, [r7, #4]
 8013656:	2000      	movs	r0, #0
 8013658:	f7f8 f816 	bl	800b688 <memp_free>
}
 801365c:	3710      	adds	r7, #16
 801365e:	46bd      	mov	sp, r7
 8013660:	bd80      	pop	{r7, pc}
 8013662:	bf00      	nop
 8013664:	0801bc30 	.word	0x0801bc30
 8013668:	0801bf7c 	.word	0x0801bf7c
 801366c:	0801bc84 	.word	0x0801bc84
 8013670:	2000f52c 	.word	0x2000f52c

08013674 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b082      	sub	sp, #8
 8013678:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801367a:	2000      	movs	r0, #0
 801367c:	f7f7 ffb2 	bl	800b5e4 <memp_malloc>
 8013680:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d007      	beq.n	8013698 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013688:	2220      	movs	r2, #32
 801368a:	2100      	movs	r1, #0
 801368c:	6878      	ldr	r0, [r7, #4]
 801368e:	f004 fc03 	bl	8017e98 <memset>
    pcb->ttl = UDP_TTL;
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	22ff      	movs	r2, #255	; 0xff
 8013696:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013698:	687b      	ldr	r3, [r7, #4]
}
 801369a:	4618      	mov	r0, r3
 801369c:	3708      	adds	r7, #8
 801369e:	46bd      	mov	sp, r7
 80136a0:	bd80      	pop	{r7, pc}

080136a2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80136a2:	b580      	push	{r7, lr}
 80136a4:	b084      	sub	sp, #16
 80136a6:	af00      	add	r7, sp, #0
 80136a8:	4603      	mov	r3, r0
 80136aa:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80136ac:	f7ff ffe2 	bl	8013674 <udp_new>
 80136b0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80136b2:	68fb      	ldr	r3, [r7, #12]
}
 80136b4:	4618      	mov	r0, r3
 80136b6:	3710      	adds	r7, #16
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}

080136bc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80136bc:	b480      	push	{r7}
 80136be:	b085      	sub	sp, #20
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
 80136c4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d01e      	beq.n	801370a <udp_netif_ip_addr_changed+0x4e>
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d01a      	beq.n	801370a <udp_netif_ip_addr_changed+0x4e>
 80136d4:	683b      	ldr	r3, [r7, #0]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d017      	beq.n	801370a <udp_netif_ip_addr_changed+0x4e>
 80136da:	683b      	ldr	r3, [r7, #0]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d013      	beq.n	801370a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80136e2:	4b0d      	ldr	r3, [pc, #52]	; (8013718 <udp_netif_ip_addr_changed+0x5c>)
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	60fb      	str	r3, [r7, #12]
 80136e8:	e00c      	b.n	8013704 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	681a      	ldr	r2, [r3, #0]
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	429a      	cmp	r2, r3
 80136f4:	d103      	bne.n	80136fe <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80136f6:	683b      	ldr	r3, [r7, #0]
 80136f8:	681a      	ldr	r2, [r3, #0]
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	68db      	ldr	r3, [r3, #12]
 8013702:	60fb      	str	r3, [r7, #12]
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d1ef      	bne.n	80136ea <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801370a:	bf00      	nop
 801370c:	3714      	adds	r7, #20
 801370e:	46bd      	mov	sp, r7
 8013710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013714:	4770      	bx	lr
 8013716:	bf00      	nop
 8013718:	2000f52c 	.word	0x2000f52c

0801371c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801371c:	b580      	push	{r7, lr}
 801371e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8013720:	4b20      	ldr	r3, [pc, #128]	; (80137a4 <dhcp_inc_pcb_refcount+0x88>)
 8013722:	781b      	ldrb	r3, [r3, #0]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d133      	bne.n	8013790 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8013728:	4b1f      	ldr	r3, [pc, #124]	; (80137a8 <dhcp_inc_pcb_refcount+0x8c>)
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d005      	beq.n	801373c <dhcp_inc_pcb_refcount+0x20>
 8013730:	4b1e      	ldr	r3, [pc, #120]	; (80137ac <dhcp_inc_pcb_refcount+0x90>)
 8013732:	22e5      	movs	r2, #229	; 0xe5
 8013734:	491e      	ldr	r1, [pc, #120]	; (80137b0 <dhcp_inc_pcb_refcount+0x94>)
 8013736:	481f      	ldr	r0, [pc, #124]	; (80137b4 <dhcp_inc_pcb_refcount+0x98>)
 8013738:	f004 fbb6 	bl	8017ea8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801373c:	f7ff ff9a 	bl	8013674 <udp_new>
 8013740:	4602      	mov	r2, r0
 8013742:	4b19      	ldr	r3, [pc, #100]	; (80137a8 <dhcp_inc_pcb_refcount+0x8c>)
 8013744:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8013746:	4b18      	ldr	r3, [pc, #96]	; (80137a8 <dhcp_inc_pcb_refcount+0x8c>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d102      	bne.n	8013754 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801374e:	f04f 33ff 	mov.w	r3, #4294967295
 8013752:	e024      	b.n	801379e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8013754:	4b14      	ldr	r3, [pc, #80]	; (80137a8 <dhcp_inc_pcb_refcount+0x8c>)
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	7a5a      	ldrb	r2, [r3, #9]
 801375a:	4b13      	ldr	r3, [pc, #76]	; (80137a8 <dhcp_inc_pcb_refcount+0x8c>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	f042 0220 	orr.w	r2, r2, #32
 8013762:	b2d2      	uxtb	r2, r2
 8013764:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8013766:	4b10      	ldr	r3, [pc, #64]	; (80137a8 <dhcp_inc_pcb_refcount+0x8c>)
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	2244      	movs	r2, #68	; 0x44
 801376c:	4912      	ldr	r1, [pc, #72]	; (80137b8 <dhcp_inc_pcb_refcount+0x9c>)
 801376e:	4618      	mov	r0, r3
 8013770:	f7ff fe28 	bl	80133c4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8013774:	4b0c      	ldr	r3, [pc, #48]	; (80137a8 <dhcp_inc_pcb_refcount+0x8c>)
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	2243      	movs	r2, #67	; 0x43
 801377a:	490f      	ldr	r1, [pc, #60]	; (80137b8 <dhcp_inc_pcb_refcount+0x9c>)
 801377c:	4618      	mov	r0, r3
 801377e:	f7ff fea9 	bl	80134d4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8013782:	4b09      	ldr	r3, [pc, #36]	; (80137a8 <dhcp_inc_pcb_refcount+0x8c>)
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	2200      	movs	r2, #0
 8013788:	490c      	ldr	r1, [pc, #48]	; (80137bc <dhcp_inc_pcb_refcount+0xa0>)
 801378a:	4618      	mov	r0, r3
 801378c:	f7ff ff10 	bl	80135b0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8013790:	4b04      	ldr	r3, [pc, #16]	; (80137a4 <dhcp_inc_pcb_refcount+0x88>)
 8013792:	781b      	ldrb	r3, [r3, #0]
 8013794:	3301      	adds	r3, #1
 8013796:	b2da      	uxtb	r2, r3
 8013798:	4b02      	ldr	r3, [pc, #8]	; (80137a4 <dhcp_inc_pcb_refcount+0x88>)
 801379a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801379c:	2300      	movs	r3, #0
}
 801379e:	4618      	mov	r0, r3
 80137a0:	bd80      	pop	{r7, pc}
 80137a2:	bf00      	nop
 80137a4:	20008ad4 	.word	0x20008ad4
 80137a8:	20008ad0 	.word	0x20008ad0
 80137ac:	0801bf94 	.word	0x0801bf94
 80137b0:	0801bfcc 	.word	0x0801bfcc
 80137b4:	0801bff4 	.word	0x0801bff4
 80137b8:	08026c6c 	.word	0x08026c6c
 80137bc:	08015075 	.word	0x08015075

080137c0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80137c0:	b580      	push	{r7, lr}
 80137c2:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80137c4:	4b0e      	ldr	r3, [pc, #56]	; (8013800 <dhcp_dec_pcb_refcount+0x40>)
 80137c6:	781b      	ldrb	r3, [r3, #0]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d105      	bne.n	80137d8 <dhcp_dec_pcb_refcount+0x18>
 80137cc:	4b0d      	ldr	r3, [pc, #52]	; (8013804 <dhcp_dec_pcb_refcount+0x44>)
 80137ce:	22ff      	movs	r2, #255	; 0xff
 80137d0:	490d      	ldr	r1, [pc, #52]	; (8013808 <dhcp_dec_pcb_refcount+0x48>)
 80137d2:	480e      	ldr	r0, [pc, #56]	; (801380c <dhcp_dec_pcb_refcount+0x4c>)
 80137d4:	f004 fb68 	bl	8017ea8 <iprintf>
  dhcp_pcb_refcount--;
 80137d8:	4b09      	ldr	r3, [pc, #36]	; (8013800 <dhcp_dec_pcb_refcount+0x40>)
 80137da:	781b      	ldrb	r3, [r3, #0]
 80137dc:	3b01      	subs	r3, #1
 80137de:	b2da      	uxtb	r2, r3
 80137e0:	4b07      	ldr	r3, [pc, #28]	; (8013800 <dhcp_dec_pcb_refcount+0x40>)
 80137e2:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80137e4:	4b06      	ldr	r3, [pc, #24]	; (8013800 <dhcp_dec_pcb_refcount+0x40>)
 80137e6:	781b      	ldrb	r3, [r3, #0]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d107      	bne.n	80137fc <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80137ec:	4b08      	ldr	r3, [pc, #32]	; (8013810 <dhcp_dec_pcb_refcount+0x50>)
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	4618      	mov	r0, r3
 80137f2:	f7ff fefd 	bl	80135f0 <udp_remove>
    dhcp_pcb = NULL;
 80137f6:	4b06      	ldr	r3, [pc, #24]	; (8013810 <dhcp_dec_pcb_refcount+0x50>)
 80137f8:	2200      	movs	r2, #0
 80137fa:	601a      	str	r2, [r3, #0]
  }
}
 80137fc:	bf00      	nop
 80137fe:	bd80      	pop	{r7, pc}
 8013800:	20008ad4 	.word	0x20008ad4
 8013804:	0801bf94 	.word	0x0801bf94
 8013808:	0801c01c 	.word	0x0801c01c
 801380c:	0801bff4 	.word	0x0801bff4
 8013810:	20008ad0 	.word	0x20008ad0

08013814 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013814:	b580      	push	{r7, lr}
 8013816:	b084      	sub	sp, #16
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013820:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013822:	210c      	movs	r1, #12
 8013824:	68f8      	ldr	r0, [r7, #12]
 8013826:	f001 f867 	bl	80148f8 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801382a:	4b06      	ldr	r3, [pc, #24]	; (8013844 <dhcp_handle_nak+0x30>)
 801382c:	4a05      	ldr	r2, [pc, #20]	; (8013844 <dhcp_handle_nak+0x30>)
 801382e:	4905      	ldr	r1, [pc, #20]	; (8013844 <dhcp_handle_nak+0x30>)
 8013830:	6878      	ldr	r0, [r7, #4]
 8013832:	f7f8 f8cb 	bl	800b9cc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8013836:	6878      	ldr	r0, [r7, #4]
 8013838:	f000 fc5a 	bl	80140f0 <dhcp_discover>
}
 801383c:	bf00      	nop
 801383e:	3710      	adds	r7, #16
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}
 8013844:	08026c6c 	.word	0x08026c6c

08013848 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b084      	sub	sp, #16
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013854:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8013856:	2108      	movs	r1, #8
 8013858:	68f8      	ldr	r0, [r7, #12]
 801385a:	f001 f84d 	bl	80148f8 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	331c      	adds	r3, #28
 8013862:	2200      	movs	r2, #0
 8013864:	4619      	mov	r1, r3
 8013866:	6878      	ldr	r0, [r7, #4]
 8013868:	f002 fb4c 	bl	8015f04 <etharp_query>
 801386c:	4603      	mov	r3, r0
 801386e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	799b      	ldrb	r3, [r3, #6]
 8013874:	2bff      	cmp	r3, #255	; 0xff
 8013876:	d005      	beq.n	8013884 <dhcp_check+0x3c>
    dhcp->tries++;
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	799b      	ldrb	r3, [r3, #6]
 801387c:	3301      	adds	r3, #1
 801387e:	b2da      	uxtb	r2, r3
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8013884:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8013888:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801388a:	893b      	ldrh	r3, [r7, #8]
 801388c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013890:	4a06      	ldr	r2, [pc, #24]	; (80138ac <dhcp_check+0x64>)
 8013892:	fb82 1203 	smull	r1, r2, r2, r3
 8013896:	1152      	asrs	r2, r2, #5
 8013898:	17db      	asrs	r3, r3, #31
 801389a:	1ad3      	subs	r3, r2, r3
 801389c:	b29a      	uxth	r2, r3
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80138a2:	bf00      	nop
 80138a4:	3710      	adds	r7, #16
 80138a6:	46bd      	mov	sp, r7
 80138a8:	bd80      	pop	{r7, pc}
 80138aa:	bf00      	nop
 80138ac:	10624dd3 	.word	0x10624dd3

080138b0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b084      	sub	sp, #16
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]
 80138b8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138be:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80138c0:	4b0c      	ldr	r3, [pc, #48]	; (80138f4 <dhcp_handle_offer+0x44>)
 80138c2:	789b      	ldrb	r3, [r3, #2]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d011      	beq.n	80138ec <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	2200      	movs	r2, #0
 80138cc:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80138ce:	4b0a      	ldr	r3, [pc, #40]	; (80138f8 <dhcp_handle_offer+0x48>)
 80138d0:	689b      	ldr	r3, [r3, #8]
 80138d2:	4618      	mov	r0, r3
 80138d4:	f7f7 f9af 	bl	800ac36 <lwip_htonl>
 80138d8:	4602      	mov	r2, r0
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80138de:	683b      	ldr	r3, [r7, #0]
 80138e0:	691a      	ldr	r2, [r3, #16]
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80138e6:	6878      	ldr	r0, [r7, #4]
 80138e8:	f000 f808 	bl	80138fc <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80138ec:	bf00      	nop
 80138ee:	3710      	adds	r7, #16
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}
 80138f4:	2000f530 	.word	0x2000f530
 80138f8:	2000f538 	.word	0x2000f538

080138fc <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80138fc:	b5b0      	push	{r4, r5, r7, lr}
 80138fe:	b08a      	sub	sp, #40	; 0x28
 8013900:	af02      	add	r7, sp, #8
 8013902:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d109      	bne.n	801391e <dhcp_select+0x22>
 801390a:	4b71      	ldr	r3, [pc, #452]	; (8013ad0 <dhcp_select+0x1d4>)
 801390c:	f240 1277 	movw	r2, #375	; 0x177
 8013910:	4970      	ldr	r1, [pc, #448]	; (8013ad4 <dhcp_select+0x1d8>)
 8013912:	4871      	ldr	r0, [pc, #452]	; (8013ad8 <dhcp_select+0x1dc>)
 8013914:	f004 fac8 	bl	8017ea8 <iprintf>
 8013918:	f06f 030f 	mvn.w	r3, #15
 801391c:	e0d3      	b.n	8013ac6 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013922:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013924:	69bb      	ldr	r3, [r7, #24]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d109      	bne.n	801393e <dhcp_select+0x42>
 801392a:	4b69      	ldr	r3, [pc, #420]	; (8013ad0 <dhcp_select+0x1d4>)
 801392c:	f240 1279 	movw	r2, #377	; 0x179
 8013930:	496a      	ldr	r1, [pc, #424]	; (8013adc <dhcp_select+0x1e0>)
 8013932:	4869      	ldr	r0, [pc, #420]	; (8013ad8 <dhcp_select+0x1dc>)
 8013934:	f004 fab8 	bl	8017ea8 <iprintf>
 8013938:	f06f 0305 	mvn.w	r3, #5
 801393c:	e0c3      	b.n	8013ac6 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801393e:	2101      	movs	r1, #1
 8013940:	69b8      	ldr	r0, [r7, #24]
 8013942:	f000 ffd9 	bl	80148f8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013946:	f107 030c 	add.w	r3, r7, #12
 801394a:	2203      	movs	r2, #3
 801394c:	69b9      	ldr	r1, [r7, #24]
 801394e:	6878      	ldr	r0, [r7, #4]
 8013950:	f001 fc5c 	bl	801520c <dhcp_create_msg>
 8013954:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013956:	697b      	ldr	r3, [r7, #20]
 8013958:	2b00      	cmp	r3, #0
 801395a:	f000 8085 	beq.w	8013a68 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801395e:	697b      	ldr	r3, [r7, #20]
 8013960:	685b      	ldr	r3, [r3, #4]
 8013962:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013964:	89b8      	ldrh	r0, [r7, #12]
 8013966:	693b      	ldr	r3, [r7, #16]
 8013968:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801396c:	2302      	movs	r3, #2
 801396e:	2239      	movs	r2, #57	; 0x39
 8013970:	f000 ffdc 	bl	801492c <dhcp_option>
 8013974:	4603      	mov	r3, r0
 8013976:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013978:	89b8      	ldrh	r0, [r7, #12]
 801397a:	693b      	ldr	r3, [r7, #16]
 801397c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013984:	461a      	mov	r2, r3
 8013986:	f001 f82b 	bl	80149e0 <dhcp_option_short>
 801398a:	4603      	mov	r3, r0
 801398c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801398e:	89b8      	ldrh	r0, [r7, #12]
 8013990:	693b      	ldr	r3, [r7, #16]
 8013992:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013996:	2304      	movs	r3, #4
 8013998:	2232      	movs	r2, #50	; 0x32
 801399a:	f000 ffc7 	bl	801492c <dhcp_option>
 801399e:	4603      	mov	r3, r0
 80139a0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80139a2:	89bc      	ldrh	r4, [r7, #12]
 80139a4:	693b      	ldr	r3, [r7, #16]
 80139a6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80139aa:	69bb      	ldr	r3, [r7, #24]
 80139ac:	69db      	ldr	r3, [r3, #28]
 80139ae:	4618      	mov	r0, r3
 80139b0:	f7f7 f941 	bl	800ac36 <lwip_htonl>
 80139b4:	4603      	mov	r3, r0
 80139b6:	461a      	mov	r2, r3
 80139b8:	4629      	mov	r1, r5
 80139ba:	4620      	mov	r0, r4
 80139bc:	f001 f842 	bl	8014a44 <dhcp_option_long>
 80139c0:	4603      	mov	r3, r0
 80139c2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80139c4:	89b8      	ldrh	r0, [r7, #12]
 80139c6:	693b      	ldr	r3, [r7, #16]
 80139c8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80139cc:	2304      	movs	r3, #4
 80139ce:	2236      	movs	r2, #54	; 0x36
 80139d0:	f000 ffac 	bl	801492c <dhcp_option>
 80139d4:	4603      	mov	r3, r0
 80139d6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80139d8:	89bc      	ldrh	r4, [r7, #12]
 80139da:	693b      	ldr	r3, [r7, #16]
 80139dc:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80139e0:	69bb      	ldr	r3, [r7, #24]
 80139e2:	699b      	ldr	r3, [r3, #24]
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7f7 f926 	bl	800ac36 <lwip_htonl>
 80139ea:	4603      	mov	r3, r0
 80139ec:	461a      	mov	r2, r3
 80139ee:	4629      	mov	r1, r5
 80139f0:	4620      	mov	r0, r4
 80139f2:	f001 f827 	bl	8014a44 <dhcp_option_long>
 80139f6:	4603      	mov	r3, r0
 80139f8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80139fa:	89b8      	ldrh	r0, [r7, #12]
 80139fc:	693b      	ldr	r3, [r7, #16]
 80139fe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013a02:	2303      	movs	r3, #3
 8013a04:	2237      	movs	r2, #55	; 0x37
 8013a06:	f000 ff91 	bl	801492c <dhcp_option>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013a0e:	2300      	movs	r3, #0
 8013a10:	77bb      	strb	r3, [r7, #30]
 8013a12:	e00e      	b.n	8013a32 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013a14:	89b8      	ldrh	r0, [r7, #12]
 8013a16:	693b      	ldr	r3, [r7, #16]
 8013a18:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013a1c:	7fbb      	ldrb	r3, [r7, #30]
 8013a1e:	4a30      	ldr	r2, [pc, #192]	; (8013ae0 <dhcp_select+0x1e4>)
 8013a20:	5cd3      	ldrb	r3, [r2, r3]
 8013a22:	461a      	mov	r2, r3
 8013a24:	f000 ffb6 	bl	8014994 <dhcp_option_byte>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013a2c:	7fbb      	ldrb	r3, [r7, #30]
 8013a2e:	3301      	adds	r3, #1
 8013a30:	77bb      	strb	r3, [r7, #30]
 8013a32:	7fbb      	ldrb	r3, [r7, #30]
 8013a34:	2b02      	cmp	r3, #2
 8013a36:	d9ed      	bls.n	8013a14 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013a38:	89b8      	ldrh	r0, [r7, #12]
 8013a3a:	693b      	ldr	r3, [r7, #16]
 8013a3c:	33f0      	adds	r3, #240	; 0xf0
 8013a3e:	697a      	ldr	r2, [r7, #20]
 8013a40:	4619      	mov	r1, r3
 8013a42:	f001 fcb9 	bl	80153b8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013a46:	4b27      	ldr	r3, [pc, #156]	; (8013ae4 <dhcp_select+0x1e8>)
 8013a48:	6818      	ldr	r0, [r3, #0]
 8013a4a:	4b27      	ldr	r3, [pc, #156]	; (8013ae8 <dhcp_select+0x1ec>)
 8013a4c:	9301      	str	r3, [sp, #4]
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	9300      	str	r3, [sp, #0]
 8013a52:	2343      	movs	r3, #67	; 0x43
 8013a54:	4a25      	ldr	r2, [pc, #148]	; (8013aec <dhcp_select+0x1f0>)
 8013a56:	6979      	ldr	r1, [r7, #20]
 8013a58:	f7ff fbce 	bl	80131f8 <udp_sendto_if_src>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013a60:	6978      	ldr	r0, [r7, #20]
 8013a62:	f7f8 fcbd 	bl	800c3e0 <pbuf_free>
 8013a66:	e001      	b.n	8013a6c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013a68:	23ff      	movs	r3, #255	; 0xff
 8013a6a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013a6c:	69bb      	ldr	r3, [r7, #24]
 8013a6e:	799b      	ldrb	r3, [r3, #6]
 8013a70:	2bff      	cmp	r3, #255	; 0xff
 8013a72:	d005      	beq.n	8013a80 <dhcp_select+0x184>
    dhcp->tries++;
 8013a74:	69bb      	ldr	r3, [r7, #24]
 8013a76:	799b      	ldrb	r3, [r3, #6]
 8013a78:	3301      	adds	r3, #1
 8013a7a:	b2da      	uxtb	r2, r3
 8013a7c:	69bb      	ldr	r3, [r7, #24]
 8013a7e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013a80:	69bb      	ldr	r3, [r7, #24]
 8013a82:	799b      	ldrb	r3, [r3, #6]
 8013a84:	2b05      	cmp	r3, #5
 8013a86:	d80d      	bhi.n	8013aa4 <dhcp_select+0x1a8>
 8013a88:	69bb      	ldr	r3, [r7, #24]
 8013a8a:	799b      	ldrb	r3, [r3, #6]
 8013a8c:	461a      	mov	r2, r3
 8013a8e:	2301      	movs	r3, #1
 8013a90:	4093      	lsls	r3, r2
 8013a92:	b29b      	uxth	r3, r3
 8013a94:	461a      	mov	r2, r3
 8013a96:	0152      	lsls	r2, r2, #5
 8013a98:	1ad2      	subs	r2, r2, r3
 8013a9a:	0092      	lsls	r2, r2, #2
 8013a9c:	4413      	add	r3, r2
 8013a9e:	00db      	lsls	r3, r3, #3
 8013aa0:	b29b      	uxth	r3, r3
 8013aa2:	e001      	b.n	8013aa8 <dhcp_select+0x1ac>
 8013aa4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013aa8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013aaa:	89fb      	ldrh	r3, [r7, #14]
 8013aac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013ab0:	4a0f      	ldr	r2, [pc, #60]	; (8013af0 <dhcp_select+0x1f4>)
 8013ab2:	fb82 1203 	smull	r1, r2, r2, r3
 8013ab6:	1152      	asrs	r2, r2, #5
 8013ab8:	17db      	asrs	r3, r3, #31
 8013aba:	1ad3      	subs	r3, r2, r3
 8013abc:	b29a      	uxth	r2, r3
 8013abe:	69bb      	ldr	r3, [r7, #24]
 8013ac0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013ac2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	3720      	adds	r7, #32
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bdb0      	pop	{r4, r5, r7, pc}
 8013ace:	bf00      	nop
 8013ad0:	0801bf94 	.word	0x0801bf94
 8013ad4:	0801c040 	.word	0x0801c040
 8013ad8:	0801bff4 	.word	0x0801bff4
 8013adc:	0801c05c 	.word	0x0801c05c
 8013ae0:	2000001c 	.word	0x2000001c
 8013ae4:	20008ad0 	.word	0x20008ad0
 8013ae8:	08026c6c 	.word	0x08026c6c
 8013aec:	08026c70 	.word	0x08026c70
 8013af0:	10624dd3 	.word	0x10624dd3

08013af4 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b082      	sub	sp, #8
 8013af8:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8013afa:	4b27      	ldr	r3, [pc, #156]	; (8013b98 <dhcp_coarse_tmr+0xa4>)
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	607b      	str	r3, [r7, #4]
 8013b00:	e042      	b.n	8013b88 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b06:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8013b08:	683b      	ldr	r3, [r7, #0]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d039      	beq.n	8013b82 <dhcp_coarse_tmr+0x8e>
 8013b0e:	683b      	ldr	r3, [r7, #0]
 8013b10:	795b      	ldrb	r3, [r3, #5]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d035      	beq.n	8013b82 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8013b16:	683b      	ldr	r3, [r7, #0]
 8013b18:	8a9b      	ldrh	r3, [r3, #20]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d012      	beq.n	8013b44 <dhcp_coarse_tmr+0x50>
 8013b1e:	683b      	ldr	r3, [r7, #0]
 8013b20:	8a5b      	ldrh	r3, [r3, #18]
 8013b22:	3301      	adds	r3, #1
 8013b24:	b29a      	uxth	r2, r3
 8013b26:	683b      	ldr	r3, [r7, #0]
 8013b28:	825a      	strh	r2, [r3, #18]
 8013b2a:	683b      	ldr	r3, [r7, #0]
 8013b2c:	8a5a      	ldrh	r2, [r3, #18]
 8013b2e:	683b      	ldr	r3, [r7, #0]
 8013b30:	8a9b      	ldrh	r3, [r3, #20]
 8013b32:	429a      	cmp	r2, r3
 8013b34:	d106      	bne.n	8013b44 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8013b36:	6878      	ldr	r0, [r7, #4]
 8013b38:	f000 fe44 	bl	80147c4 <dhcp_release_and_stop>
        dhcp_start(netif);
 8013b3c:	6878      	ldr	r0, [r7, #4]
 8013b3e:	f000 f969 	bl	8013e14 <dhcp_start>
 8013b42:	e01e      	b.n	8013b82 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8013b44:	683b      	ldr	r3, [r7, #0]
 8013b46:	8a1b      	ldrh	r3, [r3, #16]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d00b      	beq.n	8013b64 <dhcp_coarse_tmr+0x70>
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	8a1b      	ldrh	r3, [r3, #16]
 8013b50:	1e5a      	subs	r2, r3, #1
 8013b52:	b291      	uxth	r1, r2
 8013b54:	683a      	ldr	r2, [r7, #0]
 8013b56:	8211      	strh	r1, [r2, #16]
 8013b58:	2b01      	cmp	r3, #1
 8013b5a:	d103      	bne.n	8013b64 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	f000 f8c6 	bl	8013cee <dhcp_t2_timeout>
 8013b62:	e00e      	b.n	8013b82 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8013b64:	683b      	ldr	r3, [r7, #0]
 8013b66:	89db      	ldrh	r3, [r3, #14]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d00a      	beq.n	8013b82 <dhcp_coarse_tmr+0x8e>
 8013b6c:	683b      	ldr	r3, [r7, #0]
 8013b6e:	89db      	ldrh	r3, [r3, #14]
 8013b70:	1e5a      	subs	r2, r3, #1
 8013b72:	b291      	uxth	r1, r2
 8013b74:	683a      	ldr	r2, [r7, #0]
 8013b76:	81d1      	strh	r1, [r2, #14]
 8013b78:	2b01      	cmp	r3, #1
 8013b7a:	d102      	bne.n	8013b82 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8013b7c:	6878      	ldr	r0, [r7, #4]
 8013b7e:	f000 f888 	bl	8013c92 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	607b      	str	r3, [r7, #4]
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d1b9      	bne.n	8013b02 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8013b8e:	bf00      	nop
 8013b90:	3708      	adds	r7, #8
 8013b92:	46bd      	mov	sp, r7
 8013b94:	bd80      	pop	{r7, pc}
 8013b96:	bf00      	nop
 8013b98:	2000f504 	.word	0x2000f504

08013b9c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b082      	sub	sp, #8
 8013ba0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8013ba2:	4b16      	ldr	r3, [pc, #88]	; (8013bfc <dhcp_fine_tmr+0x60>)
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	607b      	str	r3, [r7, #4]
 8013ba8:	e020      	b.n	8013bec <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bae:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8013bb0:	683b      	ldr	r3, [r7, #0]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d017      	beq.n	8013be6 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8013bb6:	683b      	ldr	r3, [r7, #0]
 8013bb8:	891b      	ldrh	r3, [r3, #8]
 8013bba:	2b01      	cmp	r3, #1
 8013bbc:	d906      	bls.n	8013bcc <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8013bbe:	683b      	ldr	r3, [r7, #0]
 8013bc0:	891b      	ldrh	r3, [r3, #8]
 8013bc2:	3b01      	subs	r3, #1
 8013bc4:	b29a      	uxth	r2, r3
 8013bc6:	683b      	ldr	r3, [r7, #0]
 8013bc8:	811a      	strh	r2, [r3, #8]
 8013bca:	e00c      	b.n	8013be6 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8013bcc:	683b      	ldr	r3, [r7, #0]
 8013bce:	891b      	ldrh	r3, [r3, #8]
 8013bd0:	2b01      	cmp	r3, #1
 8013bd2:	d108      	bne.n	8013be6 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8013bd4:	683b      	ldr	r3, [r7, #0]
 8013bd6:	891b      	ldrh	r3, [r3, #8]
 8013bd8:	3b01      	subs	r3, #1
 8013bda:	b29a      	uxth	r2, r3
 8013bdc:	683b      	ldr	r3, [r7, #0]
 8013bde:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8013be0:	6878      	ldr	r0, [r7, #4]
 8013be2:	f000 f80d 	bl	8013c00 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	607b      	str	r3, [r7, #4]
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d1db      	bne.n	8013baa <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8013bf2:	bf00      	nop
 8013bf4:	3708      	adds	r7, #8
 8013bf6:	46bd      	mov	sp, r7
 8013bf8:	bd80      	pop	{r7, pc}
 8013bfa:	bf00      	nop
 8013bfc:	2000f504 	.word	0x2000f504

08013c00 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b084      	sub	sp, #16
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c0c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	795b      	ldrb	r3, [r3, #5]
 8013c12:	2b0c      	cmp	r3, #12
 8013c14:	d003      	beq.n	8013c1e <dhcp_timeout+0x1e>
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	795b      	ldrb	r3, [r3, #5]
 8013c1a:	2b06      	cmp	r3, #6
 8013c1c:	d103      	bne.n	8013c26 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8013c1e:	6878      	ldr	r0, [r7, #4]
 8013c20:	f000 fa66 	bl	80140f0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8013c24:	e031      	b.n	8013c8a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	795b      	ldrb	r3, [r3, #5]
 8013c2a:	2b01      	cmp	r3, #1
 8013c2c:	d10e      	bne.n	8013c4c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	799b      	ldrb	r3, [r3, #6]
 8013c32:	2b05      	cmp	r3, #5
 8013c34:	d803      	bhi.n	8013c3e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8013c36:	6878      	ldr	r0, [r7, #4]
 8013c38:	f7ff fe60 	bl	80138fc <dhcp_select>
}
 8013c3c:	e025      	b.n	8013c8a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8013c3e:	6878      	ldr	r0, [r7, #4]
 8013c40:	f000 fdc0 	bl	80147c4 <dhcp_release_and_stop>
      dhcp_start(netif);
 8013c44:	6878      	ldr	r0, [r7, #4]
 8013c46:	f000 f8e5 	bl	8013e14 <dhcp_start>
}
 8013c4a:	e01e      	b.n	8013c8a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	795b      	ldrb	r3, [r3, #5]
 8013c50:	2b08      	cmp	r3, #8
 8013c52:	d10b      	bne.n	8013c6c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	799b      	ldrb	r3, [r3, #6]
 8013c58:	2b01      	cmp	r3, #1
 8013c5a:	d803      	bhi.n	8013c64 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8013c5c:	6878      	ldr	r0, [r7, #4]
 8013c5e:	f7ff fdf3 	bl	8013848 <dhcp_check>
}
 8013c62:	e012      	b.n	8013c8a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8013c64:	6878      	ldr	r0, [r7, #4]
 8013c66:	f000 fae5 	bl	8014234 <dhcp_bind>
}
 8013c6a:	e00e      	b.n	8013c8a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	795b      	ldrb	r3, [r3, #5]
 8013c70:	2b03      	cmp	r3, #3
 8013c72:	d10a      	bne.n	8013c8a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	799b      	ldrb	r3, [r3, #6]
 8013c78:	2b01      	cmp	r3, #1
 8013c7a:	d803      	bhi.n	8013c84 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f000 fceb 	bl	8014658 <dhcp_reboot>
}
 8013c82:	e002      	b.n	8013c8a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8013c84:	6878      	ldr	r0, [r7, #4]
 8013c86:	f000 fa33 	bl	80140f0 <dhcp_discover>
}
 8013c8a:	bf00      	nop
 8013c8c:	3710      	adds	r7, #16
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd80      	pop	{r7, pc}

08013c92 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8013c92:	b580      	push	{r7, lr}
 8013c94:	b084      	sub	sp, #16
 8013c96:	af00      	add	r7, sp, #0
 8013c98:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c9e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	795b      	ldrb	r3, [r3, #5]
 8013ca4:	2b01      	cmp	r3, #1
 8013ca6:	d007      	beq.n	8013cb8 <dhcp_t1_timeout+0x26>
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	795b      	ldrb	r3, [r3, #5]
 8013cac:	2b0a      	cmp	r3, #10
 8013cae:	d003      	beq.n	8013cb8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013cb4:	2b05      	cmp	r3, #5
 8013cb6:	d116      	bne.n	8013ce6 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8013cb8:	6878      	ldr	r0, [r7, #4]
 8013cba:	f000 fb95 	bl	80143e8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	899b      	ldrh	r3, [r3, #12]
 8013cc2:	461a      	mov	r2, r3
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	8a5b      	ldrh	r3, [r3, #18]
 8013cc8:	1ad3      	subs	r3, r2, r3
 8013cca:	2b01      	cmp	r3, #1
 8013ccc:	dd0b      	ble.n	8013ce6 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	899b      	ldrh	r3, [r3, #12]
 8013cd2:	461a      	mov	r2, r3
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	8a5b      	ldrh	r3, [r3, #18]
 8013cd8:	1ad3      	subs	r3, r2, r3
 8013cda:	0fda      	lsrs	r2, r3, #31
 8013cdc:	4413      	add	r3, r2
 8013cde:	105b      	asrs	r3, r3, #1
 8013ce0:	b29a      	uxth	r2, r3
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8013ce6:	bf00      	nop
 8013ce8:	3710      	adds	r7, #16
 8013cea:	46bd      	mov	sp, r7
 8013cec:	bd80      	pop	{r7, pc}

08013cee <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8013cee:	b580      	push	{r7, lr}
 8013cf0:	b084      	sub	sp, #16
 8013cf2:	af00      	add	r7, sp, #0
 8013cf4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cfa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	795b      	ldrb	r3, [r3, #5]
 8013d00:	2b01      	cmp	r3, #1
 8013d02:	d00b      	beq.n	8013d1c <dhcp_t2_timeout+0x2e>
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	795b      	ldrb	r3, [r3, #5]
 8013d08:	2b0a      	cmp	r3, #10
 8013d0a:	d007      	beq.n	8013d1c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013d10:	2b05      	cmp	r3, #5
 8013d12:	d003      	beq.n	8013d1c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	795b      	ldrb	r3, [r3, #5]
 8013d18:	2b04      	cmp	r3, #4
 8013d1a:	d116      	bne.n	8013d4a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8013d1c:	6878      	ldr	r0, [r7, #4]
 8013d1e:	f000 fbff 	bl	8014520 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	8a9b      	ldrh	r3, [r3, #20]
 8013d26:	461a      	mov	r2, r3
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	8a5b      	ldrh	r3, [r3, #18]
 8013d2c:	1ad3      	subs	r3, r2, r3
 8013d2e:	2b01      	cmp	r3, #1
 8013d30:	dd0b      	ble.n	8013d4a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	8a9b      	ldrh	r3, [r3, #20]
 8013d36:	461a      	mov	r2, r3
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	8a5b      	ldrh	r3, [r3, #18]
 8013d3c:	1ad3      	subs	r3, r2, r3
 8013d3e:	0fda      	lsrs	r2, r3, #31
 8013d40:	4413      	add	r3, r2
 8013d42:	105b      	asrs	r3, r3, #1
 8013d44:	b29a      	uxth	r2, r3
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8013d4a:	bf00      	nop
 8013d4c:	3710      	adds	r7, #16
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	bd80      	pop	{r7, pc}
	...

08013d54 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b084      	sub	sp, #16
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
 8013d5c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d62:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	2200      	movs	r2, #0
 8013d68:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	2200      	movs	r2, #0
 8013d6e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8013d70:	4b26      	ldr	r3, [pc, #152]	; (8013e0c <dhcp_handle_ack+0xb8>)
 8013d72:	78db      	ldrb	r3, [r3, #3]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d003      	beq.n	8013d80 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8013d78:	4b25      	ldr	r3, [pc, #148]	; (8013e10 <dhcp_handle_ack+0xbc>)
 8013d7a:	68da      	ldr	r2, [r3, #12]
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8013d80:	4b22      	ldr	r3, [pc, #136]	; (8013e0c <dhcp_handle_ack+0xb8>)
 8013d82:	791b      	ldrb	r3, [r3, #4]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d004      	beq.n	8013d92 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8013d88:	4b21      	ldr	r3, [pc, #132]	; (8013e10 <dhcp_handle_ack+0xbc>)
 8013d8a:	691a      	ldr	r2, [r3, #16]
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	62da      	str	r2, [r3, #44]	; 0x2c
 8013d90:	e004      	b.n	8013d9c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d96:	085a      	lsrs	r2, r3, #1
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8013d9c:	4b1b      	ldr	r3, [pc, #108]	; (8013e0c <dhcp_handle_ack+0xb8>)
 8013d9e:	795b      	ldrb	r3, [r3, #5]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d004      	beq.n	8013dae <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8013da4:	4b1a      	ldr	r3, [pc, #104]	; (8013e10 <dhcp_handle_ack+0xbc>)
 8013da6:	695a      	ldr	r2, [r3, #20]
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	631a      	str	r2, [r3, #48]	; 0x30
 8013dac:	e007      	b.n	8013dbe <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013db2:	4613      	mov	r3, r2
 8013db4:	00db      	lsls	r3, r3, #3
 8013db6:	1a9b      	subs	r3, r3, r2
 8013db8:	08da      	lsrs	r2, r3, #3
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013dbe:	683b      	ldr	r3, [r7, #0]
 8013dc0:	691a      	ldr	r2, [r3, #16]
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8013dc6:	4b11      	ldr	r3, [pc, #68]	; (8013e0c <dhcp_handle_ack+0xb8>)
 8013dc8:	799b      	ldrb	r3, [r3, #6]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d00b      	beq.n	8013de6 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8013dce:	4b10      	ldr	r3, [pc, #64]	; (8013e10 <dhcp_handle_ack+0xbc>)
 8013dd0:	699b      	ldr	r3, [r3, #24]
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f7f6 ff2f 	bl	800ac36 <lwip_htonl>
 8013dd8:	4602      	mov	r2, r0
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	2201      	movs	r2, #1
 8013de2:	71da      	strb	r2, [r3, #7]
 8013de4:	e002      	b.n	8013dec <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	2200      	movs	r2, #0
 8013dea:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8013dec:	4b07      	ldr	r3, [pc, #28]	; (8013e0c <dhcp_handle_ack+0xb8>)
 8013dee:	79db      	ldrb	r3, [r3, #7]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d007      	beq.n	8013e04 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8013df4:	4b06      	ldr	r3, [pc, #24]	; (8013e10 <dhcp_handle_ack+0xbc>)
 8013df6:	69db      	ldr	r3, [r3, #28]
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f7f6 ff1c 	bl	800ac36 <lwip_htonl>
 8013dfe:	4602      	mov	r2, r0
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8013e04:	bf00      	nop
 8013e06:	3710      	adds	r7, #16
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	bd80      	pop	{r7, pc}
 8013e0c:	2000f530 	.word	0x2000f530
 8013e10:	2000f538 	.word	0x2000f538

08013e14 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b084      	sub	sp, #16
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d109      	bne.n	8013e36 <dhcp_start+0x22>
 8013e22:	4b37      	ldr	r3, [pc, #220]	; (8013f00 <dhcp_start+0xec>)
 8013e24:	f240 22e7 	movw	r2, #743	; 0x2e7
 8013e28:	4936      	ldr	r1, [pc, #216]	; (8013f04 <dhcp_start+0xf0>)
 8013e2a:	4837      	ldr	r0, [pc, #220]	; (8013f08 <dhcp_start+0xf4>)
 8013e2c:	f004 f83c 	bl	8017ea8 <iprintf>
 8013e30:	f06f 030f 	mvn.w	r3, #15
 8013e34:	e060      	b.n	8013ef8 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013e3c:	f003 0301 	and.w	r3, r3, #1
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d109      	bne.n	8013e58 <dhcp_start+0x44>
 8013e44:	4b2e      	ldr	r3, [pc, #184]	; (8013f00 <dhcp_start+0xec>)
 8013e46:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8013e4a:	4930      	ldr	r1, [pc, #192]	; (8013f0c <dhcp_start+0xf8>)
 8013e4c:	482e      	ldr	r0, [pc, #184]	; (8013f08 <dhcp_start+0xf4>)
 8013e4e:	f004 f82b 	bl	8017ea8 <iprintf>
 8013e52:	f06f 030f 	mvn.w	r3, #15
 8013e56:	e04f      	b.n	8013ef8 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e5c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013e62:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8013e66:	d202      	bcs.n	8013e6e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8013e68:	f04f 33ff 	mov.w	r3, #4294967295
 8013e6c:	e044      	b.n	8013ef8 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d10d      	bne.n	8013e90 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8013e74:	2034      	movs	r0, #52	; 0x34
 8013e76:	f7f7 fa33 	bl	800b2e0 <mem_malloc>
 8013e7a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d102      	bne.n	8013e88 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8013e82:	f04f 33ff 	mov.w	r3, #4294967295
 8013e86:	e037      	b.n	8013ef8 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	68fa      	ldr	r2, [r7, #12]
 8013e8c:	625a      	str	r2, [r3, #36]	; 0x24
 8013e8e:	e005      	b.n	8013e9c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	791b      	ldrb	r3, [r3, #4]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d001      	beq.n	8013e9c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013e98:	f7ff fc92 	bl	80137c0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8013e9c:	2234      	movs	r2, #52	; 0x34
 8013e9e:	2100      	movs	r1, #0
 8013ea0:	68f8      	ldr	r0, [r7, #12]
 8013ea2:	f003 fff9 	bl	8017e98 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8013ea6:	f7ff fc39 	bl	801371c <dhcp_inc_pcb_refcount>
 8013eaa:	4603      	mov	r3, r0
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d002      	beq.n	8013eb6 <dhcp_start+0xa2>
    return ERR_MEM;
 8013eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8013eb4:	e020      	b.n	8013ef8 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	2201      	movs	r2, #1
 8013eba:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013ec2:	f003 0304 	and.w	r3, r3, #4
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d105      	bne.n	8013ed6 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8013eca:	2102      	movs	r1, #2
 8013ecc:	68f8      	ldr	r0, [r7, #12]
 8013ece:	f000 fd13 	bl	80148f8 <dhcp_set_state>
    return ERR_OK;
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	e010      	b.n	8013ef8 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8013ed6:	6878      	ldr	r0, [r7, #4]
 8013ed8:	f000 f90a 	bl	80140f0 <dhcp_discover>
 8013edc:	4603      	mov	r3, r0
 8013ede:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8013ee0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d005      	beq.n	8013ef4 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8013ee8:	6878      	ldr	r0, [r7, #4]
 8013eea:	f000 fc6b 	bl	80147c4 <dhcp_release_and_stop>
    return ERR_MEM;
 8013eee:	f04f 33ff 	mov.w	r3, #4294967295
 8013ef2:	e001      	b.n	8013ef8 <dhcp_start+0xe4>
  }
  return result;
 8013ef4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013ef8:	4618      	mov	r0, r3
 8013efa:	3710      	adds	r7, #16
 8013efc:	46bd      	mov	sp, r7
 8013efe:	bd80      	pop	{r7, pc}
 8013f00:	0801bf94 	.word	0x0801bf94
 8013f04:	0801c078 	.word	0x0801c078
 8013f08:	0801bff4 	.word	0x0801bff4
 8013f0c:	0801c0bc 	.word	0x0801c0bc

08013f10 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8013f10:	b580      	push	{r7, lr}
 8013f12:	b084      	sub	sp, #16
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f1c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d037      	beq.n	8013f94 <dhcp_network_changed+0x84>
    return;
  }
  switch (dhcp->state) {
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	795b      	ldrb	r3, [r3, #5]
 8013f28:	2b0a      	cmp	r3, #10
 8013f2a:	d820      	bhi.n	8013f6e <dhcp_network_changed+0x5e>
 8013f2c:	a201      	add	r2, pc, #4	; (adr r2, 8013f34 <dhcp_network_changed+0x24>)
 8013f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f32:	bf00      	nop
 8013f34:	08013f99 	.word	0x08013f99
 8013f38:	08013f6f 	.word	0x08013f6f
 8013f3c:	08013f6f 	.word	0x08013f6f
 8013f40:	08013f61 	.word	0x08013f61
 8013f44:	08013f61 	.word	0x08013f61
 8013f48:	08013f61 	.word	0x08013f61
 8013f4c:	08013f6f 	.word	0x08013f6f
 8013f50:	08013f6f 	.word	0x08013f6f
 8013f54:	08013f6f 	.word	0x08013f6f
 8013f58:	08013f6f 	.word	0x08013f6f
 8013f5c:	08013f61 	.word	0x08013f61
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	2200      	movs	r2, #0
 8013f64:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8013f66:	6878      	ldr	r0, [r7, #4]
 8013f68:	f000 fb76 	bl	8014658 <dhcp_reboot>
      break;
 8013f6c:	e015      	b.n	8013f9a <dhcp_network_changed+0x8a>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	795b      	ldrb	r3, [r3, #5]
 8013f72:	2b0c      	cmp	r3, #12
 8013f74:	d906      	bls.n	8013f84 <dhcp_network_changed+0x74>
 8013f76:	4b0a      	ldr	r3, [pc, #40]	; (8013fa0 <dhcp_network_changed+0x90>)
 8013f78:	f240 326d 	movw	r2, #877	; 0x36d
 8013f7c:	4909      	ldr	r1, [pc, #36]	; (8013fa4 <dhcp_network_changed+0x94>)
 8013f7e:	480a      	ldr	r0, [pc, #40]	; (8013fa8 <dhcp_network_changed+0x98>)
 8013f80:	f003 ff92 	bl	8017ea8 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	2200      	movs	r2, #0
 8013f88:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8013f8a:	6878      	ldr	r0, [r7, #4]
 8013f8c:	f000 f8b0 	bl	80140f0 <dhcp_discover>
      break;
 8013f90:	bf00      	nop
 8013f92:	e002      	b.n	8013f9a <dhcp_network_changed+0x8a>
    return;
 8013f94:	bf00      	nop
 8013f96:	e000      	b.n	8013f9a <dhcp_network_changed+0x8a>
      break;
 8013f98:	bf00      	nop
  }
}
 8013f9a:	3710      	adds	r7, #16
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	bd80      	pop	{r7, pc}
 8013fa0:	0801bf94 	.word	0x0801bf94
 8013fa4:	0801c0e0 	.word	0x0801c0e0
 8013fa8:	0801bff4 	.word	0x0801bff4

08013fac <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b084      	sub	sp, #16
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	6078      	str	r0, [r7, #4]
 8013fb4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d107      	bne.n	8013fcc <dhcp_arp_reply+0x20>
 8013fbc:	4b0e      	ldr	r3, [pc, #56]	; (8013ff8 <dhcp_arp_reply+0x4c>)
 8013fbe:	f240 328b 	movw	r2, #907	; 0x38b
 8013fc2:	490e      	ldr	r1, [pc, #56]	; (8013ffc <dhcp_arp_reply+0x50>)
 8013fc4:	480e      	ldr	r0, [pc, #56]	; (8014000 <dhcp_arp_reply+0x54>)
 8013fc6:	f003 ff6f 	bl	8017ea8 <iprintf>
 8013fca:	e012      	b.n	8013ff2 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fd0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d00c      	beq.n	8013ff2 <dhcp_arp_reply+0x46>
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	795b      	ldrb	r3, [r3, #5]
 8013fdc:	2b08      	cmp	r3, #8
 8013fde:	d108      	bne.n	8013ff2 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8013fe0:	683b      	ldr	r3, [r7, #0]
 8013fe2:	681a      	ldr	r2, [r3, #0]
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	69db      	ldr	r3, [r3, #28]
 8013fe8:	429a      	cmp	r2, r3
 8013fea:	d102      	bne.n	8013ff2 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8013fec:	6878      	ldr	r0, [r7, #4]
 8013fee:	f000 f809 	bl	8014004 <dhcp_decline>
    }
  }
}
 8013ff2:	3710      	adds	r7, #16
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	bd80      	pop	{r7, pc}
 8013ff8:	0801bf94 	.word	0x0801bf94
 8013ffc:	0801c078 	.word	0x0801c078
 8014000:	0801bff4 	.word	0x0801bff4

08014004 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8014004:	b5b0      	push	{r4, r5, r7, lr}
 8014006:	b08a      	sub	sp, #40	; 0x28
 8014008:	af02      	add	r7, sp, #8
 801400a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014010:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014012:	210c      	movs	r1, #12
 8014014:	69b8      	ldr	r0, [r7, #24]
 8014016:	f000 fc6f 	bl	80148f8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801401a:	f107 030c 	add.w	r3, r7, #12
 801401e:	2204      	movs	r2, #4
 8014020:	69b9      	ldr	r1, [r7, #24]
 8014022:	6878      	ldr	r0, [r7, #4]
 8014024:	f001 f8f2 	bl	801520c <dhcp_create_msg>
 8014028:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801402a:	697b      	ldr	r3, [r7, #20]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d035      	beq.n	801409c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014030:	697b      	ldr	r3, [r7, #20]
 8014032:	685b      	ldr	r3, [r3, #4]
 8014034:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014036:	89b8      	ldrh	r0, [r7, #12]
 8014038:	693b      	ldr	r3, [r7, #16]
 801403a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801403e:	2304      	movs	r3, #4
 8014040:	2232      	movs	r2, #50	; 0x32
 8014042:	f000 fc73 	bl	801492c <dhcp_option>
 8014046:	4603      	mov	r3, r0
 8014048:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801404a:	89bc      	ldrh	r4, [r7, #12]
 801404c:	693b      	ldr	r3, [r7, #16]
 801404e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014052:	69bb      	ldr	r3, [r7, #24]
 8014054:	69db      	ldr	r3, [r3, #28]
 8014056:	4618      	mov	r0, r3
 8014058:	f7f6 fded 	bl	800ac36 <lwip_htonl>
 801405c:	4603      	mov	r3, r0
 801405e:	461a      	mov	r2, r3
 8014060:	4629      	mov	r1, r5
 8014062:	4620      	mov	r0, r4
 8014064:	f000 fcee 	bl	8014a44 <dhcp_option_long>
 8014068:	4603      	mov	r3, r0
 801406a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801406c:	89b8      	ldrh	r0, [r7, #12]
 801406e:	693b      	ldr	r3, [r7, #16]
 8014070:	33f0      	adds	r3, #240	; 0xf0
 8014072:	697a      	ldr	r2, [r7, #20]
 8014074:	4619      	mov	r1, r3
 8014076:	f001 f99f 	bl	80153b8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801407a:	4b19      	ldr	r3, [pc, #100]	; (80140e0 <dhcp_decline+0xdc>)
 801407c:	6818      	ldr	r0, [r3, #0]
 801407e:	4b19      	ldr	r3, [pc, #100]	; (80140e4 <dhcp_decline+0xe0>)
 8014080:	9301      	str	r3, [sp, #4]
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	9300      	str	r3, [sp, #0]
 8014086:	2343      	movs	r3, #67	; 0x43
 8014088:	4a17      	ldr	r2, [pc, #92]	; (80140e8 <dhcp_decline+0xe4>)
 801408a:	6979      	ldr	r1, [r7, #20]
 801408c:	f7ff f8b4 	bl	80131f8 <udp_sendto_if_src>
 8014090:	4603      	mov	r3, r0
 8014092:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014094:	6978      	ldr	r0, [r7, #20]
 8014096:	f7f8 f9a3 	bl	800c3e0 <pbuf_free>
 801409a:	e001      	b.n	80140a0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801409c:	23ff      	movs	r3, #255	; 0xff
 801409e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80140a0:	69bb      	ldr	r3, [r7, #24]
 80140a2:	799b      	ldrb	r3, [r3, #6]
 80140a4:	2bff      	cmp	r3, #255	; 0xff
 80140a6:	d005      	beq.n	80140b4 <dhcp_decline+0xb0>
    dhcp->tries++;
 80140a8:	69bb      	ldr	r3, [r7, #24]
 80140aa:	799b      	ldrb	r3, [r3, #6]
 80140ac:	3301      	adds	r3, #1
 80140ae:	b2da      	uxtb	r2, r3
 80140b0:	69bb      	ldr	r3, [r7, #24]
 80140b2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80140b4:	f242 7310 	movw	r3, #10000	; 0x2710
 80140b8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80140ba:	89fb      	ldrh	r3, [r7, #14]
 80140bc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80140c0:	4a0a      	ldr	r2, [pc, #40]	; (80140ec <dhcp_decline+0xe8>)
 80140c2:	fb82 1203 	smull	r1, r2, r2, r3
 80140c6:	1152      	asrs	r2, r2, #5
 80140c8:	17db      	asrs	r3, r3, #31
 80140ca:	1ad3      	subs	r3, r2, r3
 80140cc:	b29a      	uxth	r2, r3
 80140ce:	69bb      	ldr	r3, [r7, #24]
 80140d0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80140d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80140d6:	4618      	mov	r0, r3
 80140d8:	3720      	adds	r7, #32
 80140da:	46bd      	mov	sp, r7
 80140dc:	bdb0      	pop	{r4, r5, r7, pc}
 80140de:	bf00      	nop
 80140e0:	20008ad0 	.word	0x20008ad0
 80140e4:	08026c6c 	.word	0x08026c6c
 80140e8:	08026c70 	.word	0x08026c70
 80140ec:	10624dd3 	.word	0x10624dd3

080140f0 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b08a      	sub	sp, #40	; 0x28
 80140f4:	af02      	add	r7, sp, #8
 80140f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140fc:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80140fe:	2300      	movs	r3, #0
 8014100:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8014102:	69bb      	ldr	r3, [r7, #24]
 8014104:	2200      	movs	r2, #0
 8014106:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014108:	2106      	movs	r1, #6
 801410a:	69b8      	ldr	r0, [r7, #24]
 801410c:	f000 fbf4 	bl	80148f8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8014110:	f107 0308 	add.w	r3, r7, #8
 8014114:	2201      	movs	r2, #1
 8014116:	69b9      	ldr	r1, [r7, #24]
 8014118:	6878      	ldr	r0, [r7, #4]
 801411a:	f001 f877 	bl	801520c <dhcp_create_msg>
 801411e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8014120:	693b      	ldr	r3, [r7, #16]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d04b      	beq.n	80141be <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014126:	693b      	ldr	r3, [r7, #16]
 8014128:	685b      	ldr	r3, [r3, #4]
 801412a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801412c:	8938      	ldrh	r0, [r7, #8]
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014134:	2302      	movs	r3, #2
 8014136:	2239      	movs	r2, #57	; 0x39
 8014138:	f000 fbf8 	bl	801492c <dhcp_option>
 801413c:	4603      	mov	r3, r0
 801413e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014140:	8938      	ldrh	r0, [r7, #8]
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801414c:	461a      	mov	r2, r3
 801414e:	f000 fc47 	bl	80149e0 <dhcp_option_short>
 8014152:	4603      	mov	r3, r0
 8014154:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014156:	8938      	ldrh	r0, [r7, #8]
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801415e:	2303      	movs	r3, #3
 8014160:	2237      	movs	r2, #55	; 0x37
 8014162:	f000 fbe3 	bl	801492c <dhcp_option>
 8014166:	4603      	mov	r3, r0
 8014168:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801416a:	2300      	movs	r3, #0
 801416c:	77fb      	strb	r3, [r7, #31]
 801416e:	e00e      	b.n	801418e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014170:	8938      	ldrh	r0, [r7, #8]
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014178:	7ffb      	ldrb	r3, [r7, #31]
 801417a:	4a29      	ldr	r2, [pc, #164]	; (8014220 <dhcp_discover+0x130>)
 801417c:	5cd3      	ldrb	r3, [r2, r3]
 801417e:	461a      	mov	r2, r3
 8014180:	f000 fc08 	bl	8014994 <dhcp_option_byte>
 8014184:	4603      	mov	r3, r0
 8014186:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014188:	7ffb      	ldrb	r3, [r7, #31]
 801418a:	3301      	adds	r3, #1
 801418c:	77fb      	strb	r3, [r7, #31]
 801418e:	7ffb      	ldrb	r3, [r7, #31]
 8014190:	2b02      	cmp	r3, #2
 8014192:	d9ed      	bls.n	8014170 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014194:	8938      	ldrh	r0, [r7, #8]
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	33f0      	adds	r3, #240	; 0xf0
 801419a:	693a      	ldr	r2, [r7, #16]
 801419c:	4619      	mov	r1, r3
 801419e:	f001 f90b 	bl	80153b8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80141a2:	4b20      	ldr	r3, [pc, #128]	; (8014224 <dhcp_discover+0x134>)
 80141a4:	6818      	ldr	r0, [r3, #0]
 80141a6:	4b20      	ldr	r3, [pc, #128]	; (8014228 <dhcp_discover+0x138>)
 80141a8:	9301      	str	r3, [sp, #4]
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	9300      	str	r3, [sp, #0]
 80141ae:	2343      	movs	r3, #67	; 0x43
 80141b0:	4a1e      	ldr	r2, [pc, #120]	; (801422c <dhcp_discover+0x13c>)
 80141b2:	6939      	ldr	r1, [r7, #16]
 80141b4:	f7ff f820 	bl	80131f8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80141b8:	6938      	ldr	r0, [r7, #16]
 80141ba:	f7f8 f911 	bl	800c3e0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80141be:	69bb      	ldr	r3, [r7, #24]
 80141c0:	799b      	ldrb	r3, [r3, #6]
 80141c2:	2bff      	cmp	r3, #255	; 0xff
 80141c4:	d005      	beq.n	80141d2 <dhcp_discover+0xe2>
    dhcp->tries++;
 80141c6:	69bb      	ldr	r3, [r7, #24]
 80141c8:	799b      	ldrb	r3, [r3, #6]
 80141ca:	3301      	adds	r3, #1
 80141cc:	b2da      	uxtb	r2, r3
 80141ce:	69bb      	ldr	r3, [r7, #24]
 80141d0:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80141d2:	69bb      	ldr	r3, [r7, #24]
 80141d4:	799b      	ldrb	r3, [r3, #6]
 80141d6:	2b05      	cmp	r3, #5
 80141d8:	d80d      	bhi.n	80141f6 <dhcp_discover+0x106>
 80141da:	69bb      	ldr	r3, [r7, #24]
 80141dc:	799b      	ldrb	r3, [r3, #6]
 80141de:	461a      	mov	r2, r3
 80141e0:	2301      	movs	r3, #1
 80141e2:	4093      	lsls	r3, r2
 80141e4:	b29b      	uxth	r3, r3
 80141e6:	461a      	mov	r2, r3
 80141e8:	0152      	lsls	r2, r2, #5
 80141ea:	1ad2      	subs	r2, r2, r3
 80141ec:	0092      	lsls	r2, r2, #2
 80141ee:	4413      	add	r3, r2
 80141f0:	00db      	lsls	r3, r3, #3
 80141f2:	b29b      	uxth	r3, r3
 80141f4:	e001      	b.n	80141fa <dhcp_discover+0x10a>
 80141f6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80141fa:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80141fc:	897b      	ldrh	r3, [r7, #10]
 80141fe:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014202:	4a0b      	ldr	r2, [pc, #44]	; (8014230 <dhcp_discover+0x140>)
 8014204:	fb82 1203 	smull	r1, r2, r2, r3
 8014208:	1152      	asrs	r2, r2, #5
 801420a:	17db      	asrs	r3, r3, #31
 801420c:	1ad3      	subs	r3, r2, r3
 801420e:	b29a      	uxth	r2, r3
 8014210:	69bb      	ldr	r3, [r7, #24]
 8014212:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014214:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014218:	4618      	mov	r0, r3
 801421a:	3720      	adds	r7, #32
 801421c:	46bd      	mov	sp, r7
 801421e:	bd80      	pop	{r7, pc}
 8014220:	2000001c 	.word	0x2000001c
 8014224:	20008ad0 	.word	0x20008ad0
 8014228:	08026c6c 	.word	0x08026c6c
 801422c:	08026c70 	.word	0x08026c70
 8014230:	10624dd3 	.word	0x10624dd3

08014234 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014234:	b580      	push	{r7, lr}
 8014236:	b088      	sub	sp, #32
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d107      	bne.n	8014252 <dhcp_bind+0x1e>
 8014242:	4b64      	ldr	r3, [pc, #400]	; (80143d4 <dhcp_bind+0x1a0>)
 8014244:	f240 4215 	movw	r2, #1045	; 0x415
 8014248:	4963      	ldr	r1, [pc, #396]	; (80143d8 <dhcp_bind+0x1a4>)
 801424a:	4864      	ldr	r0, [pc, #400]	; (80143dc <dhcp_bind+0x1a8>)
 801424c:	f003 fe2c 	bl	8017ea8 <iprintf>
 8014250:	e0bc      	b.n	80143cc <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014256:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8014258:	69bb      	ldr	r3, [r7, #24]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d107      	bne.n	801426e <dhcp_bind+0x3a>
 801425e:	4b5d      	ldr	r3, [pc, #372]	; (80143d4 <dhcp_bind+0x1a0>)
 8014260:	f240 4217 	movw	r2, #1047	; 0x417
 8014264:	495e      	ldr	r1, [pc, #376]	; (80143e0 <dhcp_bind+0x1ac>)
 8014266:	485d      	ldr	r0, [pc, #372]	; (80143dc <dhcp_bind+0x1a8>)
 8014268:	f003 fe1e 	bl	8017ea8 <iprintf>
 801426c:	e0ae      	b.n	80143cc <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801426e:	69bb      	ldr	r3, [r7, #24]
 8014270:	2200      	movs	r2, #0
 8014272:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8014274:	69bb      	ldr	r3, [r7, #24]
 8014276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014278:	f1b3 3fff 	cmp.w	r3, #4294967295
 801427c:	d019      	beq.n	80142b2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801427e:	69bb      	ldr	r3, [r7, #24]
 8014280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014282:	331e      	adds	r3, #30
 8014284:	4a57      	ldr	r2, [pc, #348]	; (80143e4 <dhcp_bind+0x1b0>)
 8014286:	fba2 2303 	umull	r2, r3, r2, r3
 801428a:	095b      	lsrs	r3, r3, #5
 801428c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801428e:	69fb      	ldr	r3, [r7, #28]
 8014290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014294:	d302      	bcc.n	801429c <dhcp_bind+0x68>
      timeout = 0xffff;
 8014296:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801429a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801429c:	69fb      	ldr	r3, [r7, #28]
 801429e:	b29a      	uxth	r2, r3
 80142a0:	69bb      	ldr	r3, [r7, #24]
 80142a2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80142a4:	69bb      	ldr	r3, [r7, #24]
 80142a6:	8a9b      	ldrh	r3, [r3, #20]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d102      	bne.n	80142b2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80142ac:	69bb      	ldr	r3, [r7, #24]
 80142ae:	2201      	movs	r2, #1
 80142b0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80142b2:	69bb      	ldr	r3, [r7, #24]
 80142b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142ba:	d01d      	beq.n	80142f8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80142bc:	69bb      	ldr	r3, [r7, #24]
 80142be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142c0:	331e      	adds	r3, #30
 80142c2:	4a48      	ldr	r2, [pc, #288]	; (80143e4 <dhcp_bind+0x1b0>)
 80142c4:	fba2 2303 	umull	r2, r3, r2, r3
 80142c8:	095b      	lsrs	r3, r3, #5
 80142ca:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80142cc:	69fb      	ldr	r3, [r7, #28]
 80142ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80142d2:	d302      	bcc.n	80142da <dhcp_bind+0xa6>
      timeout = 0xffff;
 80142d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80142d8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80142da:	69fb      	ldr	r3, [r7, #28]
 80142dc:	b29a      	uxth	r2, r3
 80142de:	69bb      	ldr	r3, [r7, #24]
 80142e0:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80142e2:	69bb      	ldr	r3, [r7, #24]
 80142e4:	895b      	ldrh	r3, [r3, #10]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d102      	bne.n	80142f0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80142ea:	69bb      	ldr	r3, [r7, #24]
 80142ec:	2201      	movs	r2, #1
 80142ee:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80142f0:	69bb      	ldr	r3, [r7, #24]
 80142f2:	895a      	ldrh	r2, [r3, #10]
 80142f4:	69bb      	ldr	r3, [r7, #24]
 80142f6:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80142f8:	69bb      	ldr	r3, [r7, #24]
 80142fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014300:	d01d      	beq.n	801433e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014302:	69bb      	ldr	r3, [r7, #24]
 8014304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014306:	331e      	adds	r3, #30
 8014308:	4a36      	ldr	r2, [pc, #216]	; (80143e4 <dhcp_bind+0x1b0>)
 801430a:	fba2 2303 	umull	r2, r3, r2, r3
 801430e:	095b      	lsrs	r3, r3, #5
 8014310:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014312:	69fb      	ldr	r3, [r7, #28]
 8014314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014318:	d302      	bcc.n	8014320 <dhcp_bind+0xec>
      timeout = 0xffff;
 801431a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801431e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8014320:	69fb      	ldr	r3, [r7, #28]
 8014322:	b29a      	uxth	r2, r3
 8014324:	69bb      	ldr	r3, [r7, #24]
 8014326:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8014328:	69bb      	ldr	r3, [r7, #24]
 801432a:	899b      	ldrh	r3, [r3, #12]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d102      	bne.n	8014336 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8014330:	69bb      	ldr	r3, [r7, #24]
 8014332:	2201      	movs	r2, #1
 8014334:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8014336:	69bb      	ldr	r3, [r7, #24]
 8014338:	899a      	ldrh	r2, [r3, #12]
 801433a:	69bb      	ldr	r3, [r7, #24]
 801433c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801433e:	69bb      	ldr	r3, [r7, #24]
 8014340:	895a      	ldrh	r2, [r3, #10]
 8014342:	69bb      	ldr	r3, [r7, #24]
 8014344:	899b      	ldrh	r3, [r3, #12]
 8014346:	429a      	cmp	r2, r3
 8014348:	d306      	bcc.n	8014358 <dhcp_bind+0x124>
 801434a:	69bb      	ldr	r3, [r7, #24]
 801434c:	899b      	ldrh	r3, [r3, #12]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d002      	beq.n	8014358 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8014352:	69bb      	ldr	r3, [r7, #24]
 8014354:	2200      	movs	r2, #0
 8014356:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8014358:	69bb      	ldr	r3, [r7, #24]
 801435a:	79db      	ldrb	r3, [r3, #7]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d003      	beq.n	8014368 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8014360:	69bb      	ldr	r3, [r7, #24]
 8014362:	6a1b      	ldr	r3, [r3, #32]
 8014364:	613b      	str	r3, [r7, #16]
 8014366:	e014      	b.n	8014392 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8014368:	69bb      	ldr	r3, [r7, #24]
 801436a:	331c      	adds	r3, #28
 801436c:	781b      	ldrb	r3, [r3, #0]
 801436e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8014370:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014374:	2b00      	cmp	r3, #0
 8014376:	db02      	blt.n	801437e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8014378:	23ff      	movs	r3, #255	; 0xff
 801437a:	613b      	str	r3, [r7, #16]
 801437c:	e009      	b.n	8014392 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801437e:	7dfb      	ldrb	r3, [r7, #23]
 8014380:	2bbf      	cmp	r3, #191	; 0xbf
 8014382:	d903      	bls.n	801438c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8014384:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8014388:	613b      	str	r3, [r7, #16]
 801438a:	e002      	b.n	8014392 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801438c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014390:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8014392:	69bb      	ldr	r3, [r7, #24]
 8014394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014396:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d108      	bne.n	80143b0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801439e:	69bb      	ldr	r3, [r7, #24]
 80143a0:	69da      	ldr	r2, [r3, #28]
 80143a2:	693b      	ldr	r3, [r7, #16]
 80143a4:	4013      	ands	r3, r2
 80143a6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80143ae:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80143b0:	210a      	movs	r1, #10
 80143b2:	69b8      	ldr	r0, [r7, #24]
 80143b4:	f000 faa0 	bl	80148f8 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80143b8:	69bb      	ldr	r3, [r7, #24]
 80143ba:	f103 011c 	add.w	r1, r3, #28
 80143be:	f107 030c 	add.w	r3, r7, #12
 80143c2:	f107 0210 	add.w	r2, r7, #16
 80143c6:	6878      	ldr	r0, [r7, #4]
 80143c8:	f7f7 fb00 	bl	800b9cc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80143cc:	3720      	adds	r7, #32
 80143ce:	46bd      	mov	sp, r7
 80143d0:	bd80      	pop	{r7, pc}
 80143d2:	bf00      	nop
 80143d4:	0801bf94 	.word	0x0801bf94
 80143d8:	0801c0f4 	.word	0x0801c0f4
 80143dc:	0801bff4 	.word	0x0801bff4
 80143e0:	0801c110 	.word	0x0801c110
 80143e4:	88888889 	.word	0x88888889

080143e8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80143e8:	b580      	push	{r7, lr}
 80143ea:	b08a      	sub	sp, #40	; 0x28
 80143ec:	af02      	add	r7, sp, #8
 80143ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143f4:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80143f6:	2105      	movs	r1, #5
 80143f8:	69b8      	ldr	r0, [r7, #24]
 80143fa:	f000 fa7d 	bl	80148f8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80143fe:	f107 030c 	add.w	r3, r7, #12
 8014402:	2203      	movs	r2, #3
 8014404:	69b9      	ldr	r1, [r7, #24]
 8014406:	6878      	ldr	r0, [r7, #4]
 8014408:	f000 ff00 	bl	801520c <dhcp_create_msg>
 801440c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801440e:	697b      	ldr	r3, [r7, #20]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d04e      	beq.n	80144b2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014414:	697b      	ldr	r3, [r7, #20]
 8014416:	685b      	ldr	r3, [r3, #4]
 8014418:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801441a:	89b8      	ldrh	r0, [r7, #12]
 801441c:	693b      	ldr	r3, [r7, #16]
 801441e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014422:	2302      	movs	r3, #2
 8014424:	2239      	movs	r2, #57	; 0x39
 8014426:	f000 fa81 	bl	801492c <dhcp_option>
 801442a:	4603      	mov	r3, r0
 801442c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801442e:	89b8      	ldrh	r0, [r7, #12]
 8014430:	693b      	ldr	r3, [r7, #16]
 8014432:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801443a:	461a      	mov	r2, r3
 801443c:	f000 fad0 	bl	80149e0 <dhcp_option_short>
 8014440:	4603      	mov	r3, r0
 8014442:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014444:	89b8      	ldrh	r0, [r7, #12]
 8014446:	693b      	ldr	r3, [r7, #16]
 8014448:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801444c:	2303      	movs	r3, #3
 801444e:	2237      	movs	r2, #55	; 0x37
 8014450:	f000 fa6c 	bl	801492c <dhcp_option>
 8014454:	4603      	mov	r3, r0
 8014456:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014458:	2300      	movs	r3, #0
 801445a:	77bb      	strb	r3, [r7, #30]
 801445c:	e00e      	b.n	801447c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801445e:	89b8      	ldrh	r0, [r7, #12]
 8014460:	693b      	ldr	r3, [r7, #16]
 8014462:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014466:	7fbb      	ldrb	r3, [r7, #30]
 8014468:	4a2a      	ldr	r2, [pc, #168]	; (8014514 <dhcp_renew+0x12c>)
 801446a:	5cd3      	ldrb	r3, [r2, r3]
 801446c:	461a      	mov	r2, r3
 801446e:	f000 fa91 	bl	8014994 <dhcp_option_byte>
 8014472:	4603      	mov	r3, r0
 8014474:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014476:	7fbb      	ldrb	r3, [r7, #30]
 8014478:	3301      	adds	r3, #1
 801447a:	77bb      	strb	r3, [r7, #30]
 801447c:	7fbb      	ldrb	r3, [r7, #30]
 801447e:	2b02      	cmp	r3, #2
 8014480:	d9ed      	bls.n	801445e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014482:	89b8      	ldrh	r0, [r7, #12]
 8014484:	693b      	ldr	r3, [r7, #16]
 8014486:	33f0      	adds	r3, #240	; 0xf0
 8014488:	697a      	ldr	r2, [r7, #20]
 801448a:	4619      	mov	r1, r3
 801448c:	f000 ff94 	bl	80153b8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014490:	4b21      	ldr	r3, [pc, #132]	; (8014518 <dhcp_renew+0x130>)
 8014492:	6818      	ldr	r0, [r3, #0]
 8014494:	69bb      	ldr	r3, [r7, #24]
 8014496:	f103 0218 	add.w	r2, r3, #24
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	9300      	str	r3, [sp, #0]
 801449e:	2343      	movs	r3, #67	; 0x43
 80144a0:	6979      	ldr	r1, [r7, #20]
 80144a2:	f7fe fe35 	bl	8013110 <udp_sendto_if>
 80144a6:	4603      	mov	r3, r0
 80144a8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80144aa:	6978      	ldr	r0, [r7, #20]
 80144ac:	f7f7 ff98 	bl	800c3e0 <pbuf_free>
 80144b0:	e001      	b.n	80144b6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80144b2:	23ff      	movs	r3, #255	; 0xff
 80144b4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80144b6:	69bb      	ldr	r3, [r7, #24]
 80144b8:	799b      	ldrb	r3, [r3, #6]
 80144ba:	2bff      	cmp	r3, #255	; 0xff
 80144bc:	d005      	beq.n	80144ca <dhcp_renew+0xe2>
    dhcp->tries++;
 80144be:	69bb      	ldr	r3, [r7, #24]
 80144c0:	799b      	ldrb	r3, [r3, #6]
 80144c2:	3301      	adds	r3, #1
 80144c4:	b2da      	uxtb	r2, r3
 80144c6:	69bb      	ldr	r3, [r7, #24]
 80144c8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80144ca:	69bb      	ldr	r3, [r7, #24]
 80144cc:	799b      	ldrb	r3, [r3, #6]
 80144ce:	2b09      	cmp	r3, #9
 80144d0:	d80a      	bhi.n	80144e8 <dhcp_renew+0x100>
 80144d2:	69bb      	ldr	r3, [r7, #24]
 80144d4:	799b      	ldrb	r3, [r3, #6]
 80144d6:	b29b      	uxth	r3, r3
 80144d8:	461a      	mov	r2, r3
 80144da:	0152      	lsls	r2, r2, #5
 80144dc:	1ad2      	subs	r2, r2, r3
 80144de:	0092      	lsls	r2, r2, #2
 80144e0:	4413      	add	r3, r2
 80144e2:	011b      	lsls	r3, r3, #4
 80144e4:	b29b      	uxth	r3, r3
 80144e6:	e001      	b.n	80144ec <dhcp_renew+0x104>
 80144e8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80144ec:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80144ee:	89fb      	ldrh	r3, [r7, #14]
 80144f0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80144f4:	4a09      	ldr	r2, [pc, #36]	; (801451c <dhcp_renew+0x134>)
 80144f6:	fb82 1203 	smull	r1, r2, r2, r3
 80144fa:	1152      	asrs	r2, r2, #5
 80144fc:	17db      	asrs	r3, r3, #31
 80144fe:	1ad3      	subs	r3, r2, r3
 8014500:	b29a      	uxth	r2, r3
 8014502:	69bb      	ldr	r3, [r7, #24]
 8014504:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014506:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801450a:	4618      	mov	r0, r3
 801450c:	3720      	adds	r7, #32
 801450e:	46bd      	mov	sp, r7
 8014510:	bd80      	pop	{r7, pc}
 8014512:	bf00      	nop
 8014514:	2000001c 	.word	0x2000001c
 8014518:	20008ad0 	.word	0x20008ad0
 801451c:	10624dd3 	.word	0x10624dd3

08014520 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8014520:	b580      	push	{r7, lr}
 8014522:	b08a      	sub	sp, #40	; 0x28
 8014524:	af02      	add	r7, sp, #8
 8014526:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801452c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801452e:	2104      	movs	r1, #4
 8014530:	69b8      	ldr	r0, [r7, #24]
 8014532:	f000 f9e1 	bl	80148f8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014536:	f107 030c 	add.w	r3, r7, #12
 801453a:	2203      	movs	r2, #3
 801453c:	69b9      	ldr	r1, [r7, #24]
 801453e:	6878      	ldr	r0, [r7, #4]
 8014540:	f000 fe64 	bl	801520c <dhcp_create_msg>
 8014544:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014546:	697b      	ldr	r3, [r7, #20]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d04c      	beq.n	80145e6 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801454c:	697b      	ldr	r3, [r7, #20]
 801454e:	685b      	ldr	r3, [r3, #4]
 8014550:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014552:	89b8      	ldrh	r0, [r7, #12]
 8014554:	693b      	ldr	r3, [r7, #16]
 8014556:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801455a:	2302      	movs	r3, #2
 801455c:	2239      	movs	r2, #57	; 0x39
 801455e:	f000 f9e5 	bl	801492c <dhcp_option>
 8014562:	4603      	mov	r3, r0
 8014564:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014566:	89b8      	ldrh	r0, [r7, #12]
 8014568:	693b      	ldr	r3, [r7, #16]
 801456a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014572:	461a      	mov	r2, r3
 8014574:	f000 fa34 	bl	80149e0 <dhcp_option_short>
 8014578:	4603      	mov	r3, r0
 801457a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801457c:	89b8      	ldrh	r0, [r7, #12]
 801457e:	693b      	ldr	r3, [r7, #16]
 8014580:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014584:	2303      	movs	r3, #3
 8014586:	2237      	movs	r2, #55	; 0x37
 8014588:	f000 f9d0 	bl	801492c <dhcp_option>
 801458c:	4603      	mov	r3, r0
 801458e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014590:	2300      	movs	r3, #0
 8014592:	77bb      	strb	r3, [r7, #30]
 8014594:	e00e      	b.n	80145b4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014596:	89b8      	ldrh	r0, [r7, #12]
 8014598:	693b      	ldr	r3, [r7, #16]
 801459a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801459e:	7fbb      	ldrb	r3, [r7, #30]
 80145a0:	4a29      	ldr	r2, [pc, #164]	; (8014648 <dhcp_rebind+0x128>)
 80145a2:	5cd3      	ldrb	r3, [r2, r3]
 80145a4:	461a      	mov	r2, r3
 80145a6:	f000 f9f5 	bl	8014994 <dhcp_option_byte>
 80145aa:	4603      	mov	r3, r0
 80145ac:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80145ae:	7fbb      	ldrb	r3, [r7, #30]
 80145b0:	3301      	adds	r3, #1
 80145b2:	77bb      	strb	r3, [r7, #30]
 80145b4:	7fbb      	ldrb	r3, [r7, #30]
 80145b6:	2b02      	cmp	r3, #2
 80145b8:	d9ed      	bls.n	8014596 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80145ba:	89b8      	ldrh	r0, [r7, #12]
 80145bc:	693b      	ldr	r3, [r7, #16]
 80145be:	33f0      	adds	r3, #240	; 0xf0
 80145c0:	697a      	ldr	r2, [r7, #20]
 80145c2:	4619      	mov	r1, r3
 80145c4:	f000 fef8 	bl	80153b8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80145c8:	4b20      	ldr	r3, [pc, #128]	; (801464c <dhcp_rebind+0x12c>)
 80145ca:	6818      	ldr	r0, [r3, #0]
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	9300      	str	r3, [sp, #0]
 80145d0:	2343      	movs	r3, #67	; 0x43
 80145d2:	4a1f      	ldr	r2, [pc, #124]	; (8014650 <dhcp_rebind+0x130>)
 80145d4:	6979      	ldr	r1, [r7, #20]
 80145d6:	f7fe fd9b 	bl	8013110 <udp_sendto_if>
 80145da:	4603      	mov	r3, r0
 80145dc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80145de:	6978      	ldr	r0, [r7, #20]
 80145e0:	f7f7 fefe 	bl	800c3e0 <pbuf_free>
 80145e4:	e001      	b.n	80145ea <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80145e6:	23ff      	movs	r3, #255	; 0xff
 80145e8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80145ea:	69bb      	ldr	r3, [r7, #24]
 80145ec:	799b      	ldrb	r3, [r3, #6]
 80145ee:	2bff      	cmp	r3, #255	; 0xff
 80145f0:	d005      	beq.n	80145fe <dhcp_rebind+0xde>
    dhcp->tries++;
 80145f2:	69bb      	ldr	r3, [r7, #24]
 80145f4:	799b      	ldrb	r3, [r3, #6]
 80145f6:	3301      	adds	r3, #1
 80145f8:	b2da      	uxtb	r2, r3
 80145fa:	69bb      	ldr	r3, [r7, #24]
 80145fc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80145fe:	69bb      	ldr	r3, [r7, #24]
 8014600:	799b      	ldrb	r3, [r3, #6]
 8014602:	2b09      	cmp	r3, #9
 8014604:	d80a      	bhi.n	801461c <dhcp_rebind+0xfc>
 8014606:	69bb      	ldr	r3, [r7, #24]
 8014608:	799b      	ldrb	r3, [r3, #6]
 801460a:	b29b      	uxth	r3, r3
 801460c:	461a      	mov	r2, r3
 801460e:	0152      	lsls	r2, r2, #5
 8014610:	1ad2      	subs	r2, r2, r3
 8014612:	0092      	lsls	r2, r2, #2
 8014614:	4413      	add	r3, r2
 8014616:	00db      	lsls	r3, r3, #3
 8014618:	b29b      	uxth	r3, r3
 801461a:	e001      	b.n	8014620 <dhcp_rebind+0x100>
 801461c:	f242 7310 	movw	r3, #10000	; 0x2710
 8014620:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014622:	89fb      	ldrh	r3, [r7, #14]
 8014624:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014628:	4a0a      	ldr	r2, [pc, #40]	; (8014654 <dhcp_rebind+0x134>)
 801462a:	fb82 1203 	smull	r1, r2, r2, r3
 801462e:	1152      	asrs	r2, r2, #5
 8014630:	17db      	asrs	r3, r3, #31
 8014632:	1ad3      	subs	r3, r2, r3
 8014634:	b29a      	uxth	r2, r3
 8014636:	69bb      	ldr	r3, [r7, #24]
 8014638:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801463a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801463e:	4618      	mov	r0, r3
 8014640:	3720      	adds	r7, #32
 8014642:	46bd      	mov	sp, r7
 8014644:	bd80      	pop	{r7, pc}
 8014646:	bf00      	nop
 8014648:	2000001c 	.word	0x2000001c
 801464c:	20008ad0 	.word	0x20008ad0
 8014650:	08026c70 	.word	0x08026c70
 8014654:	10624dd3 	.word	0x10624dd3

08014658 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8014658:	b5b0      	push	{r4, r5, r7, lr}
 801465a:	b08a      	sub	sp, #40	; 0x28
 801465c:	af02      	add	r7, sp, #8
 801465e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014664:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8014666:	2103      	movs	r1, #3
 8014668:	69b8      	ldr	r0, [r7, #24]
 801466a:	f000 f945 	bl	80148f8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801466e:	f107 030c 	add.w	r3, r7, #12
 8014672:	2203      	movs	r2, #3
 8014674:	69b9      	ldr	r1, [r7, #24]
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f000 fdc8 	bl	801520c <dhcp_create_msg>
 801467c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801467e:	697b      	ldr	r3, [r7, #20]
 8014680:	2b00      	cmp	r3, #0
 8014682:	d066      	beq.n	8014752 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014684:	697b      	ldr	r3, [r7, #20]
 8014686:	685b      	ldr	r3, [r3, #4]
 8014688:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801468a:	89b8      	ldrh	r0, [r7, #12]
 801468c:	693b      	ldr	r3, [r7, #16]
 801468e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014692:	2302      	movs	r3, #2
 8014694:	2239      	movs	r2, #57	; 0x39
 8014696:	f000 f949 	bl	801492c <dhcp_option>
 801469a:	4603      	mov	r3, r0
 801469c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801469e:	89b8      	ldrh	r0, [r7, #12]
 80146a0:	693b      	ldr	r3, [r7, #16]
 80146a2:	33f0      	adds	r3, #240	; 0xf0
 80146a4:	f44f 7210 	mov.w	r2, #576	; 0x240
 80146a8:	4619      	mov	r1, r3
 80146aa:	f000 f999 	bl	80149e0 <dhcp_option_short>
 80146ae:	4603      	mov	r3, r0
 80146b0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80146b2:	89b8      	ldrh	r0, [r7, #12]
 80146b4:	693b      	ldr	r3, [r7, #16]
 80146b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80146ba:	2304      	movs	r3, #4
 80146bc:	2232      	movs	r2, #50	; 0x32
 80146be:	f000 f935 	bl	801492c <dhcp_option>
 80146c2:	4603      	mov	r3, r0
 80146c4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80146c6:	89bc      	ldrh	r4, [r7, #12]
 80146c8:	693b      	ldr	r3, [r7, #16]
 80146ca:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80146ce:	69bb      	ldr	r3, [r7, #24]
 80146d0:	69db      	ldr	r3, [r3, #28]
 80146d2:	4618      	mov	r0, r3
 80146d4:	f7f6 faaf 	bl	800ac36 <lwip_htonl>
 80146d8:	4603      	mov	r3, r0
 80146da:	461a      	mov	r2, r3
 80146dc:	4629      	mov	r1, r5
 80146de:	4620      	mov	r0, r4
 80146e0:	f000 f9b0 	bl	8014a44 <dhcp_option_long>
 80146e4:	4603      	mov	r3, r0
 80146e6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80146e8:	89b8      	ldrh	r0, [r7, #12]
 80146ea:	693b      	ldr	r3, [r7, #16]
 80146ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80146f0:	2303      	movs	r3, #3
 80146f2:	2237      	movs	r2, #55	; 0x37
 80146f4:	f000 f91a 	bl	801492c <dhcp_option>
 80146f8:	4603      	mov	r3, r0
 80146fa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80146fc:	2300      	movs	r3, #0
 80146fe:	77bb      	strb	r3, [r7, #30]
 8014700:	e00e      	b.n	8014720 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014702:	89b8      	ldrh	r0, [r7, #12]
 8014704:	693b      	ldr	r3, [r7, #16]
 8014706:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801470a:	7fbb      	ldrb	r3, [r7, #30]
 801470c:	4a29      	ldr	r2, [pc, #164]	; (80147b4 <dhcp_reboot+0x15c>)
 801470e:	5cd3      	ldrb	r3, [r2, r3]
 8014710:	461a      	mov	r2, r3
 8014712:	f000 f93f 	bl	8014994 <dhcp_option_byte>
 8014716:	4603      	mov	r3, r0
 8014718:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801471a:	7fbb      	ldrb	r3, [r7, #30]
 801471c:	3301      	adds	r3, #1
 801471e:	77bb      	strb	r3, [r7, #30]
 8014720:	7fbb      	ldrb	r3, [r7, #30]
 8014722:	2b02      	cmp	r3, #2
 8014724:	d9ed      	bls.n	8014702 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014726:	89b8      	ldrh	r0, [r7, #12]
 8014728:	693b      	ldr	r3, [r7, #16]
 801472a:	33f0      	adds	r3, #240	; 0xf0
 801472c:	697a      	ldr	r2, [r7, #20]
 801472e:	4619      	mov	r1, r3
 8014730:	f000 fe42 	bl	80153b8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014734:	4b20      	ldr	r3, [pc, #128]	; (80147b8 <dhcp_reboot+0x160>)
 8014736:	6818      	ldr	r0, [r3, #0]
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	9300      	str	r3, [sp, #0]
 801473c:	2343      	movs	r3, #67	; 0x43
 801473e:	4a1f      	ldr	r2, [pc, #124]	; (80147bc <dhcp_reboot+0x164>)
 8014740:	6979      	ldr	r1, [r7, #20]
 8014742:	f7fe fce5 	bl	8013110 <udp_sendto_if>
 8014746:	4603      	mov	r3, r0
 8014748:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801474a:	6978      	ldr	r0, [r7, #20]
 801474c:	f7f7 fe48 	bl	800c3e0 <pbuf_free>
 8014750:	e001      	b.n	8014756 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014752:	23ff      	movs	r3, #255	; 0xff
 8014754:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014756:	69bb      	ldr	r3, [r7, #24]
 8014758:	799b      	ldrb	r3, [r3, #6]
 801475a:	2bff      	cmp	r3, #255	; 0xff
 801475c:	d005      	beq.n	801476a <dhcp_reboot+0x112>
    dhcp->tries++;
 801475e:	69bb      	ldr	r3, [r7, #24]
 8014760:	799b      	ldrb	r3, [r3, #6]
 8014762:	3301      	adds	r3, #1
 8014764:	b2da      	uxtb	r2, r3
 8014766:	69bb      	ldr	r3, [r7, #24]
 8014768:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801476a:	69bb      	ldr	r3, [r7, #24]
 801476c:	799b      	ldrb	r3, [r3, #6]
 801476e:	2b09      	cmp	r3, #9
 8014770:	d80a      	bhi.n	8014788 <dhcp_reboot+0x130>
 8014772:	69bb      	ldr	r3, [r7, #24]
 8014774:	799b      	ldrb	r3, [r3, #6]
 8014776:	b29b      	uxth	r3, r3
 8014778:	461a      	mov	r2, r3
 801477a:	0152      	lsls	r2, r2, #5
 801477c:	1ad2      	subs	r2, r2, r3
 801477e:	0092      	lsls	r2, r2, #2
 8014780:	4413      	add	r3, r2
 8014782:	00db      	lsls	r3, r3, #3
 8014784:	b29b      	uxth	r3, r3
 8014786:	e001      	b.n	801478c <dhcp_reboot+0x134>
 8014788:	f242 7310 	movw	r3, #10000	; 0x2710
 801478c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801478e:	89fb      	ldrh	r3, [r7, #14]
 8014790:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014794:	4a0a      	ldr	r2, [pc, #40]	; (80147c0 <dhcp_reboot+0x168>)
 8014796:	fb82 1203 	smull	r1, r2, r2, r3
 801479a:	1152      	asrs	r2, r2, #5
 801479c:	17db      	asrs	r3, r3, #31
 801479e:	1ad3      	subs	r3, r2, r3
 80147a0:	b29a      	uxth	r2, r3
 80147a2:	69bb      	ldr	r3, [r7, #24]
 80147a4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80147a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80147aa:	4618      	mov	r0, r3
 80147ac:	3720      	adds	r7, #32
 80147ae:	46bd      	mov	sp, r7
 80147b0:	bdb0      	pop	{r4, r5, r7, pc}
 80147b2:	bf00      	nop
 80147b4:	2000001c 	.word	0x2000001c
 80147b8:	20008ad0 	.word	0x20008ad0
 80147bc:	08026c70 	.word	0x08026c70
 80147c0:	10624dd3 	.word	0x10624dd3

080147c4 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80147c4:	b5b0      	push	{r4, r5, r7, lr}
 80147c6:	b08a      	sub	sp, #40	; 0x28
 80147c8:	af02      	add	r7, sp, #8
 80147ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147d0:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80147d2:	69fb      	ldr	r3, [r7, #28]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	f000 8084 	beq.w	80148e2 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80147da:	69fb      	ldr	r3, [r7, #28]
 80147dc:	795b      	ldrb	r3, [r3, #5]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	f000 8081 	beq.w	80148e6 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80147e4:	69fb      	ldr	r3, [r7, #28]
 80147e6:	699b      	ldr	r3, [r3, #24]
 80147e8:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80147ea:	69fb      	ldr	r3, [r7, #28]
 80147ec:	2200      	movs	r2, #0
 80147ee:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80147f0:	69fb      	ldr	r3, [r7, #28]
 80147f2:	2200      	movs	r2, #0
 80147f4:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80147f6:	69fb      	ldr	r3, [r7, #28]
 80147f8:	2200      	movs	r2, #0
 80147fa:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80147fc:	69fb      	ldr	r3, [r7, #28]
 80147fe:	2200      	movs	r2, #0
 8014800:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8014802:	69fb      	ldr	r3, [r7, #28]
 8014804:	2200      	movs	r2, #0
 8014806:	631a      	str	r2, [r3, #48]	; 0x30
 8014808:	69fb      	ldr	r3, [r7, #28]
 801480a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801480c:	69fb      	ldr	r3, [r7, #28]
 801480e:	62da      	str	r2, [r3, #44]	; 0x2c
 8014810:	69fb      	ldr	r3, [r7, #28]
 8014812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014814:	69fb      	ldr	r3, [r7, #28]
 8014816:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014818:	69fb      	ldr	r3, [r7, #28]
 801481a:	2200      	movs	r2, #0
 801481c:	829a      	strh	r2, [r3, #20]
 801481e:	69fb      	ldr	r3, [r7, #28]
 8014820:	8a9a      	ldrh	r2, [r3, #20]
 8014822:	69fb      	ldr	r3, [r7, #28]
 8014824:	825a      	strh	r2, [r3, #18]
 8014826:	69fb      	ldr	r3, [r7, #28]
 8014828:	8a5a      	ldrh	r2, [r3, #18]
 801482a:	69fb      	ldr	r3, [r7, #28]
 801482c:	821a      	strh	r2, [r3, #16]
 801482e:	69fb      	ldr	r3, [r7, #28]
 8014830:	8a1a      	ldrh	r2, [r3, #16]
 8014832:	69fb      	ldr	r3, [r7, #28]
 8014834:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8014836:	6878      	ldr	r0, [r7, #4]
 8014838:	f000 fdec 	bl	8015414 <dhcp_supplied_address>
 801483c:	4603      	mov	r3, r0
 801483e:	2b00      	cmp	r3, #0
 8014840:	d03b      	beq.n	80148ba <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8014842:	f107 030e 	add.w	r3, r7, #14
 8014846:	2207      	movs	r2, #7
 8014848:	69f9      	ldr	r1, [r7, #28]
 801484a:	6878      	ldr	r0, [r7, #4]
 801484c:	f000 fcde 	bl	801520c <dhcp_create_msg>
 8014850:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8014852:	69bb      	ldr	r3, [r7, #24]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d030      	beq.n	80148ba <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014858:	69bb      	ldr	r3, [r7, #24]
 801485a:	685b      	ldr	r3, [r3, #4]
 801485c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801485e:	89f8      	ldrh	r0, [r7, #14]
 8014860:	697b      	ldr	r3, [r7, #20]
 8014862:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014866:	2304      	movs	r3, #4
 8014868:	2236      	movs	r2, #54	; 0x36
 801486a:	f000 f85f 	bl	801492c <dhcp_option>
 801486e:	4603      	mov	r3, r0
 8014870:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8014872:	89fc      	ldrh	r4, [r7, #14]
 8014874:	697b      	ldr	r3, [r7, #20]
 8014876:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801487a:	693b      	ldr	r3, [r7, #16]
 801487c:	4618      	mov	r0, r3
 801487e:	f7f6 f9da 	bl	800ac36 <lwip_htonl>
 8014882:	4603      	mov	r3, r0
 8014884:	461a      	mov	r2, r3
 8014886:	4629      	mov	r1, r5
 8014888:	4620      	mov	r0, r4
 801488a:	f000 f8db 	bl	8014a44 <dhcp_option_long>
 801488e:	4603      	mov	r3, r0
 8014890:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014892:	89f8      	ldrh	r0, [r7, #14]
 8014894:	697b      	ldr	r3, [r7, #20]
 8014896:	33f0      	adds	r3, #240	; 0xf0
 8014898:	69ba      	ldr	r2, [r7, #24]
 801489a:	4619      	mov	r1, r3
 801489c:	f000 fd8c 	bl	80153b8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80148a0:	4b13      	ldr	r3, [pc, #76]	; (80148f0 <dhcp_release_and_stop+0x12c>)
 80148a2:	6818      	ldr	r0, [r3, #0]
 80148a4:	f107 0210 	add.w	r2, r7, #16
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	9300      	str	r3, [sp, #0]
 80148ac:	2343      	movs	r3, #67	; 0x43
 80148ae:	69b9      	ldr	r1, [r7, #24]
 80148b0:	f7fe fc2e 	bl	8013110 <udp_sendto_if>
      pbuf_free(p_out);
 80148b4:	69b8      	ldr	r0, [r7, #24]
 80148b6:	f7f7 fd93 	bl	800c3e0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80148ba:	4b0e      	ldr	r3, [pc, #56]	; (80148f4 <dhcp_release_and_stop+0x130>)
 80148bc:	4a0d      	ldr	r2, [pc, #52]	; (80148f4 <dhcp_release_and_stop+0x130>)
 80148be:	490d      	ldr	r1, [pc, #52]	; (80148f4 <dhcp_release_and_stop+0x130>)
 80148c0:	6878      	ldr	r0, [r7, #4]
 80148c2:	f7f7 f883 	bl	800b9cc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80148c6:	2100      	movs	r1, #0
 80148c8:	69f8      	ldr	r0, [r7, #28]
 80148ca:	f000 f815 	bl	80148f8 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80148ce:	69fb      	ldr	r3, [r7, #28]
 80148d0:	791b      	ldrb	r3, [r3, #4]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d008      	beq.n	80148e8 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80148d6:	f7fe ff73 	bl	80137c0 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80148da:	69fb      	ldr	r3, [r7, #28]
 80148dc:	2200      	movs	r2, #0
 80148de:	711a      	strb	r2, [r3, #4]
 80148e0:	e002      	b.n	80148e8 <dhcp_release_and_stop+0x124>
    return;
 80148e2:	bf00      	nop
 80148e4:	e000      	b.n	80148e8 <dhcp_release_and_stop+0x124>
    return;
 80148e6:	bf00      	nop
  }
}
 80148e8:	3720      	adds	r7, #32
 80148ea:	46bd      	mov	sp, r7
 80148ec:	bdb0      	pop	{r4, r5, r7, pc}
 80148ee:	bf00      	nop
 80148f0:	20008ad0 	.word	0x20008ad0
 80148f4:	08026c6c 	.word	0x08026c6c

080148f8 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80148f8:	b480      	push	{r7}
 80148fa:	b083      	sub	sp, #12
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
 8014900:	460b      	mov	r3, r1
 8014902:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	795b      	ldrb	r3, [r3, #5]
 8014908:	78fa      	ldrb	r2, [r7, #3]
 801490a:	429a      	cmp	r2, r3
 801490c:	d008      	beq.n	8014920 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	78fa      	ldrb	r2, [r7, #3]
 8014912:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	2200      	movs	r2, #0
 8014918:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	2200      	movs	r2, #0
 801491e:	811a      	strh	r2, [r3, #8]
  }
}
 8014920:	bf00      	nop
 8014922:	370c      	adds	r7, #12
 8014924:	46bd      	mov	sp, r7
 8014926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492a:	4770      	bx	lr

0801492c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b082      	sub	sp, #8
 8014930:	af00      	add	r7, sp, #0
 8014932:	6039      	str	r1, [r7, #0]
 8014934:	4611      	mov	r1, r2
 8014936:	461a      	mov	r2, r3
 8014938:	4603      	mov	r3, r0
 801493a:	80fb      	strh	r3, [r7, #6]
 801493c:	460b      	mov	r3, r1
 801493e:	717b      	strb	r3, [r7, #5]
 8014940:	4613      	mov	r3, r2
 8014942:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8014944:	88fa      	ldrh	r2, [r7, #6]
 8014946:	793b      	ldrb	r3, [r7, #4]
 8014948:	4413      	add	r3, r2
 801494a:	3302      	adds	r3, #2
 801494c:	2b44      	cmp	r3, #68	; 0x44
 801494e:	d906      	bls.n	801495e <dhcp_option+0x32>
 8014950:	4b0d      	ldr	r3, [pc, #52]	; (8014988 <dhcp_option+0x5c>)
 8014952:	f240 529a 	movw	r2, #1434	; 0x59a
 8014956:	490d      	ldr	r1, [pc, #52]	; (801498c <dhcp_option+0x60>)
 8014958:	480d      	ldr	r0, [pc, #52]	; (8014990 <dhcp_option+0x64>)
 801495a:	f003 faa5 	bl	8017ea8 <iprintf>
  options[options_out_len++] = option_type;
 801495e:	88fb      	ldrh	r3, [r7, #6]
 8014960:	1c5a      	adds	r2, r3, #1
 8014962:	80fa      	strh	r2, [r7, #6]
 8014964:	461a      	mov	r2, r3
 8014966:	683b      	ldr	r3, [r7, #0]
 8014968:	4413      	add	r3, r2
 801496a:	797a      	ldrb	r2, [r7, #5]
 801496c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801496e:	88fb      	ldrh	r3, [r7, #6]
 8014970:	1c5a      	adds	r2, r3, #1
 8014972:	80fa      	strh	r2, [r7, #6]
 8014974:	461a      	mov	r2, r3
 8014976:	683b      	ldr	r3, [r7, #0]
 8014978:	4413      	add	r3, r2
 801497a:	793a      	ldrb	r2, [r7, #4]
 801497c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801497e:	88fb      	ldrh	r3, [r7, #6]
}
 8014980:	4618      	mov	r0, r3
 8014982:	3708      	adds	r7, #8
 8014984:	46bd      	mov	sp, r7
 8014986:	bd80      	pop	{r7, pc}
 8014988:	0801bf94 	.word	0x0801bf94
 801498c:	0801c128 	.word	0x0801c128
 8014990:	0801bff4 	.word	0x0801bff4

08014994 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8014994:	b580      	push	{r7, lr}
 8014996:	b082      	sub	sp, #8
 8014998:	af00      	add	r7, sp, #0
 801499a:	4603      	mov	r3, r0
 801499c:	6039      	str	r1, [r7, #0]
 801499e:	80fb      	strh	r3, [r7, #6]
 80149a0:	4613      	mov	r3, r2
 80149a2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80149a4:	88fb      	ldrh	r3, [r7, #6]
 80149a6:	2b43      	cmp	r3, #67	; 0x43
 80149a8:	d906      	bls.n	80149b8 <dhcp_option_byte+0x24>
 80149aa:	4b0a      	ldr	r3, [pc, #40]	; (80149d4 <dhcp_option_byte+0x40>)
 80149ac:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80149b0:	4909      	ldr	r1, [pc, #36]	; (80149d8 <dhcp_option_byte+0x44>)
 80149b2:	480a      	ldr	r0, [pc, #40]	; (80149dc <dhcp_option_byte+0x48>)
 80149b4:	f003 fa78 	bl	8017ea8 <iprintf>
  options[options_out_len++] = value;
 80149b8:	88fb      	ldrh	r3, [r7, #6]
 80149ba:	1c5a      	adds	r2, r3, #1
 80149bc:	80fa      	strh	r2, [r7, #6]
 80149be:	461a      	mov	r2, r3
 80149c0:	683b      	ldr	r3, [r7, #0]
 80149c2:	4413      	add	r3, r2
 80149c4:	797a      	ldrb	r2, [r7, #5]
 80149c6:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80149c8:	88fb      	ldrh	r3, [r7, #6]
}
 80149ca:	4618      	mov	r0, r3
 80149cc:	3708      	adds	r7, #8
 80149ce:	46bd      	mov	sp, r7
 80149d0:	bd80      	pop	{r7, pc}
 80149d2:	bf00      	nop
 80149d4:	0801bf94 	.word	0x0801bf94
 80149d8:	0801c16c 	.word	0x0801c16c
 80149dc:	0801bff4 	.word	0x0801bff4

080149e0 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b082      	sub	sp, #8
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	4603      	mov	r3, r0
 80149e8:	6039      	str	r1, [r7, #0]
 80149ea:	80fb      	strh	r3, [r7, #6]
 80149ec:	4613      	mov	r3, r2
 80149ee:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80149f0:	88fb      	ldrh	r3, [r7, #6]
 80149f2:	3302      	adds	r3, #2
 80149f4:	2b44      	cmp	r3, #68	; 0x44
 80149f6:	d906      	bls.n	8014a06 <dhcp_option_short+0x26>
 80149f8:	4b0f      	ldr	r3, [pc, #60]	; (8014a38 <dhcp_option_short+0x58>)
 80149fa:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80149fe:	490f      	ldr	r1, [pc, #60]	; (8014a3c <dhcp_option_short+0x5c>)
 8014a00:	480f      	ldr	r0, [pc, #60]	; (8014a40 <dhcp_option_short+0x60>)
 8014a02:	f003 fa51 	bl	8017ea8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8014a06:	88bb      	ldrh	r3, [r7, #4]
 8014a08:	0a1b      	lsrs	r3, r3, #8
 8014a0a:	b29a      	uxth	r2, r3
 8014a0c:	88fb      	ldrh	r3, [r7, #6]
 8014a0e:	1c59      	adds	r1, r3, #1
 8014a10:	80f9      	strh	r1, [r7, #6]
 8014a12:	4619      	mov	r1, r3
 8014a14:	683b      	ldr	r3, [r7, #0]
 8014a16:	440b      	add	r3, r1
 8014a18:	b2d2      	uxtb	r2, r2
 8014a1a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8014a1c:	88fb      	ldrh	r3, [r7, #6]
 8014a1e:	1c5a      	adds	r2, r3, #1
 8014a20:	80fa      	strh	r2, [r7, #6]
 8014a22:	461a      	mov	r2, r3
 8014a24:	683b      	ldr	r3, [r7, #0]
 8014a26:	4413      	add	r3, r2
 8014a28:	88ba      	ldrh	r2, [r7, #4]
 8014a2a:	b2d2      	uxtb	r2, r2
 8014a2c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014a2e:	88fb      	ldrh	r3, [r7, #6]
}
 8014a30:	4618      	mov	r0, r3
 8014a32:	3708      	adds	r7, #8
 8014a34:	46bd      	mov	sp, r7
 8014a36:	bd80      	pop	{r7, pc}
 8014a38:	0801bf94 	.word	0x0801bf94
 8014a3c:	0801c1a4 	.word	0x0801c1a4
 8014a40:	0801bff4 	.word	0x0801bff4

08014a44 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b084      	sub	sp, #16
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	4603      	mov	r3, r0
 8014a4c:	60b9      	str	r1, [r7, #8]
 8014a4e:	607a      	str	r2, [r7, #4]
 8014a50:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8014a52:	89fb      	ldrh	r3, [r7, #14]
 8014a54:	3304      	adds	r3, #4
 8014a56:	2b44      	cmp	r3, #68	; 0x44
 8014a58:	d906      	bls.n	8014a68 <dhcp_option_long+0x24>
 8014a5a:	4b19      	ldr	r3, [pc, #100]	; (8014ac0 <dhcp_option_long+0x7c>)
 8014a5c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8014a60:	4918      	ldr	r1, [pc, #96]	; (8014ac4 <dhcp_option_long+0x80>)
 8014a62:	4819      	ldr	r0, [pc, #100]	; (8014ac8 <dhcp_option_long+0x84>)
 8014a64:	f003 fa20 	bl	8017ea8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	0e1a      	lsrs	r2, r3, #24
 8014a6c:	89fb      	ldrh	r3, [r7, #14]
 8014a6e:	1c59      	adds	r1, r3, #1
 8014a70:	81f9      	strh	r1, [r7, #14]
 8014a72:	4619      	mov	r1, r3
 8014a74:	68bb      	ldr	r3, [r7, #8]
 8014a76:	440b      	add	r3, r1
 8014a78:	b2d2      	uxtb	r2, r2
 8014a7a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	0c1a      	lsrs	r2, r3, #16
 8014a80:	89fb      	ldrh	r3, [r7, #14]
 8014a82:	1c59      	adds	r1, r3, #1
 8014a84:	81f9      	strh	r1, [r7, #14]
 8014a86:	4619      	mov	r1, r3
 8014a88:	68bb      	ldr	r3, [r7, #8]
 8014a8a:	440b      	add	r3, r1
 8014a8c:	b2d2      	uxtb	r2, r2
 8014a8e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	0a1a      	lsrs	r2, r3, #8
 8014a94:	89fb      	ldrh	r3, [r7, #14]
 8014a96:	1c59      	adds	r1, r3, #1
 8014a98:	81f9      	strh	r1, [r7, #14]
 8014a9a:	4619      	mov	r1, r3
 8014a9c:	68bb      	ldr	r3, [r7, #8]
 8014a9e:	440b      	add	r3, r1
 8014aa0:	b2d2      	uxtb	r2, r2
 8014aa2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8014aa4:	89fb      	ldrh	r3, [r7, #14]
 8014aa6:	1c5a      	adds	r2, r3, #1
 8014aa8:	81fa      	strh	r2, [r7, #14]
 8014aaa:	461a      	mov	r2, r3
 8014aac:	68bb      	ldr	r3, [r7, #8]
 8014aae:	4413      	add	r3, r2
 8014ab0:	687a      	ldr	r2, [r7, #4]
 8014ab2:	b2d2      	uxtb	r2, r2
 8014ab4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014ab6:	89fb      	ldrh	r3, [r7, #14]
}
 8014ab8:	4618      	mov	r0, r3
 8014aba:	3710      	adds	r7, #16
 8014abc:	46bd      	mov	sp, r7
 8014abe:	bd80      	pop	{r7, pc}
 8014ac0:	0801bf94 	.word	0x0801bf94
 8014ac4:	0801c1e0 	.word	0x0801c1e0
 8014ac8:	0801bff4 	.word	0x0801bff4

08014acc <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b090      	sub	sp, #64	; 0x40
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
 8014ad4:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8014ada:	2300      	movs	r3, #0
 8014adc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8014ade:	2208      	movs	r2, #8
 8014ae0:	2100      	movs	r1, #0
 8014ae2:	48be      	ldr	r0, [pc, #760]	; (8014ddc <dhcp_parse_reply+0x310>)
 8014ae4:	f003 f9d8 	bl	8017e98 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	895b      	ldrh	r3, [r3, #10]
 8014aec:	2b2b      	cmp	r3, #43	; 0x2b
 8014aee:	d802      	bhi.n	8014af6 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8014af0:	f06f 0301 	mvn.w	r3, #1
 8014af4:	e2a8      	b.n	8015048 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	685b      	ldr	r3, [r3, #4]
 8014afa:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8014afc:	23f0      	movs	r3, #240	; 0xf0
 8014afe:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	891b      	ldrh	r3, [r3, #8]
 8014b04:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014b0a:	e00c      	b.n	8014b26 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8014b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b0e:	895b      	ldrh	r3, [r3, #10]
 8014b10:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014b12:	1ad3      	subs	r3, r2, r3
 8014b14:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8014b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b18:	895b      	ldrh	r3, [r3, #10]
 8014b1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8014b1c:	1ad3      	subs	r3, r2, r3
 8014b1e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8014b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d004      	beq.n	8014b36 <dhcp_parse_reply+0x6a>
 8014b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b2e:	895b      	ldrh	r3, [r3, #10]
 8014b30:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014b32:	429a      	cmp	r2, r3
 8014b34:	d2ea      	bcs.n	8014b0c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8014b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d102      	bne.n	8014b42 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8014b3c:	f06f 0301 	mvn.w	r3, #1
 8014b40:	e282      	b.n	8015048 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8014b42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014b44:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8014b46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014b48:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8014b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b4c:	685b      	ldr	r3, [r3, #4]
 8014b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014b50:	e23a      	b.n	8014fc8 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8014b52:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014b54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014b56:	4413      	add	r3, r2
 8014b58:	781b      	ldrb	r3, [r3, #0]
 8014b5a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8014b62:	f04f 33ff 	mov.w	r3, #4294967295
 8014b66:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8014b68:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014b6a:	3302      	adds	r3, #2
 8014b6c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8014b6e:	8bfa      	ldrh	r2, [r7, #30]
 8014b70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014b72:	429a      	cmp	r2, r3
 8014b74:	d202      	bcs.n	8014b7c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8014b76:	f06f 0301 	mvn.w	r3, #1
 8014b7a:	e265      	b.n	8015048 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8014b7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014b7e:	3301      	adds	r3, #1
 8014b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b82:	8952      	ldrh	r2, [r2, #10]
 8014b84:	4293      	cmp	r3, r2
 8014b86:	da07      	bge.n	8014b98 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8014b88:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014b8a:	3301      	adds	r3, #1
 8014b8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014b8e:	4413      	add	r3, r2
 8014b90:	781b      	ldrb	r3, [r3, #0]
 8014b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014b96:	e00b      	b.n	8014bb0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8014b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d004      	beq.n	8014baa <dhcp_parse_reply+0xde>
 8014ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	685b      	ldr	r3, [r3, #4]
 8014ba6:	781b      	ldrb	r3, [r3, #0]
 8014ba8:	e000      	b.n	8014bac <dhcp_parse_reply+0xe0>
 8014baa:	2300      	movs	r3, #0
 8014bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8014bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014bb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8014bb8:	7dfb      	ldrb	r3, [r7, #23]
 8014bba:	2b3b      	cmp	r3, #59	; 0x3b
 8014bbc:	f200 812d 	bhi.w	8014e1a <dhcp_parse_reply+0x34e>
 8014bc0:	a201      	add	r2, pc, #4	; (adr r2, 8014bc8 <dhcp_parse_reply+0xfc>)
 8014bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bc6:	bf00      	nop
 8014bc8:	08014cb9 	.word	0x08014cb9
 8014bcc:	08014cc9 	.word	0x08014cc9
 8014bd0:	08014e1b 	.word	0x08014e1b
 8014bd4:	08014ceb 	.word	0x08014ceb
 8014bd8:	08014e1b 	.word	0x08014e1b
 8014bdc:	08014e1b 	.word	0x08014e1b
 8014be0:	08014e1b 	.word	0x08014e1b
 8014be4:	08014e1b 	.word	0x08014e1b
 8014be8:	08014e1b 	.word	0x08014e1b
 8014bec:	08014e1b 	.word	0x08014e1b
 8014bf0:	08014e1b 	.word	0x08014e1b
 8014bf4:	08014e1b 	.word	0x08014e1b
 8014bf8:	08014e1b 	.word	0x08014e1b
 8014bfc:	08014e1b 	.word	0x08014e1b
 8014c00:	08014e1b 	.word	0x08014e1b
 8014c04:	08014e1b 	.word	0x08014e1b
 8014c08:	08014e1b 	.word	0x08014e1b
 8014c0c:	08014e1b 	.word	0x08014e1b
 8014c10:	08014e1b 	.word	0x08014e1b
 8014c14:	08014e1b 	.word	0x08014e1b
 8014c18:	08014e1b 	.word	0x08014e1b
 8014c1c:	08014e1b 	.word	0x08014e1b
 8014c20:	08014e1b 	.word	0x08014e1b
 8014c24:	08014e1b 	.word	0x08014e1b
 8014c28:	08014e1b 	.word	0x08014e1b
 8014c2c:	08014e1b 	.word	0x08014e1b
 8014c30:	08014e1b 	.word	0x08014e1b
 8014c34:	08014e1b 	.word	0x08014e1b
 8014c38:	08014e1b 	.word	0x08014e1b
 8014c3c:	08014e1b 	.word	0x08014e1b
 8014c40:	08014e1b 	.word	0x08014e1b
 8014c44:	08014e1b 	.word	0x08014e1b
 8014c48:	08014e1b 	.word	0x08014e1b
 8014c4c:	08014e1b 	.word	0x08014e1b
 8014c50:	08014e1b 	.word	0x08014e1b
 8014c54:	08014e1b 	.word	0x08014e1b
 8014c58:	08014e1b 	.word	0x08014e1b
 8014c5c:	08014e1b 	.word	0x08014e1b
 8014c60:	08014e1b 	.word	0x08014e1b
 8014c64:	08014e1b 	.word	0x08014e1b
 8014c68:	08014e1b 	.word	0x08014e1b
 8014c6c:	08014e1b 	.word	0x08014e1b
 8014c70:	08014e1b 	.word	0x08014e1b
 8014c74:	08014e1b 	.word	0x08014e1b
 8014c78:	08014e1b 	.word	0x08014e1b
 8014c7c:	08014e1b 	.word	0x08014e1b
 8014c80:	08014e1b 	.word	0x08014e1b
 8014c84:	08014e1b 	.word	0x08014e1b
 8014c88:	08014e1b 	.word	0x08014e1b
 8014c8c:	08014e1b 	.word	0x08014e1b
 8014c90:	08014e1b 	.word	0x08014e1b
 8014c94:	08014d17 	.word	0x08014d17
 8014c98:	08014d39 	.word	0x08014d39
 8014c9c:	08014d75 	.word	0x08014d75
 8014ca0:	08014d97 	.word	0x08014d97
 8014ca4:	08014e1b 	.word	0x08014e1b
 8014ca8:	08014e1b 	.word	0x08014e1b
 8014cac:	08014e1b 	.word	0x08014e1b
 8014cb0:	08014db9 	.word	0x08014db9
 8014cb4:	08014df9 	.word	0x08014df9
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8014cb8:	2300      	movs	r3, #0
 8014cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014cc2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8014cc6:	e0ac      	b.n	8014e22 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ccc:	2b04      	cmp	r3, #4
 8014cce:	d009      	beq.n	8014ce4 <dhcp_parse_reply+0x218>
 8014cd0:	4b43      	ldr	r3, [pc, #268]	; (8014de0 <dhcp_parse_reply+0x314>)
 8014cd2:	f240 622e 	movw	r2, #1582	; 0x62e
 8014cd6:	4943      	ldr	r1, [pc, #268]	; (8014de4 <dhcp_parse_reply+0x318>)
 8014cd8:	4843      	ldr	r0, [pc, #268]	; (8014de8 <dhcp_parse_reply+0x31c>)
 8014cda:	f003 f8e5 	bl	8017ea8 <iprintf>
 8014cde:	f06f 0305 	mvn.w	r3, #5
 8014ce2:	e1b1      	b.n	8015048 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014ce4:	2306      	movs	r3, #6
 8014ce6:	623b      	str	r3, [r7, #32]
        break;
 8014ce8:	e09b      	b.n	8014e22 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014cea:	2304      	movs	r3, #4
 8014cec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8014cf0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014cf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014cf8:	429a      	cmp	r2, r3
 8014cfa:	d209      	bcs.n	8014d10 <dhcp_parse_reply+0x244>
 8014cfc:	4b38      	ldr	r3, [pc, #224]	; (8014de0 <dhcp_parse_reply+0x314>)
 8014cfe:	f240 6233 	movw	r2, #1587	; 0x633
 8014d02:	493a      	ldr	r1, [pc, #232]	; (8014dec <dhcp_parse_reply+0x320>)
 8014d04:	4838      	ldr	r0, [pc, #224]	; (8014de8 <dhcp_parse_reply+0x31c>)
 8014d06:	f003 f8cf 	bl	8017ea8 <iprintf>
 8014d0a:	f06f 0305 	mvn.w	r3, #5
 8014d0e:	e19b      	b.n	8015048 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8014d10:	2307      	movs	r3, #7
 8014d12:	623b      	str	r3, [r7, #32]
        break;
 8014d14:	e085      	b.n	8014e22 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d1a:	2b04      	cmp	r3, #4
 8014d1c:	d009      	beq.n	8014d32 <dhcp_parse_reply+0x266>
 8014d1e:	4b30      	ldr	r3, [pc, #192]	; (8014de0 <dhcp_parse_reply+0x314>)
 8014d20:	f240 6241 	movw	r2, #1601	; 0x641
 8014d24:	492f      	ldr	r1, [pc, #188]	; (8014de4 <dhcp_parse_reply+0x318>)
 8014d26:	4830      	ldr	r0, [pc, #192]	; (8014de8 <dhcp_parse_reply+0x31c>)
 8014d28:	f003 f8be 	bl	8017ea8 <iprintf>
 8014d2c:	f06f 0305 	mvn.w	r3, #5
 8014d30:	e18a      	b.n	8015048 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8014d32:	2303      	movs	r3, #3
 8014d34:	623b      	str	r3, [r7, #32]
        break;
 8014d36:	e074      	b.n	8014e22 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d3c:	2b01      	cmp	r3, #1
 8014d3e:	d009      	beq.n	8014d54 <dhcp_parse_reply+0x288>
 8014d40:	4b27      	ldr	r3, [pc, #156]	; (8014de0 <dhcp_parse_reply+0x314>)
 8014d42:	f240 624f 	movw	r2, #1615	; 0x64f
 8014d46:	492a      	ldr	r1, [pc, #168]	; (8014df0 <dhcp_parse_reply+0x324>)
 8014d48:	4827      	ldr	r0, [pc, #156]	; (8014de8 <dhcp_parse_reply+0x31c>)
 8014d4a:	f003 f8ad 	bl	8017ea8 <iprintf>
 8014d4e:	f06f 0305 	mvn.w	r3, #5
 8014d52:	e179      	b.n	8015048 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8014d54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014d56:	2bf0      	cmp	r3, #240	; 0xf0
 8014d58:	d009      	beq.n	8014d6e <dhcp_parse_reply+0x2a2>
 8014d5a:	4b21      	ldr	r3, [pc, #132]	; (8014de0 <dhcp_parse_reply+0x314>)
 8014d5c:	f240 6251 	movw	r2, #1617	; 0x651
 8014d60:	4924      	ldr	r1, [pc, #144]	; (8014df4 <dhcp_parse_reply+0x328>)
 8014d62:	4821      	ldr	r0, [pc, #132]	; (8014de8 <dhcp_parse_reply+0x31c>)
 8014d64:	f003 f8a0 	bl	8017ea8 <iprintf>
 8014d68:	f06f 0305 	mvn.w	r3, #5
 8014d6c:	e16c      	b.n	8015048 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8014d6e:	2300      	movs	r3, #0
 8014d70:	623b      	str	r3, [r7, #32]
        break;
 8014d72:	e056      	b.n	8014e22 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d78:	2b01      	cmp	r3, #1
 8014d7a:	d009      	beq.n	8014d90 <dhcp_parse_reply+0x2c4>
 8014d7c:	4b18      	ldr	r3, [pc, #96]	; (8014de0 <dhcp_parse_reply+0x314>)
 8014d7e:	f240 6255 	movw	r2, #1621	; 0x655
 8014d82:	491b      	ldr	r1, [pc, #108]	; (8014df0 <dhcp_parse_reply+0x324>)
 8014d84:	4818      	ldr	r0, [pc, #96]	; (8014de8 <dhcp_parse_reply+0x31c>)
 8014d86:	f003 f88f 	bl	8017ea8 <iprintf>
 8014d8a:	f06f 0305 	mvn.w	r3, #5
 8014d8e:	e15b      	b.n	8015048 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8014d90:	2301      	movs	r3, #1
 8014d92:	623b      	str	r3, [r7, #32]
        break;
 8014d94:	e045      	b.n	8014e22 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014d96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d9a:	2b04      	cmp	r3, #4
 8014d9c:	d009      	beq.n	8014db2 <dhcp_parse_reply+0x2e6>
 8014d9e:	4b10      	ldr	r3, [pc, #64]	; (8014de0 <dhcp_parse_reply+0x314>)
 8014da0:	f240 6259 	movw	r2, #1625	; 0x659
 8014da4:	490f      	ldr	r1, [pc, #60]	; (8014de4 <dhcp_parse_reply+0x318>)
 8014da6:	4810      	ldr	r0, [pc, #64]	; (8014de8 <dhcp_parse_reply+0x31c>)
 8014da8:	f003 f87e 	bl	8017ea8 <iprintf>
 8014dac:	f06f 0305 	mvn.w	r3, #5
 8014db0:	e14a      	b.n	8015048 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8014db2:	2302      	movs	r3, #2
 8014db4:	623b      	str	r3, [r7, #32]
        break;
 8014db6:	e034      	b.n	8014e22 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014db8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014dbc:	2b04      	cmp	r3, #4
 8014dbe:	d009      	beq.n	8014dd4 <dhcp_parse_reply+0x308>
 8014dc0:	4b07      	ldr	r3, [pc, #28]	; (8014de0 <dhcp_parse_reply+0x314>)
 8014dc2:	f240 625d 	movw	r2, #1629	; 0x65d
 8014dc6:	4907      	ldr	r1, [pc, #28]	; (8014de4 <dhcp_parse_reply+0x318>)
 8014dc8:	4807      	ldr	r0, [pc, #28]	; (8014de8 <dhcp_parse_reply+0x31c>)
 8014dca:	f003 f86d 	bl	8017ea8 <iprintf>
 8014dce:	f06f 0305 	mvn.w	r3, #5
 8014dd2:	e139      	b.n	8015048 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8014dd4:	2304      	movs	r3, #4
 8014dd6:	623b      	str	r3, [r7, #32]
        break;
 8014dd8:	e023      	b.n	8014e22 <dhcp_parse_reply+0x356>
 8014dda:	bf00      	nop
 8014ddc:	2000f530 	.word	0x2000f530
 8014de0:	0801bf94 	.word	0x0801bf94
 8014de4:	0801c21c 	.word	0x0801c21c
 8014de8:	0801bff4 	.word	0x0801bff4
 8014dec:	0801c228 	.word	0x0801c228
 8014df0:	0801c23c 	.word	0x0801c23c
 8014df4:	0801c248 	.word	0x0801c248
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014df8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014dfc:	2b04      	cmp	r3, #4
 8014dfe:	d009      	beq.n	8014e14 <dhcp_parse_reply+0x348>
 8014e00:	4b93      	ldr	r3, [pc, #588]	; (8015050 <dhcp_parse_reply+0x584>)
 8014e02:	f240 6261 	movw	r2, #1633	; 0x661
 8014e06:	4993      	ldr	r1, [pc, #588]	; (8015054 <dhcp_parse_reply+0x588>)
 8014e08:	4893      	ldr	r0, [pc, #588]	; (8015058 <dhcp_parse_reply+0x58c>)
 8014e0a:	f003 f84d 	bl	8017ea8 <iprintf>
 8014e0e:	f06f 0305 	mvn.w	r3, #5
 8014e12:	e119      	b.n	8015048 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8014e14:	2305      	movs	r3, #5
 8014e16:	623b      	str	r3, [r7, #32]
        break;
 8014e18:	e003      	b.n	8014e22 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8014e20:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8014e22:	7dfb      	ldrb	r3, [r7, #23]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d103      	bne.n	8014e30 <dhcp_parse_reply+0x364>
      offset++;
 8014e28:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014e2a:	3301      	adds	r3, #1
 8014e2c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8014e2e:	e0a1      	b.n	8014f74 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8014e30:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014e32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e36:	4413      	add	r3, r2
 8014e38:	3302      	adds	r3, #2
 8014e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014e3e:	db02      	blt.n	8014e46 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8014e40:	f06f 0301 	mvn.w	r3, #1
 8014e44:	e100      	b.n	8015048 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8014e46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e4a:	b29a      	uxth	r2, r3
 8014e4c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014e4e:	4413      	add	r3, r2
 8014e50:	b29b      	uxth	r3, r3
 8014e52:	3302      	adds	r3, #2
 8014e54:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8014e56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	f000 808a 	beq.w	8014f74 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8014e60:	2300      	movs	r3, #0
 8014e62:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8014e64:	6a3b      	ldr	r3, [r7, #32]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	db02      	blt.n	8014e70 <dhcp_parse_reply+0x3a4>
 8014e6a:	6a3b      	ldr	r3, [r7, #32]
 8014e6c:	2b07      	cmp	r3, #7
 8014e6e:	dd06      	ble.n	8014e7e <dhcp_parse_reply+0x3b2>
 8014e70:	4b77      	ldr	r3, [pc, #476]	; (8015050 <dhcp_parse_reply+0x584>)
 8014e72:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8014e76:	4979      	ldr	r1, [pc, #484]	; (801505c <dhcp_parse_reply+0x590>)
 8014e78:	4877      	ldr	r0, [pc, #476]	; (8015058 <dhcp_parse_reply+0x58c>)
 8014e7a:	f003 f815 	bl	8017ea8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8014e7e:	4a78      	ldr	r2, [pc, #480]	; (8015060 <dhcp_parse_reply+0x594>)
 8014e80:	6a3b      	ldr	r3, [r7, #32]
 8014e82:	4413      	add	r3, r2
 8014e84:	781b      	ldrb	r3, [r3, #0]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d174      	bne.n	8014f74 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8014e8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014e8e:	2b04      	cmp	r3, #4
 8014e90:	bf28      	it	cs
 8014e92:	2304      	movcs	r3, #4
 8014e94:	b2db      	uxtb	r3, r3
 8014e96:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8014e98:	8bfb      	ldrh	r3, [r7, #30]
 8014e9a:	8aba      	ldrh	r2, [r7, #20]
 8014e9c:	f107 0108 	add.w	r1, r7, #8
 8014ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014ea2:	f7f7 fca3 	bl	800c7ec <pbuf_copy_partial>
 8014ea6:	4603      	mov	r3, r0
 8014ea8:	461a      	mov	r2, r3
 8014eaa:	8abb      	ldrh	r3, [r7, #20]
 8014eac:	4293      	cmp	r3, r2
 8014eae:	d002      	beq.n	8014eb6 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8014eb0:	f06f 0301 	mvn.w	r3, #1
 8014eb4:	e0c8      	b.n	8015048 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8014eb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014eba:	2b04      	cmp	r3, #4
 8014ebc:	d933      	bls.n	8014f26 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8014ebe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014ec2:	f003 0303 	and.w	r3, r3, #3
 8014ec6:	b2db      	uxtb	r3, r3
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d009      	beq.n	8014ee0 <dhcp_parse_reply+0x414>
 8014ecc:	4b60      	ldr	r3, [pc, #384]	; (8015050 <dhcp_parse_reply+0x584>)
 8014ece:	f240 6281 	movw	r2, #1665	; 0x681
 8014ed2:	4964      	ldr	r1, [pc, #400]	; (8015064 <dhcp_parse_reply+0x598>)
 8014ed4:	4860      	ldr	r0, [pc, #384]	; (8015058 <dhcp_parse_reply+0x58c>)
 8014ed6:	f002 ffe7 	bl	8017ea8 <iprintf>
 8014eda:	f06f 0305 	mvn.w	r3, #5
 8014ede:	e0b3      	b.n	8015048 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8014ee0:	4a5f      	ldr	r2, [pc, #380]	; (8015060 <dhcp_parse_reply+0x594>)
 8014ee2:	6a3b      	ldr	r3, [r7, #32]
 8014ee4:	4413      	add	r3, r2
 8014ee6:	2201      	movs	r2, #1
 8014ee8:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8014eea:	68bb      	ldr	r3, [r7, #8]
 8014eec:	4618      	mov	r0, r3
 8014eee:	f7f5 fea2 	bl	800ac36 <lwip_htonl>
 8014ef2:	4601      	mov	r1, r0
 8014ef4:	4a5c      	ldr	r2, [pc, #368]	; (8015068 <dhcp_parse_reply+0x59c>)
 8014ef6:	6a3b      	ldr	r3, [r7, #32]
 8014ef8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8014efc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014f00:	3b04      	subs	r3, #4
 8014f02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8014f06:	8bfb      	ldrh	r3, [r7, #30]
 8014f08:	3304      	adds	r3, #4
 8014f0a:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8014f0c:	8a7a      	ldrh	r2, [r7, #18]
 8014f0e:	8bfb      	ldrh	r3, [r7, #30]
 8014f10:	429a      	cmp	r2, r3
 8014f12:	d202      	bcs.n	8014f1a <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8014f14:	f06f 0301 	mvn.w	r3, #1
 8014f18:	e096      	b.n	8015048 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8014f1a:	8a7b      	ldrh	r3, [r7, #18]
 8014f1c:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8014f1e:	6a3b      	ldr	r3, [r7, #32]
 8014f20:	3301      	adds	r3, #1
 8014f22:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8014f24:	e79e      	b.n	8014e64 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8014f26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014f2a:	2b04      	cmp	r3, #4
 8014f2c:	d106      	bne.n	8014f3c <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8014f2e:	68bb      	ldr	r3, [r7, #8]
 8014f30:	4618      	mov	r0, r3
 8014f32:	f7f5 fe80 	bl	800ac36 <lwip_htonl>
 8014f36:	4603      	mov	r3, r0
 8014f38:	60bb      	str	r3, [r7, #8]
 8014f3a:	e011      	b.n	8014f60 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8014f3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014f40:	2b01      	cmp	r3, #1
 8014f42:	d009      	beq.n	8014f58 <dhcp_parse_reply+0x48c>
 8014f44:	4b42      	ldr	r3, [pc, #264]	; (8015050 <dhcp_parse_reply+0x584>)
 8014f46:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8014f4a:	4948      	ldr	r1, [pc, #288]	; (801506c <dhcp_parse_reply+0x5a0>)
 8014f4c:	4842      	ldr	r0, [pc, #264]	; (8015058 <dhcp_parse_reply+0x58c>)
 8014f4e:	f002 ffab 	bl	8017ea8 <iprintf>
 8014f52:	f06f 0305 	mvn.w	r3, #5
 8014f56:	e077      	b.n	8015048 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8014f58:	f107 0308 	add.w	r3, r7, #8
 8014f5c:	781b      	ldrb	r3, [r3, #0]
 8014f5e:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8014f60:	4a3f      	ldr	r2, [pc, #252]	; (8015060 <dhcp_parse_reply+0x594>)
 8014f62:	6a3b      	ldr	r3, [r7, #32]
 8014f64:	4413      	add	r3, r2
 8014f66:	2201      	movs	r2, #1
 8014f68:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8014f6a:	68ba      	ldr	r2, [r7, #8]
 8014f6c:	493e      	ldr	r1, [pc, #248]	; (8015068 <dhcp_parse_reply+0x59c>)
 8014f6e:	6a3b      	ldr	r3, [r7, #32]
 8014f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8014f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f76:	895b      	ldrh	r3, [r3, #10]
 8014f78:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014f7a:	429a      	cmp	r2, r3
 8014f7c:	d324      	bcc.n	8014fc8 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8014f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f80:	895b      	ldrh	r3, [r3, #10]
 8014f82:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014f84:	1ad3      	subs	r3, r2, r3
 8014f86:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8014f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f8a:	895b      	ldrh	r3, [r3, #10]
 8014f8c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8014f8e:	1ad3      	subs	r3, r2, r3
 8014f90:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8014f92:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014f94:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014f96:	429a      	cmp	r2, r3
 8014f98:	d213      	bcs.n	8014fc2 <dhcp_parse_reply+0x4f6>
        q = q->next;
 8014f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8014fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d109      	bne.n	8014fba <dhcp_parse_reply+0x4ee>
 8014fa6:	4b2a      	ldr	r3, [pc, #168]	; (8015050 <dhcp_parse_reply+0x584>)
 8014fa8:	f240 629d 	movw	r2, #1693	; 0x69d
 8014fac:	4930      	ldr	r1, [pc, #192]	; (8015070 <dhcp_parse_reply+0x5a4>)
 8014fae:	482a      	ldr	r0, [pc, #168]	; (8015058 <dhcp_parse_reply+0x58c>)
 8014fb0:	f002 ff7a 	bl	8017ea8 <iprintf>
 8014fb4:	f06f 0305 	mvn.w	r3, #5
 8014fb8:	e046      	b.n	8015048 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8014fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fbc:	685b      	ldr	r3, [r3, #4]
 8014fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014fc0:	e002      	b.n	8014fc8 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8014fc2:	f06f 0301 	mvn.w	r3, #1
 8014fc6:	e03f      	b.n	8015048 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d00a      	beq.n	8014fe4 <dhcp_parse_reply+0x518>
 8014fce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014fd0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014fd2:	429a      	cmp	r2, r3
 8014fd4:	d206      	bcs.n	8014fe4 <dhcp_parse_reply+0x518>
 8014fd6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014fd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014fda:	4413      	add	r3, r2
 8014fdc:	781b      	ldrb	r3, [r3, #0]
 8014fde:	2bff      	cmp	r3, #255	; 0xff
 8014fe0:	f47f adb7 	bne.w	8014b52 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8014fe4:	4b1e      	ldr	r3, [pc, #120]	; (8015060 <dhcp_parse_reply+0x594>)
 8014fe6:	781b      	ldrb	r3, [r3, #0]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d018      	beq.n	801501e <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014fec:	4b1e      	ldr	r3, [pc, #120]	; (8015068 <dhcp_parse_reply+0x59c>)
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014ff2:	4b1b      	ldr	r3, [pc, #108]	; (8015060 <dhcp_parse_reply+0x594>)
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	2b01      	cmp	r3, #1
 8014ffc:	d102      	bne.n	8015004 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8014ffe:	2301      	movs	r3, #1
 8015000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015002:	e00c      	b.n	801501e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	2b02      	cmp	r3, #2
 8015008:	d102      	bne.n	8015010 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 801500a:	2301      	movs	r3, #1
 801500c:	62bb      	str	r3, [r7, #40]	; 0x28
 801500e:	e006      	b.n	801501e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	2b03      	cmp	r3, #3
 8015014:	d103      	bne.n	801501e <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8015016:	2301      	movs	r3, #1
 8015018:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801501a:	2301      	movs	r3, #1
 801501c:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801501e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015020:	2b00      	cmp	r3, #0
 8015022:	d006      	beq.n	8015032 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8015024:	2300      	movs	r3, #0
 8015026:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8015028:	236c      	movs	r3, #108	; 0x6c
 801502a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801502c:	23ec      	movs	r3, #236	; 0xec
 801502e:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8015030:	e569      	b.n	8014b06 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8015032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015034:	2b00      	cmp	r3, #0
 8015036:	d006      	beq.n	8015046 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8015038:	2300      	movs	r3, #0
 801503a:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801503c:	232c      	movs	r3, #44	; 0x2c
 801503e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8015040:	236c      	movs	r3, #108	; 0x6c
 8015042:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8015044:	e55f      	b.n	8014b06 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8015046:	2300      	movs	r3, #0
}
 8015048:	4618      	mov	r0, r3
 801504a:	3740      	adds	r7, #64	; 0x40
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}
 8015050:	0801bf94 	.word	0x0801bf94
 8015054:	0801c21c 	.word	0x0801c21c
 8015058:	0801bff4 	.word	0x0801bff4
 801505c:	0801c260 	.word	0x0801c260
 8015060:	2000f530 	.word	0x2000f530
 8015064:	0801c274 	.word	0x0801c274
 8015068:	2000f538 	.word	0x2000f538
 801506c:	0801c28c 	.word	0x0801c28c
 8015070:	0801c2a0 	.word	0x0801c2a0

08015074 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b08a      	sub	sp, #40	; 0x28
 8015078:	af00      	add	r7, sp, #0
 801507a:	60f8      	str	r0, [r7, #12]
 801507c:	60b9      	str	r1, [r7, #8]
 801507e:	607a      	str	r2, [r7, #4]
 8015080:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8015082:	4b5f      	ldr	r3, [pc, #380]	; (8015200 <dhcp_recv+0x18c>)
 8015084:	685b      	ldr	r3, [r3, #4]
 8015086:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015088:	6a3b      	ldr	r3, [r7, #32]
 801508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801508c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	685b      	ldr	r3, [r3, #4]
 8015092:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8015094:	69fb      	ldr	r3, [r7, #28]
 8015096:	2b00      	cmp	r3, #0
 8015098:	f000 809d 	beq.w	80151d6 <dhcp_recv+0x162>
 801509c:	69fb      	ldr	r3, [r7, #28]
 801509e:	791b      	ldrb	r3, [r3, #4]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	f000 8098 	beq.w	80151d6 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	895b      	ldrh	r3, [r3, #10]
 80150aa:	2b2b      	cmp	r3, #43	; 0x2b
 80150ac:	f240 8095 	bls.w	80151da <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80150b0:	69bb      	ldr	r3, [r7, #24]
 80150b2:	781b      	ldrb	r3, [r3, #0]
 80150b4:	2b02      	cmp	r3, #2
 80150b6:	f040 8092 	bne.w	80151de <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80150ba:	2300      	movs	r3, #0
 80150bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80150c0:	e012      	b.n	80150e8 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80150c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150c6:	6a3a      	ldr	r2, [r7, #32]
 80150c8:	4413      	add	r3, r2
 80150ca:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80150ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150d2:	69b9      	ldr	r1, [r7, #24]
 80150d4:	440b      	add	r3, r1
 80150d6:	7f1b      	ldrb	r3, [r3, #28]
 80150d8:	429a      	cmp	r2, r3
 80150da:	f040 8082 	bne.w	80151e2 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80150de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150e2:	3301      	adds	r3, #1
 80150e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80150e8:	6a3b      	ldr	r3, [r7, #32]
 80150ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80150ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80150f2:	429a      	cmp	r2, r3
 80150f4:	d203      	bcs.n	80150fe <dhcp_recv+0x8a>
 80150f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150fa:	2b05      	cmp	r3, #5
 80150fc:	d9e1      	bls.n	80150c2 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80150fe:	69bb      	ldr	r3, [r7, #24]
 8015100:	685b      	ldr	r3, [r3, #4]
 8015102:	4618      	mov	r0, r3
 8015104:	f7f5 fd97 	bl	800ac36 <lwip_htonl>
 8015108:	4602      	mov	r2, r0
 801510a:	69fb      	ldr	r3, [r7, #28]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	429a      	cmp	r2, r3
 8015110:	d169      	bne.n	80151e6 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8015112:	69f9      	ldr	r1, [r7, #28]
 8015114:	6878      	ldr	r0, [r7, #4]
 8015116:	f7ff fcd9 	bl	8014acc <dhcp_parse_reply>
 801511a:	4603      	mov	r3, r0
 801511c:	2b00      	cmp	r3, #0
 801511e:	d164      	bne.n	80151ea <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8015120:	4b38      	ldr	r3, [pc, #224]	; (8015204 <dhcp_recv+0x190>)
 8015122:	785b      	ldrb	r3, [r3, #1]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d062      	beq.n	80151ee <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	685b      	ldr	r3, [r3, #4]
 801512c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801512e:	4b36      	ldr	r3, [pc, #216]	; (8015208 <dhcp_recv+0x194>)
 8015130:	685b      	ldr	r3, [r3, #4]
 8015132:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015134:	7cfb      	ldrb	r3, [r7, #19]
 8015136:	2b05      	cmp	r3, #5
 8015138:	d12a      	bne.n	8015190 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801513a:	69fb      	ldr	r3, [r7, #28]
 801513c:	795b      	ldrb	r3, [r3, #5]
 801513e:	2b01      	cmp	r3, #1
 8015140:	d112      	bne.n	8015168 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8015142:	6979      	ldr	r1, [r7, #20]
 8015144:	6a38      	ldr	r0, [r7, #32]
 8015146:	f7fe fe05 	bl	8013d54 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801514a:	6a3b      	ldr	r3, [r7, #32]
 801514c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015150:	f003 0308 	and.w	r3, r3, #8
 8015154:	2b00      	cmp	r3, #0
 8015156:	d003      	beq.n	8015160 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8015158:	6a38      	ldr	r0, [r7, #32]
 801515a:	f7fe fb75 	bl	8013848 <dhcp_check>
 801515e:	e047      	b.n	80151f0 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8015160:	6a38      	ldr	r0, [r7, #32]
 8015162:	f7ff f867 	bl	8014234 <dhcp_bind>
 8015166:	e043      	b.n	80151f0 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015168:	69fb      	ldr	r3, [r7, #28]
 801516a:	795b      	ldrb	r3, [r3, #5]
 801516c:	2b03      	cmp	r3, #3
 801516e:	d007      	beq.n	8015180 <dhcp_recv+0x10c>
 8015170:	69fb      	ldr	r3, [r7, #28]
 8015172:	795b      	ldrb	r3, [r3, #5]
 8015174:	2b04      	cmp	r3, #4
 8015176:	d003      	beq.n	8015180 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8015178:	69fb      	ldr	r3, [r7, #28]
 801517a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801517c:	2b05      	cmp	r3, #5
 801517e:	d137      	bne.n	80151f0 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 8015180:	6979      	ldr	r1, [r7, #20]
 8015182:	6a38      	ldr	r0, [r7, #32]
 8015184:	f7fe fde6 	bl	8013d54 <dhcp_handle_ack>
      dhcp_bind(netif);
 8015188:	6a38      	ldr	r0, [r7, #32]
 801518a:	f7ff f853 	bl	8014234 <dhcp_bind>
 801518e:	e02f      	b.n	80151f0 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8015190:	7cfb      	ldrb	r3, [r7, #19]
 8015192:	2b06      	cmp	r3, #6
 8015194:	d113      	bne.n	80151be <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015196:	69fb      	ldr	r3, [r7, #28]
 8015198:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801519a:	2b03      	cmp	r3, #3
 801519c:	d00b      	beq.n	80151b6 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801519e:	69fb      	ldr	r3, [r7, #28]
 80151a0:	795b      	ldrb	r3, [r3, #5]
 80151a2:	2b01      	cmp	r3, #1
 80151a4:	d007      	beq.n	80151b6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80151a6:	69fb      	ldr	r3, [r7, #28]
 80151a8:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80151aa:	2b04      	cmp	r3, #4
 80151ac:	d003      	beq.n	80151b6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80151ae:	69fb      	ldr	r3, [r7, #28]
 80151b0:	795b      	ldrb	r3, [r3, #5]
 80151b2:	2b05      	cmp	r3, #5
 80151b4:	d103      	bne.n	80151be <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80151b6:	6a38      	ldr	r0, [r7, #32]
 80151b8:	f7fe fb2c 	bl	8013814 <dhcp_handle_nak>
 80151bc:	e018      	b.n	80151f0 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80151be:	7cfb      	ldrb	r3, [r7, #19]
 80151c0:	2b02      	cmp	r3, #2
 80151c2:	d108      	bne.n	80151d6 <dhcp_recv+0x162>
 80151c4:	69fb      	ldr	r3, [r7, #28]
 80151c6:	795b      	ldrb	r3, [r3, #5]
 80151c8:	2b06      	cmp	r3, #6
 80151ca:	d104      	bne.n	80151d6 <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80151cc:	6979      	ldr	r1, [r7, #20]
 80151ce:	6a38      	ldr	r0, [r7, #32]
 80151d0:	f7fe fb6e 	bl	80138b0 <dhcp_handle_offer>
 80151d4:	e00c      	b.n	80151f0 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 80151d6:	bf00      	nop
 80151d8:	e00a      	b.n	80151f0 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80151da:	bf00      	nop
 80151dc:	e008      	b.n	80151f0 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80151de:	bf00      	nop
 80151e0:	e006      	b.n	80151f0 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 80151e2:	bf00      	nop
 80151e4:	e004      	b.n	80151f0 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80151e6:	bf00      	nop
 80151e8:	e002      	b.n	80151f0 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80151ea:	bf00      	nop
 80151ec:	e000      	b.n	80151f0 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80151ee:	bf00      	nop
  pbuf_free(p);
 80151f0:	6878      	ldr	r0, [r7, #4]
 80151f2:	f7f7 f8f5 	bl	800c3e0 <pbuf_free>
}
 80151f6:	bf00      	nop
 80151f8:	3728      	adds	r7, #40	; 0x28
 80151fa:	46bd      	mov	sp, r7
 80151fc:	bd80      	pop	{r7, pc}
 80151fe:	bf00      	nop
 8015200:	2000bde0 	.word	0x2000bde0
 8015204:	2000f530 	.word	0x2000f530
 8015208:	2000f538 	.word	0x2000f538

0801520c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801520c:	b580      	push	{r7, lr}
 801520e:	b088      	sub	sp, #32
 8015210:	af00      	add	r7, sp, #0
 8015212:	60f8      	str	r0, [r7, #12]
 8015214:	60b9      	str	r1, [r7, #8]
 8015216:	603b      	str	r3, [r7, #0]
 8015218:	4613      	mov	r3, r2
 801521a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d108      	bne.n	8015234 <dhcp_create_msg+0x28>
 8015222:	4b5f      	ldr	r3, [pc, #380]	; (80153a0 <dhcp_create_msg+0x194>)
 8015224:	f240 7269 	movw	r2, #1897	; 0x769
 8015228:	495e      	ldr	r1, [pc, #376]	; (80153a4 <dhcp_create_msg+0x198>)
 801522a:	485f      	ldr	r0, [pc, #380]	; (80153a8 <dhcp_create_msg+0x19c>)
 801522c:	f002 fe3c 	bl	8017ea8 <iprintf>
 8015230:	2300      	movs	r3, #0
 8015232:	e0b1      	b.n	8015398 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015234:	68bb      	ldr	r3, [r7, #8]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d108      	bne.n	801524c <dhcp_create_msg+0x40>
 801523a:	4b59      	ldr	r3, [pc, #356]	; (80153a0 <dhcp_create_msg+0x194>)
 801523c:	f240 726a 	movw	r2, #1898	; 0x76a
 8015240:	495a      	ldr	r1, [pc, #360]	; (80153ac <dhcp_create_msg+0x1a0>)
 8015242:	4859      	ldr	r0, [pc, #356]	; (80153a8 <dhcp_create_msg+0x19c>)
 8015244:	f002 fe30 	bl	8017ea8 <iprintf>
 8015248:	2300      	movs	r3, #0
 801524a:	e0a5      	b.n	8015398 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801524c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015250:	f44f 719a 	mov.w	r1, #308	; 0x134
 8015254:	2036      	movs	r0, #54	; 0x36
 8015256:	f7f6 fde3 	bl	800be20 <pbuf_alloc>
 801525a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801525c:	69bb      	ldr	r3, [r7, #24]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d101      	bne.n	8015266 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8015262:	2300      	movs	r3, #0
 8015264:	e098      	b.n	8015398 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8015266:	69bb      	ldr	r3, [r7, #24]
 8015268:	895b      	ldrh	r3, [r3, #10]
 801526a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801526e:	d206      	bcs.n	801527e <dhcp_create_msg+0x72>
 8015270:	4b4b      	ldr	r3, [pc, #300]	; (80153a0 <dhcp_create_msg+0x194>)
 8015272:	f240 7272 	movw	r2, #1906	; 0x772
 8015276:	494e      	ldr	r1, [pc, #312]	; (80153b0 <dhcp_create_msg+0x1a4>)
 8015278:	484b      	ldr	r0, [pc, #300]	; (80153a8 <dhcp_create_msg+0x19c>)
 801527a:	f002 fe15 	bl	8017ea8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801527e:	79fb      	ldrb	r3, [r7, #7]
 8015280:	2b03      	cmp	r3, #3
 8015282:	d103      	bne.n	801528c <dhcp_create_msg+0x80>
 8015284:	68bb      	ldr	r3, [r7, #8]
 8015286:	795b      	ldrb	r3, [r3, #5]
 8015288:	2b03      	cmp	r3, #3
 801528a:	d10d      	bne.n	80152a8 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801528c:	68bb      	ldr	r3, [r7, #8]
 801528e:	799b      	ldrb	r3, [r3, #6]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d105      	bne.n	80152a0 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8015294:	f002 fe20 	bl	8017ed8 <rand>
 8015298:	4603      	mov	r3, r0
 801529a:	461a      	mov	r2, r3
 801529c:	4b45      	ldr	r3, [pc, #276]	; (80153b4 <dhcp_create_msg+0x1a8>)
 801529e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80152a0:	4b44      	ldr	r3, [pc, #272]	; (80153b4 <dhcp_create_msg+0x1a8>)
 80152a2:	681a      	ldr	r2, [r3, #0]
 80152a4:	68bb      	ldr	r3, [r7, #8]
 80152a6:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80152a8:	69bb      	ldr	r3, [r7, #24]
 80152aa:	685b      	ldr	r3, [r3, #4]
 80152ac:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80152ae:	f44f 729a 	mov.w	r2, #308	; 0x134
 80152b2:	2100      	movs	r1, #0
 80152b4:	6978      	ldr	r0, [r7, #20]
 80152b6:	f002 fdef 	bl	8017e98 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80152ba:	697b      	ldr	r3, [r7, #20]
 80152bc:	2201      	movs	r2, #1
 80152be:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80152c0:	697b      	ldr	r3, [r7, #20]
 80152c2:	2201      	movs	r2, #1
 80152c4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80152cc:	697b      	ldr	r3, [r7, #20]
 80152ce:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80152d0:	68bb      	ldr	r3, [r7, #8]
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	4618      	mov	r0, r3
 80152d6:	f7f5 fcae 	bl	800ac36 <lwip_htonl>
 80152da:	4602      	mov	r2, r0
 80152dc:	697b      	ldr	r3, [r7, #20]
 80152de:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80152e0:	79fb      	ldrb	r3, [r7, #7]
 80152e2:	2b08      	cmp	r3, #8
 80152e4:	d010      	beq.n	8015308 <dhcp_create_msg+0xfc>
 80152e6:	79fb      	ldrb	r3, [r7, #7]
 80152e8:	2b04      	cmp	r3, #4
 80152ea:	d00d      	beq.n	8015308 <dhcp_create_msg+0xfc>
 80152ec:	79fb      	ldrb	r3, [r7, #7]
 80152ee:	2b07      	cmp	r3, #7
 80152f0:	d00a      	beq.n	8015308 <dhcp_create_msg+0xfc>
 80152f2:	79fb      	ldrb	r3, [r7, #7]
 80152f4:	2b03      	cmp	r3, #3
 80152f6:	d10c      	bne.n	8015312 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80152f8:	68bb      	ldr	r3, [r7, #8]
 80152fa:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80152fc:	2b05      	cmp	r3, #5
 80152fe:	d003      	beq.n	8015308 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015300:	68bb      	ldr	r3, [r7, #8]
 8015302:	795b      	ldrb	r3, [r3, #5]
 8015304:	2b04      	cmp	r3, #4
 8015306:	d104      	bne.n	8015312 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	3304      	adds	r3, #4
 801530c:	681a      	ldr	r2, [r3, #0]
 801530e:	697b      	ldr	r3, [r7, #20]
 8015310:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015312:	2300      	movs	r3, #0
 8015314:	83fb      	strh	r3, [r7, #30]
 8015316:	e00c      	b.n	8015332 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8015318:	8bfa      	ldrh	r2, [r7, #30]
 801531a:	8bfb      	ldrh	r3, [r7, #30]
 801531c:	68f9      	ldr	r1, [r7, #12]
 801531e:	440a      	add	r2, r1
 8015320:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8015324:	697a      	ldr	r2, [r7, #20]
 8015326:	4413      	add	r3, r2
 8015328:	460a      	mov	r2, r1
 801532a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801532c:	8bfb      	ldrh	r3, [r7, #30]
 801532e:	3301      	adds	r3, #1
 8015330:	83fb      	strh	r3, [r7, #30]
 8015332:	8bfb      	ldrh	r3, [r7, #30]
 8015334:	2b05      	cmp	r3, #5
 8015336:	d9ef      	bls.n	8015318 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8015338:	697b      	ldr	r3, [r7, #20]
 801533a:	2200      	movs	r2, #0
 801533c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015340:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8015344:	2200      	movs	r2, #0
 8015346:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801534a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801534e:	2200      	movs	r2, #0
 8015350:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8015354:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8015358:	2200      	movs	r2, #0
 801535a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801535e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8015362:	697b      	ldr	r3, [r7, #20]
 8015364:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015368:	2301      	movs	r3, #1
 801536a:	2235      	movs	r2, #53	; 0x35
 801536c:	2000      	movs	r0, #0
 801536e:	f7ff fadd 	bl	801492c <dhcp_option>
 8015372:	4603      	mov	r3, r0
 8015374:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8015376:	697b      	ldr	r3, [r7, #20]
 8015378:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801537c:	79fa      	ldrb	r2, [r7, #7]
 801537e:	8a7b      	ldrh	r3, [r7, #18]
 8015380:	4618      	mov	r0, r3
 8015382:	f7ff fb07 	bl	8014994 <dhcp_option_byte>
 8015386:	4603      	mov	r3, r0
 8015388:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801538a:	683b      	ldr	r3, [r7, #0]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d002      	beq.n	8015396 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8015390:	683b      	ldr	r3, [r7, #0]
 8015392:	8a7a      	ldrh	r2, [r7, #18]
 8015394:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8015396:	69bb      	ldr	r3, [r7, #24]
}
 8015398:	4618      	mov	r0, r3
 801539a:	3720      	adds	r7, #32
 801539c:	46bd      	mov	sp, r7
 801539e:	bd80      	pop	{r7, pc}
 80153a0:	0801bf94 	.word	0x0801bf94
 80153a4:	0801c2b4 	.word	0x0801c2b4
 80153a8:	0801bff4 	.word	0x0801bff4
 80153ac:	0801c2d4 	.word	0x0801c2d4
 80153b0:	0801c2f4 	.word	0x0801c2f4
 80153b4:	20008ad8 	.word	0x20008ad8

080153b8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b084      	sub	sp, #16
 80153bc:	af00      	add	r7, sp, #0
 80153be:	4603      	mov	r3, r0
 80153c0:	60b9      	str	r1, [r7, #8]
 80153c2:	607a      	str	r2, [r7, #4]
 80153c4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80153c6:	89fb      	ldrh	r3, [r7, #14]
 80153c8:	1c5a      	adds	r2, r3, #1
 80153ca:	81fa      	strh	r2, [r7, #14]
 80153cc:	461a      	mov	r2, r3
 80153ce:	68bb      	ldr	r3, [r7, #8]
 80153d0:	4413      	add	r3, r2
 80153d2:	22ff      	movs	r2, #255	; 0xff
 80153d4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80153d6:	e007      	b.n	80153e8 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80153d8:	89fb      	ldrh	r3, [r7, #14]
 80153da:	1c5a      	adds	r2, r3, #1
 80153dc:	81fa      	strh	r2, [r7, #14]
 80153de:	461a      	mov	r2, r3
 80153e0:	68bb      	ldr	r3, [r7, #8]
 80153e2:	4413      	add	r3, r2
 80153e4:	2200      	movs	r2, #0
 80153e6:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80153e8:	89fb      	ldrh	r3, [r7, #14]
 80153ea:	2b43      	cmp	r3, #67	; 0x43
 80153ec:	d904      	bls.n	80153f8 <dhcp_option_trailer+0x40>
 80153ee:	89fb      	ldrh	r3, [r7, #14]
 80153f0:	f003 0303 	and.w	r3, r3, #3
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d002      	beq.n	80153fe <dhcp_option_trailer+0x46>
 80153f8:	89fb      	ldrh	r3, [r7, #14]
 80153fa:	2b43      	cmp	r3, #67	; 0x43
 80153fc:	d9ec      	bls.n	80153d8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80153fe:	89fb      	ldrh	r3, [r7, #14]
 8015400:	33f0      	adds	r3, #240	; 0xf0
 8015402:	b29b      	uxth	r3, r3
 8015404:	4619      	mov	r1, r3
 8015406:	6878      	ldr	r0, [r7, #4]
 8015408:	f7f6 fe64 	bl	800c0d4 <pbuf_realloc>
}
 801540c:	bf00      	nop
 801540e:	3710      	adds	r7, #16
 8015410:	46bd      	mov	sp, r7
 8015412:	bd80      	pop	{r7, pc}

08015414 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8015414:	b480      	push	{r7}
 8015416:	b085      	sub	sp, #20
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	2b00      	cmp	r3, #0
 8015420:	d017      	beq.n	8015452 <dhcp_supplied_address+0x3e>
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015426:	2b00      	cmp	r3, #0
 8015428:	d013      	beq.n	8015452 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801542e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	795b      	ldrb	r3, [r3, #5]
 8015434:	2b0a      	cmp	r3, #10
 8015436:	d007      	beq.n	8015448 <dhcp_supplied_address+0x34>
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	795b      	ldrb	r3, [r3, #5]
 801543c:	2b05      	cmp	r3, #5
 801543e:	d003      	beq.n	8015448 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015444:	2b04      	cmp	r3, #4
 8015446:	d101      	bne.n	801544c <dhcp_supplied_address+0x38>
 8015448:	2301      	movs	r3, #1
 801544a:	e000      	b.n	801544e <dhcp_supplied_address+0x3a>
 801544c:	2300      	movs	r3, #0
 801544e:	b2db      	uxtb	r3, r3
 8015450:	e000      	b.n	8015454 <dhcp_supplied_address+0x40>
  }
  return 0;
 8015452:	2300      	movs	r3, #0
}
 8015454:	4618      	mov	r0, r3
 8015456:	3714      	adds	r7, #20
 8015458:	46bd      	mov	sp, r7
 801545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545e:	4770      	bx	lr

08015460 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015460:	b580      	push	{r7, lr}
 8015462:	b082      	sub	sp, #8
 8015464:	af00      	add	r7, sp, #0
 8015466:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015468:	4915      	ldr	r1, [pc, #84]	; (80154c0 <etharp_free_entry+0x60>)
 801546a:	687a      	ldr	r2, [r7, #4]
 801546c:	4613      	mov	r3, r2
 801546e:	005b      	lsls	r3, r3, #1
 8015470:	4413      	add	r3, r2
 8015472:	00db      	lsls	r3, r3, #3
 8015474:	440b      	add	r3, r1
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d013      	beq.n	80154a4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801547c:	4910      	ldr	r1, [pc, #64]	; (80154c0 <etharp_free_entry+0x60>)
 801547e:	687a      	ldr	r2, [r7, #4]
 8015480:	4613      	mov	r3, r2
 8015482:	005b      	lsls	r3, r3, #1
 8015484:	4413      	add	r3, r2
 8015486:	00db      	lsls	r3, r3, #3
 8015488:	440b      	add	r3, r1
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	4618      	mov	r0, r3
 801548e:	f7f6 ffa7 	bl	800c3e0 <pbuf_free>
    arp_table[i].q = NULL;
 8015492:	490b      	ldr	r1, [pc, #44]	; (80154c0 <etharp_free_entry+0x60>)
 8015494:	687a      	ldr	r2, [r7, #4]
 8015496:	4613      	mov	r3, r2
 8015498:	005b      	lsls	r3, r3, #1
 801549a:	4413      	add	r3, r2
 801549c:	00db      	lsls	r3, r3, #3
 801549e:	440b      	add	r3, r1
 80154a0:	2200      	movs	r2, #0
 80154a2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80154a4:	4906      	ldr	r1, [pc, #24]	; (80154c0 <etharp_free_entry+0x60>)
 80154a6:	687a      	ldr	r2, [r7, #4]
 80154a8:	4613      	mov	r3, r2
 80154aa:	005b      	lsls	r3, r3, #1
 80154ac:	4413      	add	r3, r2
 80154ae:	00db      	lsls	r3, r3, #3
 80154b0:	440b      	add	r3, r1
 80154b2:	3314      	adds	r3, #20
 80154b4:	2200      	movs	r2, #0
 80154b6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80154b8:	bf00      	nop
 80154ba:	3708      	adds	r7, #8
 80154bc:	46bd      	mov	sp, r7
 80154be:	bd80      	pop	{r7, pc}
 80154c0:	20008adc 	.word	0x20008adc

080154c4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	b082      	sub	sp, #8
 80154c8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80154ca:	2300      	movs	r3, #0
 80154cc:	607b      	str	r3, [r7, #4]
 80154ce:	e096      	b.n	80155fe <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80154d0:	494f      	ldr	r1, [pc, #316]	; (8015610 <etharp_tmr+0x14c>)
 80154d2:	687a      	ldr	r2, [r7, #4]
 80154d4:	4613      	mov	r3, r2
 80154d6:	005b      	lsls	r3, r3, #1
 80154d8:	4413      	add	r3, r2
 80154da:	00db      	lsls	r3, r3, #3
 80154dc:	440b      	add	r3, r1
 80154de:	3314      	adds	r3, #20
 80154e0:	781b      	ldrb	r3, [r3, #0]
 80154e2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80154e4:	78fb      	ldrb	r3, [r7, #3]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	f000 8086 	beq.w	80155f8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80154ec:	4948      	ldr	r1, [pc, #288]	; (8015610 <etharp_tmr+0x14c>)
 80154ee:	687a      	ldr	r2, [r7, #4]
 80154f0:	4613      	mov	r3, r2
 80154f2:	005b      	lsls	r3, r3, #1
 80154f4:	4413      	add	r3, r2
 80154f6:	00db      	lsls	r3, r3, #3
 80154f8:	440b      	add	r3, r1
 80154fa:	3312      	adds	r3, #18
 80154fc:	881b      	ldrh	r3, [r3, #0]
 80154fe:	3301      	adds	r3, #1
 8015500:	b298      	uxth	r0, r3
 8015502:	4943      	ldr	r1, [pc, #268]	; (8015610 <etharp_tmr+0x14c>)
 8015504:	687a      	ldr	r2, [r7, #4]
 8015506:	4613      	mov	r3, r2
 8015508:	005b      	lsls	r3, r3, #1
 801550a:	4413      	add	r3, r2
 801550c:	00db      	lsls	r3, r3, #3
 801550e:	440b      	add	r3, r1
 8015510:	3312      	adds	r3, #18
 8015512:	4602      	mov	r2, r0
 8015514:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015516:	493e      	ldr	r1, [pc, #248]	; (8015610 <etharp_tmr+0x14c>)
 8015518:	687a      	ldr	r2, [r7, #4]
 801551a:	4613      	mov	r3, r2
 801551c:	005b      	lsls	r3, r3, #1
 801551e:	4413      	add	r3, r2
 8015520:	00db      	lsls	r3, r3, #3
 8015522:	440b      	add	r3, r1
 8015524:	3312      	adds	r3, #18
 8015526:	881b      	ldrh	r3, [r3, #0]
 8015528:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801552c:	d215      	bcs.n	801555a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801552e:	4938      	ldr	r1, [pc, #224]	; (8015610 <etharp_tmr+0x14c>)
 8015530:	687a      	ldr	r2, [r7, #4]
 8015532:	4613      	mov	r3, r2
 8015534:	005b      	lsls	r3, r3, #1
 8015536:	4413      	add	r3, r2
 8015538:	00db      	lsls	r3, r3, #3
 801553a:	440b      	add	r3, r1
 801553c:	3314      	adds	r3, #20
 801553e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015540:	2b01      	cmp	r3, #1
 8015542:	d10e      	bne.n	8015562 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015544:	4932      	ldr	r1, [pc, #200]	; (8015610 <etharp_tmr+0x14c>)
 8015546:	687a      	ldr	r2, [r7, #4]
 8015548:	4613      	mov	r3, r2
 801554a:	005b      	lsls	r3, r3, #1
 801554c:	4413      	add	r3, r2
 801554e:	00db      	lsls	r3, r3, #3
 8015550:	440b      	add	r3, r1
 8015552:	3312      	adds	r3, #18
 8015554:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015556:	2b04      	cmp	r3, #4
 8015558:	d903      	bls.n	8015562 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801555a:	6878      	ldr	r0, [r7, #4]
 801555c:	f7ff ff80 	bl	8015460 <etharp_free_entry>
 8015560:	e04a      	b.n	80155f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015562:	492b      	ldr	r1, [pc, #172]	; (8015610 <etharp_tmr+0x14c>)
 8015564:	687a      	ldr	r2, [r7, #4]
 8015566:	4613      	mov	r3, r2
 8015568:	005b      	lsls	r3, r3, #1
 801556a:	4413      	add	r3, r2
 801556c:	00db      	lsls	r3, r3, #3
 801556e:	440b      	add	r3, r1
 8015570:	3314      	adds	r3, #20
 8015572:	781b      	ldrb	r3, [r3, #0]
 8015574:	2b03      	cmp	r3, #3
 8015576:	d10a      	bne.n	801558e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015578:	4925      	ldr	r1, [pc, #148]	; (8015610 <etharp_tmr+0x14c>)
 801557a:	687a      	ldr	r2, [r7, #4]
 801557c:	4613      	mov	r3, r2
 801557e:	005b      	lsls	r3, r3, #1
 8015580:	4413      	add	r3, r2
 8015582:	00db      	lsls	r3, r3, #3
 8015584:	440b      	add	r3, r1
 8015586:	3314      	adds	r3, #20
 8015588:	2204      	movs	r2, #4
 801558a:	701a      	strb	r2, [r3, #0]
 801558c:	e034      	b.n	80155f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801558e:	4920      	ldr	r1, [pc, #128]	; (8015610 <etharp_tmr+0x14c>)
 8015590:	687a      	ldr	r2, [r7, #4]
 8015592:	4613      	mov	r3, r2
 8015594:	005b      	lsls	r3, r3, #1
 8015596:	4413      	add	r3, r2
 8015598:	00db      	lsls	r3, r3, #3
 801559a:	440b      	add	r3, r1
 801559c:	3314      	adds	r3, #20
 801559e:	781b      	ldrb	r3, [r3, #0]
 80155a0:	2b04      	cmp	r3, #4
 80155a2:	d10a      	bne.n	80155ba <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80155a4:	491a      	ldr	r1, [pc, #104]	; (8015610 <etharp_tmr+0x14c>)
 80155a6:	687a      	ldr	r2, [r7, #4]
 80155a8:	4613      	mov	r3, r2
 80155aa:	005b      	lsls	r3, r3, #1
 80155ac:	4413      	add	r3, r2
 80155ae:	00db      	lsls	r3, r3, #3
 80155b0:	440b      	add	r3, r1
 80155b2:	3314      	adds	r3, #20
 80155b4:	2202      	movs	r2, #2
 80155b6:	701a      	strb	r2, [r3, #0]
 80155b8:	e01e      	b.n	80155f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80155ba:	4915      	ldr	r1, [pc, #84]	; (8015610 <etharp_tmr+0x14c>)
 80155bc:	687a      	ldr	r2, [r7, #4]
 80155be:	4613      	mov	r3, r2
 80155c0:	005b      	lsls	r3, r3, #1
 80155c2:	4413      	add	r3, r2
 80155c4:	00db      	lsls	r3, r3, #3
 80155c6:	440b      	add	r3, r1
 80155c8:	3314      	adds	r3, #20
 80155ca:	781b      	ldrb	r3, [r3, #0]
 80155cc:	2b01      	cmp	r3, #1
 80155ce:	d113      	bne.n	80155f8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80155d0:	490f      	ldr	r1, [pc, #60]	; (8015610 <etharp_tmr+0x14c>)
 80155d2:	687a      	ldr	r2, [r7, #4]
 80155d4:	4613      	mov	r3, r2
 80155d6:	005b      	lsls	r3, r3, #1
 80155d8:	4413      	add	r3, r2
 80155da:	00db      	lsls	r3, r3, #3
 80155dc:	440b      	add	r3, r1
 80155de:	3308      	adds	r3, #8
 80155e0:	6818      	ldr	r0, [r3, #0]
 80155e2:	687a      	ldr	r2, [r7, #4]
 80155e4:	4613      	mov	r3, r2
 80155e6:	005b      	lsls	r3, r3, #1
 80155e8:	4413      	add	r3, r2
 80155ea:	00db      	lsls	r3, r3, #3
 80155ec:	4a08      	ldr	r2, [pc, #32]	; (8015610 <etharp_tmr+0x14c>)
 80155ee:	4413      	add	r3, r2
 80155f0:	3304      	adds	r3, #4
 80155f2:	4619      	mov	r1, r3
 80155f4:	f000 fe72 	bl	80162dc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	3301      	adds	r3, #1
 80155fc:	607b      	str	r3, [r7, #4]
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	2b09      	cmp	r3, #9
 8015602:	f77f af65 	ble.w	80154d0 <etharp_tmr+0xc>
      }
    }
  }
}
 8015606:	bf00      	nop
 8015608:	3708      	adds	r7, #8
 801560a:	46bd      	mov	sp, r7
 801560c:	bd80      	pop	{r7, pc}
 801560e:	bf00      	nop
 8015610:	20008adc 	.word	0x20008adc

08015614 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015614:	b580      	push	{r7, lr}
 8015616:	b08a      	sub	sp, #40	; 0x28
 8015618:	af00      	add	r7, sp, #0
 801561a:	60f8      	str	r0, [r7, #12]
 801561c:	460b      	mov	r3, r1
 801561e:	607a      	str	r2, [r7, #4]
 8015620:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015622:	230a      	movs	r3, #10
 8015624:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015626:	230a      	movs	r3, #10
 8015628:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801562a:	230a      	movs	r3, #10
 801562c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801562e:	2300      	movs	r3, #0
 8015630:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015632:	230a      	movs	r3, #10
 8015634:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015636:	2300      	movs	r3, #0
 8015638:	83bb      	strh	r3, [r7, #28]
 801563a:	2300      	movs	r3, #0
 801563c:	837b      	strh	r3, [r7, #26]
 801563e:	2300      	movs	r3, #0
 8015640:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015642:	2300      	movs	r3, #0
 8015644:	843b      	strh	r3, [r7, #32]
 8015646:	e0ae      	b.n	80157a6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015648:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801564c:	49a6      	ldr	r1, [pc, #664]	; (80158e8 <etharp_find_entry+0x2d4>)
 801564e:	4613      	mov	r3, r2
 8015650:	005b      	lsls	r3, r3, #1
 8015652:	4413      	add	r3, r2
 8015654:	00db      	lsls	r3, r3, #3
 8015656:	440b      	add	r3, r1
 8015658:	3314      	adds	r3, #20
 801565a:	781b      	ldrb	r3, [r3, #0]
 801565c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801565e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015662:	2b0a      	cmp	r3, #10
 8015664:	d105      	bne.n	8015672 <etharp_find_entry+0x5e>
 8015666:	7dfb      	ldrb	r3, [r7, #23]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d102      	bne.n	8015672 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801566c:	8c3b      	ldrh	r3, [r7, #32]
 801566e:	847b      	strh	r3, [r7, #34]	; 0x22
 8015670:	e095      	b.n	801579e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015672:	7dfb      	ldrb	r3, [r7, #23]
 8015674:	2b00      	cmp	r3, #0
 8015676:	f000 8092 	beq.w	801579e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801567a:	7dfb      	ldrb	r3, [r7, #23]
 801567c:	2b01      	cmp	r3, #1
 801567e:	d009      	beq.n	8015694 <etharp_find_entry+0x80>
 8015680:	7dfb      	ldrb	r3, [r7, #23]
 8015682:	2b01      	cmp	r3, #1
 8015684:	d806      	bhi.n	8015694 <etharp_find_entry+0x80>
 8015686:	4b99      	ldr	r3, [pc, #612]	; (80158ec <etharp_find_entry+0x2d8>)
 8015688:	f44f 7292 	mov.w	r2, #292	; 0x124
 801568c:	4998      	ldr	r1, [pc, #608]	; (80158f0 <etharp_find_entry+0x2dc>)
 801568e:	4899      	ldr	r0, [pc, #612]	; (80158f4 <etharp_find_entry+0x2e0>)
 8015690:	f002 fc0a 	bl	8017ea8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	2b00      	cmp	r3, #0
 8015698:	d020      	beq.n	80156dc <etharp_find_entry+0xc8>
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	6819      	ldr	r1, [r3, #0]
 801569e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80156a2:	4891      	ldr	r0, [pc, #580]	; (80158e8 <etharp_find_entry+0x2d4>)
 80156a4:	4613      	mov	r3, r2
 80156a6:	005b      	lsls	r3, r3, #1
 80156a8:	4413      	add	r3, r2
 80156aa:	00db      	lsls	r3, r3, #3
 80156ac:	4403      	add	r3, r0
 80156ae:	3304      	adds	r3, #4
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	4299      	cmp	r1, r3
 80156b4:	d112      	bne.n	80156dc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d00c      	beq.n	80156d6 <etharp_find_entry+0xc2>
 80156bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80156c0:	4989      	ldr	r1, [pc, #548]	; (80158e8 <etharp_find_entry+0x2d4>)
 80156c2:	4613      	mov	r3, r2
 80156c4:	005b      	lsls	r3, r3, #1
 80156c6:	4413      	add	r3, r2
 80156c8:	00db      	lsls	r3, r3, #3
 80156ca:	440b      	add	r3, r1
 80156cc:	3308      	adds	r3, #8
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	687a      	ldr	r2, [r7, #4]
 80156d2:	429a      	cmp	r2, r3
 80156d4:	d102      	bne.n	80156dc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80156d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80156da:	e100      	b.n	80158de <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80156dc:	7dfb      	ldrb	r3, [r7, #23]
 80156de:	2b01      	cmp	r3, #1
 80156e0:	d140      	bne.n	8015764 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80156e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80156e6:	4980      	ldr	r1, [pc, #512]	; (80158e8 <etharp_find_entry+0x2d4>)
 80156e8:	4613      	mov	r3, r2
 80156ea:	005b      	lsls	r3, r3, #1
 80156ec:	4413      	add	r3, r2
 80156ee:	00db      	lsls	r3, r3, #3
 80156f0:	440b      	add	r3, r1
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d01a      	beq.n	801572e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80156f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80156fc:	497a      	ldr	r1, [pc, #488]	; (80158e8 <etharp_find_entry+0x2d4>)
 80156fe:	4613      	mov	r3, r2
 8015700:	005b      	lsls	r3, r3, #1
 8015702:	4413      	add	r3, r2
 8015704:	00db      	lsls	r3, r3, #3
 8015706:	440b      	add	r3, r1
 8015708:	3312      	adds	r3, #18
 801570a:	881b      	ldrh	r3, [r3, #0]
 801570c:	8bba      	ldrh	r2, [r7, #28]
 801570e:	429a      	cmp	r2, r3
 8015710:	d845      	bhi.n	801579e <etharp_find_entry+0x18a>
            old_queue = i;
 8015712:	8c3b      	ldrh	r3, [r7, #32]
 8015714:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015716:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801571a:	4973      	ldr	r1, [pc, #460]	; (80158e8 <etharp_find_entry+0x2d4>)
 801571c:	4613      	mov	r3, r2
 801571e:	005b      	lsls	r3, r3, #1
 8015720:	4413      	add	r3, r2
 8015722:	00db      	lsls	r3, r3, #3
 8015724:	440b      	add	r3, r1
 8015726:	3312      	adds	r3, #18
 8015728:	881b      	ldrh	r3, [r3, #0]
 801572a:	83bb      	strh	r3, [r7, #28]
 801572c:	e037      	b.n	801579e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801572e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015732:	496d      	ldr	r1, [pc, #436]	; (80158e8 <etharp_find_entry+0x2d4>)
 8015734:	4613      	mov	r3, r2
 8015736:	005b      	lsls	r3, r3, #1
 8015738:	4413      	add	r3, r2
 801573a:	00db      	lsls	r3, r3, #3
 801573c:	440b      	add	r3, r1
 801573e:	3312      	adds	r3, #18
 8015740:	881b      	ldrh	r3, [r3, #0]
 8015742:	8b7a      	ldrh	r2, [r7, #26]
 8015744:	429a      	cmp	r2, r3
 8015746:	d82a      	bhi.n	801579e <etharp_find_entry+0x18a>
            old_pending = i;
 8015748:	8c3b      	ldrh	r3, [r7, #32]
 801574a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801574c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015750:	4965      	ldr	r1, [pc, #404]	; (80158e8 <etharp_find_entry+0x2d4>)
 8015752:	4613      	mov	r3, r2
 8015754:	005b      	lsls	r3, r3, #1
 8015756:	4413      	add	r3, r2
 8015758:	00db      	lsls	r3, r3, #3
 801575a:	440b      	add	r3, r1
 801575c:	3312      	adds	r3, #18
 801575e:	881b      	ldrh	r3, [r3, #0]
 8015760:	837b      	strh	r3, [r7, #26]
 8015762:	e01c      	b.n	801579e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015764:	7dfb      	ldrb	r3, [r7, #23]
 8015766:	2b01      	cmp	r3, #1
 8015768:	d919      	bls.n	801579e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801576a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801576e:	495e      	ldr	r1, [pc, #376]	; (80158e8 <etharp_find_entry+0x2d4>)
 8015770:	4613      	mov	r3, r2
 8015772:	005b      	lsls	r3, r3, #1
 8015774:	4413      	add	r3, r2
 8015776:	00db      	lsls	r3, r3, #3
 8015778:	440b      	add	r3, r1
 801577a:	3312      	adds	r3, #18
 801577c:	881b      	ldrh	r3, [r3, #0]
 801577e:	8b3a      	ldrh	r2, [r7, #24]
 8015780:	429a      	cmp	r2, r3
 8015782:	d80c      	bhi.n	801579e <etharp_find_entry+0x18a>
            old_stable = i;
 8015784:	8c3b      	ldrh	r3, [r7, #32]
 8015786:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015788:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801578c:	4956      	ldr	r1, [pc, #344]	; (80158e8 <etharp_find_entry+0x2d4>)
 801578e:	4613      	mov	r3, r2
 8015790:	005b      	lsls	r3, r3, #1
 8015792:	4413      	add	r3, r2
 8015794:	00db      	lsls	r3, r3, #3
 8015796:	440b      	add	r3, r1
 8015798:	3312      	adds	r3, #18
 801579a:	881b      	ldrh	r3, [r3, #0]
 801579c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801579e:	8c3b      	ldrh	r3, [r7, #32]
 80157a0:	3301      	adds	r3, #1
 80157a2:	b29b      	uxth	r3, r3
 80157a4:	843b      	strh	r3, [r7, #32]
 80157a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80157aa:	2b09      	cmp	r3, #9
 80157ac:	f77f af4c 	ble.w	8015648 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80157b0:	7afb      	ldrb	r3, [r7, #11]
 80157b2:	f003 0302 	and.w	r3, r3, #2
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d108      	bne.n	80157cc <etharp_find_entry+0x1b8>
 80157ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80157be:	2b0a      	cmp	r3, #10
 80157c0:	d107      	bne.n	80157d2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80157c2:	7afb      	ldrb	r3, [r7, #11]
 80157c4:	f003 0301 	and.w	r3, r3, #1
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d102      	bne.n	80157d2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80157cc:	f04f 33ff 	mov.w	r3, #4294967295
 80157d0:	e085      	b.n	80158de <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80157d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80157d6:	2b09      	cmp	r3, #9
 80157d8:	dc02      	bgt.n	80157e0 <etharp_find_entry+0x1cc>
    i = empty;
 80157da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80157dc:	843b      	strh	r3, [r7, #32]
 80157de:	e039      	b.n	8015854 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80157e0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80157e4:	2b09      	cmp	r3, #9
 80157e6:	dc14      	bgt.n	8015812 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80157e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80157ea:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80157ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80157f0:	493d      	ldr	r1, [pc, #244]	; (80158e8 <etharp_find_entry+0x2d4>)
 80157f2:	4613      	mov	r3, r2
 80157f4:	005b      	lsls	r3, r3, #1
 80157f6:	4413      	add	r3, r2
 80157f8:	00db      	lsls	r3, r3, #3
 80157fa:	440b      	add	r3, r1
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d018      	beq.n	8015834 <etharp_find_entry+0x220>
 8015802:	4b3a      	ldr	r3, [pc, #232]	; (80158ec <etharp_find_entry+0x2d8>)
 8015804:	f240 126d 	movw	r2, #365	; 0x16d
 8015808:	493b      	ldr	r1, [pc, #236]	; (80158f8 <etharp_find_entry+0x2e4>)
 801580a:	483a      	ldr	r0, [pc, #232]	; (80158f4 <etharp_find_entry+0x2e0>)
 801580c:	f002 fb4c 	bl	8017ea8 <iprintf>
 8015810:	e010      	b.n	8015834 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015812:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015816:	2b09      	cmp	r3, #9
 8015818:	dc02      	bgt.n	8015820 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801581a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801581c:	843b      	strh	r3, [r7, #32]
 801581e:	e009      	b.n	8015834 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015820:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015824:	2b09      	cmp	r3, #9
 8015826:	dc02      	bgt.n	801582e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015828:	8bfb      	ldrh	r3, [r7, #30]
 801582a:	843b      	strh	r3, [r7, #32]
 801582c:	e002      	b.n	8015834 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801582e:	f04f 33ff 	mov.w	r3, #4294967295
 8015832:	e054      	b.n	80158de <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015834:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015838:	2b09      	cmp	r3, #9
 801583a:	dd06      	ble.n	801584a <etharp_find_entry+0x236>
 801583c:	4b2b      	ldr	r3, [pc, #172]	; (80158ec <etharp_find_entry+0x2d8>)
 801583e:	f240 127f 	movw	r2, #383	; 0x17f
 8015842:	492e      	ldr	r1, [pc, #184]	; (80158fc <etharp_find_entry+0x2e8>)
 8015844:	482b      	ldr	r0, [pc, #172]	; (80158f4 <etharp_find_entry+0x2e0>)
 8015846:	f002 fb2f 	bl	8017ea8 <iprintf>
    etharp_free_entry(i);
 801584a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801584e:	4618      	mov	r0, r3
 8015850:	f7ff fe06 	bl	8015460 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015854:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015858:	2b09      	cmp	r3, #9
 801585a:	dd06      	ble.n	801586a <etharp_find_entry+0x256>
 801585c:	4b23      	ldr	r3, [pc, #140]	; (80158ec <etharp_find_entry+0x2d8>)
 801585e:	f240 1283 	movw	r2, #387	; 0x183
 8015862:	4926      	ldr	r1, [pc, #152]	; (80158fc <etharp_find_entry+0x2e8>)
 8015864:	4823      	ldr	r0, [pc, #140]	; (80158f4 <etharp_find_entry+0x2e0>)
 8015866:	f002 fb1f 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801586a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801586e:	491e      	ldr	r1, [pc, #120]	; (80158e8 <etharp_find_entry+0x2d4>)
 8015870:	4613      	mov	r3, r2
 8015872:	005b      	lsls	r3, r3, #1
 8015874:	4413      	add	r3, r2
 8015876:	00db      	lsls	r3, r3, #3
 8015878:	440b      	add	r3, r1
 801587a:	3314      	adds	r3, #20
 801587c:	781b      	ldrb	r3, [r3, #0]
 801587e:	2b00      	cmp	r3, #0
 8015880:	d006      	beq.n	8015890 <etharp_find_entry+0x27c>
 8015882:	4b1a      	ldr	r3, [pc, #104]	; (80158ec <etharp_find_entry+0x2d8>)
 8015884:	f240 1285 	movw	r2, #389	; 0x185
 8015888:	491d      	ldr	r1, [pc, #116]	; (8015900 <etharp_find_entry+0x2ec>)
 801588a:	481a      	ldr	r0, [pc, #104]	; (80158f4 <etharp_find_entry+0x2e0>)
 801588c:	f002 fb0c 	bl	8017ea8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d00b      	beq.n	80158ae <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015896:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	6819      	ldr	r1, [r3, #0]
 801589e:	4812      	ldr	r0, [pc, #72]	; (80158e8 <etharp_find_entry+0x2d4>)
 80158a0:	4613      	mov	r3, r2
 80158a2:	005b      	lsls	r3, r3, #1
 80158a4:	4413      	add	r3, r2
 80158a6:	00db      	lsls	r3, r3, #3
 80158a8:	4403      	add	r3, r0
 80158aa:	3304      	adds	r3, #4
 80158ac:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80158ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80158b2:	490d      	ldr	r1, [pc, #52]	; (80158e8 <etharp_find_entry+0x2d4>)
 80158b4:	4613      	mov	r3, r2
 80158b6:	005b      	lsls	r3, r3, #1
 80158b8:	4413      	add	r3, r2
 80158ba:	00db      	lsls	r3, r3, #3
 80158bc:	440b      	add	r3, r1
 80158be:	3312      	adds	r3, #18
 80158c0:	2200      	movs	r2, #0
 80158c2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80158c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80158c8:	4907      	ldr	r1, [pc, #28]	; (80158e8 <etharp_find_entry+0x2d4>)
 80158ca:	4613      	mov	r3, r2
 80158cc:	005b      	lsls	r3, r3, #1
 80158ce:	4413      	add	r3, r2
 80158d0:	00db      	lsls	r3, r3, #3
 80158d2:	440b      	add	r3, r1
 80158d4:	3308      	adds	r3, #8
 80158d6:	687a      	ldr	r2, [r7, #4]
 80158d8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80158da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80158de:	4618      	mov	r0, r3
 80158e0:	3728      	adds	r7, #40	; 0x28
 80158e2:	46bd      	mov	sp, r7
 80158e4:	bd80      	pop	{r7, pc}
 80158e6:	bf00      	nop
 80158e8:	20008adc 	.word	0x20008adc
 80158ec:	0801c334 	.word	0x0801c334
 80158f0:	0801c36c 	.word	0x0801c36c
 80158f4:	0801c3ac 	.word	0x0801c3ac
 80158f8:	0801c3d4 	.word	0x0801c3d4
 80158fc:	0801c3ec 	.word	0x0801c3ec
 8015900:	0801c400 	.word	0x0801c400

08015904 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015904:	b580      	push	{r7, lr}
 8015906:	b088      	sub	sp, #32
 8015908:	af02      	add	r7, sp, #8
 801590a:	60f8      	str	r0, [r7, #12]
 801590c:	60b9      	str	r1, [r7, #8]
 801590e:	607a      	str	r2, [r7, #4]
 8015910:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015918:	2b06      	cmp	r3, #6
 801591a:	d006      	beq.n	801592a <etharp_update_arp_entry+0x26>
 801591c:	4b48      	ldr	r3, [pc, #288]	; (8015a40 <etharp_update_arp_entry+0x13c>)
 801591e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015922:	4948      	ldr	r1, [pc, #288]	; (8015a44 <etharp_update_arp_entry+0x140>)
 8015924:	4848      	ldr	r0, [pc, #288]	; (8015a48 <etharp_update_arp_entry+0x144>)
 8015926:	f002 fabf 	bl	8017ea8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801592a:	68bb      	ldr	r3, [r7, #8]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d012      	beq.n	8015956 <etharp_update_arp_entry+0x52>
 8015930:	68bb      	ldr	r3, [r7, #8]
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d00e      	beq.n	8015956 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015938:	68bb      	ldr	r3, [r7, #8]
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	68f9      	ldr	r1, [r7, #12]
 801593e:	4618      	mov	r0, r3
 8015940:	f001 f91e 	bl	8016b80 <ip4_addr_isbroadcast_u32>
 8015944:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015946:	2b00      	cmp	r3, #0
 8015948:	d105      	bne.n	8015956 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801594a:	68bb      	ldr	r3, [r7, #8]
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015952:	2be0      	cmp	r3, #224	; 0xe0
 8015954:	d102      	bne.n	801595c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015956:	f06f 030f 	mvn.w	r3, #15
 801595a:	e06c      	b.n	8015a36 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801595c:	78fb      	ldrb	r3, [r7, #3]
 801595e:	68fa      	ldr	r2, [r7, #12]
 8015960:	4619      	mov	r1, r3
 8015962:	68b8      	ldr	r0, [r7, #8]
 8015964:	f7ff fe56 	bl	8015614 <etharp_find_entry>
 8015968:	4603      	mov	r3, r0
 801596a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801596c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015970:	2b00      	cmp	r3, #0
 8015972:	da02      	bge.n	801597a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015974:	8afb      	ldrh	r3, [r7, #22]
 8015976:	b25b      	sxtb	r3, r3
 8015978:	e05d      	b.n	8015a36 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801597a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801597e:	4933      	ldr	r1, [pc, #204]	; (8015a4c <etharp_update_arp_entry+0x148>)
 8015980:	4613      	mov	r3, r2
 8015982:	005b      	lsls	r3, r3, #1
 8015984:	4413      	add	r3, r2
 8015986:	00db      	lsls	r3, r3, #3
 8015988:	440b      	add	r3, r1
 801598a:	3314      	adds	r3, #20
 801598c:	2202      	movs	r2, #2
 801598e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015990:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015994:	492d      	ldr	r1, [pc, #180]	; (8015a4c <etharp_update_arp_entry+0x148>)
 8015996:	4613      	mov	r3, r2
 8015998:	005b      	lsls	r3, r3, #1
 801599a:	4413      	add	r3, r2
 801599c:	00db      	lsls	r3, r3, #3
 801599e:	440b      	add	r3, r1
 80159a0:	3308      	adds	r3, #8
 80159a2:	68fa      	ldr	r2, [r7, #12]
 80159a4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80159a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80159aa:	4613      	mov	r3, r2
 80159ac:	005b      	lsls	r3, r3, #1
 80159ae:	4413      	add	r3, r2
 80159b0:	00db      	lsls	r3, r3, #3
 80159b2:	3308      	adds	r3, #8
 80159b4:	4a25      	ldr	r2, [pc, #148]	; (8015a4c <etharp_update_arp_entry+0x148>)
 80159b6:	4413      	add	r3, r2
 80159b8:	3304      	adds	r3, #4
 80159ba:	2206      	movs	r2, #6
 80159bc:	6879      	ldr	r1, [r7, #4]
 80159be:	4618      	mov	r0, r3
 80159c0:	f002 fa5f 	bl	8017e82 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80159c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80159c8:	4920      	ldr	r1, [pc, #128]	; (8015a4c <etharp_update_arp_entry+0x148>)
 80159ca:	4613      	mov	r3, r2
 80159cc:	005b      	lsls	r3, r3, #1
 80159ce:	4413      	add	r3, r2
 80159d0:	00db      	lsls	r3, r3, #3
 80159d2:	440b      	add	r3, r1
 80159d4:	3312      	adds	r3, #18
 80159d6:	2200      	movs	r2, #0
 80159d8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80159da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80159de:	491b      	ldr	r1, [pc, #108]	; (8015a4c <etharp_update_arp_entry+0x148>)
 80159e0:	4613      	mov	r3, r2
 80159e2:	005b      	lsls	r3, r3, #1
 80159e4:	4413      	add	r3, r2
 80159e6:	00db      	lsls	r3, r3, #3
 80159e8:	440b      	add	r3, r1
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d021      	beq.n	8015a34 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80159f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80159f4:	4915      	ldr	r1, [pc, #84]	; (8015a4c <etharp_update_arp_entry+0x148>)
 80159f6:	4613      	mov	r3, r2
 80159f8:	005b      	lsls	r3, r3, #1
 80159fa:	4413      	add	r3, r2
 80159fc:	00db      	lsls	r3, r3, #3
 80159fe:	440b      	add	r3, r1
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015a04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015a08:	4910      	ldr	r1, [pc, #64]	; (8015a4c <etharp_update_arp_entry+0x148>)
 8015a0a:	4613      	mov	r3, r2
 8015a0c:	005b      	lsls	r3, r3, #1
 8015a0e:	4413      	add	r3, r2
 8015a10:	00db      	lsls	r3, r3, #3
 8015a12:	440b      	add	r3, r1
 8015a14:	2200      	movs	r2, #0
 8015a16:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8015a1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015a22:	9300      	str	r3, [sp, #0]
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	6939      	ldr	r1, [r7, #16]
 8015a28:	68f8      	ldr	r0, [r7, #12]
 8015a2a:	f001 ffad 	bl	8017988 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015a2e:	6938      	ldr	r0, [r7, #16]
 8015a30:	f7f6 fcd6 	bl	800c3e0 <pbuf_free>
  }
  return ERR_OK;
 8015a34:	2300      	movs	r3, #0
}
 8015a36:	4618      	mov	r0, r3
 8015a38:	3718      	adds	r7, #24
 8015a3a:	46bd      	mov	sp, r7
 8015a3c:	bd80      	pop	{r7, pc}
 8015a3e:	bf00      	nop
 8015a40:	0801c334 	.word	0x0801c334
 8015a44:	0801c42c 	.word	0x0801c42c
 8015a48:	0801c3ac 	.word	0x0801c3ac
 8015a4c:	20008adc 	.word	0x20008adc

08015a50 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b084      	sub	sp, #16
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015a58:	2300      	movs	r3, #0
 8015a5a:	60fb      	str	r3, [r7, #12]
 8015a5c:	e01e      	b.n	8015a9c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015a5e:	4913      	ldr	r1, [pc, #76]	; (8015aac <etharp_cleanup_netif+0x5c>)
 8015a60:	68fa      	ldr	r2, [r7, #12]
 8015a62:	4613      	mov	r3, r2
 8015a64:	005b      	lsls	r3, r3, #1
 8015a66:	4413      	add	r3, r2
 8015a68:	00db      	lsls	r3, r3, #3
 8015a6a:	440b      	add	r3, r1
 8015a6c:	3314      	adds	r3, #20
 8015a6e:	781b      	ldrb	r3, [r3, #0]
 8015a70:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015a72:	7afb      	ldrb	r3, [r7, #11]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d00e      	beq.n	8015a96 <etharp_cleanup_netif+0x46>
 8015a78:	490c      	ldr	r1, [pc, #48]	; (8015aac <etharp_cleanup_netif+0x5c>)
 8015a7a:	68fa      	ldr	r2, [r7, #12]
 8015a7c:	4613      	mov	r3, r2
 8015a7e:	005b      	lsls	r3, r3, #1
 8015a80:	4413      	add	r3, r2
 8015a82:	00db      	lsls	r3, r3, #3
 8015a84:	440b      	add	r3, r1
 8015a86:	3308      	adds	r3, #8
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	687a      	ldr	r2, [r7, #4]
 8015a8c:	429a      	cmp	r2, r3
 8015a8e:	d102      	bne.n	8015a96 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015a90:	68f8      	ldr	r0, [r7, #12]
 8015a92:	f7ff fce5 	bl	8015460 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	3301      	adds	r3, #1
 8015a9a:	60fb      	str	r3, [r7, #12]
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	2b09      	cmp	r3, #9
 8015aa0:	dddd      	ble.n	8015a5e <etharp_cleanup_netif+0xe>
    }
  }
}
 8015aa2:	bf00      	nop
 8015aa4:	3710      	adds	r7, #16
 8015aa6:	46bd      	mov	sp, r7
 8015aa8:	bd80      	pop	{r7, pc}
 8015aaa:	bf00      	nop
 8015aac:	20008adc 	.word	0x20008adc

08015ab0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015ab0:	b5b0      	push	{r4, r5, r7, lr}
 8015ab2:	b08a      	sub	sp, #40	; 0x28
 8015ab4:	af04      	add	r7, sp, #16
 8015ab6:	6078      	str	r0, [r7, #4]
 8015ab8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015aba:	683b      	ldr	r3, [r7, #0]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d107      	bne.n	8015ad0 <etharp_input+0x20>
 8015ac0:	4b3f      	ldr	r3, [pc, #252]	; (8015bc0 <etharp_input+0x110>)
 8015ac2:	f240 228a 	movw	r2, #650	; 0x28a
 8015ac6:	493f      	ldr	r1, [pc, #252]	; (8015bc4 <etharp_input+0x114>)
 8015ac8:	483f      	ldr	r0, [pc, #252]	; (8015bc8 <etharp_input+0x118>)
 8015aca:	f002 f9ed 	bl	8017ea8 <iprintf>
 8015ace:	e074      	b.n	8015bba <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	685b      	ldr	r3, [r3, #4]
 8015ad4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015ad6:	693b      	ldr	r3, [r7, #16]
 8015ad8:	881b      	ldrh	r3, [r3, #0]
 8015ada:	b29b      	uxth	r3, r3
 8015adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015ae0:	d10c      	bne.n	8015afc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015ae2:	693b      	ldr	r3, [r7, #16]
 8015ae4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015ae6:	2b06      	cmp	r3, #6
 8015ae8:	d108      	bne.n	8015afc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015aea:	693b      	ldr	r3, [r7, #16]
 8015aec:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015aee:	2b04      	cmp	r3, #4
 8015af0:	d104      	bne.n	8015afc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015af2:	693b      	ldr	r3, [r7, #16]
 8015af4:	885b      	ldrh	r3, [r3, #2]
 8015af6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015af8:	2b08      	cmp	r3, #8
 8015afa:	d003      	beq.n	8015b04 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015afc:	6878      	ldr	r0, [r7, #4]
 8015afe:	f7f6 fc6f 	bl	800c3e0 <pbuf_free>
    return;
 8015b02:	e05a      	b.n	8015bba <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015b04:	693b      	ldr	r3, [r7, #16]
 8015b06:	330e      	adds	r3, #14
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015b0c:	693b      	ldr	r3, [r7, #16]
 8015b0e:	3318      	adds	r3, #24
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015b14:	683b      	ldr	r3, [r7, #0]
 8015b16:	3304      	adds	r3, #4
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d102      	bne.n	8015b24 <etharp_input+0x74>
    for_us = 0;
 8015b1e:	2300      	movs	r3, #0
 8015b20:	75fb      	strb	r3, [r7, #23]
 8015b22:	e009      	b.n	8015b38 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015b24:	68ba      	ldr	r2, [r7, #8]
 8015b26:	683b      	ldr	r3, [r7, #0]
 8015b28:	3304      	adds	r3, #4
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	429a      	cmp	r2, r3
 8015b2e:	bf0c      	ite	eq
 8015b30:	2301      	moveq	r3, #1
 8015b32:	2300      	movne	r3, #0
 8015b34:	b2db      	uxtb	r3, r3
 8015b36:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015b38:	693b      	ldr	r3, [r7, #16]
 8015b3a:	f103 0208 	add.w	r2, r3, #8
 8015b3e:	7dfb      	ldrb	r3, [r7, #23]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d001      	beq.n	8015b48 <etharp_input+0x98>
 8015b44:	2301      	movs	r3, #1
 8015b46:	e000      	b.n	8015b4a <etharp_input+0x9a>
 8015b48:	2302      	movs	r3, #2
 8015b4a:	f107 010c 	add.w	r1, r7, #12
 8015b4e:	6838      	ldr	r0, [r7, #0]
 8015b50:	f7ff fed8 	bl	8015904 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015b54:	693b      	ldr	r3, [r7, #16]
 8015b56:	88db      	ldrh	r3, [r3, #6]
 8015b58:	b29b      	uxth	r3, r3
 8015b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015b5e:	d003      	beq.n	8015b68 <etharp_input+0xb8>
 8015b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015b64:	d01e      	beq.n	8015ba4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015b66:	e025      	b.n	8015bb4 <etharp_input+0x104>
      if (for_us) {
 8015b68:	7dfb      	ldrb	r3, [r7, #23]
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d021      	beq.n	8015bb2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015b6e:	683b      	ldr	r3, [r7, #0]
 8015b70:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015b74:	693b      	ldr	r3, [r7, #16]
 8015b76:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015b7a:	683b      	ldr	r3, [r7, #0]
 8015b7c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8015b80:	683b      	ldr	r3, [r7, #0]
 8015b82:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015b84:	693a      	ldr	r2, [r7, #16]
 8015b86:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015b88:	2102      	movs	r1, #2
 8015b8a:	9103      	str	r1, [sp, #12]
 8015b8c:	f107 010c 	add.w	r1, r7, #12
 8015b90:	9102      	str	r1, [sp, #8]
 8015b92:	9201      	str	r2, [sp, #4]
 8015b94:	9300      	str	r3, [sp, #0]
 8015b96:	462b      	mov	r3, r5
 8015b98:	4622      	mov	r2, r4
 8015b9a:	4601      	mov	r1, r0
 8015b9c:	6838      	ldr	r0, [r7, #0]
 8015b9e:	f000 faef 	bl	8016180 <etharp_raw>
      break;
 8015ba2:	e006      	b.n	8015bb2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8015ba4:	f107 030c 	add.w	r3, r7, #12
 8015ba8:	4619      	mov	r1, r3
 8015baa:	6838      	ldr	r0, [r7, #0]
 8015bac:	f7fe f9fe 	bl	8013fac <dhcp_arp_reply>
      break;
 8015bb0:	e000      	b.n	8015bb4 <etharp_input+0x104>
      break;
 8015bb2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015bb4:	6878      	ldr	r0, [r7, #4]
 8015bb6:	f7f6 fc13 	bl	800c3e0 <pbuf_free>
}
 8015bba:	3718      	adds	r7, #24
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	bdb0      	pop	{r4, r5, r7, pc}
 8015bc0:	0801c334 	.word	0x0801c334
 8015bc4:	0801c484 	.word	0x0801c484
 8015bc8:	0801c3ac 	.word	0x0801c3ac

08015bcc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015bcc:	b580      	push	{r7, lr}
 8015bce:	b086      	sub	sp, #24
 8015bd0:	af02      	add	r7, sp, #8
 8015bd2:	60f8      	str	r0, [r7, #12]
 8015bd4:	60b9      	str	r1, [r7, #8]
 8015bd6:	4613      	mov	r3, r2
 8015bd8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015bda:	79fa      	ldrb	r2, [r7, #7]
 8015bdc:	4944      	ldr	r1, [pc, #272]	; (8015cf0 <etharp_output_to_arp_index+0x124>)
 8015bde:	4613      	mov	r3, r2
 8015be0:	005b      	lsls	r3, r3, #1
 8015be2:	4413      	add	r3, r2
 8015be4:	00db      	lsls	r3, r3, #3
 8015be6:	440b      	add	r3, r1
 8015be8:	3314      	adds	r3, #20
 8015bea:	781b      	ldrb	r3, [r3, #0]
 8015bec:	2b01      	cmp	r3, #1
 8015bee:	d806      	bhi.n	8015bfe <etharp_output_to_arp_index+0x32>
 8015bf0:	4b40      	ldr	r3, [pc, #256]	; (8015cf4 <etharp_output_to_arp_index+0x128>)
 8015bf2:	f240 22ef 	movw	r2, #751	; 0x2ef
 8015bf6:	4940      	ldr	r1, [pc, #256]	; (8015cf8 <etharp_output_to_arp_index+0x12c>)
 8015bf8:	4840      	ldr	r0, [pc, #256]	; (8015cfc <etharp_output_to_arp_index+0x130>)
 8015bfa:	f002 f955 	bl	8017ea8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015bfe:	79fa      	ldrb	r2, [r7, #7]
 8015c00:	493b      	ldr	r1, [pc, #236]	; (8015cf0 <etharp_output_to_arp_index+0x124>)
 8015c02:	4613      	mov	r3, r2
 8015c04:	005b      	lsls	r3, r3, #1
 8015c06:	4413      	add	r3, r2
 8015c08:	00db      	lsls	r3, r3, #3
 8015c0a:	440b      	add	r3, r1
 8015c0c:	3314      	adds	r3, #20
 8015c0e:	781b      	ldrb	r3, [r3, #0]
 8015c10:	2b02      	cmp	r3, #2
 8015c12:	d153      	bne.n	8015cbc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015c14:	79fa      	ldrb	r2, [r7, #7]
 8015c16:	4936      	ldr	r1, [pc, #216]	; (8015cf0 <etharp_output_to_arp_index+0x124>)
 8015c18:	4613      	mov	r3, r2
 8015c1a:	005b      	lsls	r3, r3, #1
 8015c1c:	4413      	add	r3, r2
 8015c1e:	00db      	lsls	r3, r3, #3
 8015c20:	440b      	add	r3, r1
 8015c22:	3312      	adds	r3, #18
 8015c24:	881b      	ldrh	r3, [r3, #0]
 8015c26:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015c2a:	d919      	bls.n	8015c60 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015c2c:	79fa      	ldrb	r2, [r7, #7]
 8015c2e:	4613      	mov	r3, r2
 8015c30:	005b      	lsls	r3, r3, #1
 8015c32:	4413      	add	r3, r2
 8015c34:	00db      	lsls	r3, r3, #3
 8015c36:	4a2e      	ldr	r2, [pc, #184]	; (8015cf0 <etharp_output_to_arp_index+0x124>)
 8015c38:	4413      	add	r3, r2
 8015c3a:	3304      	adds	r3, #4
 8015c3c:	4619      	mov	r1, r3
 8015c3e:	68f8      	ldr	r0, [r7, #12]
 8015c40:	f000 fb4c 	bl	80162dc <etharp_request>
 8015c44:	4603      	mov	r3, r0
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d138      	bne.n	8015cbc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015c4a:	79fa      	ldrb	r2, [r7, #7]
 8015c4c:	4928      	ldr	r1, [pc, #160]	; (8015cf0 <etharp_output_to_arp_index+0x124>)
 8015c4e:	4613      	mov	r3, r2
 8015c50:	005b      	lsls	r3, r3, #1
 8015c52:	4413      	add	r3, r2
 8015c54:	00db      	lsls	r3, r3, #3
 8015c56:	440b      	add	r3, r1
 8015c58:	3314      	adds	r3, #20
 8015c5a:	2203      	movs	r2, #3
 8015c5c:	701a      	strb	r2, [r3, #0]
 8015c5e:	e02d      	b.n	8015cbc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015c60:	79fa      	ldrb	r2, [r7, #7]
 8015c62:	4923      	ldr	r1, [pc, #140]	; (8015cf0 <etharp_output_to_arp_index+0x124>)
 8015c64:	4613      	mov	r3, r2
 8015c66:	005b      	lsls	r3, r3, #1
 8015c68:	4413      	add	r3, r2
 8015c6a:	00db      	lsls	r3, r3, #3
 8015c6c:	440b      	add	r3, r1
 8015c6e:	3312      	adds	r3, #18
 8015c70:	881b      	ldrh	r3, [r3, #0]
 8015c72:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015c76:	d321      	bcc.n	8015cbc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015c78:	79fa      	ldrb	r2, [r7, #7]
 8015c7a:	4613      	mov	r3, r2
 8015c7c:	005b      	lsls	r3, r3, #1
 8015c7e:	4413      	add	r3, r2
 8015c80:	00db      	lsls	r3, r3, #3
 8015c82:	4a1b      	ldr	r2, [pc, #108]	; (8015cf0 <etharp_output_to_arp_index+0x124>)
 8015c84:	4413      	add	r3, r2
 8015c86:	1d19      	adds	r1, r3, #4
 8015c88:	79fa      	ldrb	r2, [r7, #7]
 8015c8a:	4613      	mov	r3, r2
 8015c8c:	005b      	lsls	r3, r3, #1
 8015c8e:	4413      	add	r3, r2
 8015c90:	00db      	lsls	r3, r3, #3
 8015c92:	3308      	adds	r3, #8
 8015c94:	4a16      	ldr	r2, [pc, #88]	; (8015cf0 <etharp_output_to_arp_index+0x124>)
 8015c96:	4413      	add	r3, r2
 8015c98:	3304      	adds	r3, #4
 8015c9a:	461a      	mov	r2, r3
 8015c9c:	68f8      	ldr	r0, [r7, #12]
 8015c9e:	f000 fafb 	bl	8016298 <etharp_request_dst>
 8015ca2:	4603      	mov	r3, r0
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d109      	bne.n	8015cbc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015ca8:	79fa      	ldrb	r2, [r7, #7]
 8015caa:	4911      	ldr	r1, [pc, #68]	; (8015cf0 <etharp_output_to_arp_index+0x124>)
 8015cac:	4613      	mov	r3, r2
 8015cae:	005b      	lsls	r3, r3, #1
 8015cb0:	4413      	add	r3, r2
 8015cb2:	00db      	lsls	r3, r3, #3
 8015cb4:	440b      	add	r3, r1
 8015cb6:	3314      	adds	r3, #20
 8015cb8:	2203      	movs	r2, #3
 8015cba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8015cc2:	79fa      	ldrb	r2, [r7, #7]
 8015cc4:	4613      	mov	r3, r2
 8015cc6:	005b      	lsls	r3, r3, #1
 8015cc8:	4413      	add	r3, r2
 8015cca:	00db      	lsls	r3, r3, #3
 8015ccc:	3308      	adds	r3, #8
 8015cce:	4a08      	ldr	r2, [pc, #32]	; (8015cf0 <etharp_output_to_arp_index+0x124>)
 8015cd0:	4413      	add	r3, r2
 8015cd2:	1d1a      	adds	r2, r3, #4
 8015cd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015cd8:	9300      	str	r3, [sp, #0]
 8015cda:	4613      	mov	r3, r2
 8015cdc:	460a      	mov	r2, r1
 8015cde:	68b9      	ldr	r1, [r7, #8]
 8015ce0:	68f8      	ldr	r0, [r7, #12]
 8015ce2:	f001 fe51 	bl	8017988 <ethernet_output>
 8015ce6:	4603      	mov	r3, r0
}
 8015ce8:	4618      	mov	r0, r3
 8015cea:	3710      	adds	r7, #16
 8015cec:	46bd      	mov	sp, r7
 8015cee:	bd80      	pop	{r7, pc}
 8015cf0:	20008adc 	.word	0x20008adc
 8015cf4:	0801c334 	.word	0x0801c334
 8015cf8:	0801c4a4 	.word	0x0801c4a4
 8015cfc:	0801c3ac 	.word	0x0801c3ac

08015d00 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b08a      	sub	sp, #40	; 0x28
 8015d04:	af02      	add	r7, sp, #8
 8015d06:	60f8      	str	r0, [r7, #12]
 8015d08:	60b9      	str	r1, [r7, #8]
 8015d0a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d106      	bne.n	8015d24 <etharp_output+0x24>
 8015d16:	4b73      	ldr	r3, [pc, #460]	; (8015ee4 <etharp_output+0x1e4>)
 8015d18:	f240 321e 	movw	r2, #798	; 0x31e
 8015d1c:	4972      	ldr	r1, [pc, #456]	; (8015ee8 <etharp_output+0x1e8>)
 8015d1e:	4873      	ldr	r0, [pc, #460]	; (8015eec <etharp_output+0x1ec>)
 8015d20:	f002 f8c2 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015d24:	68bb      	ldr	r3, [r7, #8]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d106      	bne.n	8015d38 <etharp_output+0x38>
 8015d2a:	4b6e      	ldr	r3, [pc, #440]	; (8015ee4 <etharp_output+0x1e4>)
 8015d2c:	f240 321f 	movw	r2, #799	; 0x31f
 8015d30:	496f      	ldr	r1, [pc, #444]	; (8015ef0 <etharp_output+0x1f0>)
 8015d32:	486e      	ldr	r0, [pc, #440]	; (8015eec <etharp_output+0x1ec>)
 8015d34:	f002 f8b8 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d106      	bne.n	8015d4c <etharp_output+0x4c>
 8015d3e:	4b69      	ldr	r3, [pc, #420]	; (8015ee4 <etharp_output+0x1e4>)
 8015d40:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015d44:	496b      	ldr	r1, [pc, #428]	; (8015ef4 <etharp_output+0x1f4>)
 8015d46:	4869      	ldr	r0, [pc, #420]	; (8015eec <etharp_output+0x1ec>)
 8015d48:	f002 f8ae 	bl	8017ea8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	681b      	ldr	r3, [r3, #0]
 8015d50:	68f9      	ldr	r1, [r7, #12]
 8015d52:	4618      	mov	r0, r3
 8015d54:	f000 ff14 	bl	8016b80 <ip4_addr_isbroadcast_u32>
 8015d58:	4603      	mov	r3, r0
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d002      	beq.n	8015d64 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015d5e:	4b66      	ldr	r3, [pc, #408]	; (8015ef8 <etharp_output+0x1f8>)
 8015d60:	61fb      	str	r3, [r7, #28]
 8015d62:	e0af      	b.n	8015ec4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015d6c:	2be0      	cmp	r3, #224	; 0xe0
 8015d6e:	d118      	bne.n	8015da2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015d70:	2301      	movs	r3, #1
 8015d72:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015d74:	2300      	movs	r3, #0
 8015d76:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015d78:	235e      	movs	r3, #94	; 0x5e
 8015d7a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	3301      	adds	r3, #1
 8015d80:	781b      	ldrb	r3, [r3, #0]
 8015d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015d86:	b2db      	uxtb	r3, r3
 8015d88:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	3302      	adds	r3, #2
 8015d8e:	781b      	ldrb	r3, [r3, #0]
 8015d90:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	3303      	adds	r3, #3
 8015d96:	781b      	ldrb	r3, [r3, #0]
 8015d98:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015d9a:	f107 0310 	add.w	r3, r7, #16
 8015d9e:	61fb      	str	r3, [r7, #28]
 8015da0:	e090      	b.n	8015ec4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	681a      	ldr	r2, [r3, #0]
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	3304      	adds	r3, #4
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	405a      	eors	r2, r3
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	3308      	adds	r3, #8
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	4013      	ands	r3, r2
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d012      	beq.n	8015de0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015dc0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015dc4:	4293      	cmp	r3, r2
 8015dc6:	d00b      	beq.n	8015de0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	330c      	adds	r3, #12
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d003      	beq.n	8015dda <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	330c      	adds	r3, #12
 8015dd6:	61bb      	str	r3, [r7, #24]
 8015dd8:	e002      	b.n	8015de0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015dda:	f06f 0303 	mvn.w	r3, #3
 8015dde:	e07d      	b.n	8015edc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015de0:	4b46      	ldr	r3, [pc, #280]	; (8015efc <etharp_output+0x1fc>)
 8015de2:	781b      	ldrb	r3, [r3, #0]
 8015de4:	4619      	mov	r1, r3
 8015de6:	4a46      	ldr	r2, [pc, #280]	; (8015f00 <etharp_output+0x200>)
 8015de8:	460b      	mov	r3, r1
 8015dea:	005b      	lsls	r3, r3, #1
 8015dec:	440b      	add	r3, r1
 8015dee:	00db      	lsls	r3, r3, #3
 8015df0:	4413      	add	r3, r2
 8015df2:	3314      	adds	r3, #20
 8015df4:	781b      	ldrb	r3, [r3, #0]
 8015df6:	2b01      	cmp	r3, #1
 8015df8:	d925      	bls.n	8015e46 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015dfa:	4b40      	ldr	r3, [pc, #256]	; (8015efc <etharp_output+0x1fc>)
 8015dfc:	781b      	ldrb	r3, [r3, #0]
 8015dfe:	4619      	mov	r1, r3
 8015e00:	4a3f      	ldr	r2, [pc, #252]	; (8015f00 <etharp_output+0x200>)
 8015e02:	460b      	mov	r3, r1
 8015e04:	005b      	lsls	r3, r3, #1
 8015e06:	440b      	add	r3, r1
 8015e08:	00db      	lsls	r3, r3, #3
 8015e0a:	4413      	add	r3, r2
 8015e0c:	3308      	adds	r3, #8
 8015e0e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015e10:	68fa      	ldr	r2, [r7, #12]
 8015e12:	429a      	cmp	r2, r3
 8015e14:	d117      	bne.n	8015e46 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015e16:	69bb      	ldr	r3, [r7, #24]
 8015e18:	681a      	ldr	r2, [r3, #0]
 8015e1a:	4b38      	ldr	r3, [pc, #224]	; (8015efc <etharp_output+0x1fc>)
 8015e1c:	781b      	ldrb	r3, [r3, #0]
 8015e1e:	4618      	mov	r0, r3
 8015e20:	4937      	ldr	r1, [pc, #220]	; (8015f00 <etharp_output+0x200>)
 8015e22:	4603      	mov	r3, r0
 8015e24:	005b      	lsls	r3, r3, #1
 8015e26:	4403      	add	r3, r0
 8015e28:	00db      	lsls	r3, r3, #3
 8015e2a:	440b      	add	r3, r1
 8015e2c:	3304      	adds	r3, #4
 8015e2e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015e30:	429a      	cmp	r2, r3
 8015e32:	d108      	bne.n	8015e46 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015e34:	4b31      	ldr	r3, [pc, #196]	; (8015efc <etharp_output+0x1fc>)
 8015e36:	781b      	ldrb	r3, [r3, #0]
 8015e38:	461a      	mov	r2, r3
 8015e3a:	68b9      	ldr	r1, [r7, #8]
 8015e3c:	68f8      	ldr	r0, [r7, #12]
 8015e3e:	f7ff fec5 	bl	8015bcc <etharp_output_to_arp_index>
 8015e42:	4603      	mov	r3, r0
 8015e44:	e04a      	b.n	8015edc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015e46:	2300      	movs	r3, #0
 8015e48:	75fb      	strb	r3, [r7, #23]
 8015e4a:	e031      	b.n	8015eb0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015e4c:	7dfa      	ldrb	r2, [r7, #23]
 8015e4e:	492c      	ldr	r1, [pc, #176]	; (8015f00 <etharp_output+0x200>)
 8015e50:	4613      	mov	r3, r2
 8015e52:	005b      	lsls	r3, r3, #1
 8015e54:	4413      	add	r3, r2
 8015e56:	00db      	lsls	r3, r3, #3
 8015e58:	440b      	add	r3, r1
 8015e5a:	3314      	adds	r3, #20
 8015e5c:	781b      	ldrb	r3, [r3, #0]
 8015e5e:	2b01      	cmp	r3, #1
 8015e60:	d923      	bls.n	8015eaa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015e62:	7dfa      	ldrb	r2, [r7, #23]
 8015e64:	4926      	ldr	r1, [pc, #152]	; (8015f00 <etharp_output+0x200>)
 8015e66:	4613      	mov	r3, r2
 8015e68:	005b      	lsls	r3, r3, #1
 8015e6a:	4413      	add	r3, r2
 8015e6c:	00db      	lsls	r3, r3, #3
 8015e6e:	440b      	add	r3, r1
 8015e70:	3308      	adds	r3, #8
 8015e72:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015e74:	68fa      	ldr	r2, [r7, #12]
 8015e76:	429a      	cmp	r2, r3
 8015e78:	d117      	bne.n	8015eaa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015e7a:	69bb      	ldr	r3, [r7, #24]
 8015e7c:	6819      	ldr	r1, [r3, #0]
 8015e7e:	7dfa      	ldrb	r2, [r7, #23]
 8015e80:	481f      	ldr	r0, [pc, #124]	; (8015f00 <etharp_output+0x200>)
 8015e82:	4613      	mov	r3, r2
 8015e84:	005b      	lsls	r3, r3, #1
 8015e86:	4413      	add	r3, r2
 8015e88:	00db      	lsls	r3, r3, #3
 8015e8a:	4403      	add	r3, r0
 8015e8c:	3304      	adds	r3, #4
 8015e8e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015e90:	4299      	cmp	r1, r3
 8015e92:	d10a      	bne.n	8015eaa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015e94:	4a19      	ldr	r2, [pc, #100]	; (8015efc <etharp_output+0x1fc>)
 8015e96:	7dfb      	ldrb	r3, [r7, #23]
 8015e98:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015e9a:	7dfb      	ldrb	r3, [r7, #23]
 8015e9c:	461a      	mov	r2, r3
 8015e9e:	68b9      	ldr	r1, [r7, #8]
 8015ea0:	68f8      	ldr	r0, [r7, #12]
 8015ea2:	f7ff fe93 	bl	8015bcc <etharp_output_to_arp_index>
 8015ea6:	4603      	mov	r3, r0
 8015ea8:	e018      	b.n	8015edc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015eaa:	7dfb      	ldrb	r3, [r7, #23]
 8015eac:	3301      	adds	r3, #1
 8015eae:	75fb      	strb	r3, [r7, #23]
 8015eb0:	7dfb      	ldrb	r3, [r7, #23]
 8015eb2:	2b09      	cmp	r3, #9
 8015eb4:	d9ca      	bls.n	8015e4c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015eb6:	68ba      	ldr	r2, [r7, #8]
 8015eb8:	69b9      	ldr	r1, [r7, #24]
 8015eba:	68f8      	ldr	r0, [r7, #12]
 8015ebc:	f000 f822 	bl	8015f04 <etharp_query>
 8015ec0:	4603      	mov	r3, r0
 8015ec2:	e00b      	b.n	8015edc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8015eca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015ece:	9300      	str	r3, [sp, #0]
 8015ed0:	69fb      	ldr	r3, [r7, #28]
 8015ed2:	68b9      	ldr	r1, [r7, #8]
 8015ed4:	68f8      	ldr	r0, [r7, #12]
 8015ed6:	f001 fd57 	bl	8017988 <ethernet_output>
 8015eda:	4603      	mov	r3, r0
}
 8015edc:	4618      	mov	r0, r3
 8015ede:	3720      	adds	r7, #32
 8015ee0:	46bd      	mov	sp, r7
 8015ee2:	bd80      	pop	{r7, pc}
 8015ee4:	0801c334 	.word	0x0801c334
 8015ee8:	0801c484 	.word	0x0801c484
 8015eec:	0801c3ac 	.word	0x0801c3ac
 8015ef0:	0801c4d4 	.word	0x0801c4d4
 8015ef4:	0801c474 	.word	0x0801c474
 8015ef8:	08026c74 	.word	0x08026c74
 8015efc:	20008bcc 	.word	0x20008bcc
 8015f00:	20008adc 	.word	0x20008adc

08015f04 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015f04:	b580      	push	{r7, lr}
 8015f06:	b08c      	sub	sp, #48	; 0x30
 8015f08:	af02      	add	r7, sp, #8
 8015f0a:	60f8      	str	r0, [r7, #12]
 8015f0c:	60b9      	str	r1, [r7, #8]
 8015f0e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	332a      	adds	r3, #42	; 0x2a
 8015f14:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015f16:	23ff      	movs	r3, #255	; 0xff
 8015f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015f20:	68bb      	ldr	r3, [r7, #8]
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	68f9      	ldr	r1, [r7, #12]
 8015f26:	4618      	mov	r0, r3
 8015f28:	f000 fe2a 	bl	8016b80 <ip4_addr_isbroadcast_u32>
 8015f2c:	4603      	mov	r3, r0
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d10c      	bne.n	8015f4c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015f32:	68bb      	ldr	r3, [r7, #8]
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015f3a:	2be0      	cmp	r3, #224	; 0xe0
 8015f3c:	d006      	beq.n	8015f4c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015f3e:	68bb      	ldr	r3, [r7, #8]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d003      	beq.n	8015f4c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015f44:	68bb      	ldr	r3, [r7, #8]
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d102      	bne.n	8015f52 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015f4c:	f06f 030f 	mvn.w	r3, #15
 8015f50:	e102      	b.n	8016158 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015f52:	68fa      	ldr	r2, [r7, #12]
 8015f54:	2101      	movs	r1, #1
 8015f56:	68b8      	ldr	r0, [r7, #8]
 8015f58:	f7ff fb5c 	bl	8015614 <etharp_find_entry>
 8015f5c:	4603      	mov	r3, r0
 8015f5e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015f60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	da02      	bge.n	8015f6e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015f68:	8a7b      	ldrh	r3, [r7, #18]
 8015f6a:	b25b      	sxtb	r3, r3
 8015f6c:	e0f4      	b.n	8016158 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015f6e:	8a7b      	ldrh	r3, [r7, #18]
 8015f70:	2b7e      	cmp	r3, #126	; 0x7e
 8015f72:	d906      	bls.n	8015f82 <etharp_query+0x7e>
 8015f74:	4b7a      	ldr	r3, [pc, #488]	; (8016160 <etharp_query+0x25c>)
 8015f76:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015f7a:	497a      	ldr	r1, [pc, #488]	; (8016164 <etharp_query+0x260>)
 8015f7c:	487a      	ldr	r0, [pc, #488]	; (8016168 <etharp_query+0x264>)
 8015f7e:	f001 ff93 	bl	8017ea8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015f82:	8a7b      	ldrh	r3, [r7, #18]
 8015f84:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015f86:	7c7a      	ldrb	r2, [r7, #17]
 8015f88:	4978      	ldr	r1, [pc, #480]	; (801616c <etharp_query+0x268>)
 8015f8a:	4613      	mov	r3, r2
 8015f8c:	005b      	lsls	r3, r3, #1
 8015f8e:	4413      	add	r3, r2
 8015f90:	00db      	lsls	r3, r3, #3
 8015f92:	440b      	add	r3, r1
 8015f94:	3314      	adds	r3, #20
 8015f96:	781b      	ldrb	r3, [r3, #0]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d115      	bne.n	8015fc8 <etharp_query+0xc4>
    is_new_entry = 1;
 8015f9c:	2301      	movs	r3, #1
 8015f9e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015fa0:	7c7a      	ldrb	r2, [r7, #17]
 8015fa2:	4972      	ldr	r1, [pc, #456]	; (801616c <etharp_query+0x268>)
 8015fa4:	4613      	mov	r3, r2
 8015fa6:	005b      	lsls	r3, r3, #1
 8015fa8:	4413      	add	r3, r2
 8015faa:	00db      	lsls	r3, r3, #3
 8015fac:	440b      	add	r3, r1
 8015fae:	3314      	adds	r3, #20
 8015fb0:	2201      	movs	r2, #1
 8015fb2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015fb4:	7c7a      	ldrb	r2, [r7, #17]
 8015fb6:	496d      	ldr	r1, [pc, #436]	; (801616c <etharp_query+0x268>)
 8015fb8:	4613      	mov	r3, r2
 8015fba:	005b      	lsls	r3, r3, #1
 8015fbc:	4413      	add	r3, r2
 8015fbe:	00db      	lsls	r3, r3, #3
 8015fc0:	440b      	add	r3, r1
 8015fc2:	3308      	adds	r3, #8
 8015fc4:	68fa      	ldr	r2, [r7, #12]
 8015fc6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015fc8:	7c7a      	ldrb	r2, [r7, #17]
 8015fca:	4968      	ldr	r1, [pc, #416]	; (801616c <etharp_query+0x268>)
 8015fcc:	4613      	mov	r3, r2
 8015fce:	005b      	lsls	r3, r3, #1
 8015fd0:	4413      	add	r3, r2
 8015fd2:	00db      	lsls	r3, r3, #3
 8015fd4:	440b      	add	r3, r1
 8015fd6:	3314      	adds	r3, #20
 8015fd8:	781b      	ldrb	r3, [r3, #0]
 8015fda:	2b01      	cmp	r3, #1
 8015fdc:	d011      	beq.n	8016002 <etharp_query+0xfe>
 8015fde:	7c7a      	ldrb	r2, [r7, #17]
 8015fe0:	4962      	ldr	r1, [pc, #392]	; (801616c <etharp_query+0x268>)
 8015fe2:	4613      	mov	r3, r2
 8015fe4:	005b      	lsls	r3, r3, #1
 8015fe6:	4413      	add	r3, r2
 8015fe8:	00db      	lsls	r3, r3, #3
 8015fea:	440b      	add	r3, r1
 8015fec:	3314      	adds	r3, #20
 8015fee:	781b      	ldrb	r3, [r3, #0]
 8015ff0:	2b01      	cmp	r3, #1
 8015ff2:	d806      	bhi.n	8016002 <etharp_query+0xfe>
 8015ff4:	4b5a      	ldr	r3, [pc, #360]	; (8016160 <etharp_query+0x25c>)
 8015ff6:	f240 32cf 	movw	r2, #975	; 0x3cf
 8015ffa:	495d      	ldr	r1, [pc, #372]	; (8016170 <etharp_query+0x26c>)
 8015ffc:	485a      	ldr	r0, [pc, #360]	; (8016168 <etharp_query+0x264>)
 8015ffe:	f001 ff53 	bl	8017ea8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016002:	6a3b      	ldr	r3, [r7, #32]
 8016004:	2b00      	cmp	r3, #0
 8016006:	d102      	bne.n	801600e <etharp_query+0x10a>
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d10c      	bne.n	8016028 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801600e:	68b9      	ldr	r1, [r7, #8]
 8016010:	68f8      	ldr	r0, [r7, #12]
 8016012:	f000 f963 	bl	80162dc <etharp_request>
 8016016:	4603      	mov	r3, r0
 8016018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d102      	bne.n	8016028 <etharp_query+0x124>
      return result;
 8016022:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016026:	e097      	b.n	8016158 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d106      	bne.n	801603c <etharp_query+0x138>
 801602e:	4b4c      	ldr	r3, [pc, #304]	; (8016160 <etharp_query+0x25c>)
 8016030:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016034:	494f      	ldr	r1, [pc, #316]	; (8016174 <etharp_query+0x270>)
 8016036:	484c      	ldr	r0, [pc, #304]	; (8016168 <etharp_query+0x264>)
 8016038:	f001 ff36 	bl	8017ea8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801603c:	7c7a      	ldrb	r2, [r7, #17]
 801603e:	494b      	ldr	r1, [pc, #300]	; (801616c <etharp_query+0x268>)
 8016040:	4613      	mov	r3, r2
 8016042:	005b      	lsls	r3, r3, #1
 8016044:	4413      	add	r3, r2
 8016046:	00db      	lsls	r3, r3, #3
 8016048:	440b      	add	r3, r1
 801604a:	3314      	adds	r3, #20
 801604c:	781b      	ldrb	r3, [r3, #0]
 801604e:	2b01      	cmp	r3, #1
 8016050:	d918      	bls.n	8016084 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016052:	4a49      	ldr	r2, [pc, #292]	; (8016178 <etharp_query+0x274>)
 8016054:	7c7b      	ldrb	r3, [r7, #17]
 8016056:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016058:	7c7a      	ldrb	r2, [r7, #17]
 801605a:	4613      	mov	r3, r2
 801605c:	005b      	lsls	r3, r3, #1
 801605e:	4413      	add	r3, r2
 8016060:	00db      	lsls	r3, r3, #3
 8016062:	3308      	adds	r3, #8
 8016064:	4a41      	ldr	r2, [pc, #260]	; (801616c <etharp_query+0x268>)
 8016066:	4413      	add	r3, r2
 8016068:	1d1a      	adds	r2, r3, #4
 801606a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801606e:	9300      	str	r3, [sp, #0]
 8016070:	4613      	mov	r3, r2
 8016072:	697a      	ldr	r2, [r7, #20]
 8016074:	6879      	ldr	r1, [r7, #4]
 8016076:	68f8      	ldr	r0, [r7, #12]
 8016078:	f001 fc86 	bl	8017988 <ethernet_output>
 801607c:	4603      	mov	r3, r0
 801607e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016082:	e067      	b.n	8016154 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016084:	7c7a      	ldrb	r2, [r7, #17]
 8016086:	4939      	ldr	r1, [pc, #228]	; (801616c <etharp_query+0x268>)
 8016088:	4613      	mov	r3, r2
 801608a:	005b      	lsls	r3, r3, #1
 801608c:	4413      	add	r3, r2
 801608e:	00db      	lsls	r3, r3, #3
 8016090:	440b      	add	r3, r1
 8016092:	3314      	adds	r3, #20
 8016094:	781b      	ldrb	r3, [r3, #0]
 8016096:	2b01      	cmp	r3, #1
 8016098:	d15c      	bne.n	8016154 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801609a:	2300      	movs	r3, #0
 801609c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	61fb      	str	r3, [r7, #28]
    while (p) {
 80160a2:	e01c      	b.n	80160de <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80160a4:	69fb      	ldr	r3, [r7, #28]
 80160a6:	895a      	ldrh	r2, [r3, #10]
 80160a8:	69fb      	ldr	r3, [r7, #28]
 80160aa:	891b      	ldrh	r3, [r3, #8]
 80160ac:	429a      	cmp	r2, r3
 80160ae:	d10a      	bne.n	80160c6 <etharp_query+0x1c2>
 80160b0:	69fb      	ldr	r3, [r7, #28]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d006      	beq.n	80160c6 <etharp_query+0x1c2>
 80160b8:	4b29      	ldr	r3, [pc, #164]	; (8016160 <etharp_query+0x25c>)
 80160ba:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80160be:	492f      	ldr	r1, [pc, #188]	; (801617c <etharp_query+0x278>)
 80160c0:	4829      	ldr	r0, [pc, #164]	; (8016168 <etharp_query+0x264>)
 80160c2:	f001 fef1 	bl	8017ea8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80160c6:	69fb      	ldr	r3, [r7, #28]
 80160c8:	7b1b      	ldrb	r3, [r3, #12]
 80160ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d002      	beq.n	80160d8 <etharp_query+0x1d4>
        copy_needed = 1;
 80160d2:	2301      	movs	r3, #1
 80160d4:	61bb      	str	r3, [r7, #24]
        break;
 80160d6:	e005      	b.n	80160e4 <etharp_query+0x1e0>
      }
      p = p->next;
 80160d8:	69fb      	ldr	r3, [r7, #28]
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	61fb      	str	r3, [r7, #28]
    while (p) {
 80160de:	69fb      	ldr	r3, [r7, #28]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d1df      	bne.n	80160a4 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 80160e4:	69bb      	ldr	r3, [r7, #24]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d007      	beq.n	80160fa <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80160ea:	687a      	ldr	r2, [r7, #4]
 80160ec:	f44f 7120 	mov.w	r1, #640	; 0x280
 80160f0:	200e      	movs	r0, #14
 80160f2:	f7f6 fbed 	bl	800c8d0 <pbuf_clone>
 80160f6:	61f8      	str	r0, [r7, #28]
 80160f8:	e004      	b.n	8016104 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80160fe:	69f8      	ldr	r0, [r7, #28]
 8016100:	f7f6 fa14 	bl	800c52c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016104:	69fb      	ldr	r3, [r7, #28]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d021      	beq.n	801614e <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801610a:	7c7a      	ldrb	r2, [r7, #17]
 801610c:	4917      	ldr	r1, [pc, #92]	; (801616c <etharp_query+0x268>)
 801610e:	4613      	mov	r3, r2
 8016110:	005b      	lsls	r3, r3, #1
 8016112:	4413      	add	r3, r2
 8016114:	00db      	lsls	r3, r3, #3
 8016116:	440b      	add	r3, r1
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d00a      	beq.n	8016134 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801611e:	7c7a      	ldrb	r2, [r7, #17]
 8016120:	4912      	ldr	r1, [pc, #72]	; (801616c <etharp_query+0x268>)
 8016122:	4613      	mov	r3, r2
 8016124:	005b      	lsls	r3, r3, #1
 8016126:	4413      	add	r3, r2
 8016128:	00db      	lsls	r3, r3, #3
 801612a:	440b      	add	r3, r1
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	4618      	mov	r0, r3
 8016130:	f7f6 f956 	bl	800c3e0 <pbuf_free>
      }
      arp_table[i].q = p;
 8016134:	7c7a      	ldrb	r2, [r7, #17]
 8016136:	490d      	ldr	r1, [pc, #52]	; (801616c <etharp_query+0x268>)
 8016138:	4613      	mov	r3, r2
 801613a:	005b      	lsls	r3, r3, #1
 801613c:	4413      	add	r3, r2
 801613e:	00db      	lsls	r3, r3, #3
 8016140:	440b      	add	r3, r1
 8016142:	69fa      	ldr	r2, [r7, #28]
 8016144:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016146:	2300      	movs	r3, #0
 8016148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801614c:	e002      	b.n	8016154 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801614e:	23ff      	movs	r3, #255	; 0xff
 8016150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016154:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016158:	4618      	mov	r0, r3
 801615a:	3728      	adds	r7, #40	; 0x28
 801615c:	46bd      	mov	sp, r7
 801615e:	bd80      	pop	{r7, pc}
 8016160:	0801c334 	.word	0x0801c334
 8016164:	0801c4e0 	.word	0x0801c4e0
 8016168:	0801c3ac 	.word	0x0801c3ac
 801616c:	20008adc 	.word	0x20008adc
 8016170:	0801c4f0 	.word	0x0801c4f0
 8016174:	0801c4d4 	.word	0x0801c4d4
 8016178:	20008bcc 	.word	0x20008bcc
 801617c:	0801c518 	.word	0x0801c518

08016180 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016180:	b580      	push	{r7, lr}
 8016182:	b08a      	sub	sp, #40	; 0x28
 8016184:	af02      	add	r7, sp, #8
 8016186:	60f8      	str	r0, [r7, #12]
 8016188:	60b9      	str	r1, [r7, #8]
 801618a:	607a      	str	r2, [r7, #4]
 801618c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801618e:	2300      	movs	r3, #0
 8016190:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d106      	bne.n	80161a6 <etharp_raw+0x26>
 8016198:	4b3a      	ldr	r3, [pc, #232]	; (8016284 <etharp_raw+0x104>)
 801619a:	f240 4257 	movw	r2, #1111	; 0x457
 801619e:	493a      	ldr	r1, [pc, #232]	; (8016288 <etharp_raw+0x108>)
 80161a0:	483a      	ldr	r0, [pc, #232]	; (801628c <etharp_raw+0x10c>)
 80161a2:	f001 fe81 	bl	8017ea8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80161a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80161aa:	211c      	movs	r1, #28
 80161ac:	200e      	movs	r0, #14
 80161ae:	f7f5 fe37 	bl	800be20 <pbuf_alloc>
 80161b2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80161b4:	69bb      	ldr	r3, [r7, #24]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d102      	bne.n	80161c0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80161ba:	f04f 33ff 	mov.w	r3, #4294967295
 80161be:	e05d      	b.n	801627c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80161c0:	69bb      	ldr	r3, [r7, #24]
 80161c2:	895b      	ldrh	r3, [r3, #10]
 80161c4:	2b1b      	cmp	r3, #27
 80161c6:	d806      	bhi.n	80161d6 <etharp_raw+0x56>
 80161c8:	4b2e      	ldr	r3, [pc, #184]	; (8016284 <etharp_raw+0x104>)
 80161ca:	f240 4263 	movw	r2, #1123	; 0x463
 80161ce:	4930      	ldr	r1, [pc, #192]	; (8016290 <etharp_raw+0x110>)
 80161d0:	482e      	ldr	r0, [pc, #184]	; (801628c <etharp_raw+0x10c>)
 80161d2:	f001 fe69 	bl	8017ea8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80161d6:	69bb      	ldr	r3, [r7, #24]
 80161d8:	685b      	ldr	r3, [r3, #4]
 80161da:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80161dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80161de:	4618      	mov	r0, r3
 80161e0:	f7f4 fd14 	bl	800ac0c <lwip_htons>
 80161e4:	4603      	mov	r3, r0
 80161e6:	461a      	mov	r2, r3
 80161e8:	697b      	ldr	r3, [r7, #20]
 80161ea:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80161f2:	2b06      	cmp	r3, #6
 80161f4:	d006      	beq.n	8016204 <etharp_raw+0x84>
 80161f6:	4b23      	ldr	r3, [pc, #140]	; (8016284 <etharp_raw+0x104>)
 80161f8:	f240 426a 	movw	r2, #1130	; 0x46a
 80161fc:	4925      	ldr	r1, [pc, #148]	; (8016294 <etharp_raw+0x114>)
 80161fe:	4823      	ldr	r0, [pc, #140]	; (801628c <etharp_raw+0x10c>)
 8016200:	f001 fe52 	bl	8017ea8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016204:	697b      	ldr	r3, [r7, #20]
 8016206:	3308      	adds	r3, #8
 8016208:	2206      	movs	r2, #6
 801620a:	6839      	ldr	r1, [r7, #0]
 801620c:	4618      	mov	r0, r3
 801620e:	f001 fe38 	bl	8017e82 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016212:	697b      	ldr	r3, [r7, #20]
 8016214:	3312      	adds	r3, #18
 8016216:	2206      	movs	r2, #6
 8016218:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801621a:	4618      	mov	r0, r3
 801621c:	f001 fe31 	bl	8017e82 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016220:	697b      	ldr	r3, [r7, #20]
 8016222:	330e      	adds	r3, #14
 8016224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016226:	6812      	ldr	r2, [r2, #0]
 8016228:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801622a:	697b      	ldr	r3, [r7, #20]
 801622c:	3318      	adds	r3, #24
 801622e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016230:	6812      	ldr	r2, [r2, #0]
 8016232:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016234:	697b      	ldr	r3, [r7, #20]
 8016236:	2200      	movs	r2, #0
 8016238:	701a      	strb	r2, [r3, #0]
 801623a:	2200      	movs	r2, #0
 801623c:	f042 0201 	orr.w	r2, r2, #1
 8016240:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016242:	697b      	ldr	r3, [r7, #20]
 8016244:	2200      	movs	r2, #0
 8016246:	f042 0208 	orr.w	r2, r2, #8
 801624a:	709a      	strb	r2, [r3, #2]
 801624c:	2200      	movs	r2, #0
 801624e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016250:	697b      	ldr	r3, [r7, #20]
 8016252:	2206      	movs	r2, #6
 8016254:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016256:	697b      	ldr	r3, [r7, #20]
 8016258:	2204      	movs	r2, #4
 801625a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801625c:	f640 0306 	movw	r3, #2054	; 0x806
 8016260:	9300      	str	r3, [sp, #0]
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	68ba      	ldr	r2, [r7, #8]
 8016266:	69b9      	ldr	r1, [r7, #24]
 8016268:	68f8      	ldr	r0, [r7, #12]
 801626a:	f001 fb8d 	bl	8017988 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801626e:	69b8      	ldr	r0, [r7, #24]
 8016270:	f7f6 f8b6 	bl	800c3e0 <pbuf_free>
  p = NULL;
 8016274:	2300      	movs	r3, #0
 8016276:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016278:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801627c:	4618      	mov	r0, r3
 801627e:	3720      	adds	r7, #32
 8016280:	46bd      	mov	sp, r7
 8016282:	bd80      	pop	{r7, pc}
 8016284:	0801c334 	.word	0x0801c334
 8016288:	0801c484 	.word	0x0801c484
 801628c:	0801c3ac 	.word	0x0801c3ac
 8016290:	0801c534 	.word	0x0801c534
 8016294:	0801c568 	.word	0x0801c568

08016298 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b088      	sub	sp, #32
 801629c:	af04      	add	r7, sp, #16
 801629e:	60f8      	str	r0, [r7, #12]
 80162a0:	60b9      	str	r1, [r7, #8]
 80162a2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80162b4:	2201      	movs	r2, #1
 80162b6:	9203      	str	r2, [sp, #12]
 80162b8:	68ba      	ldr	r2, [r7, #8]
 80162ba:	9202      	str	r2, [sp, #8]
 80162bc:	4a06      	ldr	r2, [pc, #24]	; (80162d8 <etharp_request_dst+0x40>)
 80162be:	9201      	str	r2, [sp, #4]
 80162c0:	9300      	str	r3, [sp, #0]
 80162c2:	4603      	mov	r3, r0
 80162c4:	687a      	ldr	r2, [r7, #4]
 80162c6:	68f8      	ldr	r0, [r7, #12]
 80162c8:	f7ff ff5a 	bl	8016180 <etharp_raw>
 80162cc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80162ce:	4618      	mov	r0, r3
 80162d0:	3710      	adds	r7, #16
 80162d2:	46bd      	mov	sp, r7
 80162d4:	bd80      	pop	{r7, pc}
 80162d6:	bf00      	nop
 80162d8:	08026c7c 	.word	0x08026c7c

080162dc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80162dc:	b580      	push	{r7, lr}
 80162de:	b082      	sub	sp, #8
 80162e0:	af00      	add	r7, sp, #0
 80162e2:	6078      	str	r0, [r7, #4]
 80162e4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80162e6:	4a05      	ldr	r2, [pc, #20]	; (80162fc <etharp_request+0x20>)
 80162e8:	6839      	ldr	r1, [r7, #0]
 80162ea:	6878      	ldr	r0, [r7, #4]
 80162ec:	f7ff ffd4 	bl	8016298 <etharp_request_dst>
 80162f0:	4603      	mov	r3, r0
}
 80162f2:	4618      	mov	r0, r3
 80162f4:	3708      	adds	r7, #8
 80162f6:	46bd      	mov	sp, r7
 80162f8:	bd80      	pop	{r7, pc}
 80162fa:	bf00      	nop
 80162fc:	08026c74 	.word	0x08026c74

08016300 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b08e      	sub	sp, #56	; 0x38
 8016304:	af04      	add	r7, sp, #16
 8016306:	6078      	str	r0, [r7, #4]
 8016308:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801630a:	4b79      	ldr	r3, [pc, #484]	; (80164f0 <icmp_input+0x1f0>)
 801630c:	689b      	ldr	r3, [r3, #8]
 801630e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016312:	781b      	ldrb	r3, [r3, #0]
 8016314:	f003 030f 	and.w	r3, r3, #15
 8016318:	b2db      	uxtb	r3, r3
 801631a:	009b      	lsls	r3, r3, #2
 801631c:	b2db      	uxtb	r3, r3
 801631e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016320:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016322:	2b13      	cmp	r3, #19
 8016324:	f240 80cd 	bls.w	80164c2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	895b      	ldrh	r3, [r3, #10]
 801632c:	2b03      	cmp	r3, #3
 801632e:	f240 80ca 	bls.w	80164c6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	685b      	ldr	r3, [r3, #4]
 8016336:	781b      	ldrb	r3, [r3, #0]
 8016338:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801633c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016340:	2b00      	cmp	r3, #0
 8016342:	f000 80b7 	beq.w	80164b4 <icmp_input+0x1b4>
 8016346:	2b08      	cmp	r3, #8
 8016348:	f040 80b7 	bne.w	80164ba <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801634c:	4b69      	ldr	r3, [pc, #420]	; (80164f4 <icmp_input+0x1f4>)
 801634e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016350:	4b67      	ldr	r3, [pc, #412]	; (80164f0 <icmp_input+0x1f0>)
 8016352:	695b      	ldr	r3, [r3, #20]
 8016354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016358:	2be0      	cmp	r3, #224	; 0xe0
 801635a:	f000 80bb 	beq.w	80164d4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801635e:	4b64      	ldr	r3, [pc, #400]	; (80164f0 <icmp_input+0x1f0>)
 8016360:	695a      	ldr	r2, [r3, #20]
 8016362:	4b63      	ldr	r3, [pc, #396]	; (80164f0 <icmp_input+0x1f0>)
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	4619      	mov	r1, r3
 8016368:	4610      	mov	r0, r2
 801636a:	f000 fc09 	bl	8016b80 <ip4_addr_isbroadcast_u32>
 801636e:	4603      	mov	r3, r0
 8016370:	2b00      	cmp	r3, #0
 8016372:	f040 80b1 	bne.w	80164d8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	891b      	ldrh	r3, [r3, #8]
 801637a:	2b07      	cmp	r3, #7
 801637c:	f240 80a5 	bls.w	80164ca <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016380:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016382:	330e      	adds	r3, #14
 8016384:	4619      	mov	r1, r3
 8016386:	6878      	ldr	r0, [r7, #4]
 8016388:	f7f5 ff94 	bl	800c2b4 <pbuf_add_header>
 801638c:	4603      	mov	r3, r0
 801638e:	2b00      	cmp	r3, #0
 8016390:	d04b      	beq.n	801642a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	891a      	ldrh	r2, [r3, #8]
 8016396:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016398:	4413      	add	r3, r2
 801639a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	891b      	ldrh	r3, [r3, #8]
 80163a0:	8b7a      	ldrh	r2, [r7, #26]
 80163a2:	429a      	cmp	r2, r3
 80163a4:	f0c0 809a 	bcc.w	80164dc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80163a8:	8b7b      	ldrh	r3, [r7, #26]
 80163aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80163ae:	4619      	mov	r1, r3
 80163b0:	200e      	movs	r0, #14
 80163b2:	f7f5 fd35 	bl	800be20 <pbuf_alloc>
 80163b6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80163b8:	697b      	ldr	r3, [r7, #20]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	f000 8090 	beq.w	80164e0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80163c0:	697b      	ldr	r3, [r7, #20]
 80163c2:	895b      	ldrh	r3, [r3, #10]
 80163c4:	461a      	mov	r2, r3
 80163c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80163c8:	3308      	adds	r3, #8
 80163ca:	429a      	cmp	r2, r3
 80163cc:	d203      	bcs.n	80163d6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80163ce:	6978      	ldr	r0, [r7, #20]
 80163d0:	f7f6 f806 	bl	800c3e0 <pbuf_free>
          goto icmperr;
 80163d4:	e085      	b.n	80164e2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80163d6:	697b      	ldr	r3, [r7, #20]
 80163d8:	685b      	ldr	r3, [r3, #4]
 80163da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80163dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80163de:	4618      	mov	r0, r3
 80163e0:	f001 fd4f 	bl	8017e82 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80163e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80163e6:	4619      	mov	r1, r3
 80163e8:	6978      	ldr	r0, [r7, #20]
 80163ea:	f7f5 ff73 	bl	800c2d4 <pbuf_remove_header>
 80163ee:	4603      	mov	r3, r0
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d009      	beq.n	8016408 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80163f4:	4b40      	ldr	r3, [pc, #256]	; (80164f8 <icmp_input+0x1f8>)
 80163f6:	22b6      	movs	r2, #182	; 0xb6
 80163f8:	4940      	ldr	r1, [pc, #256]	; (80164fc <icmp_input+0x1fc>)
 80163fa:	4841      	ldr	r0, [pc, #260]	; (8016500 <icmp_input+0x200>)
 80163fc:	f001 fd54 	bl	8017ea8 <iprintf>
          pbuf_free(r);
 8016400:	6978      	ldr	r0, [r7, #20]
 8016402:	f7f5 ffed 	bl	800c3e0 <pbuf_free>
          goto icmperr;
 8016406:	e06c      	b.n	80164e2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016408:	6879      	ldr	r1, [r7, #4]
 801640a:	6978      	ldr	r0, [r7, #20]
 801640c:	f7f6 f91c 	bl	800c648 <pbuf_copy>
 8016410:	4603      	mov	r3, r0
 8016412:	2b00      	cmp	r3, #0
 8016414:	d003      	beq.n	801641e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016416:	6978      	ldr	r0, [r7, #20]
 8016418:	f7f5 ffe2 	bl	800c3e0 <pbuf_free>
          goto icmperr;
 801641c:	e061      	b.n	80164e2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801641e:	6878      	ldr	r0, [r7, #4]
 8016420:	f7f5 ffde 	bl	800c3e0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016424:	697b      	ldr	r3, [r7, #20]
 8016426:	607b      	str	r3, [r7, #4]
 8016428:	e00f      	b.n	801644a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801642a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801642c:	330e      	adds	r3, #14
 801642e:	4619      	mov	r1, r3
 8016430:	6878      	ldr	r0, [r7, #4]
 8016432:	f7f5 ff4f 	bl	800c2d4 <pbuf_remove_header>
 8016436:	4603      	mov	r3, r0
 8016438:	2b00      	cmp	r3, #0
 801643a:	d006      	beq.n	801644a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801643c:	4b2e      	ldr	r3, [pc, #184]	; (80164f8 <icmp_input+0x1f8>)
 801643e:	22c7      	movs	r2, #199	; 0xc7
 8016440:	4930      	ldr	r1, [pc, #192]	; (8016504 <icmp_input+0x204>)
 8016442:	482f      	ldr	r0, [pc, #188]	; (8016500 <icmp_input+0x200>)
 8016444:	f001 fd30 	bl	8017ea8 <iprintf>
          goto icmperr;
 8016448:	e04b      	b.n	80164e2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	685b      	ldr	r3, [r3, #4]
 801644e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016450:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016452:	4619      	mov	r1, r3
 8016454:	6878      	ldr	r0, [r7, #4]
 8016456:	f7f5 ff2d 	bl	800c2b4 <pbuf_add_header>
 801645a:	4603      	mov	r3, r0
 801645c:	2b00      	cmp	r3, #0
 801645e:	d12b      	bne.n	80164b8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	685b      	ldr	r3, [r3, #4]
 8016464:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016466:	69fb      	ldr	r3, [r7, #28]
 8016468:	681a      	ldr	r2, [r3, #0]
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801646e:	4b20      	ldr	r3, [pc, #128]	; (80164f0 <icmp_input+0x1f0>)
 8016470:	691a      	ldr	r2, [r3, #16]
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016476:	693b      	ldr	r3, [r7, #16]
 8016478:	2200      	movs	r2, #0
 801647a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801647c:	693b      	ldr	r3, [r7, #16]
 801647e:	2200      	movs	r2, #0
 8016480:	709a      	strb	r2, [r3, #2]
 8016482:	2200      	movs	r2, #0
 8016484:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	22ff      	movs	r2, #255	; 0xff
 801648a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	2200      	movs	r2, #0
 8016490:	729a      	strb	r2, [r3, #10]
 8016492:	2200      	movs	r2, #0
 8016494:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016496:	683b      	ldr	r3, [r7, #0]
 8016498:	9302      	str	r3, [sp, #8]
 801649a:	2301      	movs	r3, #1
 801649c:	9301      	str	r3, [sp, #4]
 801649e:	2300      	movs	r3, #0
 80164a0:	9300      	str	r3, [sp, #0]
 80164a2:	23ff      	movs	r3, #255	; 0xff
 80164a4:	2200      	movs	r2, #0
 80164a6:	69f9      	ldr	r1, [r7, #28]
 80164a8:	6878      	ldr	r0, [r7, #4]
 80164aa:	f000 fa91 	bl	80169d0 <ip4_output_if>
 80164ae:	4603      	mov	r3, r0
 80164b0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80164b2:	e001      	b.n	80164b8 <icmp_input+0x1b8>
      break;
 80164b4:	bf00      	nop
 80164b6:	e000      	b.n	80164ba <icmp_input+0x1ba>
      break;
 80164b8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80164ba:	6878      	ldr	r0, [r7, #4]
 80164bc:	f7f5 ff90 	bl	800c3e0 <pbuf_free>
  return;
 80164c0:	e013      	b.n	80164ea <icmp_input+0x1ea>
    goto lenerr;
 80164c2:	bf00      	nop
 80164c4:	e002      	b.n	80164cc <icmp_input+0x1cc>
    goto lenerr;
 80164c6:	bf00      	nop
 80164c8:	e000      	b.n	80164cc <icmp_input+0x1cc>
        goto lenerr;
 80164ca:	bf00      	nop
lenerr:
  pbuf_free(p);
 80164cc:	6878      	ldr	r0, [r7, #4]
 80164ce:	f7f5 ff87 	bl	800c3e0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80164d2:	e00a      	b.n	80164ea <icmp_input+0x1ea>
        goto icmperr;
 80164d4:	bf00      	nop
 80164d6:	e004      	b.n	80164e2 <icmp_input+0x1e2>
        goto icmperr;
 80164d8:	bf00      	nop
 80164da:	e002      	b.n	80164e2 <icmp_input+0x1e2>
          goto icmperr;
 80164dc:	bf00      	nop
 80164de:	e000      	b.n	80164e2 <icmp_input+0x1e2>
          goto icmperr;
 80164e0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80164e2:	6878      	ldr	r0, [r7, #4]
 80164e4:	f7f5 ff7c 	bl	800c3e0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80164e8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80164ea:	3728      	adds	r7, #40	; 0x28
 80164ec:	46bd      	mov	sp, r7
 80164ee:	bd80      	pop	{r7, pc}
 80164f0:	2000bde0 	.word	0x2000bde0
 80164f4:	2000bdf4 	.word	0x2000bdf4
 80164f8:	0801c5ac 	.word	0x0801c5ac
 80164fc:	0801c5e4 	.word	0x0801c5e4
 8016500:	0801c61c 	.word	0x0801c61c
 8016504:	0801c644 	.word	0x0801c644

08016508 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b082      	sub	sp, #8
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
 8016510:	460b      	mov	r3, r1
 8016512:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016514:	78fb      	ldrb	r3, [r7, #3]
 8016516:	461a      	mov	r2, r3
 8016518:	2103      	movs	r1, #3
 801651a:	6878      	ldr	r0, [r7, #4]
 801651c:	f000 f814 	bl	8016548 <icmp_send_response>
}
 8016520:	bf00      	nop
 8016522:	3708      	adds	r7, #8
 8016524:	46bd      	mov	sp, r7
 8016526:	bd80      	pop	{r7, pc}

08016528 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016528:	b580      	push	{r7, lr}
 801652a:	b082      	sub	sp, #8
 801652c:	af00      	add	r7, sp, #0
 801652e:	6078      	str	r0, [r7, #4]
 8016530:	460b      	mov	r3, r1
 8016532:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016534:	78fb      	ldrb	r3, [r7, #3]
 8016536:	461a      	mov	r2, r3
 8016538:	210b      	movs	r1, #11
 801653a:	6878      	ldr	r0, [r7, #4]
 801653c:	f000 f804 	bl	8016548 <icmp_send_response>
}
 8016540:	bf00      	nop
 8016542:	3708      	adds	r7, #8
 8016544:	46bd      	mov	sp, r7
 8016546:	bd80      	pop	{r7, pc}

08016548 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016548:	b580      	push	{r7, lr}
 801654a:	b08c      	sub	sp, #48	; 0x30
 801654c:	af04      	add	r7, sp, #16
 801654e:	6078      	str	r0, [r7, #4]
 8016550:	460b      	mov	r3, r1
 8016552:	70fb      	strb	r3, [r7, #3]
 8016554:	4613      	mov	r3, r2
 8016556:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016558:	f44f 7220 	mov.w	r2, #640	; 0x280
 801655c:	2124      	movs	r1, #36	; 0x24
 801655e:	2022      	movs	r0, #34	; 0x22
 8016560:	f7f5 fc5e 	bl	800be20 <pbuf_alloc>
 8016564:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016566:	69fb      	ldr	r3, [r7, #28]
 8016568:	2b00      	cmp	r3, #0
 801656a:	d04c      	beq.n	8016606 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801656c:	69fb      	ldr	r3, [r7, #28]
 801656e:	895b      	ldrh	r3, [r3, #10]
 8016570:	2b23      	cmp	r3, #35	; 0x23
 8016572:	d806      	bhi.n	8016582 <icmp_send_response+0x3a>
 8016574:	4b26      	ldr	r3, [pc, #152]	; (8016610 <icmp_send_response+0xc8>)
 8016576:	f240 1269 	movw	r2, #361	; 0x169
 801657a:	4926      	ldr	r1, [pc, #152]	; (8016614 <icmp_send_response+0xcc>)
 801657c:	4826      	ldr	r0, [pc, #152]	; (8016618 <icmp_send_response+0xd0>)
 801657e:	f001 fc93 	bl	8017ea8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	685b      	ldr	r3, [r3, #4]
 8016586:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016588:	69fb      	ldr	r3, [r7, #28]
 801658a:	685b      	ldr	r3, [r3, #4]
 801658c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801658e:	697b      	ldr	r3, [r7, #20]
 8016590:	78fa      	ldrb	r2, [r7, #3]
 8016592:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016594:	697b      	ldr	r3, [r7, #20]
 8016596:	78ba      	ldrb	r2, [r7, #2]
 8016598:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801659a:	697b      	ldr	r3, [r7, #20]
 801659c:	2200      	movs	r2, #0
 801659e:	711a      	strb	r2, [r3, #4]
 80165a0:	2200      	movs	r2, #0
 80165a2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80165a4:	697b      	ldr	r3, [r7, #20]
 80165a6:	2200      	movs	r2, #0
 80165a8:	719a      	strb	r2, [r3, #6]
 80165aa:	2200      	movs	r2, #0
 80165ac:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80165ae:	69fb      	ldr	r3, [r7, #28]
 80165b0:	685b      	ldr	r3, [r3, #4]
 80165b2:	f103 0008 	add.w	r0, r3, #8
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	685b      	ldr	r3, [r3, #4]
 80165ba:	221c      	movs	r2, #28
 80165bc:	4619      	mov	r1, r3
 80165be:	f001 fc60 	bl	8017e82 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80165c2:	69bb      	ldr	r3, [r7, #24]
 80165c4:	68db      	ldr	r3, [r3, #12]
 80165c6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80165c8:	f107 030c 	add.w	r3, r7, #12
 80165cc:	4618      	mov	r0, r3
 80165ce:	f000 f825 	bl	801661c <ip4_route>
 80165d2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80165d4:	693b      	ldr	r3, [r7, #16]
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d011      	beq.n	80165fe <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80165da:	697b      	ldr	r3, [r7, #20]
 80165dc:	2200      	movs	r2, #0
 80165de:	709a      	strb	r2, [r3, #2]
 80165e0:	2200      	movs	r2, #0
 80165e2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80165e4:	f107 020c 	add.w	r2, r7, #12
 80165e8:	693b      	ldr	r3, [r7, #16]
 80165ea:	9302      	str	r3, [sp, #8]
 80165ec:	2301      	movs	r3, #1
 80165ee:	9301      	str	r3, [sp, #4]
 80165f0:	2300      	movs	r3, #0
 80165f2:	9300      	str	r3, [sp, #0]
 80165f4:	23ff      	movs	r3, #255	; 0xff
 80165f6:	2100      	movs	r1, #0
 80165f8:	69f8      	ldr	r0, [r7, #28]
 80165fa:	f000 f9e9 	bl	80169d0 <ip4_output_if>
  }
  pbuf_free(q);
 80165fe:	69f8      	ldr	r0, [r7, #28]
 8016600:	f7f5 feee 	bl	800c3e0 <pbuf_free>
 8016604:	e000      	b.n	8016608 <icmp_send_response+0xc0>
    return;
 8016606:	bf00      	nop
}
 8016608:	3720      	adds	r7, #32
 801660a:	46bd      	mov	sp, r7
 801660c:	bd80      	pop	{r7, pc}
 801660e:	bf00      	nop
 8016610:	0801c5ac 	.word	0x0801c5ac
 8016614:	0801c678 	.word	0x0801c678
 8016618:	0801c61c 	.word	0x0801c61c

0801661c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801661c:	b480      	push	{r7}
 801661e:	b085      	sub	sp, #20
 8016620:	af00      	add	r7, sp, #0
 8016622:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016624:	4b33      	ldr	r3, [pc, #204]	; (80166f4 <ip4_route+0xd8>)
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	60fb      	str	r3, [r7, #12]
 801662a:	e036      	b.n	801669a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016632:	f003 0301 	and.w	r3, r3, #1
 8016636:	b2db      	uxtb	r3, r3
 8016638:	2b00      	cmp	r3, #0
 801663a:	d02b      	beq.n	8016694 <ip4_route+0x78>
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016642:	089b      	lsrs	r3, r3, #2
 8016644:	f003 0301 	and.w	r3, r3, #1
 8016648:	b2db      	uxtb	r3, r3
 801664a:	2b00      	cmp	r3, #0
 801664c:	d022      	beq.n	8016694 <ip4_route+0x78>
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	3304      	adds	r3, #4
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d01d      	beq.n	8016694 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	681a      	ldr	r2, [r3, #0]
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	3304      	adds	r3, #4
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	405a      	eors	r2, r3
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	3308      	adds	r3, #8
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	4013      	ands	r3, r2
 801666c:	2b00      	cmp	r3, #0
 801666e:	d101      	bne.n	8016674 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	e038      	b.n	80166e6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801667a:	f003 0302 	and.w	r3, r3, #2
 801667e:	2b00      	cmp	r3, #0
 8016680:	d108      	bne.n	8016694 <ip4_route+0x78>
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	681a      	ldr	r2, [r3, #0]
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	330c      	adds	r3, #12
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	429a      	cmp	r2, r3
 801668e:	d101      	bne.n	8016694 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	e028      	b.n	80166e6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	60fb      	str	r3, [r7, #12]
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	2b00      	cmp	r3, #0
 801669e:	d1c5      	bne.n	801662c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80166a0:	4b15      	ldr	r3, [pc, #84]	; (80166f8 <ip4_route+0xdc>)
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d01a      	beq.n	80166de <ip4_route+0xc2>
 80166a8:	4b13      	ldr	r3, [pc, #76]	; (80166f8 <ip4_route+0xdc>)
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80166b0:	f003 0301 	and.w	r3, r3, #1
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d012      	beq.n	80166de <ip4_route+0xc2>
 80166b8:	4b0f      	ldr	r3, [pc, #60]	; (80166f8 <ip4_route+0xdc>)
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80166c0:	f003 0304 	and.w	r3, r3, #4
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d00a      	beq.n	80166de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80166c8:	4b0b      	ldr	r3, [pc, #44]	; (80166f8 <ip4_route+0xdc>)
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	3304      	adds	r3, #4
 80166ce:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d004      	beq.n	80166de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	b2db      	uxtb	r3, r3
 80166da:	2b7f      	cmp	r3, #127	; 0x7f
 80166dc:	d101      	bne.n	80166e2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80166de:	2300      	movs	r3, #0
 80166e0:	e001      	b.n	80166e6 <ip4_route+0xca>
  }

  return netif_default;
 80166e2:	4b05      	ldr	r3, [pc, #20]	; (80166f8 <ip4_route+0xdc>)
 80166e4:	681b      	ldr	r3, [r3, #0]
}
 80166e6:	4618      	mov	r0, r3
 80166e8:	3714      	adds	r7, #20
 80166ea:	46bd      	mov	sp, r7
 80166ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166f0:	4770      	bx	lr
 80166f2:	bf00      	nop
 80166f4:	2000f504 	.word	0x2000f504
 80166f8:	2000f508 	.word	0x2000f508

080166fc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b082      	sub	sp, #8
 8016700:	af00      	add	r7, sp, #0
 8016702:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801670a:	f003 0301 	and.w	r3, r3, #1
 801670e:	b2db      	uxtb	r3, r3
 8016710:	2b00      	cmp	r3, #0
 8016712:	d016      	beq.n	8016742 <ip4_input_accept+0x46>
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	3304      	adds	r3, #4
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d011      	beq.n	8016742 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801671e:	4b0b      	ldr	r3, [pc, #44]	; (801674c <ip4_input_accept+0x50>)
 8016720:	695a      	ldr	r2, [r3, #20]
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	3304      	adds	r3, #4
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	429a      	cmp	r2, r3
 801672a:	d008      	beq.n	801673e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801672c:	4b07      	ldr	r3, [pc, #28]	; (801674c <ip4_input_accept+0x50>)
 801672e:	695b      	ldr	r3, [r3, #20]
 8016730:	6879      	ldr	r1, [r7, #4]
 8016732:	4618      	mov	r0, r3
 8016734:	f000 fa24 	bl	8016b80 <ip4_addr_isbroadcast_u32>
 8016738:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801673a:	2b00      	cmp	r3, #0
 801673c:	d001      	beq.n	8016742 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801673e:	2301      	movs	r3, #1
 8016740:	e000      	b.n	8016744 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016742:	2300      	movs	r3, #0
}
 8016744:	4618      	mov	r0, r3
 8016746:	3708      	adds	r7, #8
 8016748:	46bd      	mov	sp, r7
 801674a:	bd80      	pop	{r7, pc}
 801674c:	2000bde0 	.word	0x2000bde0

08016750 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016750:	b580      	push	{r7, lr}
 8016752:	b088      	sub	sp, #32
 8016754:	af00      	add	r7, sp, #0
 8016756:	6078      	str	r0, [r7, #4]
 8016758:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801675a:	2301      	movs	r3, #1
 801675c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	685b      	ldr	r3, [r3, #4]
 8016762:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8016764:	69fb      	ldr	r3, [r7, #28]
 8016766:	781b      	ldrb	r3, [r3, #0]
 8016768:	091b      	lsrs	r3, r3, #4
 801676a:	b2db      	uxtb	r3, r3
 801676c:	2b04      	cmp	r3, #4
 801676e:	d004      	beq.n	801677a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016770:	6878      	ldr	r0, [r7, #4]
 8016772:	f7f5 fe35 	bl	800c3e0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016776:	2300      	movs	r3, #0
 8016778:	e121      	b.n	80169be <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801677a:	69fb      	ldr	r3, [r7, #28]
 801677c:	781b      	ldrb	r3, [r3, #0]
 801677e:	f003 030f 	and.w	r3, r3, #15
 8016782:	b2db      	uxtb	r3, r3
 8016784:	009b      	lsls	r3, r3, #2
 8016786:	b2db      	uxtb	r3, r3
 8016788:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801678a:	69fb      	ldr	r3, [r7, #28]
 801678c:	885b      	ldrh	r3, [r3, #2]
 801678e:	b29b      	uxth	r3, r3
 8016790:	4618      	mov	r0, r3
 8016792:	f7f4 fa3b 	bl	800ac0c <lwip_htons>
 8016796:	4603      	mov	r3, r0
 8016798:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	891b      	ldrh	r3, [r3, #8]
 801679e:	8a3a      	ldrh	r2, [r7, #16]
 80167a0:	429a      	cmp	r2, r3
 80167a2:	d204      	bcs.n	80167ae <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80167a4:	8a3b      	ldrh	r3, [r7, #16]
 80167a6:	4619      	mov	r1, r3
 80167a8:	6878      	ldr	r0, [r7, #4]
 80167aa:	f7f5 fc93 	bl	800c0d4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	895b      	ldrh	r3, [r3, #10]
 80167b2:	8a7a      	ldrh	r2, [r7, #18]
 80167b4:	429a      	cmp	r2, r3
 80167b6:	d807      	bhi.n	80167c8 <ip4_input+0x78>
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	891b      	ldrh	r3, [r3, #8]
 80167bc:	8a3a      	ldrh	r2, [r7, #16]
 80167be:	429a      	cmp	r2, r3
 80167c0:	d802      	bhi.n	80167c8 <ip4_input+0x78>
 80167c2:	8a7b      	ldrh	r3, [r7, #18]
 80167c4:	2b13      	cmp	r3, #19
 80167c6:	d804      	bhi.n	80167d2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80167c8:	6878      	ldr	r0, [r7, #4]
 80167ca:	f7f5 fe09 	bl	800c3e0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80167ce:	2300      	movs	r3, #0
 80167d0:	e0f5      	b.n	80169be <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80167d2:	69fb      	ldr	r3, [r7, #28]
 80167d4:	691b      	ldr	r3, [r3, #16]
 80167d6:	4a7c      	ldr	r2, [pc, #496]	; (80169c8 <ip4_input+0x278>)
 80167d8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80167da:	69fb      	ldr	r3, [r7, #28]
 80167dc:	68db      	ldr	r3, [r3, #12]
 80167de:	4a7a      	ldr	r2, [pc, #488]	; (80169c8 <ip4_input+0x278>)
 80167e0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80167e2:	4b79      	ldr	r3, [pc, #484]	; (80169c8 <ip4_input+0x278>)
 80167e4:	695b      	ldr	r3, [r3, #20]
 80167e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80167ea:	2be0      	cmp	r3, #224	; 0xe0
 80167ec:	d112      	bne.n	8016814 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80167ee:	683b      	ldr	r3, [r7, #0]
 80167f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80167f4:	f003 0301 	and.w	r3, r3, #1
 80167f8:	b2db      	uxtb	r3, r3
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d007      	beq.n	801680e <ip4_input+0xbe>
 80167fe:	683b      	ldr	r3, [r7, #0]
 8016800:	3304      	adds	r3, #4
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d002      	beq.n	801680e <ip4_input+0xbe>
      netif = inp;
 8016808:	683b      	ldr	r3, [r7, #0]
 801680a:	61bb      	str	r3, [r7, #24]
 801680c:	e02a      	b.n	8016864 <ip4_input+0x114>
    } else {
      netif = NULL;
 801680e:	2300      	movs	r3, #0
 8016810:	61bb      	str	r3, [r7, #24]
 8016812:	e027      	b.n	8016864 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016814:	6838      	ldr	r0, [r7, #0]
 8016816:	f7ff ff71 	bl	80166fc <ip4_input_accept>
 801681a:	4603      	mov	r3, r0
 801681c:	2b00      	cmp	r3, #0
 801681e:	d002      	beq.n	8016826 <ip4_input+0xd6>
      netif = inp;
 8016820:	683b      	ldr	r3, [r7, #0]
 8016822:	61bb      	str	r3, [r7, #24]
 8016824:	e01e      	b.n	8016864 <ip4_input+0x114>
    } else {
      netif = NULL;
 8016826:	2300      	movs	r3, #0
 8016828:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801682a:	4b67      	ldr	r3, [pc, #412]	; (80169c8 <ip4_input+0x278>)
 801682c:	695b      	ldr	r3, [r3, #20]
 801682e:	b2db      	uxtb	r3, r3
 8016830:	2b7f      	cmp	r3, #127	; 0x7f
 8016832:	d017      	beq.n	8016864 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016834:	4b65      	ldr	r3, [pc, #404]	; (80169cc <ip4_input+0x27c>)
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	61bb      	str	r3, [r7, #24]
 801683a:	e00e      	b.n	801685a <ip4_input+0x10a>
          if (netif == inp) {
 801683c:	69ba      	ldr	r2, [r7, #24]
 801683e:	683b      	ldr	r3, [r7, #0]
 8016840:	429a      	cmp	r2, r3
 8016842:	d006      	beq.n	8016852 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016844:	69b8      	ldr	r0, [r7, #24]
 8016846:	f7ff ff59 	bl	80166fc <ip4_input_accept>
 801684a:	4603      	mov	r3, r0
 801684c:	2b00      	cmp	r3, #0
 801684e:	d108      	bne.n	8016862 <ip4_input+0x112>
 8016850:	e000      	b.n	8016854 <ip4_input+0x104>
            continue;
 8016852:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016854:	69bb      	ldr	r3, [r7, #24]
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	61bb      	str	r3, [r7, #24]
 801685a:	69bb      	ldr	r3, [r7, #24]
 801685c:	2b00      	cmp	r3, #0
 801685e:	d1ed      	bne.n	801683c <ip4_input+0xec>
 8016860:	e000      	b.n	8016864 <ip4_input+0x114>
            break;
 8016862:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8016864:	69bb      	ldr	r3, [r7, #24]
 8016866:	2b00      	cmp	r3, #0
 8016868:	d111      	bne.n	801688e <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801686a:	69fb      	ldr	r3, [r7, #28]
 801686c:	7a5b      	ldrb	r3, [r3, #9]
 801686e:	2b11      	cmp	r3, #17
 8016870:	d10d      	bne.n	801688e <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8016872:	8a7b      	ldrh	r3, [r7, #18]
 8016874:	69fa      	ldr	r2, [r7, #28]
 8016876:	4413      	add	r3, r2
 8016878:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	885b      	ldrh	r3, [r3, #2]
 801687e:	b29b      	uxth	r3, r3
 8016880:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8016884:	d103      	bne.n	801688e <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8016886:	683b      	ldr	r3, [r7, #0]
 8016888:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801688a:	2300      	movs	r3, #0
 801688c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801688e:	697b      	ldr	r3, [r7, #20]
 8016890:	2b00      	cmp	r3, #0
 8016892:	d017      	beq.n	80168c4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8016894:	4b4c      	ldr	r3, [pc, #304]	; (80169c8 <ip4_input+0x278>)
 8016896:	691b      	ldr	r3, [r3, #16]
 8016898:	2b00      	cmp	r3, #0
 801689a:	d013      	beq.n	80168c4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801689c:	4b4a      	ldr	r3, [pc, #296]	; (80169c8 <ip4_input+0x278>)
 801689e:	691b      	ldr	r3, [r3, #16]
 80168a0:	6839      	ldr	r1, [r7, #0]
 80168a2:	4618      	mov	r0, r3
 80168a4:	f000 f96c 	bl	8016b80 <ip4_addr_isbroadcast_u32>
 80168a8:	4603      	mov	r3, r0
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d105      	bne.n	80168ba <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80168ae:	4b46      	ldr	r3, [pc, #280]	; (80169c8 <ip4_input+0x278>)
 80168b0:	691b      	ldr	r3, [r3, #16]
 80168b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80168b6:	2be0      	cmp	r3, #224	; 0xe0
 80168b8:	d104      	bne.n	80168c4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80168ba:	6878      	ldr	r0, [r7, #4]
 80168bc:	f7f5 fd90 	bl	800c3e0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80168c0:	2300      	movs	r3, #0
 80168c2:	e07c      	b.n	80169be <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80168c4:	69bb      	ldr	r3, [r7, #24]
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d104      	bne.n	80168d4 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80168ca:	6878      	ldr	r0, [r7, #4]
 80168cc:	f7f5 fd88 	bl	800c3e0 <pbuf_free>
    return ERR_OK;
 80168d0:	2300      	movs	r3, #0
 80168d2:	e074      	b.n	80169be <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80168d4:	69fb      	ldr	r3, [r7, #28]
 80168d6:	88db      	ldrh	r3, [r3, #6]
 80168d8:	b29b      	uxth	r3, r3
 80168da:	461a      	mov	r2, r3
 80168dc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80168e0:	4013      	ands	r3, r2
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d00b      	beq.n	80168fe <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80168e6:	6878      	ldr	r0, [r7, #4]
 80168e8:	f000 fc90 	bl	801720c <ip4_reass>
 80168ec:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d101      	bne.n	80168f8 <ip4_input+0x1a8>
      return ERR_OK;
 80168f4:	2300      	movs	r3, #0
 80168f6:	e062      	b.n	80169be <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	685b      	ldr	r3, [r3, #4]
 80168fc:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80168fe:	4a32      	ldr	r2, [pc, #200]	; (80169c8 <ip4_input+0x278>)
 8016900:	69bb      	ldr	r3, [r7, #24]
 8016902:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016904:	4a30      	ldr	r2, [pc, #192]	; (80169c8 <ip4_input+0x278>)
 8016906:	683b      	ldr	r3, [r7, #0]
 8016908:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801690a:	4a2f      	ldr	r2, [pc, #188]	; (80169c8 <ip4_input+0x278>)
 801690c:	69fb      	ldr	r3, [r7, #28]
 801690e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016910:	69fb      	ldr	r3, [r7, #28]
 8016912:	781b      	ldrb	r3, [r3, #0]
 8016914:	f003 030f 	and.w	r3, r3, #15
 8016918:	b2db      	uxtb	r3, r3
 801691a:	009b      	lsls	r3, r3, #2
 801691c:	b2db      	uxtb	r3, r3
 801691e:	b29a      	uxth	r2, r3
 8016920:	4b29      	ldr	r3, [pc, #164]	; (80169c8 <ip4_input+0x278>)
 8016922:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016924:	8a7b      	ldrh	r3, [r7, #18]
 8016926:	4619      	mov	r1, r3
 8016928:	6878      	ldr	r0, [r7, #4]
 801692a:	f7f5 fcd3 	bl	800c2d4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801692e:	69fb      	ldr	r3, [r7, #28]
 8016930:	7a5b      	ldrb	r3, [r3, #9]
 8016932:	2b06      	cmp	r3, #6
 8016934:	d009      	beq.n	801694a <ip4_input+0x1fa>
 8016936:	2b11      	cmp	r3, #17
 8016938:	d002      	beq.n	8016940 <ip4_input+0x1f0>
 801693a:	2b01      	cmp	r3, #1
 801693c:	d00a      	beq.n	8016954 <ip4_input+0x204>
 801693e:	e00e      	b.n	801695e <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016940:	6839      	ldr	r1, [r7, #0]
 8016942:	6878      	ldr	r0, [r7, #4]
 8016944:	f7fc fad0 	bl	8012ee8 <udp_input>
        break;
 8016948:	e026      	b.n	8016998 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801694a:	6839      	ldr	r1, [r7, #0]
 801694c:	6878      	ldr	r0, [r7, #4]
 801694e:	f7f7 fe7f 	bl	800e650 <tcp_input>
        break;
 8016952:	e021      	b.n	8016998 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016954:	6839      	ldr	r1, [r7, #0]
 8016956:	6878      	ldr	r0, [r7, #4]
 8016958:	f7ff fcd2 	bl	8016300 <icmp_input>
        break;
 801695c:	e01c      	b.n	8016998 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801695e:	4b1a      	ldr	r3, [pc, #104]	; (80169c8 <ip4_input+0x278>)
 8016960:	695b      	ldr	r3, [r3, #20]
 8016962:	69b9      	ldr	r1, [r7, #24]
 8016964:	4618      	mov	r0, r3
 8016966:	f000 f90b 	bl	8016b80 <ip4_addr_isbroadcast_u32>
 801696a:	4603      	mov	r3, r0
 801696c:	2b00      	cmp	r3, #0
 801696e:	d10f      	bne.n	8016990 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016970:	4b15      	ldr	r3, [pc, #84]	; (80169c8 <ip4_input+0x278>)
 8016972:	695b      	ldr	r3, [r3, #20]
 8016974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016978:	2be0      	cmp	r3, #224	; 0xe0
 801697a:	d009      	beq.n	8016990 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801697c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016980:	4619      	mov	r1, r3
 8016982:	6878      	ldr	r0, [r7, #4]
 8016984:	f7f5 fd19 	bl	800c3ba <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016988:	2102      	movs	r1, #2
 801698a:	6878      	ldr	r0, [r7, #4]
 801698c:	f7ff fdbc 	bl	8016508 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016990:	6878      	ldr	r0, [r7, #4]
 8016992:	f7f5 fd25 	bl	800c3e0 <pbuf_free>
        break;
 8016996:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016998:	4b0b      	ldr	r3, [pc, #44]	; (80169c8 <ip4_input+0x278>)
 801699a:	2200      	movs	r2, #0
 801699c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801699e:	4b0a      	ldr	r3, [pc, #40]	; (80169c8 <ip4_input+0x278>)
 80169a0:	2200      	movs	r2, #0
 80169a2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80169a4:	4b08      	ldr	r3, [pc, #32]	; (80169c8 <ip4_input+0x278>)
 80169a6:	2200      	movs	r2, #0
 80169a8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80169aa:	4b07      	ldr	r3, [pc, #28]	; (80169c8 <ip4_input+0x278>)
 80169ac:	2200      	movs	r2, #0
 80169ae:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80169b0:	4b05      	ldr	r3, [pc, #20]	; (80169c8 <ip4_input+0x278>)
 80169b2:	2200      	movs	r2, #0
 80169b4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80169b6:	4b04      	ldr	r3, [pc, #16]	; (80169c8 <ip4_input+0x278>)
 80169b8:	2200      	movs	r2, #0
 80169ba:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80169bc:	2300      	movs	r3, #0
}
 80169be:	4618      	mov	r0, r3
 80169c0:	3720      	adds	r7, #32
 80169c2:	46bd      	mov	sp, r7
 80169c4:	bd80      	pop	{r7, pc}
 80169c6:	bf00      	nop
 80169c8:	2000bde0 	.word	0x2000bde0
 80169cc:	2000f504 	.word	0x2000f504

080169d0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80169d0:	b580      	push	{r7, lr}
 80169d2:	b08a      	sub	sp, #40	; 0x28
 80169d4:	af04      	add	r7, sp, #16
 80169d6:	60f8      	str	r0, [r7, #12]
 80169d8:	60b9      	str	r1, [r7, #8]
 80169da:	607a      	str	r2, [r7, #4]
 80169dc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80169de:	68bb      	ldr	r3, [r7, #8]
 80169e0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d009      	beq.n	80169fc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80169e8:	68bb      	ldr	r3, [r7, #8]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d003      	beq.n	80169f6 <ip4_output_if+0x26>
 80169ee:	68bb      	ldr	r3, [r7, #8]
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d102      	bne.n	80169fc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80169f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169f8:	3304      	adds	r3, #4
 80169fa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80169fc:	78fa      	ldrb	r2, [r7, #3]
 80169fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a00:	9302      	str	r3, [sp, #8]
 8016a02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016a06:	9301      	str	r3, [sp, #4]
 8016a08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016a0c:	9300      	str	r3, [sp, #0]
 8016a0e:	4613      	mov	r3, r2
 8016a10:	687a      	ldr	r2, [r7, #4]
 8016a12:	6979      	ldr	r1, [r7, #20]
 8016a14:	68f8      	ldr	r0, [r7, #12]
 8016a16:	f000 f805 	bl	8016a24 <ip4_output_if_src>
 8016a1a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	3718      	adds	r7, #24
 8016a20:	46bd      	mov	sp, r7
 8016a22:	bd80      	pop	{r7, pc}

08016a24 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016a24:	b580      	push	{r7, lr}
 8016a26:	b088      	sub	sp, #32
 8016a28:	af00      	add	r7, sp, #0
 8016a2a:	60f8      	str	r0, [r7, #12]
 8016a2c:	60b9      	str	r1, [r7, #8]
 8016a2e:	607a      	str	r2, [r7, #4]
 8016a30:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	7b9b      	ldrb	r3, [r3, #14]
 8016a36:	2b01      	cmp	r3, #1
 8016a38:	d006      	beq.n	8016a48 <ip4_output_if_src+0x24>
 8016a3a:	4b4b      	ldr	r3, [pc, #300]	; (8016b68 <ip4_output_if_src+0x144>)
 8016a3c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016a40:	494a      	ldr	r1, [pc, #296]	; (8016b6c <ip4_output_if_src+0x148>)
 8016a42:	484b      	ldr	r0, [pc, #300]	; (8016b70 <ip4_output_if_src+0x14c>)
 8016a44:	f001 fa30 	bl	8017ea8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d060      	beq.n	8016b10 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016a4e:	2314      	movs	r3, #20
 8016a50:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016a52:	2114      	movs	r1, #20
 8016a54:	68f8      	ldr	r0, [r7, #12]
 8016a56:	f7f5 fc2d 	bl	800c2b4 <pbuf_add_header>
 8016a5a:	4603      	mov	r3, r0
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d002      	beq.n	8016a66 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016a60:	f06f 0301 	mvn.w	r3, #1
 8016a64:	e07c      	b.n	8016b60 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	685b      	ldr	r3, [r3, #4]
 8016a6a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	895b      	ldrh	r3, [r3, #10]
 8016a70:	2b13      	cmp	r3, #19
 8016a72:	d806      	bhi.n	8016a82 <ip4_output_if_src+0x5e>
 8016a74:	4b3c      	ldr	r3, [pc, #240]	; (8016b68 <ip4_output_if_src+0x144>)
 8016a76:	f240 3289 	movw	r2, #905	; 0x389
 8016a7a:	493e      	ldr	r1, [pc, #248]	; (8016b74 <ip4_output_if_src+0x150>)
 8016a7c:	483c      	ldr	r0, [pc, #240]	; (8016b70 <ip4_output_if_src+0x14c>)
 8016a7e:	f001 fa13 	bl	8017ea8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016a82:	69fb      	ldr	r3, [r7, #28]
 8016a84:	78fa      	ldrb	r2, [r7, #3]
 8016a86:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016a88:	69fb      	ldr	r3, [r7, #28]
 8016a8a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016a8e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	681a      	ldr	r2, [r3, #0]
 8016a94:	69fb      	ldr	r3, [r7, #28]
 8016a96:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016a98:	8b7b      	ldrh	r3, [r7, #26]
 8016a9a:	089b      	lsrs	r3, r3, #2
 8016a9c:	b29b      	uxth	r3, r3
 8016a9e:	b2db      	uxtb	r3, r3
 8016aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016aa4:	b2da      	uxtb	r2, r3
 8016aa6:	69fb      	ldr	r3, [r7, #28]
 8016aa8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016aaa:	69fb      	ldr	r3, [r7, #28]
 8016aac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016ab0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	891b      	ldrh	r3, [r3, #8]
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	f7f4 f8a8 	bl	800ac0c <lwip_htons>
 8016abc:	4603      	mov	r3, r0
 8016abe:	461a      	mov	r2, r3
 8016ac0:	69fb      	ldr	r3, [r7, #28]
 8016ac2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016ac4:	69fb      	ldr	r3, [r7, #28]
 8016ac6:	2200      	movs	r2, #0
 8016ac8:	719a      	strb	r2, [r3, #6]
 8016aca:	2200      	movs	r2, #0
 8016acc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016ace:	4b2a      	ldr	r3, [pc, #168]	; (8016b78 <ip4_output_if_src+0x154>)
 8016ad0:	881b      	ldrh	r3, [r3, #0]
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	f7f4 f89a 	bl	800ac0c <lwip_htons>
 8016ad8:	4603      	mov	r3, r0
 8016ada:	461a      	mov	r2, r3
 8016adc:	69fb      	ldr	r3, [r7, #28]
 8016ade:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016ae0:	4b25      	ldr	r3, [pc, #148]	; (8016b78 <ip4_output_if_src+0x154>)
 8016ae2:	881b      	ldrh	r3, [r3, #0]
 8016ae4:	3301      	adds	r3, #1
 8016ae6:	b29a      	uxth	r2, r3
 8016ae8:	4b23      	ldr	r3, [pc, #140]	; (8016b78 <ip4_output_if_src+0x154>)
 8016aea:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016aec:	68bb      	ldr	r3, [r7, #8]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d104      	bne.n	8016afc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016af2:	4b22      	ldr	r3, [pc, #136]	; (8016b7c <ip4_output_if_src+0x158>)
 8016af4:	681a      	ldr	r2, [r3, #0]
 8016af6:	69fb      	ldr	r3, [r7, #28]
 8016af8:	60da      	str	r2, [r3, #12]
 8016afa:	e003      	b.n	8016b04 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016afc:	68bb      	ldr	r3, [r7, #8]
 8016afe:	681a      	ldr	r2, [r3, #0]
 8016b00:	69fb      	ldr	r3, [r7, #28]
 8016b02:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016b04:	69fb      	ldr	r3, [r7, #28]
 8016b06:	2200      	movs	r2, #0
 8016b08:	729a      	strb	r2, [r3, #10]
 8016b0a:	2200      	movs	r2, #0
 8016b0c:	72da      	strb	r2, [r3, #11]
 8016b0e:	e00f      	b.n	8016b30 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	895b      	ldrh	r3, [r3, #10]
 8016b14:	2b13      	cmp	r3, #19
 8016b16:	d802      	bhi.n	8016b1e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016b18:	f06f 0301 	mvn.w	r3, #1
 8016b1c:	e020      	b.n	8016b60 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	685b      	ldr	r3, [r3, #4]
 8016b22:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016b24:	69fb      	ldr	r3, [r7, #28]
 8016b26:	691b      	ldr	r3, [r3, #16]
 8016b28:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016b2a:	f107 0314 	add.w	r3, r7, #20
 8016b2e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d00c      	beq.n	8016b52 <ip4_output_if_src+0x12e>
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	891a      	ldrh	r2, [r3, #8]
 8016b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016b40:	429a      	cmp	r2, r3
 8016b42:	d906      	bls.n	8016b52 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016b44:	687a      	ldr	r2, [r7, #4]
 8016b46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016b48:	68f8      	ldr	r0, [r7, #12]
 8016b4a:	f000 fd4b 	bl	80175e4 <ip4_frag>
 8016b4e:	4603      	mov	r3, r0
 8016b50:	e006      	b.n	8016b60 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b54:	695b      	ldr	r3, [r3, #20]
 8016b56:	687a      	ldr	r2, [r7, #4]
 8016b58:	68f9      	ldr	r1, [r7, #12]
 8016b5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016b5c:	4798      	blx	r3
 8016b5e:	4603      	mov	r3, r0
}
 8016b60:	4618      	mov	r0, r3
 8016b62:	3720      	adds	r7, #32
 8016b64:	46bd      	mov	sp, r7
 8016b66:	bd80      	pop	{r7, pc}
 8016b68:	0801c6a4 	.word	0x0801c6a4
 8016b6c:	0801c6d8 	.word	0x0801c6d8
 8016b70:	0801c6e4 	.word	0x0801c6e4
 8016b74:	0801c70c 	.word	0x0801c70c
 8016b78:	20008bce 	.word	0x20008bce
 8016b7c:	08026c6c 	.word	0x08026c6c

08016b80 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016b80:	b480      	push	{r7}
 8016b82:	b085      	sub	sp, #20
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	6078      	str	r0, [r7, #4]
 8016b88:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b94:	d002      	beq.n	8016b9c <ip4_addr_isbroadcast_u32+0x1c>
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d101      	bne.n	8016ba0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016b9c:	2301      	movs	r3, #1
 8016b9e:	e02a      	b.n	8016bf6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016ba0:	683b      	ldr	r3, [r7, #0]
 8016ba2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016ba6:	f003 0302 	and.w	r3, r3, #2
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d101      	bne.n	8016bb2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016bae:	2300      	movs	r3, #0
 8016bb0:	e021      	b.n	8016bf6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016bb2:	683b      	ldr	r3, [r7, #0]
 8016bb4:	3304      	adds	r3, #4
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	687a      	ldr	r2, [r7, #4]
 8016bba:	429a      	cmp	r2, r3
 8016bbc:	d101      	bne.n	8016bc2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	e019      	b.n	8016bf6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016bc2:	68fa      	ldr	r2, [r7, #12]
 8016bc4:	683b      	ldr	r3, [r7, #0]
 8016bc6:	3304      	adds	r3, #4
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	405a      	eors	r2, r3
 8016bcc:	683b      	ldr	r3, [r7, #0]
 8016bce:	3308      	adds	r3, #8
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	4013      	ands	r3, r2
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d10d      	bne.n	8016bf4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016bd8:	683b      	ldr	r3, [r7, #0]
 8016bda:	3308      	adds	r3, #8
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	43da      	mvns	r2, r3
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016be4:	683b      	ldr	r3, [r7, #0]
 8016be6:	3308      	adds	r3, #8
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016bec:	429a      	cmp	r2, r3
 8016bee:	d101      	bne.n	8016bf4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016bf0:	2301      	movs	r3, #1
 8016bf2:	e000      	b.n	8016bf6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016bf4:	2300      	movs	r3, #0
  }
}
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	3714      	adds	r7, #20
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c00:	4770      	bx	lr
	...

08016c04 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016c04:	b580      	push	{r7, lr}
 8016c06:	b084      	sub	sp, #16
 8016c08:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016c0a:	2300      	movs	r3, #0
 8016c0c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016c0e:	4b12      	ldr	r3, [pc, #72]	; (8016c58 <ip_reass_tmr+0x54>)
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016c14:	e018      	b.n	8016c48 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	7fdb      	ldrb	r3, [r3, #31]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d00b      	beq.n	8016c36 <ip_reass_tmr+0x32>
      r->timer--;
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	7fdb      	ldrb	r3, [r3, #31]
 8016c22:	3b01      	subs	r3, #1
 8016c24:	b2da      	uxtb	r2, r3
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	60fb      	str	r3, [r7, #12]
 8016c34:	e008      	b.n	8016c48 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016c36:	68fb      	ldr	r3, [r7, #12]
 8016c38:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016c40:	68b9      	ldr	r1, [r7, #8]
 8016c42:	6878      	ldr	r0, [r7, #4]
 8016c44:	f000 f80a 	bl	8016c5c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016c48:	68fb      	ldr	r3, [r7, #12]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d1e3      	bne.n	8016c16 <ip_reass_tmr+0x12>
    }
  }
}
 8016c4e:	bf00      	nop
 8016c50:	3710      	adds	r7, #16
 8016c52:	46bd      	mov	sp, r7
 8016c54:	bd80      	pop	{r7, pc}
 8016c56:	bf00      	nop
 8016c58:	20008bd0 	.word	0x20008bd0

08016c5c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016c5c:	b580      	push	{r7, lr}
 8016c5e:	b088      	sub	sp, #32
 8016c60:	af00      	add	r7, sp, #0
 8016c62:	6078      	str	r0, [r7, #4]
 8016c64:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016c66:	2300      	movs	r3, #0
 8016c68:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016c6a:	683a      	ldr	r2, [r7, #0]
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	429a      	cmp	r2, r3
 8016c70:	d105      	bne.n	8016c7e <ip_reass_free_complete_datagram+0x22>
 8016c72:	4b45      	ldr	r3, [pc, #276]	; (8016d88 <ip_reass_free_complete_datagram+0x12c>)
 8016c74:	22ab      	movs	r2, #171	; 0xab
 8016c76:	4945      	ldr	r1, [pc, #276]	; (8016d8c <ip_reass_free_complete_datagram+0x130>)
 8016c78:	4845      	ldr	r0, [pc, #276]	; (8016d90 <ip_reass_free_complete_datagram+0x134>)
 8016c7a:	f001 f915 	bl	8017ea8 <iprintf>
  if (prev != NULL) {
 8016c7e:	683b      	ldr	r3, [r7, #0]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d00a      	beq.n	8016c9a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016c84:	683b      	ldr	r3, [r7, #0]
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	687a      	ldr	r2, [r7, #4]
 8016c8a:	429a      	cmp	r2, r3
 8016c8c:	d005      	beq.n	8016c9a <ip_reass_free_complete_datagram+0x3e>
 8016c8e:	4b3e      	ldr	r3, [pc, #248]	; (8016d88 <ip_reass_free_complete_datagram+0x12c>)
 8016c90:	22ad      	movs	r2, #173	; 0xad
 8016c92:	4940      	ldr	r1, [pc, #256]	; (8016d94 <ip_reass_free_complete_datagram+0x138>)
 8016c94:	483e      	ldr	r0, [pc, #248]	; (8016d90 <ip_reass_free_complete_datagram+0x134>)
 8016c96:	f001 f907 	bl	8017ea8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	685b      	ldr	r3, [r3, #4]
 8016c9e:	685b      	ldr	r3, [r3, #4]
 8016ca0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016ca2:	697b      	ldr	r3, [r7, #20]
 8016ca4:	889b      	ldrh	r3, [r3, #4]
 8016ca6:	b29b      	uxth	r3, r3
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d12a      	bne.n	8016d02 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	685b      	ldr	r3, [r3, #4]
 8016cb0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016cb2:	697b      	ldr	r3, [r7, #20]
 8016cb4:	681a      	ldr	r2, [r3, #0]
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016cba:	69bb      	ldr	r3, [r7, #24]
 8016cbc:	6858      	ldr	r0, [r3, #4]
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	3308      	adds	r3, #8
 8016cc2:	2214      	movs	r2, #20
 8016cc4:	4619      	mov	r1, r3
 8016cc6:	f001 f8dc 	bl	8017e82 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016cca:	2101      	movs	r1, #1
 8016ccc:	69b8      	ldr	r0, [r7, #24]
 8016cce:	f7ff fc2b 	bl	8016528 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016cd2:	69b8      	ldr	r0, [r7, #24]
 8016cd4:	f7f5 fc12 	bl	800c4fc <pbuf_clen>
 8016cd8:	4603      	mov	r3, r0
 8016cda:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016cdc:	8bfa      	ldrh	r2, [r7, #30]
 8016cde:	8a7b      	ldrh	r3, [r7, #18]
 8016ce0:	4413      	add	r3, r2
 8016ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016ce6:	db05      	blt.n	8016cf4 <ip_reass_free_complete_datagram+0x98>
 8016ce8:	4b27      	ldr	r3, [pc, #156]	; (8016d88 <ip_reass_free_complete_datagram+0x12c>)
 8016cea:	22bc      	movs	r2, #188	; 0xbc
 8016cec:	492a      	ldr	r1, [pc, #168]	; (8016d98 <ip_reass_free_complete_datagram+0x13c>)
 8016cee:	4828      	ldr	r0, [pc, #160]	; (8016d90 <ip_reass_free_complete_datagram+0x134>)
 8016cf0:	f001 f8da 	bl	8017ea8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016cf4:	8bfa      	ldrh	r2, [r7, #30]
 8016cf6:	8a7b      	ldrh	r3, [r7, #18]
 8016cf8:	4413      	add	r3, r2
 8016cfa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016cfc:	69b8      	ldr	r0, [r7, #24]
 8016cfe:	f7f5 fb6f 	bl	800c3e0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	685b      	ldr	r3, [r3, #4]
 8016d06:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016d08:	e01f      	b.n	8016d4a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016d0a:	69bb      	ldr	r3, [r7, #24]
 8016d0c:	685b      	ldr	r3, [r3, #4]
 8016d0e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016d10:	69bb      	ldr	r3, [r7, #24]
 8016d12:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016d14:	697b      	ldr	r3, [r7, #20]
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016d1a:	68f8      	ldr	r0, [r7, #12]
 8016d1c:	f7f5 fbee 	bl	800c4fc <pbuf_clen>
 8016d20:	4603      	mov	r3, r0
 8016d22:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016d24:	8bfa      	ldrh	r2, [r7, #30]
 8016d26:	8a7b      	ldrh	r3, [r7, #18]
 8016d28:	4413      	add	r3, r2
 8016d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016d2e:	db05      	blt.n	8016d3c <ip_reass_free_complete_datagram+0xe0>
 8016d30:	4b15      	ldr	r3, [pc, #84]	; (8016d88 <ip_reass_free_complete_datagram+0x12c>)
 8016d32:	22cc      	movs	r2, #204	; 0xcc
 8016d34:	4918      	ldr	r1, [pc, #96]	; (8016d98 <ip_reass_free_complete_datagram+0x13c>)
 8016d36:	4816      	ldr	r0, [pc, #88]	; (8016d90 <ip_reass_free_complete_datagram+0x134>)
 8016d38:	f001 f8b6 	bl	8017ea8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016d3c:	8bfa      	ldrh	r2, [r7, #30]
 8016d3e:	8a7b      	ldrh	r3, [r7, #18]
 8016d40:	4413      	add	r3, r2
 8016d42:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016d44:	68f8      	ldr	r0, [r7, #12]
 8016d46:	f7f5 fb4b 	bl	800c3e0 <pbuf_free>
  while (p != NULL) {
 8016d4a:	69bb      	ldr	r3, [r7, #24]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d1dc      	bne.n	8016d0a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016d50:	6839      	ldr	r1, [r7, #0]
 8016d52:	6878      	ldr	r0, [r7, #4]
 8016d54:	f000 f8c2 	bl	8016edc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016d58:	4b10      	ldr	r3, [pc, #64]	; (8016d9c <ip_reass_free_complete_datagram+0x140>)
 8016d5a:	881b      	ldrh	r3, [r3, #0]
 8016d5c:	8bfa      	ldrh	r2, [r7, #30]
 8016d5e:	429a      	cmp	r2, r3
 8016d60:	d905      	bls.n	8016d6e <ip_reass_free_complete_datagram+0x112>
 8016d62:	4b09      	ldr	r3, [pc, #36]	; (8016d88 <ip_reass_free_complete_datagram+0x12c>)
 8016d64:	22d2      	movs	r2, #210	; 0xd2
 8016d66:	490e      	ldr	r1, [pc, #56]	; (8016da0 <ip_reass_free_complete_datagram+0x144>)
 8016d68:	4809      	ldr	r0, [pc, #36]	; (8016d90 <ip_reass_free_complete_datagram+0x134>)
 8016d6a:	f001 f89d 	bl	8017ea8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016d6e:	4b0b      	ldr	r3, [pc, #44]	; (8016d9c <ip_reass_free_complete_datagram+0x140>)
 8016d70:	881a      	ldrh	r2, [r3, #0]
 8016d72:	8bfb      	ldrh	r3, [r7, #30]
 8016d74:	1ad3      	subs	r3, r2, r3
 8016d76:	b29a      	uxth	r2, r3
 8016d78:	4b08      	ldr	r3, [pc, #32]	; (8016d9c <ip_reass_free_complete_datagram+0x140>)
 8016d7a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016d7c:	8bfb      	ldrh	r3, [r7, #30]
}
 8016d7e:	4618      	mov	r0, r3
 8016d80:	3720      	adds	r7, #32
 8016d82:	46bd      	mov	sp, r7
 8016d84:	bd80      	pop	{r7, pc}
 8016d86:	bf00      	nop
 8016d88:	0801c73c 	.word	0x0801c73c
 8016d8c:	0801c778 	.word	0x0801c778
 8016d90:	0801c784 	.word	0x0801c784
 8016d94:	0801c7ac 	.word	0x0801c7ac
 8016d98:	0801c7c0 	.word	0x0801c7c0
 8016d9c:	20008bd4 	.word	0x20008bd4
 8016da0:	0801c7e0 	.word	0x0801c7e0

08016da4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016da4:	b580      	push	{r7, lr}
 8016da6:	b08a      	sub	sp, #40	; 0x28
 8016da8:	af00      	add	r7, sp, #0
 8016daa:	6078      	str	r0, [r7, #4]
 8016dac:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016dae:	2300      	movs	r3, #0
 8016db0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016db2:	2300      	movs	r3, #0
 8016db4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016db6:	2300      	movs	r3, #0
 8016db8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016dba:	2300      	movs	r3, #0
 8016dbc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016dc2:	4b28      	ldr	r3, [pc, #160]	; (8016e64 <ip_reass_remove_oldest_datagram+0xc0>)
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016dc8:	e030      	b.n	8016e2c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dcc:	695a      	ldr	r2, [r3, #20]
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	68db      	ldr	r3, [r3, #12]
 8016dd2:	429a      	cmp	r2, r3
 8016dd4:	d10c      	bne.n	8016df0 <ip_reass_remove_oldest_datagram+0x4c>
 8016dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dd8:	699a      	ldr	r2, [r3, #24]
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	691b      	ldr	r3, [r3, #16]
 8016dde:	429a      	cmp	r2, r3
 8016de0:	d106      	bne.n	8016df0 <ip_reass_remove_oldest_datagram+0x4c>
 8016de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016de4:	899a      	ldrh	r2, [r3, #12]
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	889b      	ldrh	r3, [r3, #4]
 8016dea:	b29b      	uxth	r3, r3
 8016dec:	429a      	cmp	r2, r3
 8016dee:	d014      	beq.n	8016e1a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016df0:	693b      	ldr	r3, [r7, #16]
 8016df2:	3301      	adds	r3, #1
 8016df4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016df6:	6a3b      	ldr	r3, [r7, #32]
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d104      	bne.n	8016e06 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dfe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016e00:	69fb      	ldr	r3, [r7, #28]
 8016e02:	61bb      	str	r3, [r7, #24]
 8016e04:	e009      	b.n	8016e1a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e08:	7fda      	ldrb	r2, [r3, #31]
 8016e0a:	6a3b      	ldr	r3, [r7, #32]
 8016e0c:	7fdb      	ldrb	r3, [r3, #31]
 8016e0e:	429a      	cmp	r2, r3
 8016e10:	d803      	bhi.n	8016e1a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e14:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016e16:	69fb      	ldr	r3, [r7, #28]
 8016e18:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d001      	beq.n	8016e26 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e24:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d1cb      	bne.n	8016dca <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016e32:	6a3b      	ldr	r3, [r7, #32]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d008      	beq.n	8016e4a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016e38:	69b9      	ldr	r1, [r7, #24]
 8016e3a:	6a38      	ldr	r0, [r7, #32]
 8016e3c:	f7ff ff0e 	bl	8016c5c <ip_reass_free_complete_datagram>
 8016e40:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016e42:	697a      	ldr	r2, [r7, #20]
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	4413      	add	r3, r2
 8016e48:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016e4a:	697a      	ldr	r2, [r7, #20]
 8016e4c:	683b      	ldr	r3, [r7, #0]
 8016e4e:	429a      	cmp	r2, r3
 8016e50:	da02      	bge.n	8016e58 <ip_reass_remove_oldest_datagram+0xb4>
 8016e52:	693b      	ldr	r3, [r7, #16]
 8016e54:	2b01      	cmp	r3, #1
 8016e56:	dcac      	bgt.n	8016db2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016e58:	697b      	ldr	r3, [r7, #20]
}
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	3728      	adds	r7, #40	; 0x28
 8016e5e:	46bd      	mov	sp, r7
 8016e60:	bd80      	pop	{r7, pc}
 8016e62:	bf00      	nop
 8016e64:	20008bd0 	.word	0x20008bd0

08016e68 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	b084      	sub	sp, #16
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	6078      	str	r0, [r7, #4]
 8016e70:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016e72:	2004      	movs	r0, #4
 8016e74:	f7f4 fbb6 	bl	800b5e4 <memp_malloc>
 8016e78:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d110      	bne.n	8016ea2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016e80:	6839      	ldr	r1, [r7, #0]
 8016e82:	6878      	ldr	r0, [r7, #4]
 8016e84:	f7ff ff8e 	bl	8016da4 <ip_reass_remove_oldest_datagram>
 8016e88:	4602      	mov	r2, r0
 8016e8a:	683b      	ldr	r3, [r7, #0]
 8016e8c:	4293      	cmp	r3, r2
 8016e8e:	dc03      	bgt.n	8016e98 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016e90:	2004      	movs	r0, #4
 8016e92:	f7f4 fba7 	bl	800b5e4 <memp_malloc>
 8016e96:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d101      	bne.n	8016ea2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	e016      	b.n	8016ed0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016ea2:	2220      	movs	r2, #32
 8016ea4:	2100      	movs	r1, #0
 8016ea6:	68f8      	ldr	r0, [r7, #12]
 8016ea8:	f000 fff6 	bl	8017e98 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	220f      	movs	r2, #15
 8016eb0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016eb2:	4b09      	ldr	r3, [pc, #36]	; (8016ed8 <ip_reass_enqueue_new_datagram+0x70>)
 8016eb4:	681a      	ldr	r2, [r3, #0]
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016eba:	4a07      	ldr	r2, [pc, #28]	; (8016ed8 <ip_reass_enqueue_new_datagram+0x70>)
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	3308      	adds	r3, #8
 8016ec4:	2214      	movs	r2, #20
 8016ec6:	6879      	ldr	r1, [r7, #4]
 8016ec8:	4618      	mov	r0, r3
 8016eca:	f000 ffda 	bl	8017e82 <memcpy>
  return ipr;
 8016ece:	68fb      	ldr	r3, [r7, #12]
}
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	3710      	adds	r7, #16
 8016ed4:	46bd      	mov	sp, r7
 8016ed6:	bd80      	pop	{r7, pc}
 8016ed8:	20008bd0 	.word	0x20008bd0

08016edc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016edc:	b580      	push	{r7, lr}
 8016ede:	b082      	sub	sp, #8
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	6078      	str	r0, [r7, #4]
 8016ee4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016ee6:	4b10      	ldr	r3, [pc, #64]	; (8016f28 <ip_reass_dequeue_datagram+0x4c>)
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	687a      	ldr	r2, [r7, #4]
 8016eec:	429a      	cmp	r2, r3
 8016eee:	d104      	bne.n	8016efa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	4a0c      	ldr	r2, [pc, #48]	; (8016f28 <ip_reass_dequeue_datagram+0x4c>)
 8016ef6:	6013      	str	r3, [r2, #0]
 8016ef8:	e00d      	b.n	8016f16 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016efa:	683b      	ldr	r3, [r7, #0]
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d106      	bne.n	8016f0e <ip_reass_dequeue_datagram+0x32>
 8016f00:	4b0a      	ldr	r3, [pc, #40]	; (8016f2c <ip_reass_dequeue_datagram+0x50>)
 8016f02:	f240 1245 	movw	r2, #325	; 0x145
 8016f06:	490a      	ldr	r1, [pc, #40]	; (8016f30 <ip_reass_dequeue_datagram+0x54>)
 8016f08:	480a      	ldr	r0, [pc, #40]	; (8016f34 <ip_reass_dequeue_datagram+0x58>)
 8016f0a:	f000 ffcd 	bl	8017ea8 <iprintf>
    prev->next = ipr->next;
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	681a      	ldr	r2, [r3, #0]
 8016f12:	683b      	ldr	r3, [r7, #0]
 8016f14:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016f16:	6879      	ldr	r1, [r7, #4]
 8016f18:	2004      	movs	r0, #4
 8016f1a:	f7f4 fbb5 	bl	800b688 <memp_free>
}
 8016f1e:	bf00      	nop
 8016f20:	3708      	adds	r7, #8
 8016f22:	46bd      	mov	sp, r7
 8016f24:	bd80      	pop	{r7, pc}
 8016f26:	bf00      	nop
 8016f28:	20008bd0 	.word	0x20008bd0
 8016f2c:	0801c73c 	.word	0x0801c73c
 8016f30:	0801c804 	.word	0x0801c804
 8016f34:	0801c784 	.word	0x0801c784

08016f38 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016f38:	b580      	push	{r7, lr}
 8016f3a:	b08c      	sub	sp, #48	; 0x30
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	60f8      	str	r0, [r7, #12]
 8016f40:	60b9      	str	r1, [r7, #8]
 8016f42:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016f44:	2300      	movs	r3, #0
 8016f46:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016f48:	2301      	movs	r3, #1
 8016f4a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016f4c:	68bb      	ldr	r3, [r7, #8]
 8016f4e:	685b      	ldr	r3, [r3, #4]
 8016f50:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016f52:	69fb      	ldr	r3, [r7, #28]
 8016f54:	885b      	ldrh	r3, [r3, #2]
 8016f56:	b29b      	uxth	r3, r3
 8016f58:	4618      	mov	r0, r3
 8016f5a:	f7f3 fe57 	bl	800ac0c <lwip_htons>
 8016f5e:	4603      	mov	r3, r0
 8016f60:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016f62:	69fb      	ldr	r3, [r7, #28]
 8016f64:	781b      	ldrb	r3, [r3, #0]
 8016f66:	f003 030f 	and.w	r3, r3, #15
 8016f6a:	b2db      	uxtb	r3, r3
 8016f6c:	009b      	lsls	r3, r3, #2
 8016f6e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016f70:	7e7b      	ldrb	r3, [r7, #25]
 8016f72:	b29b      	uxth	r3, r3
 8016f74:	8b7a      	ldrh	r2, [r7, #26]
 8016f76:	429a      	cmp	r2, r3
 8016f78:	d202      	bcs.n	8016f80 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8016f7e:	e135      	b.n	80171ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016f80:	7e7b      	ldrb	r3, [r7, #25]
 8016f82:	b29b      	uxth	r3, r3
 8016f84:	8b7a      	ldrh	r2, [r7, #26]
 8016f86:	1ad3      	subs	r3, r2, r3
 8016f88:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016f8a:	69fb      	ldr	r3, [r7, #28]
 8016f8c:	88db      	ldrh	r3, [r3, #6]
 8016f8e:	b29b      	uxth	r3, r3
 8016f90:	4618      	mov	r0, r3
 8016f92:	f7f3 fe3b 	bl	800ac0c <lwip_htons>
 8016f96:	4603      	mov	r3, r0
 8016f98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016f9c:	b29b      	uxth	r3, r3
 8016f9e:	00db      	lsls	r3, r3, #3
 8016fa0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016fa2:	68bb      	ldr	r3, [r7, #8]
 8016fa4:	685b      	ldr	r3, [r3, #4]
 8016fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016faa:	2200      	movs	r2, #0
 8016fac:	701a      	strb	r2, [r3, #0]
 8016fae:	2200      	movs	r2, #0
 8016fb0:	705a      	strb	r2, [r3, #1]
 8016fb2:	2200      	movs	r2, #0
 8016fb4:	709a      	strb	r2, [r3, #2]
 8016fb6:	2200      	movs	r2, #0
 8016fb8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fbc:	8afa      	ldrh	r2, [r7, #22]
 8016fbe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016fc0:	8afa      	ldrh	r2, [r7, #22]
 8016fc2:	8b7b      	ldrh	r3, [r7, #26]
 8016fc4:	4413      	add	r3, r2
 8016fc6:	b29a      	uxth	r2, r3
 8016fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fca:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fce:	88db      	ldrh	r3, [r3, #6]
 8016fd0:	b29b      	uxth	r3, r3
 8016fd2:	8afa      	ldrh	r2, [r7, #22]
 8016fd4:	429a      	cmp	r2, r3
 8016fd6:	d902      	bls.n	8016fde <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8016fdc:	e106      	b.n	80171ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	685b      	ldr	r3, [r3, #4]
 8016fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8016fe4:	e068      	b.n	80170b8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fe8:	685b      	ldr	r3, [r3, #4]
 8016fea:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fee:	889b      	ldrh	r3, [r3, #4]
 8016ff0:	b29a      	uxth	r2, r3
 8016ff2:	693b      	ldr	r3, [r7, #16]
 8016ff4:	889b      	ldrh	r3, [r3, #4]
 8016ff6:	b29b      	uxth	r3, r3
 8016ff8:	429a      	cmp	r2, r3
 8016ffa:	d235      	bcs.n	8017068 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017000:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017004:	2b00      	cmp	r3, #0
 8017006:	d020      	beq.n	801704a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801700a:	889b      	ldrh	r3, [r3, #4]
 801700c:	b29a      	uxth	r2, r3
 801700e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017010:	88db      	ldrh	r3, [r3, #6]
 8017012:	b29b      	uxth	r3, r3
 8017014:	429a      	cmp	r2, r3
 8017016:	d307      	bcc.n	8017028 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801701a:	88db      	ldrh	r3, [r3, #6]
 801701c:	b29a      	uxth	r2, r3
 801701e:	693b      	ldr	r3, [r7, #16]
 8017020:	889b      	ldrh	r3, [r3, #4]
 8017022:	b29b      	uxth	r3, r3
 8017024:	429a      	cmp	r2, r3
 8017026:	d902      	bls.n	801702e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017028:	f04f 33ff 	mov.w	r3, #4294967295
 801702c:	e0de      	b.n	80171ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801702e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017030:	68ba      	ldr	r2, [r7, #8]
 8017032:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017036:	88db      	ldrh	r3, [r3, #6]
 8017038:	b29a      	uxth	r2, r3
 801703a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801703c:	889b      	ldrh	r3, [r3, #4]
 801703e:	b29b      	uxth	r3, r3
 8017040:	429a      	cmp	r2, r3
 8017042:	d03d      	beq.n	80170c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017044:	2300      	movs	r3, #0
 8017046:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017048:	e03a      	b.n	80170c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801704a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801704c:	88db      	ldrh	r3, [r3, #6]
 801704e:	b29a      	uxth	r2, r3
 8017050:	693b      	ldr	r3, [r7, #16]
 8017052:	889b      	ldrh	r3, [r3, #4]
 8017054:	b29b      	uxth	r3, r3
 8017056:	429a      	cmp	r2, r3
 8017058:	d902      	bls.n	8017060 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801705a:	f04f 33ff 	mov.w	r3, #4294967295
 801705e:	e0c5      	b.n	80171ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	68ba      	ldr	r2, [r7, #8]
 8017064:	605a      	str	r2, [r3, #4]
      break;
 8017066:	e02b      	b.n	80170c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801706a:	889b      	ldrh	r3, [r3, #4]
 801706c:	b29a      	uxth	r2, r3
 801706e:	693b      	ldr	r3, [r7, #16]
 8017070:	889b      	ldrh	r3, [r3, #4]
 8017072:	b29b      	uxth	r3, r3
 8017074:	429a      	cmp	r2, r3
 8017076:	d102      	bne.n	801707e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017078:	f04f 33ff 	mov.w	r3, #4294967295
 801707c:	e0b6      	b.n	80171ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801707e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017080:	889b      	ldrh	r3, [r3, #4]
 8017082:	b29a      	uxth	r2, r3
 8017084:	693b      	ldr	r3, [r7, #16]
 8017086:	88db      	ldrh	r3, [r3, #6]
 8017088:	b29b      	uxth	r3, r3
 801708a:	429a      	cmp	r2, r3
 801708c:	d202      	bcs.n	8017094 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801708e:	f04f 33ff 	mov.w	r3, #4294967295
 8017092:	e0ab      	b.n	80171ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017096:	2b00      	cmp	r3, #0
 8017098:	d009      	beq.n	80170ae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801709c:	88db      	ldrh	r3, [r3, #6]
 801709e:	b29a      	uxth	r2, r3
 80170a0:	693b      	ldr	r3, [r7, #16]
 80170a2:	889b      	ldrh	r3, [r3, #4]
 80170a4:	b29b      	uxth	r3, r3
 80170a6:	429a      	cmp	r2, r3
 80170a8:	d001      	beq.n	80170ae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80170aa:	2300      	movs	r3, #0
 80170ac:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80170ae:	693b      	ldr	r3, [r7, #16]
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80170b4:	693b      	ldr	r3, [r7, #16]
 80170b6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80170b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d193      	bne.n	8016fe6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80170be:	e000      	b.n	80170c2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80170c0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80170c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d12d      	bne.n	8017124 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80170c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d01c      	beq.n	8017108 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80170ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170d0:	88db      	ldrh	r3, [r3, #6]
 80170d2:	b29a      	uxth	r2, r3
 80170d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170d6:	889b      	ldrh	r3, [r3, #4]
 80170d8:	b29b      	uxth	r3, r3
 80170da:	429a      	cmp	r2, r3
 80170dc:	d906      	bls.n	80170ec <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80170de:	4b45      	ldr	r3, [pc, #276]	; (80171f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80170e0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80170e4:	4944      	ldr	r1, [pc, #272]	; (80171f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80170e6:	4845      	ldr	r0, [pc, #276]	; (80171fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80170e8:	f000 fede 	bl	8017ea8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80170ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170ee:	68ba      	ldr	r2, [r7, #8]
 80170f0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80170f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170f4:	88db      	ldrh	r3, [r3, #6]
 80170f6:	b29a      	uxth	r2, r3
 80170f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170fa:	889b      	ldrh	r3, [r3, #4]
 80170fc:	b29b      	uxth	r3, r3
 80170fe:	429a      	cmp	r2, r3
 8017100:	d010      	beq.n	8017124 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017102:	2300      	movs	r3, #0
 8017104:	623b      	str	r3, [r7, #32]
 8017106:	e00d      	b.n	8017124 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	685b      	ldr	r3, [r3, #4]
 801710c:	2b00      	cmp	r3, #0
 801710e:	d006      	beq.n	801711e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017110:	4b38      	ldr	r3, [pc, #224]	; (80171f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017112:	f240 12bf 	movw	r2, #447	; 0x1bf
 8017116:	493a      	ldr	r1, [pc, #232]	; (8017200 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017118:	4838      	ldr	r0, [pc, #224]	; (80171fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801711a:	f000 fec5 	bl	8017ea8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	68ba      	ldr	r2, [r7, #8]
 8017122:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d105      	bne.n	8017136 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	7f9b      	ldrb	r3, [r3, #30]
 801712e:	f003 0301 	and.w	r3, r3, #1
 8017132:	2b00      	cmp	r3, #0
 8017134:	d059      	beq.n	80171ea <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017136:	6a3b      	ldr	r3, [r7, #32]
 8017138:	2b00      	cmp	r3, #0
 801713a:	d04f      	beq.n	80171dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	685b      	ldr	r3, [r3, #4]
 8017140:	2b00      	cmp	r3, #0
 8017142:	d006      	beq.n	8017152 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017144:	68fb      	ldr	r3, [r7, #12]
 8017146:	685b      	ldr	r3, [r3, #4]
 8017148:	685b      	ldr	r3, [r3, #4]
 801714a:	889b      	ldrh	r3, [r3, #4]
 801714c:	b29b      	uxth	r3, r3
 801714e:	2b00      	cmp	r3, #0
 8017150:	d002      	beq.n	8017158 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017152:	2300      	movs	r3, #0
 8017154:	623b      	str	r3, [r7, #32]
 8017156:	e041      	b.n	80171dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801715a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801715c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017162:	e012      	b.n	801718a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017166:	685b      	ldr	r3, [r3, #4]
 8017168:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801716a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801716c:	88db      	ldrh	r3, [r3, #6]
 801716e:	b29a      	uxth	r2, r3
 8017170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017172:	889b      	ldrh	r3, [r3, #4]
 8017174:	b29b      	uxth	r3, r3
 8017176:	429a      	cmp	r2, r3
 8017178:	d002      	beq.n	8017180 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801717a:	2300      	movs	r3, #0
 801717c:	623b      	str	r3, [r7, #32]
            break;
 801717e:	e007      	b.n	8017190 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017182:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017186:	681b      	ldr	r3, [r3, #0]
 8017188:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801718c:	2b00      	cmp	r3, #0
 801718e:	d1e9      	bne.n	8017164 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017190:	6a3b      	ldr	r3, [r7, #32]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d022      	beq.n	80171dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	685b      	ldr	r3, [r3, #4]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d106      	bne.n	80171ac <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801719e:	4b15      	ldr	r3, [pc, #84]	; (80171f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80171a0:	f240 12df 	movw	r2, #479	; 0x1df
 80171a4:	4917      	ldr	r1, [pc, #92]	; (8017204 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80171a6:	4815      	ldr	r0, [pc, #84]	; (80171fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80171a8:	f000 fe7e 	bl	8017ea8 <iprintf>
          LWIP_ASSERT("sanity check",
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	685b      	ldr	r3, [r3, #4]
 80171b0:	685b      	ldr	r3, [r3, #4]
 80171b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80171b4:	429a      	cmp	r2, r3
 80171b6:	d106      	bne.n	80171c6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80171b8:	4b0e      	ldr	r3, [pc, #56]	; (80171f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80171ba:	f240 12e1 	movw	r2, #481	; 0x1e1
 80171be:	4911      	ldr	r1, [pc, #68]	; (8017204 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80171c0:	480e      	ldr	r0, [pc, #56]	; (80171fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80171c2:	f000 fe71 	bl	8017ea8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80171c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d006      	beq.n	80171dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80171ce:	4b09      	ldr	r3, [pc, #36]	; (80171f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80171d0:	f240 12e3 	movw	r2, #483	; 0x1e3
 80171d4:	490c      	ldr	r1, [pc, #48]	; (8017208 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80171d6:	4809      	ldr	r0, [pc, #36]	; (80171fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80171d8:	f000 fe66 	bl	8017ea8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80171dc:	6a3b      	ldr	r3, [r7, #32]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	bf14      	ite	ne
 80171e2:	2301      	movne	r3, #1
 80171e4:	2300      	moveq	r3, #0
 80171e6:	b2db      	uxtb	r3, r3
 80171e8:	e000      	b.n	80171ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80171ea:	2300      	movs	r3, #0
}
 80171ec:	4618      	mov	r0, r3
 80171ee:	3730      	adds	r7, #48	; 0x30
 80171f0:	46bd      	mov	sp, r7
 80171f2:	bd80      	pop	{r7, pc}
 80171f4:	0801c73c 	.word	0x0801c73c
 80171f8:	0801c820 	.word	0x0801c820
 80171fc:	0801c784 	.word	0x0801c784
 8017200:	0801c840 	.word	0x0801c840
 8017204:	0801c878 	.word	0x0801c878
 8017208:	0801c888 	.word	0x0801c888

0801720c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801720c:	b580      	push	{r7, lr}
 801720e:	b08e      	sub	sp, #56	; 0x38
 8017210:	af00      	add	r7, sp, #0
 8017212:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	685b      	ldr	r3, [r3, #4]
 8017218:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801721a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801721c:	781b      	ldrb	r3, [r3, #0]
 801721e:	f003 030f 	and.w	r3, r3, #15
 8017222:	b2db      	uxtb	r3, r3
 8017224:	009b      	lsls	r3, r3, #2
 8017226:	b2db      	uxtb	r3, r3
 8017228:	2b14      	cmp	r3, #20
 801722a:	f040 8167 	bne.w	80174fc <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801722e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017230:	88db      	ldrh	r3, [r3, #6]
 8017232:	b29b      	uxth	r3, r3
 8017234:	4618      	mov	r0, r3
 8017236:	f7f3 fce9 	bl	800ac0c <lwip_htons>
 801723a:	4603      	mov	r3, r0
 801723c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017240:	b29b      	uxth	r3, r3
 8017242:	00db      	lsls	r3, r3, #3
 8017244:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017248:	885b      	ldrh	r3, [r3, #2]
 801724a:	b29b      	uxth	r3, r3
 801724c:	4618      	mov	r0, r3
 801724e:	f7f3 fcdd 	bl	800ac0c <lwip_htons>
 8017252:	4603      	mov	r3, r0
 8017254:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017258:	781b      	ldrb	r3, [r3, #0]
 801725a:	f003 030f 	and.w	r3, r3, #15
 801725e:	b2db      	uxtb	r3, r3
 8017260:	009b      	lsls	r3, r3, #2
 8017262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017266:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801726a:	b29b      	uxth	r3, r3
 801726c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801726e:	429a      	cmp	r2, r3
 8017270:	f0c0 8146 	bcc.w	8017500 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017274:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017278:	b29b      	uxth	r3, r3
 801727a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801727c:	1ad3      	subs	r3, r2, r3
 801727e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017280:	6878      	ldr	r0, [r7, #4]
 8017282:	f7f5 f93b 	bl	800c4fc <pbuf_clen>
 8017286:	4603      	mov	r3, r0
 8017288:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801728a:	4ba3      	ldr	r3, [pc, #652]	; (8017518 <ip4_reass+0x30c>)
 801728c:	881b      	ldrh	r3, [r3, #0]
 801728e:	461a      	mov	r2, r3
 8017290:	8c3b      	ldrh	r3, [r7, #32]
 8017292:	4413      	add	r3, r2
 8017294:	2b0a      	cmp	r3, #10
 8017296:	dd10      	ble.n	80172ba <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017298:	8c3b      	ldrh	r3, [r7, #32]
 801729a:	4619      	mov	r1, r3
 801729c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801729e:	f7ff fd81 	bl	8016da4 <ip_reass_remove_oldest_datagram>
 80172a2:	4603      	mov	r3, r0
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	f000 812d 	beq.w	8017504 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80172aa:	4b9b      	ldr	r3, [pc, #620]	; (8017518 <ip4_reass+0x30c>)
 80172ac:	881b      	ldrh	r3, [r3, #0]
 80172ae:	461a      	mov	r2, r3
 80172b0:	8c3b      	ldrh	r3, [r7, #32]
 80172b2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80172b4:	2b0a      	cmp	r3, #10
 80172b6:	f300 8125 	bgt.w	8017504 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80172ba:	4b98      	ldr	r3, [pc, #608]	; (801751c <ip4_reass+0x310>)
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	633b      	str	r3, [r7, #48]	; 0x30
 80172c0:	e015      	b.n	80172ee <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80172c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172c4:	695a      	ldr	r2, [r3, #20]
 80172c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172c8:	68db      	ldr	r3, [r3, #12]
 80172ca:	429a      	cmp	r2, r3
 80172cc:	d10c      	bne.n	80172e8 <ip4_reass+0xdc>
 80172ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172d0:	699a      	ldr	r2, [r3, #24]
 80172d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172d4:	691b      	ldr	r3, [r3, #16]
 80172d6:	429a      	cmp	r2, r3
 80172d8:	d106      	bne.n	80172e8 <ip4_reass+0xdc>
 80172da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172dc:	899a      	ldrh	r2, [r3, #12]
 80172de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172e0:	889b      	ldrh	r3, [r3, #4]
 80172e2:	b29b      	uxth	r3, r3
 80172e4:	429a      	cmp	r2, r3
 80172e6:	d006      	beq.n	80172f6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80172e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	633b      	str	r3, [r7, #48]	; 0x30
 80172ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d1e6      	bne.n	80172c2 <ip4_reass+0xb6>
 80172f4:	e000      	b.n	80172f8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80172f6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80172f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d109      	bne.n	8017312 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80172fe:	8c3b      	ldrh	r3, [r7, #32]
 8017300:	4619      	mov	r1, r3
 8017302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017304:	f7ff fdb0 	bl	8016e68 <ip_reass_enqueue_new_datagram>
 8017308:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801730a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801730c:	2b00      	cmp	r3, #0
 801730e:	d11c      	bne.n	801734a <ip4_reass+0x13e>
      goto nullreturn;
 8017310:	e0f9      	b.n	8017506 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017314:	88db      	ldrh	r3, [r3, #6]
 8017316:	b29b      	uxth	r3, r3
 8017318:	4618      	mov	r0, r3
 801731a:	f7f3 fc77 	bl	800ac0c <lwip_htons>
 801731e:	4603      	mov	r3, r0
 8017320:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017324:	2b00      	cmp	r3, #0
 8017326:	d110      	bne.n	801734a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801732a:	89db      	ldrh	r3, [r3, #14]
 801732c:	4618      	mov	r0, r3
 801732e:	f7f3 fc6d 	bl	800ac0c <lwip_htons>
 8017332:	4603      	mov	r3, r0
 8017334:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017338:	2b00      	cmp	r3, #0
 801733a:	d006      	beq.n	801734a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801733c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801733e:	3308      	adds	r3, #8
 8017340:	2214      	movs	r2, #20
 8017342:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017344:	4618      	mov	r0, r3
 8017346:	f000 fd9c 	bl	8017e82 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801734c:	88db      	ldrh	r3, [r3, #6]
 801734e:	b29b      	uxth	r3, r3
 8017350:	f003 0320 	and.w	r3, r3, #32
 8017354:	2b00      	cmp	r3, #0
 8017356:	bf0c      	ite	eq
 8017358:	2301      	moveq	r3, #1
 801735a:	2300      	movne	r3, #0
 801735c:	b2db      	uxtb	r3, r3
 801735e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017360:	69fb      	ldr	r3, [r7, #28]
 8017362:	2b00      	cmp	r3, #0
 8017364:	d00e      	beq.n	8017384 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017366:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017368:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801736a:	4413      	add	r3, r2
 801736c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801736e:	8b7a      	ldrh	r2, [r7, #26]
 8017370:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017372:	429a      	cmp	r2, r3
 8017374:	f0c0 80a0 	bcc.w	80174b8 <ip4_reass+0x2ac>
 8017378:	8b7b      	ldrh	r3, [r7, #26]
 801737a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801737e:	4293      	cmp	r3, r2
 8017380:	f200 809a 	bhi.w	80174b8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017384:	69fa      	ldr	r2, [r7, #28]
 8017386:	6879      	ldr	r1, [r7, #4]
 8017388:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801738a:	f7ff fdd5 	bl	8016f38 <ip_reass_chain_frag_into_datagram_and_validate>
 801738e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017390:	697b      	ldr	r3, [r7, #20]
 8017392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017396:	f000 8091 	beq.w	80174bc <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801739a:	4b5f      	ldr	r3, [pc, #380]	; (8017518 <ip4_reass+0x30c>)
 801739c:	881a      	ldrh	r2, [r3, #0]
 801739e:	8c3b      	ldrh	r3, [r7, #32]
 80173a0:	4413      	add	r3, r2
 80173a2:	b29a      	uxth	r2, r3
 80173a4:	4b5c      	ldr	r3, [pc, #368]	; (8017518 <ip4_reass+0x30c>)
 80173a6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80173a8:	69fb      	ldr	r3, [r7, #28]
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d00d      	beq.n	80173ca <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80173ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80173b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80173b2:	4413      	add	r3, r2
 80173b4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80173b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173b8:	8a7a      	ldrh	r2, [r7, #18]
 80173ba:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80173bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173be:	7f9b      	ldrb	r3, [r3, #30]
 80173c0:	f043 0301 	orr.w	r3, r3, #1
 80173c4:	b2da      	uxtb	r2, r3
 80173c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173c8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80173ca:	697b      	ldr	r3, [r7, #20]
 80173cc:	2b01      	cmp	r3, #1
 80173ce:	d171      	bne.n	80174b4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80173d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173d2:	8b9b      	ldrh	r3, [r3, #28]
 80173d4:	3314      	adds	r3, #20
 80173d6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80173d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173da:	685b      	ldr	r3, [r3, #4]
 80173dc:	685b      	ldr	r3, [r3, #4]
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80173e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173e4:	685b      	ldr	r3, [r3, #4]
 80173e6:	685b      	ldr	r3, [r3, #4]
 80173e8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80173ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173ec:	3308      	adds	r3, #8
 80173ee:	2214      	movs	r2, #20
 80173f0:	4619      	mov	r1, r3
 80173f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80173f4:	f000 fd45 	bl	8017e82 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80173f8:	8a3b      	ldrh	r3, [r7, #16]
 80173fa:	4618      	mov	r0, r3
 80173fc:	f7f3 fc06 	bl	800ac0c <lwip_htons>
 8017400:	4603      	mov	r3, r0
 8017402:	461a      	mov	r2, r3
 8017404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017406:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801740a:	2200      	movs	r2, #0
 801740c:	719a      	strb	r2, [r3, #6]
 801740e:	2200      	movs	r2, #0
 8017410:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017414:	2200      	movs	r2, #0
 8017416:	729a      	strb	r2, [r3, #10]
 8017418:	2200      	movs	r2, #0
 801741a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801741c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801741e:	685b      	ldr	r3, [r3, #4]
 8017420:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017422:	e00d      	b.n	8017440 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017426:	685b      	ldr	r3, [r3, #4]
 8017428:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801742a:	2114      	movs	r1, #20
 801742c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801742e:	f7f4 ff51 	bl	800c2d4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8017432:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017434:	6878      	ldr	r0, [r7, #4]
 8017436:	f7f5 f8a1 	bl	800c57c <pbuf_cat>
      r = iprh->next_pbuf;
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	681b      	ldr	r3, [r3, #0]
 801743e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017442:	2b00      	cmp	r3, #0
 8017444:	d1ee      	bne.n	8017424 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017446:	4b35      	ldr	r3, [pc, #212]	; (801751c <ip4_reass+0x310>)
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801744c:	429a      	cmp	r2, r3
 801744e:	d102      	bne.n	8017456 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017450:	2300      	movs	r3, #0
 8017452:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017454:	e010      	b.n	8017478 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017456:	4b31      	ldr	r3, [pc, #196]	; (801751c <ip4_reass+0x310>)
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801745c:	e007      	b.n	801746e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801745e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017464:	429a      	cmp	r2, r3
 8017466:	d006      	beq.n	8017476 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801746e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017470:	2b00      	cmp	r3, #0
 8017472:	d1f4      	bne.n	801745e <ip4_reass+0x252>
 8017474:	e000      	b.n	8017478 <ip4_reass+0x26c>
          break;
 8017476:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017478:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801747a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801747c:	f7ff fd2e 	bl	8016edc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017480:	6878      	ldr	r0, [r7, #4]
 8017482:	f7f5 f83b 	bl	800c4fc <pbuf_clen>
 8017486:	4603      	mov	r3, r0
 8017488:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801748a:	4b23      	ldr	r3, [pc, #140]	; (8017518 <ip4_reass+0x30c>)
 801748c:	881b      	ldrh	r3, [r3, #0]
 801748e:	8c3a      	ldrh	r2, [r7, #32]
 8017490:	429a      	cmp	r2, r3
 8017492:	d906      	bls.n	80174a2 <ip4_reass+0x296>
 8017494:	4b22      	ldr	r3, [pc, #136]	; (8017520 <ip4_reass+0x314>)
 8017496:	f240 229b 	movw	r2, #667	; 0x29b
 801749a:	4922      	ldr	r1, [pc, #136]	; (8017524 <ip4_reass+0x318>)
 801749c:	4822      	ldr	r0, [pc, #136]	; (8017528 <ip4_reass+0x31c>)
 801749e:	f000 fd03 	bl	8017ea8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80174a2:	4b1d      	ldr	r3, [pc, #116]	; (8017518 <ip4_reass+0x30c>)
 80174a4:	881a      	ldrh	r2, [r3, #0]
 80174a6:	8c3b      	ldrh	r3, [r7, #32]
 80174a8:	1ad3      	subs	r3, r2, r3
 80174aa:	b29a      	uxth	r2, r3
 80174ac:	4b1a      	ldr	r3, [pc, #104]	; (8017518 <ip4_reass+0x30c>)
 80174ae:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	e02c      	b.n	801750e <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80174b4:	2300      	movs	r3, #0
 80174b6:	e02a      	b.n	801750e <ip4_reass+0x302>

nullreturn_ipr:
 80174b8:	bf00      	nop
 80174ba:	e000      	b.n	80174be <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80174bc:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80174be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d106      	bne.n	80174d2 <ip4_reass+0x2c6>
 80174c4:	4b16      	ldr	r3, [pc, #88]	; (8017520 <ip4_reass+0x314>)
 80174c6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80174ca:	4918      	ldr	r1, [pc, #96]	; (801752c <ip4_reass+0x320>)
 80174cc:	4816      	ldr	r0, [pc, #88]	; (8017528 <ip4_reass+0x31c>)
 80174ce:	f000 fceb 	bl	8017ea8 <iprintf>
  if (ipr->p == NULL) {
 80174d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174d4:	685b      	ldr	r3, [r3, #4]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d114      	bne.n	8017504 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80174da:	4b10      	ldr	r3, [pc, #64]	; (801751c <ip4_reass+0x310>)
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80174e0:	429a      	cmp	r2, r3
 80174e2:	d006      	beq.n	80174f2 <ip4_reass+0x2e6>
 80174e4:	4b0e      	ldr	r3, [pc, #56]	; (8017520 <ip4_reass+0x314>)
 80174e6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80174ea:	4911      	ldr	r1, [pc, #68]	; (8017530 <ip4_reass+0x324>)
 80174ec:	480e      	ldr	r0, [pc, #56]	; (8017528 <ip4_reass+0x31c>)
 80174ee:	f000 fcdb 	bl	8017ea8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80174f2:	2100      	movs	r1, #0
 80174f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80174f6:	f7ff fcf1 	bl	8016edc <ip_reass_dequeue_datagram>
 80174fa:	e004      	b.n	8017506 <ip4_reass+0x2fa>
    goto nullreturn;
 80174fc:	bf00      	nop
 80174fe:	e002      	b.n	8017506 <ip4_reass+0x2fa>
    goto nullreturn;
 8017500:	bf00      	nop
 8017502:	e000      	b.n	8017506 <ip4_reass+0x2fa>
  }

nullreturn:
 8017504:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017506:	6878      	ldr	r0, [r7, #4]
 8017508:	f7f4 ff6a 	bl	800c3e0 <pbuf_free>
  return NULL;
 801750c:	2300      	movs	r3, #0
}
 801750e:	4618      	mov	r0, r3
 8017510:	3738      	adds	r7, #56	; 0x38
 8017512:	46bd      	mov	sp, r7
 8017514:	bd80      	pop	{r7, pc}
 8017516:	bf00      	nop
 8017518:	20008bd4 	.word	0x20008bd4
 801751c:	20008bd0 	.word	0x20008bd0
 8017520:	0801c73c 	.word	0x0801c73c
 8017524:	0801c8ac 	.word	0x0801c8ac
 8017528:	0801c784 	.word	0x0801c784
 801752c:	0801c8c8 	.word	0x0801c8c8
 8017530:	0801c8d4 	.word	0x0801c8d4

08017534 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017534:	b580      	push	{r7, lr}
 8017536:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017538:	2005      	movs	r0, #5
 801753a:	f7f4 f853 	bl	800b5e4 <memp_malloc>
 801753e:	4603      	mov	r3, r0
}
 8017540:	4618      	mov	r0, r3
 8017542:	bd80      	pop	{r7, pc}

08017544 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b082      	sub	sp, #8
 8017548:	af00      	add	r7, sp, #0
 801754a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d106      	bne.n	8017560 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017552:	4b07      	ldr	r3, [pc, #28]	; (8017570 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017554:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017558:	4906      	ldr	r1, [pc, #24]	; (8017574 <ip_frag_free_pbuf_custom_ref+0x30>)
 801755a:	4807      	ldr	r0, [pc, #28]	; (8017578 <ip_frag_free_pbuf_custom_ref+0x34>)
 801755c:	f000 fca4 	bl	8017ea8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017560:	6879      	ldr	r1, [r7, #4]
 8017562:	2005      	movs	r0, #5
 8017564:	f7f4 f890 	bl	800b688 <memp_free>
}
 8017568:	bf00      	nop
 801756a:	3708      	adds	r7, #8
 801756c:	46bd      	mov	sp, r7
 801756e:	bd80      	pop	{r7, pc}
 8017570:	0801c73c 	.word	0x0801c73c
 8017574:	0801c8f4 	.word	0x0801c8f4
 8017578:	0801c784 	.word	0x0801c784

0801757c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801757c:	b580      	push	{r7, lr}
 801757e:	b084      	sub	sp, #16
 8017580:	af00      	add	r7, sp, #0
 8017582:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017588:	68fb      	ldr	r3, [r7, #12]
 801758a:	2b00      	cmp	r3, #0
 801758c:	d106      	bne.n	801759c <ipfrag_free_pbuf_custom+0x20>
 801758e:	4b11      	ldr	r3, [pc, #68]	; (80175d4 <ipfrag_free_pbuf_custom+0x58>)
 8017590:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017594:	4910      	ldr	r1, [pc, #64]	; (80175d8 <ipfrag_free_pbuf_custom+0x5c>)
 8017596:	4811      	ldr	r0, [pc, #68]	; (80175dc <ipfrag_free_pbuf_custom+0x60>)
 8017598:	f000 fc86 	bl	8017ea8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801759c:	68fa      	ldr	r2, [r7, #12]
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	429a      	cmp	r2, r3
 80175a2:	d006      	beq.n	80175b2 <ipfrag_free_pbuf_custom+0x36>
 80175a4:	4b0b      	ldr	r3, [pc, #44]	; (80175d4 <ipfrag_free_pbuf_custom+0x58>)
 80175a6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80175aa:	490d      	ldr	r1, [pc, #52]	; (80175e0 <ipfrag_free_pbuf_custom+0x64>)
 80175ac:	480b      	ldr	r0, [pc, #44]	; (80175dc <ipfrag_free_pbuf_custom+0x60>)
 80175ae:	f000 fc7b 	bl	8017ea8 <iprintf>
  if (pcr->original != NULL) {
 80175b2:	68fb      	ldr	r3, [r7, #12]
 80175b4:	695b      	ldr	r3, [r3, #20]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d004      	beq.n	80175c4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	695b      	ldr	r3, [r3, #20]
 80175be:	4618      	mov	r0, r3
 80175c0:	f7f4 ff0e 	bl	800c3e0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80175c4:	68f8      	ldr	r0, [r7, #12]
 80175c6:	f7ff ffbd 	bl	8017544 <ip_frag_free_pbuf_custom_ref>
}
 80175ca:	bf00      	nop
 80175cc:	3710      	adds	r7, #16
 80175ce:	46bd      	mov	sp, r7
 80175d0:	bd80      	pop	{r7, pc}
 80175d2:	bf00      	nop
 80175d4:	0801c73c 	.word	0x0801c73c
 80175d8:	0801c900 	.word	0x0801c900
 80175dc:	0801c784 	.word	0x0801c784
 80175e0:	0801c90c 	.word	0x0801c90c

080175e4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80175e4:	b580      	push	{r7, lr}
 80175e6:	b094      	sub	sp, #80	; 0x50
 80175e8:	af02      	add	r7, sp, #8
 80175ea:	60f8      	str	r0, [r7, #12]
 80175ec:	60b9      	str	r1, [r7, #8]
 80175ee:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80175f0:	2300      	movs	r3, #0
 80175f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80175f6:	68bb      	ldr	r3, [r7, #8]
 80175f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80175fa:	3b14      	subs	r3, #20
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	da00      	bge.n	8017602 <ip4_frag+0x1e>
 8017600:	3307      	adds	r3, #7
 8017602:	10db      	asrs	r3, r3, #3
 8017604:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017606:	2314      	movs	r3, #20
 8017608:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	685b      	ldr	r3, [r3, #4]
 801760e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017612:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017616:	781b      	ldrb	r3, [r3, #0]
 8017618:	f003 030f 	and.w	r3, r3, #15
 801761c:	b2db      	uxtb	r3, r3
 801761e:	009b      	lsls	r3, r3, #2
 8017620:	b2db      	uxtb	r3, r3
 8017622:	2b14      	cmp	r3, #20
 8017624:	d002      	beq.n	801762c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017626:	f06f 0305 	mvn.w	r3, #5
 801762a:	e10f      	b.n	801784c <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	895b      	ldrh	r3, [r3, #10]
 8017630:	2b13      	cmp	r3, #19
 8017632:	d809      	bhi.n	8017648 <ip4_frag+0x64>
 8017634:	4b87      	ldr	r3, [pc, #540]	; (8017854 <ip4_frag+0x270>)
 8017636:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801763a:	4987      	ldr	r1, [pc, #540]	; (8017858 <ip4_frag+0x274>)
 801763c:	4887      	ldr	r0, [pc, #540]	; (801785c <ip4_frag+0x278>)
 801763e:	f000 fc33 	bl	8017ea8 <iprintf>
 8017642:	f06f 0305 	mvn.w	r3, #5
 8017646:	e101      	b.n	801784c <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801764a:	88db      	ldrh	r3, [r3, #6]
 801764c:	b29b      	uxth	r3, r3
 801764e:	4618      	mov	r0, r3
 8017650:	f7f3 fadc 	bl	800ac0c <lwip_htons>
 8017654:	4603      	mov	r3, r0
 8017656:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017658:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801765a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801765e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017662:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017668:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801766a:	68fb      	ldr	r3, [r7, #12]
 801766c:	891b      	ldrh	r3, [r3, #8]
 801766e:	3b14      	subs	r3, #20
 8017670:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017674:	e0e0      	b.n	8017838 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017676:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017678:	00db      	lsls	r3, r3, #3
 801767a:	b29b      	uxth	r3, r3
 801767c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017680:	4293      	cmp	r3, r2
 8017682:	bf28      	it	cs
 8017684:	4613      	movcs	r3, r2
 8017686:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017688:	f44f 7220 	mov.w	r2, #640	; 0x280
 801768c:	2114      	movs	r1, #20
 801768e:	200e      	movs	r0, #14
 8017690:	f7f4 fbc6 	bl	800be20 <pbuf_alloc>
 8017694:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017698:	2b00      	cmp	r3, #0
 801769a:	f000 80d4 	beq.w	8017846 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176a0:	895b      	ldrh	r3, [r3, #10]
 80176a2:	2b13      	cmp	r3, #19
 80176a4:	d806      	bhi.n	80176b4 <ip4_frag+0xd0>
 80176a6:	4b6b      	ldr	r3, [pc, #428]	; (8017854 <ip4_frag+0x270>)
 80176a8:	f240 3225 	movw	r2, #805	; 0x325
 80176ac:	496c      	ldr	r1, [pc, #432]	; (8017860 <ip4_frag+0x27c>)
 80176ae:	486b      	ldr	r0, [pc, #428]	; (801785c <ip4_frag+0x278>)
 80176b0:	f000 fbfa 	bl	8017ea8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80176b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176b6:	685b      	ldr	r3, [r3, #4]
 80176b8:	2214      	movs	r2, #20
 80176ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80176bc:	4618      	mov	r0, r3
 80176be:	f000 fbe0 	bl	8017e82 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80176c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176c4:	685b      	ldr	r3, [r3, #4]
 80176c6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80176c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80176ca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80176ce:	e064      	b.n	801779a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80176d0:	68fb      	ldr	r3, [r7, #12]
 80176d2:	895a      	ldrh	r2, [r3, #10]
 80176d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80176d6:	1ad3      	subs	r3, r2, r3
 80176d8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	895b      	ldrh	r3, [r3, #10]
 80176de:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80176e0:	429a      	cmp	r2, r3
 80176e2:	d906      	bls.n	80176f2 <ip4_frag+0x10e>
 80176e4:	4b5b      	ldr	r3, [pc, #364]	; (8017854 <ip4_frag+0x270>)
 80176e6:	f240 322d 	movw	r2, #813	; 0x32d
 80176ea:	495e      	ldr	r1, [pc, #376]	; (8017864 <ip4_frag+0x280>)
 80176ec:	485b      	ldr	r0, [pc, #364]	; (801785c <ip4_frag+0x278>)
 80176ee:	f000 fbdb 	bl	8017ea8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80176f2:	8bfa      	ldrh	r2, [r7, #30]
 80176f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80176f8:	4293      	cmp	r3, r2
 80176fa:	bf28      	it	cs
 80176fc:	4613      	movcs	r3, r2
 80176fe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017702:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017706:	2b00      	cmp	r3, #0
 8017708:	d105      	bne.n	8017716 <ip4_frag+0x132>
        poff = 0;
 801770a:	2300      	movs	r3, #0
 801770c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	60fb      	str	r3, [r7, #12]
        continue;
 8017714:	e041      	b.n	801779a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017716:	f7ff ff0d 	bl	8017534 <ip_frag_alloc_pbuf_custom_ref>
 801771a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801771c:	69bb      	ldr	r3, [r7, #24]
 801771e:	2b00      	cmp	r3, #0
 8017720:	d103      	bne.n	801772a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017722:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017724:	f7f4 fe5c 	bl	800c3e0 <pbuf_free>
        goto memerr;
 8017728:	e08e      	b.n	8017848 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801772a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801772c:	68fb      	ldr	r3, [r7, #12]
 801772e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017730:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017732:	4413      	add	r3, r2
 8017734:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017738:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801773c:	9201      	str	r2, [sp, #4]
 801773e:	9300      	str	r3, [sp, #0]
 8017740:	4603      	mov	r3, r0
 8017742:	2241      	movs	r2, #65	; 0x41
 8017744:	2000      	movs	r0, #0
 8017746:	f7f4 fc91 	bl	800c06c <pbuf_alloced_custom>
 801774a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801774c:	697b      	ldr	r3, [r7, #20]
 801774e:	2b00      	cmp	r3, #0
 8017750:	d106      	bne.n	8017760 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017752:	69b8      	ldr	r0, [r7, #24]
 8017754:	f7ff fef6 	bl	8017544 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017758:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801775a:	f7f4 fe41 	bl	800c3e0 <pbuf_free>
        goto memerr;
 801775e:	e073      	b.n	8017848 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8017760:	68f8      	ldr	r0, [r7, #12]
 8017762:	f7f4 fee3 	bl	800c52c <pbuf_ref>
      pcr->original = p;
 8017766:	69bb      	ldr	r3, [r7, #24]
 8017768:	68fa      	ldr	r2, [r7, #12]
 801776a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801776c:	69bb      	ldr	r3, [r7, #24]
 801776e:	4a3e      	ldr	r2, [pc, #248]	; (8017868 <ip4_frag+0x284>)
 8017770:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017772:	6979      	ldr	r1, [r7, #20]
 8017774:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017776:	f7f4 ff01 	bl	800c57c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801777a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801777e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017782:	1ad3      	subs	r3, r2, r3
 8017784:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017788:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801778c:	2b00      	cmp	r3, #0
 801778e:	d004      	beq.n	801779a <ip4_frag+0x1b6>
        poff = 0;
 8017790:	2300      	movs	r3, #0
 8017792:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801779a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d196      	bne.n	80176d0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80177a2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80177a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80177a8:	4413      	add	r3, r2
 80177aa:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80177ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80177b0:	68bb      	ldr	r3, [r7, #8]
 80177b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80177b4:	3b14      	subs	r3, #20
 80177b6:	429a      	cmp	r2, r3
 80177b8:	bfd4      	ite	le
 80177ba:	2301      	movle	r3, #1
 80177bc:	2300      	movgt	r3, #0
 80177be:	b2db      	uxtb	r3, r3
 80177c0:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80177c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80177c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80177ca:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80177cc:	6a3b      	ldr	r3, [r7, #32]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d002      	beq.n	80177d8 <ip4_frag+0x1f4>
 80177d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d003      	beq.n	80177e0 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80177d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80177da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80177de:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80177e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80177e2:	4618      	mov	r0, r3
 80177e4:	f7f3 fa12 	bl	800ac0c <lwip_htons>
 80177e8:	4603      	mov	r3, r0
 80177ea:	461a      	mov	r2, r3
 80177ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177ee:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80177f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80177f2:	3314      	adds	r3, #20
 80177f4:	b29b      	uxth	r3, r3
 80177f6:	4618      	mov	r0, r3
 80177f8:	f7f3 fa08 	bl	800ac0c <lwip_htons>
 80177fc:	4603      	mov	r3, r0
 80177fe:	461a      	mov	r2, r3
 8017800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017802:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017806:	2200      	movs	r2, #0
 8017808:	729a      	strb	r2, [r3, #10]
 801780a:	2200      	movs	r2, #0
 801780c:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801780e:	68bb      	ldr	r3, [r7, #8]
 8017810:	695b      	ldr	r3, [r3, #20]
 8017812:	687a      	ldr	r2, [r7, #4]
 8017814:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017816:	68b8      	ldr	r0, [r7, #8]
 8017818:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801781a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801781c:	f7f4 fde0 	bl	800c3e0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017820:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017824:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017826:	1ad3      	subs	r3, r2, r3
 8017828:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801782c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017830:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017832:	4413      	add	r3, r2
 8017834:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017838:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801783c:	2b00      	cmp	r3, #0
 801783e:	f47f af1a 	bne.w	8017676 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017842:	2300      	movs	r3, #0
 8017844:	e002      	b.n	801784c <ip4_frag+0x268>
      goto memerr;
 8017846:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017848:	f04f 33ff 	mov.w	r3, #4294967295
}
 801784c:	4618      	mov	r0, r3
 801784e:	3748      	adds	r7, #72	; 0x48
 8017850:	46bd      	mov	sp, r7
 8017852:	bd80      	pop	{r7, pc}
 8017854:	0801c73c 	.word	0x0801c73c
 8017858:	0801c918 	.word	0x0801c918
 801785c:	0801c784 	.word	0x0801c784
 8017860:	0801c934 	.word	0x0801c934
 8017864:	0801c954 	.word	0x0801c954
 8017868:	0801757d 	.word	0x0801757d

0801786c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801786c:	b580      	push	{r7, lr}
 801786e:	b086      	sub	sp, #24
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]
 8017874:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017876:	230e      	movs	r3, #14
 8017878:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	895b      	ldrh	r3, [r3, #10]
 801787e:	2b0e      	cmp	r3, #14
 8017880:	d96e      	bls.n	8017960 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	7bdb      	ldrb	r3, [r3, #15]
 8017886:	2b00      	cmp	r3, #0
 8017888:	d106      	bne.n	8017898 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801788a:	683b      	ldr	r3, [r7, #0]
 801788c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017890:	3301      	adds	r3, #1
 8017892:	b2da      	uxtb	r2, r3
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	685b      	ldr	r3, [r3, #4]
 801789c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801789e:	693b      	ldr	r3, [r7, #16]
 80178a0:	7b1a      	ldrb	r2, [r3, #12]
 80178a2:	7b5b      	ldrb	r3, [r3, #13]
 80178a4:	021b      	lsls	r3, r3, #8
 80178a6:	4313      	orrs	r3, r2
 80178a8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80178aa:	693b      	ldr	r3, [r7, #16]
 80178ac:	781b      	ldrb	r3, [r3, #0]
 80178ae:	f003 0301 	and.w	r3, r3, #1
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d023      	beq.n	80178fe <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80178b6:	693b      	ldr	r3, [r7, #16]
 80178b8:	781b      	ldrb	r3, [r3, #0]
 80178ba:	2b01      	cmp	r3, #1
 80178bc:	d10f      	bne.n	80178de <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80178be:	693b      	ldr	r3, [r7, #16]
 80178c0:	785b      	ldrb	r3, [r3, #1]
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d11b      	bne.n	80178fe <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80178c6:	693b      	ldr	r3, [r7, #16]
 80178c8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80178ca:	2b5e      	cmp	r3, #94	; 0x5e
 80178cc:	d117      	bne.n	80178fe <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	7b5b      	ldrb	r3, [r3, #13]
 80178d2:	f043 0310 	orr.w	r3, r3, #16
 80178d6:	b2da      	uxtb	r2, r3
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	735a      	strb	r2, [r3, #13]
 80178dc:	e00f      	b.n	80178fe <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80178de:	693b      	ldr	r3, [r7, #16]
 80178e0:	2206      	movs	r2, #6
 80178e2:	4928      	ldr	r1, [pc, #160]	; (8017984 <ethernet_input+0x118>)
 80178e4:	4618      	mov	r0, r3
 80178e6:	f000 fabd 	bl	8017e64 <memcmp>
 80178ea:	4603      	mov	r3, r0
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d106      	bne.n	80178fe <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	7b5b      	ldrb	r3, [r3, #13]
 80178f4:	f043 0308 	orr.w	r3, r3, #8
 80178f8:	b2da      	uxtb	r2, r3
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80178fe:	89fb      	ldrh	r3, [r7, #14]
 8017900:	2b08      	cmp	r3, #8
 8017902:	d003      	beq.n	801790c <ethernet_input+0xa0>
 8017904:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017908:	d014      	beq.n	8017934 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801790a:	e032      	b.n	8017972 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801790c:	683b      	ldr	r3, [r7, #0]
 801790e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017912:	f003 0308 	and.w	r3, r3, #8
 8017916:	2b00      	cmp	r3, #0
 8017918:	d024      	beq.n	8017964 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801791a:	8afb      	ldrh	r3, [r7, #22]
 801791c:	4619      	mov	r1, r3
 801791e:	6878      	ldr	r0, [r7, #4]
 8017920:	f7f4 fcd8 	bl	800c2d4 <pbuf_remove_header>
 8017924:	4603      	mov	r3, r0
 8017926:	2b00      	cmp	r3, #0
 8017928:	d11e      	bne.n	8017968 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801792a:	6839      	ldr	r1, [r7, #0]
 801792c:	6878      	ldr	r0, [r7, #4]
 801792e:	f7fe ff0f 	bl	8016750 <ip4_input>
      break;
 8017932:	e013      	b.n	801795c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017934:	683b      	ldr	r3, [r7, #0]
 8017936:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801793a:	f003 0308 	and.w	r3, r3, #8
 801793e:	2b00      	cmp	r3, #0
 8017940:	d014      	beq.n	801796c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017942:	8afb      	ldrh	r3, [r7, #22]
 8017944:	4619      	mov	r1, r3
 8017946:	6878      	ldr	r0, [r7, #4]
 8017948:	f7f4 fcc4 	bl	800c2d4 <pbuf_remove_header>
 801794c:	4603      	mov	r3, r0
 801794e:	2b00      	cmp	r3, #0
 8017950:	d10e      	bne.n	8017970 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017952:	6839      	ldr	r1, [r7, #0]
 8017954:	6878      	ldr	r0, [r7, #4]
 8017956:	f7fe f8ab 	bl	8015ab0 <etharp_input>
      break;
 801795a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801795c:	2300      	movs	r3, #0
 801795e:	e00c      	b.n	801797a <ethernet_input+0x10e>
    goto free_and_return;
 8017960:	bf00      	nop
 8017962:	e006      	b.n	8017972 <ethernet_input+0x106>
        goto free_and_return;
 8017964:	bf00      	nop
 8017966:	e004      	b.n	8017972 <ethernet_input+0x106>
        goto free_and_return;
 8017968:	bf00      	nop
 801796a:	e002      	b.n	8017972 <ethernet_input+0x106>
        goto free_and_return;
 801796c:	bf00      	nop
 801796e:	e000      	b.n	8017972 <ethernet_input+0x106>
        goto free_and_return;
 8017970:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017972:	6878      	ldr	r0, [r7, #4]
 8017974:	f7f4 fd34 	bl	800c3e0 <pbuf_free>
  return ERR_OK;
 8017978:	2300      	movs	r3, #0
}
 801797a:	4618      	mov	r0, r3
 801797c:	3718      	adds	r7, #24
 801797e:	46bd      	mov	sp, r7
 8017980:	bd80      	pop	{r7, pc}
 8017982:	bf00      	nop
 8017984:	08026c74 	.word	0x08026c74

08017988 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017988:	b580      	push	{r7, lr}
 801798a:	b086      	sub	sp, #24
 801798c:	af00      	add	r7, sp, #0
 801798e:	60f8      	str	r0, [r7, #12]
 8017990:	60b9      	str	r1, [r7, #8]
 8017992:	607a      	str	r2, [r7, #4]
 8017994:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017996:	8c3b      	ldrh	r3, [r7, #32]
 8017998:	4618      	mov	r0, r3
 801799a:	f7f3 f937 	bl	800ac0c <lwip_htons>
 801799e:	4603      	mov	r3, r0
 80179a0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80179a2:	210e      	movs	r1, #14
 80179a4:	68b8      	ldr	r0, [r7, #8]
 80179a6:	f7f4 fc85 	bl	800c2b4 <pbuf_add_header>
 80179aa:	4603      	mov	r3, r0
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d125      	bne.n	80179fc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80179b0:	68bb      	ldr	r3, [r7, #8]
 80179b2:	685b      	ldr	r3, [r3, #4]
 80179b4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80179b6:	693b      	ldr	r3, [r7, #16]
 80179b8:	8afa      	ldrh	r2, [r7, #22]
 80179ba:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80179bc:	693b      	ldr	r3, [r7, #16]
 80179be:	2206      	movs	r2, #6
 80179c0:	6839      	ldr	r1, [r7, #0]
 80179c2:	4618      	mov	r0, r3
 80179c4:	f000 fa5d 	bl	8017e82 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80179c8:	693b      	ldr	r3, [r7, #16]
 80179ca:	3306      	adds	r3, #6
 80179cc:	2206      	movs	r2, #6
 80179ce:	6879      	ldr	r1, [r7, #4]
 80179d0:	4618      	mov	r0, r3
 80179d2:	f000 fa56 	bl	8017e82 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80179d6:	68fb      	ldr	r3, [r7, #12]
 80179d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80179dc:	2b06      	cmp	r3, #6
 80179de:	d006      	beq.n	80179ee <ethernet_output+0x66>
 80179e0:	4b0a      	ldr	r3, [pc, #40]	; (8017a0c <ethernet_output+0x84>)
 80179e2:	f240 1233 	movw	r2, #307	; 0x133
 80179e6:	490a      	ldr	r1, [pc, #40]	; (8017a10 <ethernet_output+0x88>)
 80179e8:	480a      	ldr	r0, [pc, #40]	; (8017a14 <ethernet_output+0x8c>)
 80179ea:	f000 fa5d 	bl	8017ea8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80179ee:	68fb      	ldr	r3, [r7, #12]
 80179f0:	699b      	ldr	r3, [r3, #24]
 80179f2:	68b9      	ldr	r1, [r7, #8]
 80179f4:	68f8      	ldr	r0, [r7, #12]
 80179f6:	4798      	blx	r3
 80179f8:	4603      	mov	r3, r0
 80179fa:	e002      	b.n	8017a02 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80179fc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80179fe:	f06f 0301 	mvn.w	r3, #1
}
 8017a02:	4618      	mov	r0, r3
 8017a04:	3718      	adds	r7, #24
 8017a06:	46bd      	mov	sp, r7
 8017a08:	bd80      	pop	{r7, pc}
 8017a0a:	bf00      	nop
 8017a0c:	0801c964 	.word	0x0801c964
 8017a10:	0801c99c 	.word	0x0801c99c
 8017a14:	0801c9d0 	.word	0x0801c9d0

08017a18 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017a18:	b580      	push	{r7, lr}
 8017a1a:	b086      	sub	sp, #24
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	6078      	str	r0, [r7, #4]
 8017a20:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017a22:	683b      	ldr	r3, [r7, #0]
 8017a24:	60bb      	str	r3, [r7, #8]
 8017a26:	2304      	movs	r3, #4
 8017a28:	60fb      	str	r3, [r7, #12]
 8017a2a:	2300      	movs	r3, #0
 8017a2c:	613b      	str	r3, [r7, #16]
 8017a2e:	2300      	movs	r3, #0
 8017a30:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017a32:	f107 0308 	add.w	r3, r7, #8
 8017a36:	2100      	movs	r1, #0
 8017a38:	4618      	mov	r0, r3
 8017a3a:	f7ed fa3a 	bl	8004eb2 <osMessageCreate>
 8017a3e:	4602      	mov	r2, r0
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d102      	bne.n	8017a52 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8017a50:	e000      	b.n	8017a54 <sys_mbox_new+0x3c>

  return ERR_OK;
 8017a52:	2300      	movs	r3, #0
}
 8017a54:	4618      	mov	r0, r3
 8017a56:	3718      	adds	r7, #24
 8017a58:	46bd      	mov	sp, r7
 8017a5a:	bd80      	pop	{r7, pc}

08017a5c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8017a5c:	b580      	push	{r7, lr}
 8017a5e:	b082      	sub	sp, #8
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	4618      	mov	r0, r3
 8017a6a:	f7ed faff 	bl	800506c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	4618      	mov	r0, r3
 8017a74:	f7ed fb10 	bl	8005098 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017a78:	bf00      	nop
 8017a7a:	3708      	adds	r7, #8
 8017a7c:	46bd      	mov	sp, r7
 8017a7e:	bd80      	pop	{r7, pc}

08017a80 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017a80:	b580      	push	{r7, lr}
 8017a82:	b084      	sub	sp, #16
 8017a84:	af00      	add	r7, sp, #0
 8017a86:	6078      	str	r0, [r7, #4]
 8017a88:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	6839      	ldr	r1, [r7, #0]
 8017a90:	2200      	movs	r2, #0
 8017a92:	4618      	mov	r0, r3
 8017a94:	f7ed fa36 	bl	8004f04 <osMessagePut>
 8017a98:	4603      	mov	r3, r0
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d102      	bne.n	8017aa4 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8017a9e:	2300      	movs	r3, #0
 8017aa0:	73fb      	strb	r3, [r7, #15]
 8017aa2:	e001      	b.n	8017aa8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017aa4:	23ff      	movs	r3, #255	; 0xff
 8017aa6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017aac:	4618      	mov	r0, r3
 8017aae:	3710      	adds	r7, #16
 8017ab0:	46bd      	mov	sp, r7
 8017ab2:	bd80      	pop	{r7, pc}

08017ab4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017ab4:	b580      	push	{r7, lr}
 8017ab6:	b08c      	sub	sp, #48	; 0x30
 8017ab8:	af00      	add	r7, sp, #0
 8017aba:	61f8      	str	r0, [r7, #28]
 8017abc:	61b9      	str	r1, [r7, #24]
 8017abe:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017ac0:	f7ed f81f 	bl	8004b02 <osKernelSysTick>
 8017ac4:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017ac6:	697b      	ldr	r3, [r7, #20]
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d017      	beq.n	8017afc <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8017acc:	69fb      	ldr	r3, [r7, #28]
 8017ace:	6819      	ldr	r1, [r3, #0]
 8017ad0:	f107 0320 	add.w	r3, r7, #32
 8017ad4:	697a      	ldr	r2, [r7, #20]
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	f7ed fa54 	bl	8004f84 <osMessageGet>

    if(event.status == osEventMessage)
 8017adc:	6a3b      	ldr	r3, [r7, #32]
 8017ade:	2b10      	cmp	r3, #16
 8017ae0:	d109      	bne.n	8017af6 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ae4:	461a      	mov	r2, r3
 8017ae6:	69bb      	ldr	r3, [r7, #24]
 8017ae8:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8017aea:	f7ed f80a 	bl	8004b02 <osKernelSysTick>
 8017aee:	4602      	mov	r2, r0
 8017af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017af2:	1ad3      	subs	r3, r2, r3
 8017af4:	e019      	b.n	8017b2a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017af6:	f04f 33ff 	mov.w	r3, #4294967295
 8017afa:	e016      	b.n	8017b2a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8017afc:	69fb      	ldr	r3, [r7, #28]
 8017afe:	6819      	ldr	r1, [r3, #0]
 8017b00:	463b      	mov	r3, r7
 8017b02:	f04f 32ff 	mov.w	r2, #4294967295
 8017b06:	4618      	mov	r0, r3
 8017b08:	f7ed fa3c 	bl	8004f84 <osMessageGet>
 8017b0c:	f107 0320 	add.w	r3, r7, #32
 8017b10:	463a      	mov	r2, r7
 8017b12:	ca07      	ldmia	r2, {r0, r1, r2}
 8017b14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b1a:	461a      	mov	r2, r3
 8017b1c:	69bb      	ldr	r3, [r7, #24]
 8017b1e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017b20:	f7ec ffef 	bl	8004b02 <osKernelSysTick>
 8017b24:	4602      	mov	r2, r0
 8017b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b28:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017b2a:	4618      	mov	r0, r3
 8017b2c:	3730      	adds	r7, #48	; 0x30
 8017b2e:	46bd      	mov	sp, r7
 8017b30:	bd80      	pop	{r7, pc}

08017b32 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8017b32:	b580      	push	{r7, lr}
 8017b34:	b086      	sub	sp, #24
 8017b36:	af00      	add	r7, sp, #0
 8017b38:	6078      	str	r0, [r7, #4]
 8017b3a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	6819      	ldr	r1, [r3, #0]
 8017b40:	f107 030c 	add.w	r3, r7, #12
 8017b44:	2200      	movs	r2, #0
 8017b46:	4618      	mov	r0, r3
 8017b48:	f7ed fa1c 	bl	8004f84 <osMessageGet>

  if(event.status == osEventMessage)
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	2b10      	cmp	r3, #16
 8017b50:	d105      	bne.n	8017b5e <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8017b52:	693b      	ldr	r3, [r7, #16]
 8017b54:	461a      	mov	r2, r3
 8017b56:	683b      	ldr	r3, [r7, #0]
 8017b58:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8017b5a:	2300      	movs	r3, #0
 8017b5c:	e001      	b.n	8017b62 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8017b5e:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8017b62:	4618      	mov	r0, r3
 8017b64:	3718      	adds	r7, #24
 8017b66:	46bd      	mov	sp, r7
 8017b68:	bd80      	pop	{r7, pc}

08017b6a <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017b6a:	b480      	push	{r7}
 8017b6c:	b083      	sub	sp, #12
 8017b6e:	af00      	add	r7, sp, #0
 8017b70:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d101      	bne.n	8017b7e <sys_mbox_valid+0x14>
    return 0;
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	e000      	b.n	8017b80 <sys_mbox_valid+0x16>
  else
    return 1;
 8017b7e:	2301      	movs	r3, #1
}
 8017b80:	4618      	mov	r0, r3
 8017b82:	370c      	adds	r7, #12
 8017b84:	46bd      	mov	sp, r7
 8017b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b8a:	4770      	bx	lr

08017b8c <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8017b8c:	b480      	push	{r7}
 8017b8e:	b083      	sub	sp, #12
 8017b90:	af00      	add	r7, sp, #0
 8017b92:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	2200      	movs	r2, #0
 8017b98:	601a      	str	r2, [r3, #0]
}
 8017b9a:	bf00      	nop
 8017b9c:	370c      	adds	r7, #12
 8017b9e:	46bd      	mov	sp, r7
 8017ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ba4:	4770      	bx	lr

08017ba6 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8017ba6:	b580      	push	{r7, lr}
 8017ba8:	b084      	sub	sp, #16
 8017baa:	af00      	add	r7, sp, #0
 8017bac:	6078      	str	r0, [r7, #4]
 8017bae:	460b      	mov	r3, r1
 8017bb0:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	60bb      	str	r3, [r7, #8]
 8017bb6:	2300      	movs	r3, #0
 8017bb8:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8017bba:	f107 0308 	add.w	r3, r7, #8
 8017bbe:	2101      	movs	r1, #1
 8017bc0:	4618      	mov	r0, r3
 8017bc2:	f7ed f8ab 	bl	8004d1c <osSemaphoreCreate>
 8017bc6:	4602      	mov	r2, r0
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d102      	bne.n	8017bda <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8017bd8:	e009      	b.n	8017bee <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8017bda:	78fb      	ldrb	r3, [r7, #3]
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d105      	bne.n	8017bec <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	2100      	movs	r1, #0
 8017be6:	4618      	mov	r0, r3
 8017be8:	f7ed f8cc 	bl	8004d84 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8017bec:	2300      	movs	r3, #0
}
 8017bee:	4618      	mov	r0, r3
 8017bf0:	3710      	adds	r7, #16
 8017bf2:	46bd      	mov	sp, r7
 8017bf4:	bd80      	pop	{r7, pc}

08017bf6 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8017bf6:	b580      	push	{r7, lr}
 8017bf8:	b084      	sub	sp, #16
 8017bfa:	af00      	add	r7, sp, #0
 8017bfc:	6078      	str	r0, [r7, #4]
 8017bfe:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8017c00:	f7ec ff7f 	bl	8004b02 <osKernelSysTick>
 8017c04:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017c06:	683b      	ldr	r3, [r7, #0]
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d011      	beq.n	8017c30 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	6839      	ldr	r1, [r7, #0]
 8017c12:	4618      	mov	r0, r3
 8017c14:	f7ed f8b6 	bl	8004d84 <osSemaphoreWait>
 8017c18:	4603      	mov	r3, r0
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d105      	bne.n	8017c2a <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8017c1e:	f7ec ff70 	bl	8004b02 <osKernelSysTick>
 8017c22:	4602      	mov	r2, r0
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	1ad3      	subs	r3, r2, r3
 8017c28:	e012      	b.n	8017c50 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8017c2e:	e00f      	b.n	8017c50 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8017c30:	bf00      	nop
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	f04f 31ff 	mov.w	r1, #4294967295
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	f7ed f8a2 	bl	8004d84 <osSemaphoreWait>
 8017c40:	4603      	mov	r3, r0
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d1f5      	bne.n	8017c32 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8017c46:	f7ec ff5c 	bl	8004b02 <osKernelSysTick>
 8017c4a:	4602      	mov	r2, r0
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017c50:	4618      	mov	r0, r3
 8017c52:	3710      	adds	r7, #16
 8017c54:	46bd      	mov	sp, r7
 8017c56:	bd80      	pop	{r7, pc}

08017c58 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b082      	sub	sp, #8
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	4618      	mov	r0, r3
 8017c66:	f7ed f8db 	bl	8004e20 <osSemaphoreRelease>
}
 8017c6a:	bf00      	nop
 8017c6c:	3708      	adds	r7, #8
 8017c6e:	46bd      	mov	sp, r7
 8017c70:	bd80      	pop	{r7, pc}

08017c72 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8017c72:	b580      	push	{r7, lr}
 8017c74:	b082      	sub	sp, #8
 8017c76:	af00      	add	r7, sp, #0
 8017c78:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	4618      	mov	r0, r3
 8017c80:	f7ed f904 	bl	8004e8c <osSemaphoreDelete>
}
 8017c84:	bf00      	nop
 8017c86:	3708      	adds	r7, #8
 8017c88:	46bd      	mov	sp, r7
 8017c8a:	bd80      	pop	{r7, pc}

08017c8c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017c8c:	b480      	push	{r7}
 8017c8e:	b083      	sub	sp, #12
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d101      	bne.n	8017ca0 <sys_sem_valid+0x14>
    return 0;
 8017c9c:	2300      	movs	r3, #0
 8017c9e:	e000      	b.n	8017ca2 <sys_sem_valid+0x16>
  else
    return 1;
 8017ca0:	2301      	movs	r3, #1
}
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	370c      	adds	r7, #12
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cac:	4770      	bx	lr

08017cae <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8017cae:	b480      	push	{r7}
 8017cb0:	b083      	sub	sp, #12
 8017cb2:	af00      	add	r7, sp, #0
 8017cb4:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	2200      	movs	r2, #0
 8017cba:	601a      	str	r2, [r3, #0]
}
 8017cbc:	bf00      	nop
 8017cbe:	370c      	adds	r7, #12
 8017cc0:	46bd      	mov	sp, r7
 8017cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc6:	4770      	bx	lr

08017cc8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017cc8:	b580      	push	{r7, lr}
 8017cca:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8017ccc:	4803      	ldr	r0, [pc, #12]	; (8017cdc <sys_init+0x14>)
 8017cce:	f7ec ff88 	bl	8004be2 <osMutexCreate>
 8017cd2:	4602      	mov	r2, r0
 8017cd4:	4b02      	ldr	r3, [pc, #8]	; (8017ce0 <sys_init+0x18>)
 8017cd6:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017cd8:	bf00      	nop
 8017cda:	bd80      	pop	{r7, pc}
 8017cdc:	08026c84 	.word	0x08026c84
 8017ce0:	2000f55c 	.word	0x2000f55c

08017ce4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b084      	sub	sp, #16
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8017cec:	2300      	movs	r3, #0
 8017cee:	60bb      	str	r3, [r7, #8]
 8017cf0:	2300      	movs	r3, #0
 8017cf2:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8017cf4:	f107 0308 	add.w	r3, r7, #8
 8017cf8:	4618      	mov	r0, r3
 8017cfa:	f7ec ff72 	bl	8004be2 <osMutexCreate>
 8017cfe:	4602      	mov	r2, r0
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d102      	bne.n	8017d12 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8017d10:	e000      	b.n	8017d14 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017d12:	2300      	movs	r3, #0
}
 8017d14:	4618      	mov	r0, r3
 8017d16:	3710      	adds	r7, #16
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	bd80      	pop	{r7, pc}

08017d1c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b082      	sub	sp, #8
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	f04f 31ff 	mov.w	r1, #4294967295
 8017d2c:	4618      	mov	r0, r3
 8017d2e:	f7ec ff71 	bl	8004c14 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8017d32:	bf00      	nop
 8017d34:	3708      	adds	r7, #8
 8017d36:	46bd      	mov	sp, r7
 8017d38:	bd80      	pop	{r7, pc}

08017d3a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017d3a:	b580      	push	{r7, lr}
 8017d3c:	b082      	sub	sp, #8
 8017d3e:	af00      	add	r7, sp, #0
 8017d40:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	4618      	mov	r0, r3
 8017d48:	f7ec ffb2 	bl	8004cb0 <osMutexRelease>
}
 8017d4c:	bf00      	nop
 8017d4e:	3708      	adds	r7, #8
 8017d50:	46bd      	mov	sp, r7
 8017d52:	bd80      	pop	{r7, pc}

08017d54 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017d54:	b580      	push	{r7, lr}
 8017d56:	b08c      	sub	sp, #48	; 0x30
 8017d58:	af00      	add	r7, sp, #0
 8017d5a:	60f8      	str	r0, [r7, #12]
 8017d5c:	60b9      	str	r1, [r7, #8]
 8017d5e:	607a      	str	r2, [r7, #4]
 8017d60:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8017d62:	f107 0314 	add.w	r3, r7, #20
 8017d66:	2200      	movs	r2, #0
 8017d68:	601a      	str	r2, [r3, #0]
 8017d6a:	605a      	str	r2, [r3, #4]
 8017d6c:	609a      	str	r2, [r3, #8]
 8017d6e:	60da      	str	r2, [r3, #12]
 8017d70:	611a      	str	r2, [r3, #16]
 8017d72:	615a      	str	r2, [r3, #20]
 8017d74:	619a      	str	r2, [r3, #24]
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	617b      	str	r3, [r7, #20]
 8017d7a:	68bb      	ldr	r3, [r7, #8]
 8017d7c:	61bb      	str	r3, [r7, #24]
 8017d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d80:	b21b      	sxth	r3, r3
 8017d82:	83bb      	strh	r3, [r7, #28]
 8017d84:	683b      	ldr	r3, [r7, #0]
 8017d86:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8017d88:	f107 0314 	add.w	r3, r7, #20
 8017d8c:	6879      	ldr	r1, [r7, #4]
 8017d8e:	4618      	mov	r0, r3
 8017d90:	f7ec fec7 	bl	8004b22 <osThreadCreate>
 8017d94:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8017d96:	4618      	mov	r0, r3
 8017d98:	3730      	adds	r7, #48	; 0x30
 8017d9a:	46bd      	mov	sp, r7
 8017d9c:	bd80      	pop	{r7, pc}
	...

08017da0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017da0:	b580      	push	{r7, lr}
 8017da2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8017da4:	4b04      	ldr	r3, [pc, #16]	; (8017db8 <sys_arch_protect+0x18>)
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	f04f 31ff 	mov.w	r1, #4294967295
 8017dac:	4618      	mov	r0, r3
 8017dae:	f7ec ff31 	bl	8004c14 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8017db2:	2301      	movs	r3, #1
}
 8017db4:	4618      	mov	r0, r3
 8017db6:	bd80      	pop	{r7, pc}
 8017db8:	2000f55c 	.word	0x2000f55c

08017dbc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017dbc:	b580      	push	{r7, lr}
 8017dbe:	b082      	sub	sp, #8
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017dc4:	4b04      	ldr	r3, [pc, #16]	; (8017dd8 <sys_arch_unprotect+0x1c>)
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	4618      	mov	r0, r3
 8017dca:	f7ec ff71 	bl	8004cb0 <osMutexRelease>
}
 8017dce:	bf00      	nop
 8017dd0:	3708      	adds	r7, #8
 8017dd2:	46bd      	mov	sp, r7
 8017dd4:	bd80      	pop	{r7, pc}
 8017dd6:	bf00      	nop
 8017dd8:	2000f55c 	.word	0x2000f55c

08017ddc <__libc_init_array>:
 8017ddc:	b570      	push	{r4, r5, r6, lr}
 8017dde:	4e0d      	ldr	r6, [pc, #52]	; (8017e14 <__libc_init_array+0x38>)
 8017de0:	4c0d      	ldr	r4, [pc, #52]	; (8017e18 <__libc_init_array+0x3c>)
 8017de2:	1ba4      	subs	r4, r4, r6
 8017de4:	10a4      	asrs	r4, r4, #2
 8017de6:	2500      	movs	r5, #0
 8017de8:	42a5      	cmp	r5, r4
 8017dea:	d109      	bne.n	8017e00 <__libc_init_array+0x24>
 8017dec:	4e0b      	ldr	r6, [pc, #44]	; (8017e1c <__libc_init_array+0x40>)
 8017dee:	4c0c      	ldr	r4, [pc, #48]	; (8017e20 <__libc_init_array+0x44>)
 8017df0:	f000 fff2 	bl	8018dd8 <_init>
 8017df4:	1ba4      	subs	r4, r4, r6
 8017df6:	10a4      	asrs	r4, r4, #2
 8017df8:	2500      	movs	r5, #0
 8017dfa:	42a5      	cmp	r5, r4
 8017dfc:	d105      	bne.n	8017e0a <__libc_init_array+0x2e>
 8017dfe:	bd70      	pop	{r4, r5, r6, pc}
 8017e00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017e04:	4798      	blx	r3
 8017e06:	3501      	adds	r5, #1
 8017e08:	e7ee      	b.n	8017de8 <__libc_init_array+0xc>
 8017e0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017e0e:	4798      	blx	r3
 8017e10:	3501      	adds	r5, #1
 8017e12:	e7f2      	b.n	8017dfa <__libc_init_array+0x1e>
 8017e14:	08026e38 	.word	0x08026e38
 8017e18:	08026e38 	.word	0x08026e38
 8017e1c:	08026e38 	.word	0x08026e38
 8017e20:	08026e3c 	.word	0x08026e3c

08017e24 <__locale_ctype_ptr>:
 8017e24:	4b04      	ldr	r3, [pc, #16]	; (8017e38 <__locale_ctype_ptr+0x14>)
 8017e26:	4a05      	ldr	r2, [pc, #20]	; (8017e3c <__locale_ctype_ptr+0x18>)
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	6a1b      	ldr	r3, [r3, #32]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	bf08      	it	eq
 8017e30:	4613      	moveq	r3, r2
 8017e32:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8017e36:	4770      	bx	lr
 8017e38:	20000020 	.word	0x20000020
 8017e3c:	20000084 	.word	0x20000084

08017e40 <__ascii_mbtowc>:
 8017e40:	b082      	sub	sp, #8
 8017e42:	b901      	cbnz	r1, 8017e46 <__ascii_mbtowc+0x6>
 8017e44:	a901      	add	r1, sp, #4
 8017e46:	b142      	cbz	r2, 8017e5a <__ascii_mbtowc+0x1a>
 8017e48:	b14b      	cbz	r3, 8017e5e <__ascii_mbtowc+0x1e>
 8017e4a:	7813      	ldrb	r3, [r2, #0]
 8017e4c:	600b      	str	r3, [r1, #0]
 8017e4e:	7812      	ldrb	r2, [r2, #0]
 8017e50:	1c10      	adds	r0, r2, #0
 8017e52:	bf18      	it	ne
 8017e54:	2001      	movne	r0, #1
 8017e56:	b002      	add	sp, #8
 8017e58:	4770      	bx	lr
 8017e5a:	4610      	mov	r0, r2
 8017e5c:	e7fb      	b.n	8017e56 <__ascii_mbtowc+0x16>
 8017e5e:	f06f 0001 	mvn.w	r0, #1
 8017e62:	e7f8      	b.n	8017e56 <__ascii_mbtowc+0x16>

08017e64 <memcmp>:
 8017e64:	b530      	push	{r4, r5, lr}
 8017e66:	2400      	movs	r4, #0
 8017e68:	42a2      	cmp	r2, r4
 8017e6a:	d101      	bne.n	8017e70 <memcmp+0xc>
 8017e6c:	2000      	movs	r0, #0
 8017e6e:	e007      	b.n	8017e80 <memcmp+0x1c>
 8017e70:	5d03      	ldrb	r3, [r0, r4]
 8017e72:	3401      	adds	r4, #1
 8017e74:	190d      	adds	r5, r1, r4
 8017e76:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8017e7a:	42ab      	cmp	r3, r5
 8017e7c:	d0f4      	beq.n	8017e68 <memcmp+0x4>
 8017e7e:	1b58      	subs	r0, r3, r5
 8017e80:	bd30      	pop	{r4, r5, pc}

08017e82 <memcpy>:
 8017e82:	b510      	push	{r4, lr}
 8017e84:	1e43      	subs	r3, r0, #1
 8017e86:	440a      	add	r2, r1
 8017e88:	4291      	cmp	r1, r2
 8017e8a:	d100      	bne.n	8017e8e <memcpy+0xc>
 8017e8c:	bd10      	pop	{r4, pc}
 8017e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017e92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017e96:	e7f7      	b.n	8017e88 <memcpy+0x6>

08017e98 <memset>:
 8017e98:	4402      	add	r2, r0
 8017e9a:	4603      	mov	r3, r0
 8017e9c:	4293      	cmp	r3, r2
 8017e9e:	d100      	bne.n	8017ea2 <memset+0xa>
 8017ea0:	4770      	bx	lr
 8017ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8017ea6:	e7f9      	b.n	8017e9c <memset+0x4>

08017ea8 <iprintf>:
 8017ea8:	b40f      	push	{r0, r1, r2, r3}
 8017eaa:	4b0a      	ldr	r3, [pc, #40]	; (8017ed4 <iprintf+0x2c>)
 8017eac:	b513      	push	{r0, r1, r4, lr}
 8017eae:	681c      	ldr	r4, [r3, #0]
 8017eb0:	b124      	cbz	r4, 8017ebc <iprintf+0x14>
 8017eb2:	69a3      	ldr	r3, [r4, #24]
 8017eb4:	b913      	cbnz	r3, 8017ebc <iprintf+0x14>
 8017eb6:	4620      	mov	r0, r4
 8017eb8:	f000 f8fa 	bl	80180b0 <__sinit>
 8017ebc:	ab05      	add	r3, sp, #20
 8017ebe:	9a04      	ldr	r2, [sp, #16]
 8017ec0:	68a1      	ldr	r1, [r4, #8]
 8017ec2:	9301      	str	r3, [sp, #4]
 8017ec4:	4620      	mov	r0, r4
 8017ec6:	f000 fa57 	bl	8018378 <_vfiprintf_r>
 8017eca:	b002      	add	sp, #8
 8017ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ed0:	b004      	add	sp, #16
 8017ed2:	4770      	bx	lr
 8017ed4:	20000020 	.word	0x20000020

08017ed8 <rand>:
 8017ed8:	b538      	push	{r3, r4, r5, lr}
 8017eda:	4b13      	ldr	r3, [pc, #76]	; (8017f28 <rand+0x50>)
 8017edc:	681c      	ldr	r4, [r3, #0]
 8017ede:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017ee0:	b97b      	cbnz	r3, 8017f02 <rand+0x2a>
 8017ee2:	2018      	movs	r0, #24
 8017ee4:	f000 f96e 	bl	80181c4 <malloc>
 8017ee8:	4a10      	ldr	r2, [pc, #64]	; (8017f2c <rand+0x54>)
 8017eea:	4b11      	ldr	r3, [pc, #68]	; (8017f30 <rand+0x58>)
 8017eec:	63a0      	str	r0, [r4, #56]	; 0x38
 8017eee:	e9c0 2300 	strd	r2, r3, [r0]
 8017ef2:	4b10      	ldr	r3, [pc, #64]	; (8017f34 <rand+0x5c>)
 8017ef4:	6083      	str	r3, [r0, #8]
 8017ef6:	230b      	movs	r3, #11
 8017ef8:	8183      	strh	r3, [r0, #12]
 8017efa:	2201      	movs	r2, #1
 8017efc:	2300      	movs	r3, #0
 8017efe:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017f02:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017f04:	480c      	ldr	r0, [pc, #48]	; (8017f38 <rand+0x60>)
 8017f06:	690a      	ldr	r2, [r1, #16]
 8017f08:	694b      	ldr	r3, [r1, #20]
 8017f0a:	4c0c      	ldr	r4, [pc, #48]	; (8017f3c <rand+0x64>)
 8017f0c:	4350      	muls	r0, r2
 8017f0e:	fb04 0003 	mla	r0, r4, r3, r0
 8017f12:	fba2 2304 	umull	r2, r3, r2, r4
 8017f16:	4403      	add	r3, r0
 8017f18:	1c54      	adds	r4, r2, #1
 8017f1a:	f143 0500 	adc.w	r5, r3, #0
 8017f1e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8017f22:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8017f26:	bd38      	pop	{r3, r4, r5, pc}
 8017f28:	20000020 	.word	0x20000020
 8017f2c:	abcd330e 	.word	0xabcd330e
 8017f30:	e66d1234 	.word	0xe66d1234
 8017f34:	0005deec 	.word	0x0005deec
 8017f38:	5851f42d 	.word	0x5851f42d
 8017f3c:	4c957f2d 	.word	0x4c957f2d

08017f40 <strcasecmp>:
 8017f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f42:	4606      	mov	r6, r0
 8017f44:	460f      	mov	r7, r1
 8017f46:	f816 4b01 	ldrb.w	r4, [r6], #1
 8017f4a:	f7ff ff6b 	bl	8017e24 <__locale_ctype_ptr>
 8017f4e:	4420      	add	r0, r4
 8017f50:	f817 5b01 	ldrb.w	r5, [r7], #1
 8017f54:	7843      	ldrb	r3, [r0, #1]
 8017f56:	f003 0303 	and.w	r3, r3, #3
 8017f5a:	2b01      	cmp	r3, #1
 8017f5c:	bf08      	it	eq
 8017f5e:	3420      	addeq	r4, #32
 8017f60:	f7ff ff60 	bl	8017e24 <__locale_ctype_ptr>
 8017f64:	4428      	add	r0, r5
 8017f66:	7842      	ldrb	r2, [r0, #1]
 8017f68:	f002 0203 	and.w	r2, r2, #3
 8017f6c:	2a01      	cmp	r2, #1
 8017f6e:	bf08      	it	eq
 8017f70:	3520      	addeq	r5, #32
 8017f72:	1b60      	subs	r0, r4, r5
 8017f74:	d101      	bne.n	8017f7a <strcasecmp+0x3a>
 8017f76:	2d00      	cmp	r5, #0
 8017f78:	d1e5      	bne.n	8017f46 <strcasecmp+0x6>
 8017f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017f7c <strchr>:
 8017f7c:	b2c9      	uxtb	r1, r1
 8017f7e:	4603      	mov	r3, r0
 8017f80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f84:	b11a      	cbz	r2, 8017f8e <strchr+0x12>
 8017f86:	428a      	cmp	r2, r1
 8017f88:	d1f9      	bne.n	8017f7e <strchr+0x2>
 8017f8a:	4618      	mov	r0, r3
 8017f8c:	4770      	bx	lr
 8017f8e:	2900      	cmp	r1, #0
 8017f90:	bf18      	it	ne
 8017f92:	2300      	movne	r3, #0
 8017f94:	e7f9      	b.n	8017f8a <strchr+0xe>

08017f96 <strncmp>:
 8017f96:	b510      	push	{r4, lr}
 8017f98:	b16a      	cbz	r2, 8017fb6 <strncmp+0x20>
 8017f9a:	3901      	subs	r1, #1
 8017f9c:	1884      	adds	r4, r0, r2
 8017f9e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017fa2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017fa6:	4293      	cmp	r3, r2
 8017fa8:	d103      	bne.n	8017fb2 <strncmp+0x1c>
 8017faa:	42a0      	cmp	r0, r4
 8017fac:	d001      	beq.n	8017fb2 <strncmp+0x1c>
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d1f5      	bne.n	8017f9e <strncmp+0x8>
 8017fb2:	1a98      	subs	r0, r3, r2
 8017fb4:	bd10      	pop	{r4, pc}
 8017fb6:	4610      	mov	r0, r2
 8017fb8:	e7fc      	b.n	8017fb4 <strncmp+0x1e>

08017fba <__strtok_r>:
 8017fba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fbc:	b918      	cbnz	r0, 8017fc6 <__strtok_r+0xc>
 8017fbe:	6810      	ldr	r0, [r2, #0]
 8017fc0:	b908      	cbnz	r0, 8017fc6 <__strtok_r+0xc>
 8017fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017fc4:	4620      	mov	r0, r4
 8017fc6:	4604      	mov	r4, r0
 8017fc8:	460f      	mov	r7, r1
 8017fca:	f814 5b01 	ldrb.w	r5, [r4], #1
 8017fce:	f817 6b01 	ldrb.w	r6, [r7], #1
 8017fd2:	b91e      	cbnz	r6, 8017fdc <__strtok_r+0x22>
 8017fd4:	b96d      	cbnz	r5, 8017ff2 <__strtok_r+0x38>
 8017fd6:	6015      	str	r5, [r2, #0]
 8017fd8:	4628      	mov	r0, r5
 8017fda:	e7f2      	b.n	8017fc2 <__strtok_r+0x8>
 8017fdc:	42b5      	cmp	r5, r6
 8017fde:	d1f6      	bne.n	8017fce <__strtok_r+0x14>
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d1ef      	bne.n	8017fc4 <__strtok_r+0xa>
 8017fe4:	6014      	str	r4, [r2, #0]
 8017fe6:	7003      	strb	r3, [r0, #0]
 8017fe8:	e7eb      	b.n	8017fc2 <__strtok_r+0x8>
 8017fea:	462b      	mov	r3, r5
 8017fec:	e00d      	b.n	801800a <__strtok_r+0x50>
 8017fee:	b926      	cbnz	r6, 8017ffa <__strtok_r+0x40>
 8017ff0:	461c      	mov	r4, r3
 8017ff2:	4623      	mov	r3, r4
 8017ff4:	460f      	mov	r7, r1
 8017ff6:	f813 5b01 	ldrb.w	r5, [r3], #1
 8017ffa:	f817 6b01 	ldrb.w	r6, [r7], #1
 8017ffe:	42b5      	cmp	r5, r6
 8018000:	d1f5      	bne.n	8017fee <__strtok_r+0x34>
 8018002:	2d00      	cmp	r5, #0
 8018004:	d0f1      	beq.n	8017fea <__strtok_r+0x30>
 8018006:	2100      	movs	r1, #0
 8018008:	7021      	strb	r1, [r4, #0]
 801800a:	6013      	str	r3, [r2, #0]
 801800c:	e7d9      	b.n	8017fc2 <__strtok_r+0x8>

0801800e <strtok_r>:
 801800e:	2301      	movs	r3, #1
 8018010:	f7ff bfd3 	b.w	8017fba <__strtok_r>

08018014 <__ascii_wctomb>:
 8018014:	b149      	cbz	r1, 801802a <__ascii_wctomb+0x16>
 8018016:	2aff      	cmp	r2, #255	; 0xff
 8018018:	bf85      	ittet	hi
 801801a:	238a      	movhi	r3, #138	; 0x8a
 801801c:	6003      	strhi	r3, [r0, #0]
 801801e:	700a      	strbls	r2, [r1, #0]
 8018020:	f04f 30ff 	movhi.w	r0, #4294967295
 8018024:	bf98      	it	ls
 8018026:	2001      	movls	r0, #1
 8018028:	4770      	bx	lr
 801802a:	4608      	mov	r0, r1
 801802c:	4770      	bx	lr
	...

08018030 <std>:
 8018030:	2300      	movs	r3, #0
 8018032:	b510      	push	{r4, lr}
 8018034:	4604      	mov	r4, r0
 8018036:	e9c0 3300 	strd	r3, r3, [r0]
 801803a:	6083      	str	r3, [r0, #8]
 801803c:	8181      	strh	r1, [r0, #12]
 801803e:	6643      	str	r3, [r0, #100]	; 0x64
 8018040:	81c2      	strh	r2, [r0, #14]
 8018042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018046:	6183      	str	r3, [r0, #24]
 8018048:	4619      	mov	r1, r3
 801804a:	2208      	movs	r2, #8
 801804c:	305c      	adds	r0, #92	; 0x5c
 801804e:	f7ff ff23 	bl	8017e98 <memset>
 8018052:	4b05      	ldr	r3, [pc, #20]	; (8018068 <std+0x38>)
 8018054:	6263      	str	r3, [r4, #36]	; 0x24
 8018056:	4b05      	ldr	r3, [pc, #20]	; (801806c <std+0x3c>)
 8018058:	62a3      	str	r3, [r4, #40]	; 0x28
 801805a:	4b05      	ldr	r3, [pc, #20]	; (8018070 <std+0x40>)
 801805c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801805e:	4b05      	ldr	r3, [pc, #20]	; (8018074 <std+0x44>)
 8018060:	6224      	str	r4, [r4, #32]
 8018062:	6323      	str	r3, [r4, #48]	; 0x30
 8018064:	bd10      	pop	{r4, pc}
 8018066:	bf00      	nop
 8018068:	080188d5 	.word	0x080188d5
 801806c:	080188f7 	.word	0x080188f7
 8018070:	0801892f 	.word	0x0801892f
 8018074:	08018953 	.word	0x08018953

08018078 <_cleanup_r>:
 8018078:	4901      	ldr	r1, [pc, #4]	; (8018080 <_cleanup_r+0x8>)
 801807a:	f000 b885 	b.w	8018188 <_fwalk_reent>
 801807e:	bf00      	nop
 8018080:	08018c2d 	.word	0x08018c2d

08018084 <__sfmoreglue>:
 8018084:	b570      	push	{r4, r5, r6, lr}
 8018086:	1e4a      	subs	r2, r1, #1
 8018088:	2568      	movs	r5, #104	; 0x68
 801808a:	4355      	muls	r5, r2
 801808c:	460e      	mov	r6, r1
 801808e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018092:	f000 f8ed 	bl	8018270 <_malloc_r>
 8018096:	4604      	mov	r4, r0
 8018098:	b140      	cbz	r0, 80180ac <__sfmoreglue+0x28>
 801809a:	2100      	movs	r1, #0
 801809c:	e9c0 1600 	strd	r1, r6, [r0]
 80180a0:	300c      	adds	r0, #12
 80180a2:	60a0      	str	r0, [r4, #8]
 80180a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80180a8:	f7ff fef6 	bl	8017e98 <memset>
 80180ac:	4620      	mov	r0, r4
 80180ae:	bd70      	pop	{r4, r5, r6, pc}

080180b0 <__sinit>:
 80180b0:	6983      	ldr	r3, [r0, #24]
 80180b2:	b510      	push	{r4, lr}
 80180b4:	4604      	mov	r4, r0
 80180b6:	bb33      	cbnz	r3, 8018106 <__sinit+0x56>
 80180b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80180bc:	6503      	str	r3, [r0, #80]	; 0x50
 80180be:	4b12      	ldr	r3, [pc, #72]	; (8018108 <__sinit+0x58>)
 80180c0:	4a12      	ldr	r2, [pc, #72]	; (801810c <__sinit+0x5c>)
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	6282      	str	r2, [r0, #40]	; 0x28
 80180c6:	4298      	cmp	r0, r3
 80180c8:	bf04      	itt	eq
 80180ca:	2301      	moveq	r3, #1
 80180cc:	6183      	streq	r3, [r0, #24]
 80180ce:	f000 f81f 	bl	8018110 <__sfp>
 80180d2:	6060      	str	r0, [r4, #4]
 80180d4:	4620      	mov	r0, r4
 80180d6:	f000 f81b 	bl	8018110 <__sfp>
 80180da:	60a0      	str	r0, [r4, #8]
 80180dc:	4620      	mov	r0, r4
 80180de:	f000 f817 	bl	8018110 <__sfp>
 80180e2:	2200      	movs	r2, #0
 80180e4:	60e0      	str	r0, [r4, #12]
 80180e6:	2104      	movs	r1, #4
 80180e8:	6860      	ldr	r0, [r4, #4]
 80180ea:	f7ff ffa1 	bl	8018030 <std>
 80180ee:	2201      	movs	r2, #1
 80180f0:	2109      	movs	r1, #9
 80180f2:	68a0      	ldr	r0, [r4, #8]
 80180f4:	f7ff ff9c 	bl	8018030 <std>
 80180f8:	2202      	movs	r2, #2
 80180fa:	2112      	movs	r1, #18
 80180fc:	68e0      	ldr	r0, [r4, #12]
 80180fe:	f7ff ff97 	bl	8018030 <std>
 8018102:	2301      	movs	r3, #1
 8018104:	61a3      	str	r3, [r4, #24]
 8018106:	bd10      	pop	{r4, pc}
 8018108:	08026c8c 	.word	0x08026c8c
 801810c:	08018079 	.word	0x08018079

08018110 <__sfp>:
 8018110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018112:	4b1b      	ldr	r3, [pc, #108]	; (8018180 <__sfp+0x70>)
 8018114:	681e      	ldr	r6, [r3, #0]
 8018116:	69b3      	ldr	r3, [r6, #24]
 8018118:	4607      	mov	r7, r0
 801811a:	b913      	cbnz	r3, 8018122 <__sfp+0x12>
 801811c:	4630      	mov	r0, r6
 801811e:	f7ff ffc7 	bl	80180b0 <__sinit>
 8018122:	3648      	adds	r6, #72	; 0x48
 8018124:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018128:	3b01      	subs	r3, #1
 801812a:	d503      	bpl.n	8018134 <__sfp+0x24>
 801812c:	6833      	ldr	r3, [r6, #0]
 801812e:	b133      	cbz	r3, 801813e <__sfp+0x2e>
 8018130:	6836      	ldr	r6, [r6, #0]
 8018132:	e7f7      	b.n	8018124 <__sfp+0x14>
 8018134:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018138:	b16d      	cbz	r5, 8018156 <__sfp+0x46>
 801813a:	3468      	adds	r4, #104	; 0x68
 801813c:	e7f4      	b.n	8018128 <__sfp+0x18>
 801813e:	2104      	movs	r1, #4
 8018140:	4638      	mov	r0, r7
 8018142:	f7ff ff9f 	bl	8018084 <__sfmoreglue>
 8018146:	6030      	str	r0, [r6, #0]
 8018148:	2800      	cmp	r0, #0
 801814a:	d1f1      	bne.n	8018130 <__sfp+0x20>
 801814c:	230c      	movs	r3, #12
 801814e:	603b      	str	r3, [r7, #0]
 8018150:	4604      	mov	r4, r0
 8018152:	4620      	mov	r0, r4
 8018154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018156:	4b0b      	ldr	r3, [pc, #44]	; (8018184 <__sfp+0x74>)
 8018158:	6665      	str	r5, [r4, #100]	; 0x64
 801815a:	e9c4 5500 	strd	r5, r5, [r4]
 801815e:	60a5      	str	r5, [r4, #8]
 8018160:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8018164:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8018168:	2208      	movs	r2, #8
 801816a:	4629      	mov	r1, r5
 801816c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018170:	f7ff fe92 	bl	8017e98 <memset>
 8018174:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018178:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801817c:	e7e9      	b.n	8018152 <__sfp+0x42>
 801817e:	bf00      	nop
 8018180:	08026c8c 	.word	0x08026c8c
 8018184:	ffff0001 	.word	0xffff0001

08018188 <_fwalk_reent>:
 8018188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801818c:	4680      	mov	r8, r0
 801818e:	4689      	mov	r9, r1
 8018190:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018194:	2600      	movs	r6, #0
 8018196:	b914      	cbnz	r4, 801819e <_fwalk_reent+0x16>
 8018198:	4630      	mov	r0, r6
 801819a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801819e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80181a2:	3f01      	subs	r7, #1
 80181a4:	d501      	bpl.n	80181aa <_fwalk_reent+0x22>
 80181a6:	6824      	ldr	r4, [r4, #0]
 80181a8:	e7f5      	b.n	8018196 <_fwalk_reent+0xe>
 80181aa:	89ab      	ldrh	r3, [r5, #12]
 80181ac:	2b01      	cmp	r3, #1
 80181ae:	d907      	bls.n	80181c0 <_fwalk_reent+0x38>
 80181b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80181b4:	3301      	adds	r3, #1
 80181b6:	d003      	beq.n	80181c0 <_fwalk_reent+0x38>
 80181b8:	4629      	mov	r1, r5
 80181ba:	4640      	mov	r0, r8
 80181bc:	47c8      	blx	r9
 80181be:	4306      	orrs	r6, r0
 80181c0:	3568      	adds	r5, #104	; 0x68
 80181c2:	e7ee      	b.n	80181a2 <_fwalk_reent+0x1a>

080181c4 <malloc>:
 80181c4:	4b02      	ldr	r3, [pc, #8]	; (80181d0 <malloc+0xc>)
 80181c6:	4601      	mov	r1, r0
 80181c8:	6818      	ldr	r0, [r3, #0]
 80181ca:	f000 b851 	b.w	8018270 <_malloc_r>
 80181ce:	bf00      	nop
 80181d0:	20000020 	.word	0x20000020

080181d4 <_free_r>:
 80181d4:	b538      	push	{r3, r4, r5, lr}
 80181d6:	4605      	mov	r5, r0
 80181d8:	2900      	cmp	r1, #0
 80181da:	d045      	beq.n	8018268 <_free_r+0x94>
 80181dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80181e0:	1f0c      	subs	r4, r1, #4
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	bfb8      	it	lt
 80181e6:	18e4      	addlt	r4, r4, r3
 80181e8:	f000 fdc0 	bl	8018d6c <__malloc_lock>
 80181ec:	4a1f      	ldr	r2, [pc, #124]	; (801826c <_free_r+0x98>)
 80181ee:	6813      	ldr	r3, [r2, #0]
 80181f0:	4610      	mov	r0, r2
 80181f2:	b933      	cbnz	r3, 8018202 <_free_r+0x2e>
 80181f4:	6063      	str	r3, [r4, #4]
 80181f6:	6014      	str	r4, [r2, #0]
 80181f8:	4628      	mov	r0, r5
 80181fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80181fe:	f000 bdb6 	b.w	8018d6e <__malloc_unlock>
 8018202:	42a3      	cmp	r3, r4
 8018204:	d90c      	bls.n	8018220 <_free_r+0x4c>
 8018206:	6821      	ldr	r1, [r4, #0]
 8018208:	1862      	adds	r2, r4, r1
 801820a:	4293      	cmp	r3, r2
 801820c:	bf04      	itt	eq
 801820e:	681a      	ldreq	r2, [r3, #0]
 8018210:	685b      	ldreq	r3, [r3, #4]
 8018212:	6063      	str	r3, [r4, #4]
 8018214:	bf04      	itt	eq
 8018216:	1852      	addeq	r2, r2, r1
 8018218:	6022      	streq	r2, [r4, #0]
 801821a:	6004      	str	r4, [r0, #0]
 801821c:	e7ec      	b.n	80181f8 <_free_r+0x24>
 801821e:	4613      	mov	r3, r2
 8018220:	685a      	ldr	r2, [r3, #4]
 8018222:	b10a      	cbz	r2, 8018228 <_free_r+0x54>
 8018224:	42a2      	cmp	r2, r4
 8018226:	d9fa      	bls.n	801821e <_free_r+0x4a>
 8018228:	6819      	ldr	r1, [r3, #0]
 801822a:	1858      	adds	r0, r3, r1
 801822c:	42a0      	cmp	r0, r4
 801822e:	d10b      	bne.n	8018248 <_free_r+0x74>
 8018230:	6820      	ldr	r0, [r4, #0]
 8018232:	4401      	add	r1, r0
 8018234:	1858      	adds	r0, r3, r1
 8018236:	4282      	cmp	r2, r0
 8018238:	6019      	str	r1, [r3, #0]
 801823a:	d1dd      	bne.n	80181f8 <_free_r+0x24>
 801823c:	6810      	ldr	r0, [r2, #0]
 801823e:	6852      	ldr	r2, [r2, #4]
 8018240:	605a      	str	r2, [r3, #4]
 8018242:	4401      	add	r1, r0
 8018244:	6019      	str	r1, [r3, #0]
 8018246:	e7d7      	b.n	80181f8 <_free_r+0x24>
 8018248:	d902      	bls.n	8018250 <_free_r+0x7c>
 801824a:	230c      	movs	r3, #12
 801824c:	602b      	str	r3, [r5, #0]
 801824e:	e7d3      	b.n	80181f8 <_free_r+0x24>
 8018250:	6820      	ldr	r0, [r4, #0]
 8018252:	1821      	adds	r1, r4, r0
 8018254:	428a      	cmp	r2, r1
 8018256:	bf04      	itt	eq
 8018258:	6811      	ldreq	r1, [r2, #0]
 801825a:	6852      	ldreq	r2, [r2, #4]
 801825c:	6062      	str	r2, [r4, #4]
 801825e:	bf04      	itt	eq
 8018260:	1809      	addeq	r1, r1, r0
 8018262:	6021      	streq	r1, [r4, #0]
 8018264:	605c      	str	r4, [r3, #4]
 8018266:	e7c7      	b.n	80181f8 <_free_r+0x24>
 8018268:	bd38      	pop	{r3, r4, r5, pc}
 801826a:	bf00      	nop
 801826c:	20008bd8 	.word	0x20008bd8

08018270 <_malloc_r>:
 8018270:	b570      	push	{r4, r5, r6, lr}
 8018272:	1ccd      	adds	r5, r1, #3
 8018274:	f025 0503 	bic.w	r5, r5, #3
 8018278:	3508      	adds	r5, #8
 801827a:	2d0c      	cmp	r5, #12
 801827c:	bf38      	it	cc
 801827e:	250c      	movcc	r5, #12
 8018280:	2d00      	cmp	r5, #0
 8018282:	4606      	mov	r6, r0
 8018284:	db01      	blt.n	801828a <_malloc_r+0x1a>
 8018286:	42a9      	cmp	r1, r5
 8018288:	d903      	bls.n	8018292 <_malloc_r+0x22>
 801828a:	230c      	movs	r3, #12
 801828c:	6033      	str	r3, [r6, #0]
 801828e:	2000      	movs	r0, #0
 8018290:	bd70      	pop	{r4, r5, r6, pc}
 8018292:	f000 fd6b 	bl	8018d6c <__malloc_lock>
 8018296:	4a21      	ldr	r2, [pc, #132]	; (801831c <_malloc_r+0xac>)
 8018298:	6814      	ldr	r4, [r2, #0]
 801829a:	4621      	mov	r1, r4
 801829c:	b991      	cbnz	r1, 80182c4 <_malloc_r+0x54>
 801829e:	4c20      	ldr	r4, [pc, #128]	; (8018320 <_malloc_r+0xb0>)
 80182a0:	6823      	ldr	r3, [r4, #0]
 80182a2:	b91b      	cbnz	r3, 80182ac <_malloc_r+0x3c>
 80182a4:	4630      	mov	r0, r6
 80182a6:	f000 fb05 	bl	80188b4 <_sbrk_r>
 80182aa:	6020      	str	r0, [r4, #0]
 80182ac:	4629      	mov	r1, r5
 80182ae:	4630      	mov	r0, r6
 80182b0:	f000 fb00 	bl	80188b4 <_sbrk_r>
 80182b4:	1c43      	adds	r3, r0, #1
 80182b6:	d124      	bne.n	8018302 <_malloc_r+0x92>
 80182b8:	230c      	movs	r3, #12
 80182ba:	6033      	str	r3, [r6, #0]
 80182bc:	4630      	mov	r0, r6
 80182be:	f000 fd56 	bl	8018d6e <__malloc_unlock>
 80182c2:	e7e4      	b.n	801828e <_malloc_r+0x1e>
 80182c4:	680b      	ldr	r3, [r1, #0]
 80182c6:	1b5b      	subs	r3, r3, r5
 80182c8:	d418      	bmi.n	80182fc <_malloc_r+0x8c>
 80182ca:	2b0b      	cmp	r3, #11
 80182cc:	d90f      	bls.n	80182ee <_malloc_r+0x7e>
 80182ce:	600b      	str	r3, [r1, #0]
 80182d0:	50cd      	str	r5, [r1, r3]
 80182d2:	18cc      	adds	r4, r1, r3
 80182d4:	4630      	mov	r0, r6
 80182d6:	f000 fd4a 	bl	8018d6e <__malloc_unlock>
 80182da:	f104 000b 	add.w	r0, r4, #11
 80182de:	1d23      	adds	r3, r4, #4
 80182e0:	f020 0007 	bic.w	r0, r0, #7
 80182e4:	1ac3      	subs	r3, r0, r3
 80182e6:	d0d3      	beq.n	8018290 <_malloc_r+0x20>
 80182e8:	425a      	negs	r2, r3
 80182ea:	50e2      	str	r2, [r4, r3]
 80182ec:	e7d0      	b.n	8018290 <_malloc_r+0x20>
 80182ee:	428c      	cmp	r4, r1
 80182f0:	684b      	ldr	r3, [r1, #4]
 80182f2:	bf16      	itet	ne
 80182f4:	6063      	strne	r3, [r4, #4]
 80182f6:	6013      	streq	r3, [r2, #0]
 80182f8:	460c      	movne	r4, r1
 80182fa:	e7eb      	b.n	80182d4 <_malloc_r+0x64>
 80182fc:	460c      	mov	r4, r1
 80182fe:	6849      	ldr	r1, [r1, #4]
 8018300:	e7cc      	b.n	801829c <_malloc_r+0x2c>
 8018302:	1cc4      	adds	r4, r0, #3
 8018304:	f024 0403 	bic.w	r4, r4, #3
 8018308:	42a0      	cmp	r0, r4
 801830a:	d005      	beq.n	8018318 <_malloc_r+0xa8>
 801830c:	1a21      	subs	r1, r4, r0
 801830e:	4630      	mov	r0, r6
 8018310:	f000 fad0 	bl	80188b4 <_sbrk_r>
 8018314:	3001      	adds	r0, #1
 8018316:	d0cf      	beq.n	80182b8 <_malloc_r+0x48>
 8018318:	6025      	str	r5, [r4, #0]
 801831a:	e7db      	b.n	80182d4 <_malloc_r+0x64>
 801831c:	20008bd8 	.word	0x20008bd8
 8018320:	20008bdc 	.word	0x20008bdc

08018324 <__sfputc_r>:
 8018324:	6893      	ldr	r3, [r2, #8]
 8018326:	3b01      	subs	r3, #1
 8018328:	2b00      	cmp	r3, #0
 801832a:	b410      	push	{r4}
 801832c:	6093      	str	r3, [r2, #8]
 801832e:	da08      	bge.n	8018342 <__sfputc_r+0x1e>
 8018330:	6994      	ldr	r4, [r2, #24]
 8018332:	42a3      	cmp	r3, r4
 8018334:	db01      	blt.n	801833a <__sfputc_r+0x16>
 8018336:	290a      	cmp	r1, #10
 8018338:	d103      	bne.n	8018342 <__sfputc_r+0x1e>
 801833a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801833e:	f000 bb0d 	b.w	801895c <__swbuf_r>
 8018342:	6813      	ldr	r3, [r2, #0]
 8018344:	1c58      	adds	r0, r3, #1
 8018346:	6010      	str	r0, [r2, #0]
 8018348:	7019      	strb	r1, [r3, #0]
 801834a:	4608      	mov	r0, r1
 801834c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018350:	4770      	bx	lr

08018352 <__sfputs_r>:
 8018352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018354:	4606      	mov	r6, r0
 8018356:	460f      	mov	r7, r1
 8018358:	4614      	mov	r4, r2
 801835a:	18d5      	adds	r5, r2, r3
 801835c:	42ac      	cmp	r4, r5
 801835e:	d101      	bne.n	8018364 <__sfputs_r+0x12>
 8018360:	2000      	movs	r0, #0
 8018362:	e007      	b.n	8018374 <__sfputs_r+0x22>
 8018364:	463a      	mov	r2, r7
 8018366:	f814 1b01 	ldrb.w	r1, [r4], #1
 801836a:	4630      	mov	r0, r6
 801836c:	f7ff ffda 	bl	8018324 <__sfputc_r>
 8018370:	1c43      	adds	r3, r0, #1
 8018372:	d1f3      	bne.n	801835c <__sfputs_r+0xa>
 8018374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018378 <_vfiprintf_r>:
 8018378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801837c:	460c      	mov	r4, r1
 801837e:	b09d      	sub	sp, #116	; 0x74
 8018380:	4617      	mov	r7, r2
 8018382:	461d      	mov	r5, r3
 8018384:	4606      	mov	r6, r0
 8018386:	b118      	cbz	r0, 8018390 <_vfiprintf_r+0x18>
 8018388:	6983      	ldr	r3, [r0, #24]
 801838a:	b90b      	cbnz	r3, 8018390 <_vfiprintf_r+0x18>
 801838c:	f7ff fe90 	bl	80180b0 <__sinit>
 8018390:	4b7c      	ldr	r3, [pc, #496]	; (8018584 <_vfiprintf_r+0x20c>)
 8018392:	429c      	cmp	r4, r3
 8018394:	d158      	bne.n	8018448 <_vfiprintf_r+0xd0>
 8018396:	6874      	ldr	r4, [r6, #4]
 8018398:	89a3      	ldrh	r3, [r4, #12]
 801839a:	0718      	lsls	r0, r3, #28
 801839c:	d55e      	bpl.n	801845c <_vfiprintf_r+0xe4>
 801839e:	6923      	ldr	r3, [r4, #16]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d05b      	beq.n	801845c <_vfiprintf_r+0xe4>
 80183a4:	2300      	movs	r3, #0
 80183a6:	9309      	str	r3, [sp, #36]	; 0x24
 80183a8:	2320      	movs	r3, #32
 80183aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80183ae:	2330      	movs	r3, #48	; 0x30
 80183b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80183b4:	9503      	str	r5, [sp, #12]
 80183b6:	f04f 0b01 	mov.w	fp, #1
 80183ba:	46b8      	mov	r8, r7
 80183bc:	4645      	mov	r5, r8
 80183be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80183c2:	b10b      	cbz	r3, 80183c8 <_vfiprintf_r+0x50>
 80183c4:	2b25      	cmp	r3, #37	; 0x25
 80183c6:	d154      	bne.n	8018472 <_vfiprintf_r+0xfa>
 80183c8:	ebb8 0a07 	subs.w	sl, r8, r7
 80183cc:	d00b      	beq.n	80183e6 <_vfiprintf_r+0x6e>
 80183ce:	4653      	mov	r3, sl
 80183d0:	463a      	mov	r2, r7
 80183d2:	4621      	mov	r1, r4
 80183d4:	4630      	mov	r0, r6
 80183d6:	f7ff ffbc 	bl	8018352 <__sfputs_r>
 80183da:	3001      	adds	r0, #1
 80183dc:	f000 80c2 	beq.w	8018564 <_vfiprintf_r+0x1ec>
 80183e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183e2:	4453      	add	r3, sl
 80183e4:	9309      	str	r3, [sp, #36]	; 0x24
 80183e6:	f898 3000 	ldrb.w	r3, [r8]
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	f000 80ba 	beq.w	8018564 <_vfiprintf_r+0x1ec>
 80183f0:	2300      	movs	r3, #0
 80183f2:	f04f 32ff 	mov.w	r2, #4294967295
 80183f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80183fa:	9304      	str	r3, [sp, #16]
 80183fc:	9307      	str	r3, [sp, #28]
 80183fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018402:	931a      	str	r3, [sp, #104]	; 0x68
 8018404:	46a8      	mov	r8, r5
 8018406:	2205      	movs	r2, #5
 8018408:	f818 1b01 	ldrb.w	r1, [r8], #1
 801840c:	485e      	ldr	r0, [pc, #376]	; (8018588 <_vfiprintf_r+0x210>)
 801840e:	f7e7 ff07 	bl	8000220 <memchr>
 8018412:	9b04      	ldr	r3, [sp, #16]
 8018414:	bb78      	cbnz	r0, 8018476 <_vfiprintf_r+0xfe>
 8018416:	06d9      	lsls	r1, r3, #27
 8018418:	bf44      	itt	mi
 801841a:	2220      	movmi	r2, #32
 801841c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018420:	071a      	lsls	r2, r3, #28
 8018422:	bf44      	itt	mi
 8018424:	222b      	movmi	r2, #43	; 0x2b
 8018426:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801842a:	782a      	ldrb	r2, [r5, #0]
 801842c:	2a2a      	cmp	r2, #42	; 0x2a
 801842e:	d02a      	beq.n	8018486 <_vfiprintf_r+0x10e>
 8018430:	9a07      	ldr	r2, [sp, #28]
 8018432:	46a8      	mov	r8, r5
 8018434:	2000      	movs	r0, #0
 8018436:	250a      	movs	r5, #10
 8018438:	4641      	mov	r1, r8
 801843a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801843e:	3b30      	subs	r3, #48	; 0x30
 8018440:	2b09      	cmp	r3, #9
 8018442:	d969      	bls.n	8018518 <_vfiprintf_r+0x1a0>
 8018444:	b360      	cbz	r0, 80184a0 <_vfiprintf_r+0x128>
 8018446:	e024      	b.n	8018492 <_vfiprintf_r+0x11a>
 8018448:	4b50      	ldr	r3, [pc, #320]	; (801858c <_vfiprintf_r+0x214>)
 801844a:	429c      	cmp	r4, r3
 801844c:	d101      	bne.n	8018452 <_vfiprintf_r+0xda>
 801844e:	68b4      	ldr	r4, [r6, #8]
 8018450:	e7a2      	b.n	8018398 <_vfiprintf_r+0x20>
 8018452:	4b4f      	ldr	r3, [pc, #316]	; (8018590 <_vfiprintf_r+0x218>)
 8018454:	429c      	cmp	r4, r3
 8018456:	bf08      	it	eq
 8018458:	68f4      	ldreq	r4, [r6, #12]
 801845a:	e79d      	b.n	8018398 <_vfiprintf_r+0x20>
 801845c:	4621      	mov	r1, r4
 801845e:	4630      	mov	r0, r6
 8018460:	f000 fae0 	bl	8018a24 <__swsetup_r>
 8018464:	2800      	cmp	r0, #0
 8018466:	d09d      	beq.n	80183a4 <_vfiprintf_r+0x2c>
 8018468:	f04f 30ff 	mov.w	r0, #4294967295
 801846c:	b01d      	add	sp, #116	; 0x74
 801846e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018472:	46a8      	mov	r8, r5
 8018474:	e7a2      	b.n	80183bc <_vfiprintf_r+0x44>
 8018476:	4a44      	ldr	r2, [pc, #272]	; (8018588 <_vfiprintf_r+0x210>)
 8018478:	1a80      	subs	r0, r0, r2
 801847a:	fa0b f000 	lsl.w	r0, fp, r0
 801847e:	4318      	orrs	r0, r3
 8018480:	9004      	str	r0, [sp, #16]
 8018482:	4645      	mov	r5, r8
 8018484:	e7be      	b.n	8018404 <_vfiprintf_r+0x8c>
 8018486:	9a03      	ldr	r2, [sp, #12]
 8018488:	1d11      	adds	r1, r2, #4
 801848a:	6812      	ldr	r2, [r2, #0]
 801848c:	9103      	str	r1, [sp, #12]
 801848e:	2a00      	cmp	r2, #0
 8018490:	db01      	blt.n	8018496 <_vfiprintf_r+0x11e>
 8018492:	9207      	str	r2, [sp, #28]
 8018494:	e004      	b.n	80184a0 <_vfiprintf_r+0x128>
 8018496:	4252      	negs	r2, r2
 8018498:	f043 0302 	orr.w	r3, r3, #2
 801849c:	9207      	str	r2, [sp, #28]
 801849e:	9304      	str	r3, [sp, #16]
 80184a0:	f898 3000 	ldrb.w	r3, [r8]
 80184a4:	2b2e      	cmp	r3, #46	; 0x2e
 80184a6:	d10e      	bne.n	80184c6 <_vfiprintf_r+0x14e>
 80184a8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80184ac:	2b2a      	cmp	r3, #42	; 0x2a
 80184ae:	d138      	bne.n	8018522 <_vfiprintf_r+0x1aa>
 80184b0:	9b03      	ldr	r3, [sp, #12]
 80184b2:	1d1a      	adds	r2, r3, #4
 80184b4:	681b      	ldr	r3, [r3, #0]
 80184b6:	9203      	str	r2, [sp, #12]
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	bfb8      	it	lt
 80184bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80184c0:	f108 0802 	add.w	r8, r8, #2
 80184c4:	9305      	str	r3, [sp, #20]
 80184c6:	4d33      	ldr	r5, [pc, #204]	; (8018594 <_vfiprintf_r+0x21c>)
 80184c8:	f898 1000 	ldrb.w	r1, [r8]
 80184cc:	2203      	movs	r2, #3
 80184ce:	4628      	mov	r0, r5
 80184d0:	f7e7 fea6 	bl	8000220 <memchr>
 80184d4:	b140      	cbz	r0, 80184e8 <_vfiprintf_r+0x170>
 80184d6:	2340      	movs	r3, #64	; 0x40
 80184d8:	1b40      	subs	r0, r0, r5
 80184da:	fa03 f000 	lsl.w	r0, r3, r0
 80184de:	9b04      	ldr	r3, [sp, #16]
 80184e0:	4303      	orrs	r3, r0
 80184e2:	f108 0801 	add.w	r8, r8, #1
 80184e6:	9304      	str	r3, [sp, #16]
 80184e8:	f898 1000 	ldrb.w	r1, [r8]
 80184ec:	482a      	ldr	r0, [pc, #168]	; (8018598 <_vfiprintf_r+0x220>)
 80184ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80184f2:	2206      	movs	r2, #6
 80184f4:	f108 0701 	add.w	r7, r8, #1
 80184f8:	f7e7 fe92 	bl	8000220 <memchr>
 80184fc:	2800      	cmp	r0, #0
 80184fe:	d037      	beq.n	8018570 <_vfiprintf_r+0x1f8>
 8018500:	4b26      	ldr	r3, [pc, #152]	; (801859c <_vfiprintf_r+0x224>)
 8018502:	bb1b      	cbnz	r3, 801854c <_vfiprintf_r+0x1d4>
 8018504:	9b03      	ldr	r3, [sp, #12]
 8018506:	3307      	adds	r3, #7
 8018508:	f023 0307 	bic.w	r3, r3, #7
 801850c:	3308      	adds	r3, #8
 801850e:	9303      	str	r3, [sp, #12]
 8018510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018512:	444b      	add	r3, r9
 8018514:	9309      	str	r3, [sp, #36]	; 0x24
 8018516:	e750      	b.n	80183ba <_vfiprintf_r+0x42>
 8018518:	fb05 3202 	mla	r2, r5, r2, r3
 801851c:	2001      	movs	r0, #1
 801851e:	4688      	mov	r8, r1
 8018520:	e78a      	b.n	8018438 <_vfiprintf_r+0xc0>
 8018522:	2300      	movs	r3, #0
 8018524:	f108 0801 	add.w	r8, r8, #1
 8018528:	9305      	str	r3, [sp, #20]
 801852a:	4619      	mov	r1, r3
 801852c:	250a      	movs	r5, #10
 801852e:	4640      	mov	r0, r8
 8018530:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018534:	3a30      	subs	r2, #48	; 0x30
 8018536:	2a09      	cmp	r2, #9
 8018538:	d903      	bls.n	8018542 <_vfiprintf_r+0x1ca>
 801853a:	2b00      	cmp	r3, #0
 801853c:	d0c3      	beq.n	80184c6 <_vfiprintf_r+0x14e>
 801853e:	9105      	str	r1, [sp, #20]
 8018540:	e7c1      	b.n	80184c6 <_vfiprintf_r+0x14e>
 8018542:	fb05 2101 	mla	r1, r5, r1, r2
 8018546:	2301      	movs	r3, #1
 8018548:	4680      	mov	r8, r0
 801854a:	e7f0      	b.n	801852e <_vfiprintf_r+0x1b6>
 801854c:	ab03      	add	r3, sp, #12
 801854e:	9300      	str	r3, [sp, #0]
 8018550:	4622      	mov	r2, r4
 8018552:	4b13      	ldr	r3, [pc, #76]	; (80185a0 <_vfiprintf_r+0x228>)
 8018554:	a904      	add	r1, sp, #16
 8018556:	4630      	mov	r0, r6
 8018558:	f3af 8000 	nop.w
 801855c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018560:	4681      	mov	r9, r0
 8018562:	d1d5      	bne.n	8018510 <_vfiprintf_r+0x198>
 8018564:	89a3      	ldrh	r3, [r4, #12]
 8018566:	065b      	lsls	r3, r3, #25
 8018568:	f53f af7e 	bmi.w	8018468 <_vfiprintf_r+0xf0>
 801856c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801856e:	e77d      	b.n	801846c <_vfiprintf_r+0xf4>
 8018570:	ab03      	add	r3, sp, #12
 8018572:	9300      	str	r3, [sp, #0]
 8018574:	4622      	mov	r2, r4
 8018576:	4b0a      	ldr	r3, [pc, #40]	; (80185a0 <_vfiprintf_r+0x228>)
 8018578:	a904      	add	r1, sp, #16
 801857a:	4630      	mov	r0, r6
 801857c:	f000 f888 	bl	8018690 <_printf_i>
 8018580:	e7ec      	b.n	801855c <_vfiprintf_r+0x1e4>
 8018582:	bf00      	nop
 8018584:	08026dbc 	.word	0x08026dbc
 8018588:	08026dfc 	.word	0x08026dfc
 801858c:	08026ddc 	.word	0x08026ddc
 8018590:	08026d9c 	.word	0x08026d9c
 8018594:	08026e02 	.word	0x08026e02
 8018598:	08026e06 	.word	0x08026e06
 801859c:	00000000 	.word	0x00000000
 80185a0:	08018353 	.word	0x08018353

080185a4 <_printf_common>:
 80185a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185a8:	4691      	mov	r9, r2
 80185aa:	461f      	mov	r7, r3
 80185ac:	688a      	ldr	r2, [r1, #8]
 80185ae:	690b      	ldr	r3, [r1, #16]
 80185b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80185b4:	4293      	cmp	r3, r2
 80185b6:	bfb8      	it	lt
 80185b8:	4613      	movlt	r3, r2
 80185ba:	f8c9 3000 	str.w	r3, [r9]
 80185be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80185c2:	4606      	mov	r6, r0
 80185c4:	460c      	mov	r4, r1
 80185c6:	b112      	cbz	r2, 80185ce <_printf_common+0x2a>
 80185c8:	3301      	adds	r3, #1
 80185ca:	f8c9 3000 	str.w	r3, [r9]
 80185ce:	6823      	ldr	r3, [r4, #0]
 80185d0:	0699      	lsls	r1, r3, #26
 80185d2:	bf42      	ittt	mi
 80185d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80185d8:	3302      	addmi	r3, #2
 80185da:	f8c9 3000 	strmi.w	r3, [r9]
 80185de:	6825      	ldr	r5, [r4, #0]
 80185e0:	f015 0506 	ands.w	r5, r5, #6
 80185e4:	d107      	bne.n	80185f6 <_printf_common+0x52>
 80185e6:	f104 0a19 	add.w	sl, r4, #25
 80185ea:	68e3      	ldr	r3, [r4, #12]
 80185ec:	f8d9 2000 	ldr.w	r2, [r9]
 80185f0:	1a9b      	subs	r3, r3, r2
 80185f2:	42ab      	cmp	r3, r5
 80185f4:	dc28      	bgt.n	8018648 <_printf_common+0xa4>
 80185f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80185fa:	6822      	ldr	r2, [r4, #0]
 80185fc:	3300      	adds	r3, #0
 80185fe:	bf18      	it	ne
 8018600:	2301      	movne	r3, #1
 8018602:	0692      	lsls	r2, r2, #26
 8018604:	d42d      	bmi.n	8018662 <_printf_common+0xbe>
 8018606:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801860a:	4639      	mov	r1, r7
 801860c:	4630      	mov	r0, r6
 801860e:	47c0      	blx	r8
 8018610:	3001      	adds	r0, #1
 8018612:	d020      	beq.n	8018656 <_printf_common+0xb2>
 8018614:	6823      	ldr	r3, [r4, #0]
 8018616:	68e5      	ldr	r5, [r4, #12]
 8018618:	f8d9 2000 	ldr.w	r2, [r9]
 801861c:	f003 0306 	and.w	r3, r3, #6
 8018620:	2b04      	cmp	r3, #4
 8018622:	bf08      	it	eq
 8018624:	1aad      	subeq	r5, r5, r2
 8018626:	68a3      	ldr	r3, [r4, #8]
 8018628:	6922      	ldr	r2, [r4, #16]
 801862a:	bf0c      	ite	eq
 801862c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018630:	2500      	movne	r5, #0
 8018632:	4293      	cmp	r3, r2
 8018634:	bfc4      	itt	gt
 8018636:	1a9b      	subgt	r3, r3, r2
 8018638:	18ed      	addgt	r5, r5, r3
 801863a:	f04f 0900 	mov.w	r9, #0
 801863e:	341a      	adds	r4, #26
 8018640:	454d      	cmp	r5, r9
 8018642:	d11a      	bne.n	801867a <_printf_common+0xd6>
 8018644:	2000      	movs	r0, #0
 8018646:	e008      	b.n	801865a <_printf_common+0xb6>
 8018648:	2301      	movs	r3, #1
 801864a:	4652      	mov	r2, sl
 801864c:	4639      	mov	r1, r7
 801864e:	4630      	mov	r0, r6
 8018650:	47c0      	blx	r8
 8018652:	3001      	adds	r0, #1
 8018654:	d103      	bne.n	801865e <_printf_common+0xba>
 8018656:	f04f 30ff 	mov.w	r0, #4294967295
 801865a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801865e:	3501      	adds	r5, #1
 8018660:	e7c3      	b.n	80185ea <_printf_common+0x46>
 8018662:	18e1      	adds	r1, r4, r3
 8018664:	1c5a      	adds	r2, r3, #1
 8018666:	2030      	movs	r0, #48	; 0x30
 8018668:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801866c:	4422      	add	r2, r4
 801866e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018672:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018676:	3302      	adds	r3, #2
 8018678:	e7c5      	b.n	8018606 <_printf_common+0x62>
 801867a:	2301      	movs	r3, #1
 801867c:	4622      	mov	r2, r4
 801867e:	4639      	mov	r1, r7
 8018680:	4630      	mov	r0, r6
 8018682:	47c0      	blx	r8
 8018684:	3001      	adds	r0, #1
 8018686:	d0e6      	beq.n	8018656 <_printf_common+0xb2>
 8018688:	f109 0901 	add.w	r9, r9, #1
 801868c:	e7d8      	b.n	8018640 <_printf_common+0x9c>
	...

08018690 <_printf_i>:
 8018690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018694:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8018698:	460c      	mov	r4, r1
 801869a:	7e09      	ldrb	r1, [r1, #24]
 801869c:	b085      	sub	sp, #20
 801869e:	296e      	cmp	r1, #110	; 0x6e
 80186a0:	4617      	mov	r7, r2
 80186a2:	4606      	mov	r6, r0
 80186a4:	4698      	mov	r8, r3
 80186a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80186a8:	f000 80b3 	beq.w	8018812 <_printf_i+0x182>
 80186ac:	d822      	bhi.n	80186f4 <_printf_i+0x64>
 80186ae:	2963      	cmp	r1, #99	; 0x63
 80186b0:	d036      	beq.n	8018720 <_printf_i+0x90>
 80186b2:	d80a      	bhi.n	80186ca <_printf_i+0x3a>
 80186b4:	2900      	cmp	r1, #0
 80186b6:	f000 80b9 	beq.w	801882c <_printf_i+0x19c>
 80186ba:	2958      	cmp	r1, #88	; 0x58
 80186bc:	f000 8083 	beq.w	80187c6 <_printf_i+0x136>
 80186c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80186c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80186c8:	e032      	b.n	8018730 <_printf_i+0xa0>
 80186ca:	2964      	cmp	r1, #100	; 0x64
 80186cc:	d001      	beq.n	80186d2 <_printf_i+0x42>
 80186ce:	2969      	cmp	r1, #105	; 0x69
 80186d0:	d1f6      	bne.n	80186c0 <_printf_i+0x30>
 80186d2:	6820      	ldr	r0, [r4, #0]
 80186d4:	6813      	ldr	r3, [r2, #0]
 80186d6:	0605      	lsls	r5, r0, #24
 80186d8:	f103 0104 	add.w	r1, r3, #4
 80186dc:	d52a      	bpl.n	8018734 <_printf_i+0xa4>
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	6011      	str	r1, [r2, #0]
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	da03      	bge.n	80186ee <_printf_i+0x5e>
 80186e6:	222d      	movs	r2, #45	; 0x2d
 80186e8:	425b      	negs	r3, r3
 80186ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80186ee:	486f      	ldr	r0, [pc, #444]	; (80188ac <_printf_i+0x21c>)
 80186f0:	220a      	movs	r2, #10
 80186f2:	e039      	b.n	8018768 <_printf_i+0xd8>
 80186f4:	2973      	cmp	r1, #115	; 0x73
 80186f6:	f000 809d 	beq.w	8018834 <_printf_i+0x1a4>
 80186fa:	d808      	bhi.n	801870e <_printf_i+0x7e>
 80186fc:	296f      	cmp	r1, #111	; 0x6f
 80186fe:	d020      	beq.n	8018742 <_printf_i+0xb2>
 8018700:	2970      	cmp	r1, #112	; 0x70
 8018702:	d1dd      	bne.n	80186c0 <_printf_i+0x30>
 8018704:	6823      	ldr	r3, [r4, #0]
 8018706:	f043 0320 	orr.w	r3, r3, #32
 801870a:	6023      	str	r3, [r4, #0]
 801870c:	e003      	b.n	8018716 <_printf_i+0x86>
 801870e:	2975      	cmp	r1, #117	; 0x75
 8018710:	d017      	beq.n	8018742 <_printf_i+0xb2>
 8018712:	2978      	cmp	r1, #120	; 0x78
 8018714:	d1d4      	bne.n	80186c0 <_printf_i+0x30>
 8018716:	2378      	movs	r3, #120	; 0x78
 8018718:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801871c:	4864      	ldr	r0, [pc, #400]	; (80188b0 <_printf_i+0x220>)
 801871e:	e055      	b.n	80187cc <_printf_i+0x13c>
 8018720:	6813      	ldr	r3, [r2, #0]
 8018722:	1d19      	adds	r1, r3, #4
 8018724:	681b      	ldr	r3, [r3, #0]
 8018726:	6011      	str	r1, [r2, #0]
 8018728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801872c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018730:	2301      	movs	r3, #1
 8018732:	e08c      	b.n	801884e <_printf_i+0x1be>
 8018734:	681b      	ldr	r3, [r3, #0]
 8018736:	6011      	str	r1, [r2, #0]
 8018738:	f010 0f40 	tst.w	r0, #64	; 0x40
 801873c:	bf18      	it	ne
 801873e:	b21b      	sxthne	r3, r3
 8018740:	e7cf      	b.n	80186e2 <_printf_i+0x52>
 8018742:	6813      	ldr	r3, [r2, #0]
 8018744:	6825      	ldr	r5, [r4, #0]
 8018746:	1d18      	adds	r0, r3, #4
 8018748:	6010      	str	r0, [r2, #0]
 801874a:	0628      	lsls	r0, r5, #24
 801874c:	d501      	bpl.n	8018752 <_printf_i+0xc2>
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	e002      	b.n	8018758 <_printf_i+0xc8>
 8018752:	0668      	lsls	r0, r5, #25
 8018754:	d5fb      	bpl.n	801874e <_printf_i+0xbe>
 8018756:	881b      	ldrh	r3, [r3, #0]
 8018758:	4854      	ldr	r0, [pc, #336]	; (80188ac <_printf_i+0x21c>)
 801875a:	296f      	cmp	r1, #111	; 0x6f
 801875c:	bf14      	ite	ne
 801875e:	220a      	movne	r2, #10
 8018760:	2208      	moveq	r2, #8
 8018762:	2100      	movs	r1, #0
 8018764:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018768:	6865      	ldr	r5, [r4, #4]
 801876a:	60a5      	str	r5, [r4, #8]
 801876c:	2d00      	cmp	r5, #0
 801876e:	f2c0 8095 	blt.w	801889c <_printf_i+0x20c>
 8018772:	6821      	ldr	r1, [r4, #0]
 8018774:	f021 0104 	bic.w	r1, r1, #4
 8018778:	6021      	str	r1, [r4, #0]
 801877a:	2b00      	cmp	r3, #0
 801877c:	d13d      	bne.n	80187fa <_printf_i+0x16a>
 801877e:	2d00      	cmp	r5, #0
 8018780:	f040 808e 	bne.w	80188a0 <_printf_i+0x210>
 8018784:	4665      	mov	r5, ip
 8018786:	2a08      	cmp	r2, #8
 8018788:	d10b      	bne.n	80187a2 <_printf_i+0x112>
 801878a:	6823      	ldr	r3, [r4, #0]
 801878c:	07db      	lsls	r3, r3, #31
 801878e:	d508      	bpl.n	80187a2 <_printf_i+0x112>
 8018790:	6923      	ldr	r3, [r4, #16]
 8018792:	6862      	ldr	r2, [r4, #4]
 8018794:	429a      	cmp	r2, r3
 8018796:	bfde      	ittt	le
 8018798:	2330      	movle	r3, #48	; 0x30
 801879a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801879e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80187a2:	ebac 0305 	sub.w	r3, ip, r5
 80187a6:	6123      	str	r3, [r4, #16]
 80187a8:	f8cd 8000 	str.w	r8, [sp]
 80187ac:	463b      	mov	r3, r7
 80187ae:	aa03      	add	r2, sp, #12
 80187b0:	4621      	mov	r1, r4
 80187b2:	4630      	mov	r0, r6
 80187b4:	f7ff fef6 	bl	80185a4 <_printf_common>
 80187b8:	3001      	adds	r0, #1
 80187ba:	d14d      	bne.n	8018858 <_printf_i+0x1c8>
 80187bc:	f04f 30ff 	mov.w	r0, #4294967295
 80187c0:	b005      	add	sp, #20
 80187c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80187c6:	4839      	ldr	r0, [pc, #228]	; (80188ac <_printf_i+0x21c>)
 80187c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80187cc:	6813      	ldr	r3, [r2, #0]
 80187ce:	6821      	ldr	r1, [r4, #0]
 80187d0:	1d1d      	adds	r5, r3, #4
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	6015      	str	r5, [r2, #0]
 80187d6:	060a      	lsls	r2, r1, #24
 80187d8:	d50b      	bpl.n	80187f2 <_printf_i+0x162>
 80187da:	07ca      	lsls	r2, r1, #31
 80187dc:	bf44      	itt	mi
 80187de:	f041 0120 	orrmi.w	r1, r1, #32
 80187e2:	6021      	strmi	r1, [r4, #0]
 80187e4:	b91b      	cbnz	r3, 80187ee <_printf_i+0x15e>
 80187e6:	6822      	ldr	r2, [r4, #0]
 80187e8:	f022 0220 	bic.w	r2, r2, #32
 80187ec:	6022      	str	r2, [r4, #0]
 80187ee:	2210      	movs	r2, #16
 80187f0:	e7b7      	b.n	8018762 <_printf_i+0xd2>
 80187f2:	064d      	lsls	r5, r1, #25
 80187f4:	bf48      	it	mi
 80187f6:	b29b      	uxthmi	r3, r3
 80187f8:	e7ef      	b.n	80187da <_printf_i+0x14a>
 80187fa:	4665      	mov	r5, ip
 80187fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8018800:	fb02 3311 	mls	r3, r2, r1, r3
 8018804:	5cc3      	ldrb	r3, [r0, r3]
 8018806:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801880a:	460b      	mov	r3, r1
 801880c:	2900      	cmp	r1, #0
 801880e:	d1f5      	bne.n	80187fc <_printf_i+0x16c>
 8018810:	e7b9      	b.n	8018786 <_printf_i+0xf6>
 8018812:	6813      	ldr	r3, [r2, #0]
 8018814:	6825      	ldr	r5, [r4, #0]
 8018816:	6961      	ldr	r1, [r4, #20]
 8018818:	1d18      	adds	r0, r3, #4
 801881a:	6010      	str	r0, [r2, #0]
 801881c:	0628      	lsls	r0, r5, #24
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	d501      	bpl.n	8018826 <_printf_i+0x196>
 8018822:	6019      	str	r1, [r3, #0]
 8018824:	e002      	b.n	801882c <_printf_i+0x19c>
 8018826:	066a      	lsls	r2, r5, #25
 8018828:	d5fb      	bpl.n	8018822 <_printf_i+0x192>
 801882a:	8019      	strh	r1, [r3, #0]
 801882c:	2300      	movs	r3, #0
 801882e:	6123      	str	r3, [r4, #16]
 8018830:	4665      	mov	r5, ip
 8018832:	e7b9      	b.n	80187a8 <_printf_i+0x118>
 8018834:	6813      	ldr	r3, [r2, #0]
 8018836:	1d19      	adds	r1, r3, #4
 8018838:	6011      	str	r1, [r2, #0]
 801883a:	681d      	ldr	r5, [r3, #0]
 801883c:	6862      	ldr	r2, [r4, #4]
 801883e:	2100      	movs	r1, #0
 8018840:	4628      	mov	r0, r5
 8018842:	f7e7 fced 	bl	8000220 <memchr>
 8018846:	b108      	cbz	r0, 801884c <_printf_i+0x1bc>
 8018848:	1b40      	subs	r0, r0, r5
 801884a:	6060      	str	r0, [r4, #4]
 801884c:	6863      	ldr	r3, [r4, #4]
 801884e:	6123      	str	r3, [r4, #16]
 8018850:	2300      	movs	r3, #0
 8018852:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018856:	e7a7      	b.n	80187a8 <_printf_i+0x118>
 8018858:	6923      	ldr	r3, [r4, #16]
 801885a:	462a      	mov	r2, r5
 801885c:	4639      	mov	r1, r7
 801885e:	4630      	mov	r0, r6
 8018860:	47c0      	blx	r8
 8018862:	3001      	adds	r0, #1
 8018864:	d0aa      	beq.n	80187bc <_printf_i+0x12c>
 8018866:	6823      	ldr	r3, [r4, #0]
 8018868:	079b      	lsls	r3, r3, #30
 801886a:	d413      	bmi.n	8018894 <_printf_i+0x204>
 801886c:	68e0      	ldr	r0, [r4, #12]
 801886e:	9b03      	ldr	r3, [sp, #12]
 8018870:	4298      	cmp	r0, r3
 8018872:	bfb8      	it	lt
 8018874:	4618      	movlt	r0, r3
 8018876:	e7a3      	b.n	80187c0 <_printf_i+0x130>
 8018878:	2301      	movs	r3, #1
 801887a:	464a      	mov	r2, r9
 801887c:	4639      	mov	r1, r7
 801887e:	4630      	mov	r0, r6
 8018880:	47c0      	blx	r8
 8018882:	3001      	adds	r0, #1
 8018884:	d09a      	beq.n	80187bc <_printf_i+0x12c>
 8018886:	3501      	adds	r5, #1
 8018888:	68e3      	ldr	r3, [r4, #12]
 801888a:	9a03      	ldr	r2, [sp, #12]
 801888c:	1a9b      	subs	r3, r3, r2
 801888e:	42ab      	cmp	r3, r5
 8018890:	dcf2      	bgt.n	8018878 <_printf_i+0x1e8>
 8018892:	e7eb      	b.n	801886c <_printf_i+0x1dc>
 8018894:	2500      	movs	r5, #0
 8018896:	f104 0919 	add.w	r9, r4, #25
 801889a:	e7f5      	b.n	8018888 <_printf_i+0x1f8>
 801889c:	2b00      	cmp	r3, #0
 801889e:	d1ac      	bne.n	80187fa <_printf_i+0x16a>
 80188a0:	7803      	ldrb	r3, [r0, #0]
 80188a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80188a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80188aa:	e76c      	b.n	8018786 <_printf_i+0xf6>
 80188ac:	08026e0d 	.word	0x08026e0d
 80188b0:	08026e1e 	.word	0x08026e1e

080188b4 <_sbrk_r>:
 80188b4:	b538      	push	{r3, r4, r5, lr}
 80188b6:	4c06      	ldr	r4, [pc, #24]	; (80188d0 <_sbrk_r+0x1c>)
 80188b8:	2300      	movs	r3, #0
 80188ba:	4605      	mov	r5, r0
 80188bc:	4608      	mov	r0, r1
 80188be:	6023      	str	r3, [r4, #0]
 80188c0:	f7e8 f9ae 	bl	8000c20 <_sbrk>
 80188c4:	1c43      	adds	r3, r0, #1
 80188c6:	d102      	bne.n	80188ce <_sbrk_r+0x1a>
 80188c8:	6823      	ldr	r3, [r4, #0]
 80188ca:	b103      	cbz	r3, 80188ce <_sbrk_r+0x1a>
 80188cc:	602b      	str	r3, [r5, #0]
 80188ce:	bd38      	pop	{r3, r4, r5, pc}
 80188d0:	2000f558 	.word	0x2000f558

080188d4 <__sread>:
 80188d4:	b510      	push	{r4, lr}
 80188d6:	460c      	mov	r4, r1
 80188d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80188dc:	f000 fa48 	bl	8018d70 <_read_r>
 80188e0:	2800      	cmp	r0, #0
 80188e2:	bfab      	itete	ge
 80188e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80188e6:	89a3      	ldrhlt	r3, [r4, #12]
 80188e8:	181b      	addge	r3, r3, r0
 80188ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80188ee:	bfac      	ite	ge
 80188f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80188f2:	81a3      	strhlt	r3, [r4, #12]
 80188f4:	bd10      	pop	{r4, pc}

080188f6 <__swrite>:
 80188f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188fa:	461f      	mov	r7, r3
 80188fc:	898b      	ldrh	r3, [r1, #12]
 80188fe:	05db      	lsls	r3, r3, #23
 8018900:	4605      	mov	r5, r0
 8018902:	460c      	mov	r4, r1
 8018904:	4616      	mov	r6, r2
 8018906:	d505      	bpl.n	8018914 <__swrite+0x1e>
 8018908:	2302      	movs	r3, #2
 801890a:	2200      	movs	r2, #0
 801890c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018910:	f000 f9b6 	bl	8018c80 <_lseek_r>
 8018914:	89a3      	ldrh	r3, [r4, #12]
 8018916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801891a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801891e:	81a3      	strh	r3, [r4, #12]
 8018920:	4632      	mov	r2, r6
 8018922:	463b      	mov	r3, r7
 8018924:	4628      	mov	r0, r5
 8018926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801892a:	f000 b869 	b.w	8018a00 <_write_r>

0801892e <__sseek>:
 801892e:	b510      	push	{r4, lr}
 8018930:	460c      	mov	r4, r1
 8018932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018936:	f000 f9a3 	bl	8018c80 <_lseek_r>
 801893a:	1c43      	adds	r3, r0, #1
 801893c:	89a3      	ldrh	r3, [r4, #12]
 801893e:	bf15      	itete	ne
 8018940:	6560      	strne	r0, [r4, #84]	; 0x54
 8018942:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018946:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801894a:	81a3      	strheq	r3, [r4, #12]
 801894c:	bf18      	it	ne
 801894e:	81a3      	strhne	r3, [r4, #12]
 8018950:	bd10      	pop	{r4, pc}

08018952 <__sclose>:
 8018952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018956:	f000 b8d3 	b.w	8018b00 <_close_r>
	...

0801895c <__swbuf_r>:
 801895c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801895e:	460e      	mov	r6, r1
 8018960:	4614      	mov	r4, r2
 8018962:	4605      	mov	r5, r0
 8018964:	b118      	cbz	r0, 801896e <__swbuf_r+0x12>
 8018966:	6983      	ldr	r3, [r0, #24]
 8018968:	b90b      	cbnz	r3, 801896e <__swbuf_r+0x12>
 801896a:	f7ff fba1 	bl	80180b0 <__sinit>
 801896e:	4b21      	ldr	r3, [pc, #132]	; (80189f4 <__swbuf_r+0x98>)
 8018970:	429c      	cmp	r4, r3
 8018972:	d12a      	bne.n	80189ca <__swbuf_r+0x6e>
 8018974:	686c      	ldr	r4, [r5, #4]
 8018976:	69a3      	ldr	r3, [r4, #24]
 8018978:	60a3      	str	r3, [r4, #8]
 801897a:	89a3      	ldrh	r3, [r4, #12]
 801897c:	071a      	lsls	r2, r3, #28
 801897e:	d52e      	bpl.n	80189de <__swbuf_r+0x82>
 8018980:	6923      	ldr	r3, [r4, #16]
 8018982:	b363      	cbz	r3, 80189de <__swbuf_r+0x82>
 8018984:	6923      	ldr	r3, [r4, #16]
 8018986:	6820      	ldr	r0, [r4, #0]
 8018988:	1ac0      	subs	r0, r0, r3
 801898a:	6963      	ldr	r3, [r4, #20]
 801898c:	b2f6      	uxtb	r6, r6
 801898e:	4283      	cmp	r3, r0
 8018990:	4637      	mov	r7, r6
 8018992:	dc04      	bgt.n	801899e <__swbuf_r+0x42>
 8018994:	4621      	mov	r1, r4
 8018996:	4628      	mov	r0, r5
 8018998:	f000 f948 	bl	8018c2c <_fflush_r>
 801899c:	bb28      	cbnz	r0, 80189ea <__swbuf_r+0x8e>
 801899e:	68a3      	ldr	r3, [r4, #8]
 80189a0:	3b01      	subs	r3, #1
 80189a2:	60a3      	str	r3, [r4, #8]
 80189a4:	6823      	ldr	r3, [r4, #0]
 80189a6:	1c5a      	adds	r2, r3, #1
 80189a8:	6022      	str	r2, [r4, #0]
 80189aa:	701e      	strb	r6, [r3, #0]
 80189ac:	6963      	ldr	r3, [r4, #20]
 80189ae:	3001      	adds	r0, #1
 80189b0:	4283      	cmp	r3, r0
 80189b2:	d004      	beq.n	80189be <__swbuf_r+0x62>
 80189b4:	89a3      	ldrh	r3, [r4, #12]
 80189b6:	07db      	lsls	r3, r3, #31
 80189b8:	d519      	bpl.n	80189ee <__swbuf_r+0x92>
 80189ba:	2e0a      	cmp	r6, #10
 80189bc:	d117      	bne.n	80189ee <__swbuf_r+0x92>
 80189be:	4621      	mov	r1, r4
 80189c0:	4628      	mov	r0, r5
 80189c2:	f000 f933 	bl	8018c2c <_fflush_r>
 80189c6:	b190      	cbz	r0, 80189ee <__swbuf_r+0x92>
 80189c8:	e00f      	b.n	80189ea <__swbuf_r+0x8e>
 80189ca:	4b0b      	ldr	r3, [pc, #44]	; (80189f8 <__swbuf_r+0x9c>)
 80189cc:	429c      	cmp	r4, r3
 80189ce:	d101      	bne.n	80189d4 <__swbuf_r+0x78>
 80189d0:	68ac      	ldr	r4, [r5, #8]
 80189d2:	e7d0      	b.n	8018976 <__swbuf_r+0x1a>
 80189d4:	4b09      	ldr	r3, [pc, #36]	; (80189fc <__swbuf_r+0xa0>)
 80189d6:	429c      	cmp	r4, r3
 80189d8:	bf08      	it	eq
 80189da:	68ec      	ldreq	r4, [r5, #12]
 80189dc:	e7cb      	b.n	8018976 <__swbuf_r+0x1a>
 80189de:	4621      	mov	r1, r4
 80189e0:	4628      	mov	r0, r5
 80189e2:	f000 f81f 	bl	8018a24 <__swsetup_r>
 80189e6:	2800      	cmp	r0, #0
 80189e8:	d0cc      	beq.n	8018984 <__swbuf_r+0x28>
 80189ea:	f04f 37ff 	mov.w	r7, #4294967295
 80189ee:	4638      	mov	r0, r7
 80189f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80189f2:	bf00      	nop
 80189f4:	08026dbc 	.word	0x08026dbc
 80189f8:	08026ddc 	.word	0x08026ddc
 80189fc:	08026d9c 	.word	0x08026d9c

08018a00 <_write_r>:
 8018a00:	b538      	push	{r3, r4, r5, lr}
 8018a02:	4c07      	ldr	r4, [pc, #28]	; (8018a20 <_write_r+0x20>)
 8018a04:	4605      	mov	r5, r0
 8018a06:	4608      	mov	r0, r1
 8018a08:	4611      	mov	r1, r2
 8018a0a:	2200      	movs	r2, #0
 8018a0c:	6022      	str	r2, [r4, #0]
 8018a0e:	461a      	mov	r2, r3
 8018a10:	f7e8 f8b5 	bl	8000b7e <_write>
 8018a14:	1c43      	adds	r3, r0, #1
 8018a16:	d102      	bne.n	8018a1e <_write_r+0x1e>
 8018a18:	6823      	ldr	r3, [r4, #0]
 8018a1a:	b103      	cbz	r3, 8018a1e <_write_r+0x1e>
 8018a1c:	602b      	str	r3, [r5, #0]
 8018a1e:	bd38      	pop	{r3, r4, r5, pc}
 8018a20:	2000f558 	.word	0x2000f558

08018a24 <__swsetup_r>:
 8018a24:	4b32      	ldr	r3, [pc, #200]	; (8018af0 <__swsetup_r+0xcc>)
 8018a26:	b570      	push	{r4, r5, r6, lr}
 8018a28:	681d      	ldr	r5, [r3, #0]
 8018a2a:	4606      	mov	r6, r0
 8018a2c:	460c      	mov	r4, r1
 8018a2e:	b125      	cbz	r5, 8018a3a <__swsetup_r+0x16>
 8018a30:	69ab      	ldr	r3, [r5, #24]
 8018a32:	b913      	cbnz	r3, 8018a3a <__swsetup_r+0x16>
 8018a34:	4628      	mov	r0, r5
 8018a36:	f7ff fb3b 	bl	80180b0 <__sinit>
 8018a3a:	4b2e      	ldr	r3, [pc, #184]	; (8018af4 <__swsetup_r+0xd0>)
 8018a3c:	429c      	cmp	r4, r3
 8018a3e:	d10f      	bne.n	8018a60 <__swsetup_r+0x3c>
 8018a40:	686c      	ldr	r4, [r5, #4]
 8018a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a46:	b29a      	uxth	r2, r3
 8018a48:	0715      	lsls	r5, r2, #28
 8018a4a:	d42c      	bmi.n	8018aa6 <__swsetup_r+0x82>
 8018a4c:	06d0      	lsls	r0, r2, #27
 8018a4e:	d411      	bmi.n	8018a74 <__swsetup_r+0x50>
 8018a50:	2209      	movs	r2, #9
 8018a52:	6032      	str	r2, [r6, #0]
 8018a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a58:	81a3      	strh	r3, [r4, #12]
 8018a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8018a5e:	e03e      	b.n	8018ade <__swsetup_r+0xba>
 8018a60:	4b25      	ldr	r3, [pc, #148]	; (8018af8 <__swsetup_r+0xd4>)
 8018a62:	429c      	cmp	r4, r3
 8018a64:	d101      	bne.n	8018a6a <__swsetup_r+0x46>
 8018a66:	68ac      	ldr	r4, [r5, #8]
 8018a68:	e7eb      	b.n	8018a42 <__swsetup_r+0x1e>
 8018a6a:	4b24      	ldr	r3, [pc, #144]	; (8018afc <__swsetup_r+0xd8>)
 8018a6c:	429c      	cmp	r4, r3
 8018a6e:	bf08      	it	eq
 8018a70:	68ec      	ldreq	r4, [r5, #12]
 8018a72:	e7e6      	b.n	8018a42 <__swsetup_r+0x1e>
 8018a74:	0751      	lsls	r1, r2, #29
 8018a76:	d512      	bpl.n	8018a9e <__swsetup_r+0x7a>
 8018a78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018a7a:	b141      	cbz	r1, 8018a8e <__swsetup_r+0x6a>
 8018a7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018a80:	4299      	cmp	r1, r3
 8018a82:	d002      	beq.n	8018a8a <__swsetup_r+0x66>
 8018a84:	4630      	mov	r0, r6
 8018a86:	f7ff fba5 	bl	80181d4 <_free_r>
 8018a8a:	2300      	movs	r3, #0
 8018a8c:	6363      	str	r3, [r4, #52]	; 0x34
 8018a8e:	89a3      	ldrh	r3, [r4, #12]
 8018a90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018a94:	81a3      	strh	r3, [r4, #12]
 8018a96:	2300      	movs	r3, #0
 8018a98:	6063      	str	r3, [r4, #4]
 8018a9a:	6923      	ldr	r3, [r4, #16]
 8018a9c:	6023      	str	r3, [r4, #0]
 8018a9e:	89a3      	ldrh	r3, [r4, #12]
 8018aa0:	f043 0308 	orr.w	r3, r3, #8
 8018aa4:	81a3      	strh	r3, [r4, #12]
 8018aa6:	6923      	ldr	r3, [r4, #16]
 8018aa8:	b94b      	cbnz	r3, 8018abe <__swsetup_r+0x9a>
 8018aaa:	89a3      	ldrh	r3, [r4, #12]
 8018aac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018ab4:	d003      	beq.n	8018abe <__swsetup_r+0x9a>
 8018ab6:	4621      	mov	r1, r4
 8018ab8:	4630      	mov	r0, r6
 8018aba:	f000 f917 	bl	8018cec <__smakebuf_r>
 8018abe:	89a2      	ldrh	r2, [r4, #12]
 8018ac0:	f012 0301 	ands.w	r3, r2, #1
 8018ac4:	d00c      	beq.n	8018ae0 <__swsetup_r+0xbc>
 8018ac6:	2300      	movs	r3, #0
 8018ac8:	60a3      	str	r3, [r4, #8]
 8018aca:	6963      	ldr	r3, [r4, #20]
 8018acc:	425b      	negs	r3, r3
 8018ace:	61a3      	str	r3, [r4, #24]
 8018ad0:	6923      	ldr	r3, [r4, #16]
 8018ad2:	b953      	cbnz	r3, 8018aea <__swsetup_r+0xc6>
 8018ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018ad8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8018adc:	d1ba      	bne.n	8018a54 <__swsetup_r+0x30>
 8018ade:	bd70      	pop	{r4, r5, r6, pc}
 8018ae0:	0792      	lsls	r2, r2, #30
 8018ae2:	bf58      	it	pl
 8018ae4:	6963      	ldrpl	r3, [r4, #20]
 8018ae6:	60a3      	str	r3, [r4, #8]
 8018ae8:	e7f2      	b.n	8018ad0 <__swsetup_r+0xac>
 8018aea:	2000      	movs	r0, #0
 8018aec:	e7f7      	b.n	8018ade <__swsetup_r+0xba>
 8018aee:	bf00      	nop
 8018af0:	20000020 	.word	0x20000020
 8018af4:	08026dbc 	.word	0x08026dbc
 8018af8:	08026ddc 	.word	0x08026ddc
 8018afc:	08026d9c 	.word	0x08026d9c

08018b00 <_close_r>:
 8018b00:	b538      	push	{r3, r4, r5, lr}
 8018b02:	4c06      	ldr	r4, [pc, #24]	; (8018b1c <_close_r+0x1c>)
 8018b04:	2300      	movs	r3, #0
 8018b06:	4605      	mov	r5, r0
 8018b08:	4608      	mov	r0, r1
 8018b0a:	6023      	str	r3, [r4, #0]
 8018b0c:	f7e8 f853 	bl	8000bb6 <_close>
 8018b10:	1c43      	adds	r3, r0, #1
 8018b12:	d102      	bne.n	8018b1a <_close_r+0x1a>
 8018b14:	6823      	ldr	r3, [r4, #0]
 8018b16:	b103      	cbz	r3, 8018b1a <_close_r+0x1a>
 8018b18:	602b      	str	r3, [r5, #0]
 8018b1a:	bd38      	pop	{r3, r4, r5, pc}
 8018b1c:	2000f558 	.word	0x2000f558

08018b20 <__sflush_r>:
 8018b20:	898a      	ldrh	r2, [r1, #12]
 8018b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b26:	4605      	mov	r5, r0
 8018b28:	0710      	lsls	r0, r2, #28
 8018b2a:	460c      	mov	r4, r1
 8018b2c:	d458      	bmi.n	8018be0 <__sflush_r+0xc0>
 8018b2e:	684b      	ldr	r3, [r1, #4]
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	dc05      	bgt.n	8018b40 <__sflush_r+0x20>
 8018b34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	dc02      	bgt.n	8018b40 <__sflush_r+0x20>
 8018b3a:	2000      	movs	r0, #0
 8018b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018b42:	2e00      	cmp	r6, #0
 8018b44:	d0f9      	beq.n	8018b3a <__sflush_r+0x1a>
 8018b46:	2300      	movs	r3, #0
 8018b48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018b4c:	682f      	ldr	r7, [r5, #0]
 8018b4e:	6a21      	ldr	r1, [r4, #32]
 8018b50:	602b      	str	r3, [r5, #0]
 8018b52:	d032      	beq.n	8018bba <__sflush_r+0x9a>
 8018b54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018b56:	89a3      	ldrh	r3, [r4, #12]
 8018b58:	075a      	lsls	r2, r3, #29
 8018b5a:	d505      	bpl.n	8018b68 <__sflush_r+0x48>
 8018b5c:	6863      	ldr	r3, [r4, #4]
 8018b5e:	1ac0      	subs	r0, r0, r3
 8018b60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018b62:	b10b      	cbz	r3, 8018b68 <__sflush_r+0x48>
 8018b64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018b66:	1ac0      	subs	r0, r0, r3
 8018b68:	2300      	movs	r3, #0
 8018b6a:	4602      	mov	r2, r0
 8018b6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018b6e:	6a21      	ldr	r1, [r4, #32]
 8018b70:	4628      	mov	r0, r5
 8018b72:	47b0      	blx	r6
 8018b74:	1c43      	adds	r3, r0, #1
 8018b76:	89a3      	ldrh	r3, [r4, #12]
 8018b78:	d106      	bne.n	8018b88 <__sflush_r+0x68>
 8018b7a:	6829      	ldr	r1, [r5, #0]
 8018b7c:	291d      	cmp	r1, #29
 8018b7e:	d848      	bhi.n	8018c12 <__sflush_r+0xf2>
 8018b80:	4a29      	ldr	r2, [pc, #164]	; (8018c28 <__sflush_r+0x108>)
 8018b82:	40ca      	lsrs	r2, r1
 8018b84:	07d6      	lsls	r6, r2, #31
 8018b86:	d544      	bpl.n	8018c12 <__sflush_r+0xf2>
 8018b88:	2200      	movs	r2, #0
 8018b8a:	6062      	str	r2, [r4, #4]
 8018b8c:	04d9      	lsls	r1, r3, #19
 8018b8e:	6922      	ldr	r2, [r4, #16]
 8018b90:	6022      	str	r2, [r4, #0]
 8018b92:	d504      	bpl.n	8018b9e <__sflush_r+0x7e>
 8018b94:	1c42      	adds	r2, r0, #1
 8018b96:	d101      	bne.n	8018b9c <__sflush_r+0x7c>
 8018b98:	682b      	ldr	r3, [r5, #0]
 8018b9a:	b903      	cbnz	r3, 8018b9e <__sflush_r+0x7e>
 8018b9c:	6560      	str	r0, [r4, #84]	; 0x54
 8018b9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018ba0:	602f      	str	r7, [r5, #0]
 8018ba2:	2900      	cmp	r1, #0
 8018ba4:	d0c9      	beq.n	8018b3a <__sflush_r+0x1a>
 8018ba6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018baa:	4299      	cmp	r1, r3
 8018bac:	d002      	beq.n	8018bb4 <__sflush_r+0x94>
 8018bae:	4628      	mov	r0, r5
 8018bb0:	f7ff fb10 	bl	80181d4 <_free_r>
 8018bb4:	2000      	movs	r0, #0
 8018bb6:	6360      	str	r0, [r4, #52]	; 0x34
 8018bb8:	e7c0      	b.n	8018b3c <__sflush_r+0x1c>
 8018bba:	2301      	movs	r3, #1
 8018bbc:	4628      	mov	r0, r5
 8018bbe:	47b0      	blx	r6
 8018bc0:	1c41      	adds	r1, r0, #1
 8018bc2:	d1c8      	bne.n	8018b56 <__sflush_r+0x36>
 8018bc4:	682b      	ldr	r3, [r5, #0]
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	d0c5      	beq.n	8018b56 <__sflush_r+0x36>
 8018bca:	2b1d      	cmp	r3, #29
 8018bcc:	d001      	beq.n	8018bd2 <__sflush_r+0xb2>
 8018bce:	2b16      	cmp	r3, #22
 8018bd0:	d101      	bne.n	8018bd6 <__sflush_r+0xb6>
 8018bd2:	602f      	str	r7, [r5, #0]
 8018bd4:	e7b1      	b.n	8018b3a <__sflush_r+0x1a>
 8018bd6:	89a3      	ldrh	r3, [r4, #12]
 8018bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018bdc:	81a3      	strh	r3, [r4, #12]
 8018bde:	e7ad      	b.n	8018b3c <__sflush_r+0x1c>
 8018be0:	690f      	ldr	r7, [r1, #16]
 8018be2:	2f00      	cmp	r7, #0
 8018be4:	d0a9      	beq.n	8018b3a <__sflush_r+0x1a>
 8018be6:	0793      	lsls	r3, r2, #30
 8018be8:	680e      	ldr	r6, [r1, #0]
 8018bea:	bf08      	it	eq
 8018bec:	694b      	ldreq	r3, [r1, #20]
 8018bee:	600f      	str	r7, [r1, #0]
 8018bf0:	bf18      	it	ne
 8018bf2:	2300      	movne	r3, #0
 8018bf4:	eba6 0807 	sub.w	r8, r6, r7
 8018bf8:	608b      	str	r3, [r1, #8]
 8018bfa:	f1b8 0f00 	cmp.w	r8, #0
 8018bfe:	dd9c      	ble.n	8018b3a <__sflush_r+0x1a>
 8018c00:	4643      	mov	r3, r8
 8018c02:	463a      	mov	r2, r7
 8018c04:	6a21      	ldr	r1, [r4, #32]
 8018c06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018c08:	4628      	mov	r0, r5
 8018c0a:	47b0      	blx	r6
 8018c0c:	2800      	cmp	r0, #0
 8018c0e:	dc06      	bgt.n	8018c1e <__sflush_r+0xfe>
 8018c10:	89a3      	ldrh	r3, [r4, #12]
 8018c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c16:	81a3      	strh	r3, [r4, #12]
 8018c18:	f04f 30ff 	mov.w	r0, #4294967295
 8018c1c:	e78e      	b.n	8018b3c <__sflush_r+0x1c>
 8018c1e:	4407      	add	r7, r0
 8018c20:	eba8 0800 	sub.w	r8, r8, r0
 8018c24:	e7e9      	b.n	8018bfa <__sflush_r+0xda>
 8018c26:	bf00      	nop
 8018c28:	20400001 	.word	0x20400001

08018c2c <_fflush_r>:
 8018c2c:	b538      	push	{r3, r4, r5, lr}
 8018c2e:	690b      	ldr	r3, [r1, #16]
 8018c30:	4605      	mov	r5, r0
 8018c32:	460c      	mov	r4, r1
 8018c34:	b1db      	cbz	r3, 8018c6e <_fflush_r+0x42>
 8018c36:	b118      	cbz	r0, 8018c40 <_fflush_r+0x14>
 8018c38:	6983      	ldr	r3, [r0, #24]
 8018c3a:	b90b      	cbnz	r3, 8018c40 <_fflush_r+0x14>
 8018c3c:	f7ff fa38 	bl	80180b0 <__sinit>
 8018c40:	4b0c      	ldr	r3, [pc, #48]	; (8018c74 <_fflush_r+0x48>)
 8018c42:	429c      	cmp	r4, r3
 8018c44:	d109      	bne.n	8018c5a <_fflush_r+0x2e>
 8018c46:	686c      	ldr	r4, [r5, #4]
 8018c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c4c:	b17b      	cbz	r3, 8018c6e <_fflush_r+0x42>
 8018c4e:	4621      	mov	r1, r4
 8018c50:	4628      	mov	r0, r5
 8018c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018c56:	f7ff bf63 	b.w	8018b20 <__sflush_r>
 8018c5a:	4b07      	ldr	r3, [pc, #28]	; (8018c78 <_fflush_r+0x4c>)
 8018c5c:	429c      	cmp	r4, r3
 8018c5e:	d101      	bne.n	8018c64 <_fflush_r+0x38>
 8018c60:	68ac      	ldr	r4, [r5, #8]
 8018c62:	e7f1      	b.n	8018c48 <_fflush_r+0x1c>
 8018c64:	4b05      	ldr	r3, [pc, #20]	; (8018c7c <_fflush_r+0x50>)
 8018c66:	429c      	cmp	r4, r3
 8018c68:	bf08      	it	eq
 8018c6a:	68ec      	ldreq	r4, [r5, #12]
 8018c6c:	e7ec      	b.n	8018c48 <_fflush_r+0x1c>
 8018c6e:	2000      	movs	r0, #0
 8018c70:	bd38      	pop	{r3, r4, r5, pc}
 8018c72:	bf00      	nop
 8018c74:	08026dbc 	.word	0x08026dbc
 8018c78:	08026ddc 	.word	0x08026ddc
 8018c7c:	08026d9c 	.word	0x08026d9c

08018c80 <_lseek_r>:
 8018c80:	b538      	push	{r3, r4, r5, lr}
 8018c82:	4c07      	ldr	r4, [pc, #28]	; (8018ca0 <_lseek_r+0x20>)
 8018c84:	4605      	mov	r5, r0
 8018c86:	4608      	mov	r0, r1
 8018c88:	4611      	mov	r1, r2
 8018c8a:	2200      	movs	r2, #0
 8018c8c:	6022      	str	r2, [r4, #0]
 8018c8e:	461a      	mov	r2, r3
 8018c90:	f7e7 ffb8 	bl	8000c04 <_lseek>
 8018c94:	1c43      	adds	r3, r0, #1
 8018c96:	d102      	bne.n	8018c9e <_lseek_r+0x1e>
 8018c98:	6823      	ldr	r3, [r4, #0]
 8018c9a:	b103      	cbz	r3, 8018c9e <_lseek_r+0x1e>
 8018c9c:	602b      	str	r3, [r5, #0]
 8018c9e:	bd38      	pop	{r3, r4, r5, pc}
 8018ca0:	2000f558 	.word	0x2000f558

08018ca4 <__swhatbuf_r>:
 8018ca4:	b570      	push	{r4, r5, r6, lr}
 8018ca6:	460e      	mov	r6, r1
 8018ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018cac:	2900      	cmp	r1, #0
 8018cae:	b096      	sub	sp, #88	; 0x58
 8018cb0:	4614      	mov	r4, r2
 8018cb2:	461d      	mov	r5, r3
 8018cb4:	da07      	bge.n	8018cc6 <__swhatbuf_r+0x22>
 8018cb6:	2300      	movs	r3, #0
 8018cb8:	602b      	str	r3, [r5, #0]
 8018cba:	89b3      	ldrh	r3, [r6, #12]
 8018cbc:	061a      	lsls	r2, r3, #24
 8018cbe:	d410      	bmi.n	8018ce2 <__swhatbuf_r+0x3e>
 8018cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018cc4:	e00e      	b.n	8018ce4 <__swhatbuf_r+0x40>
 8018cc6:	466a      	mov	r2, sp
 8018cc8:	f000 f864 	bl	8018d94 <_fstat_r>
 8018ccc:	2800      	cmp	r0, #0
 8018cce:	dbf2      	blt.n	8018cb6 <__swhatbuf_r+0x12>
 8018cd0:	9a01      	ldr	r2, [sp, #4]
 8018cd2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018cd6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018cda:	425a      	negs	r2, r3
 8018cdc:	415a      	adcs	r2, r3
 8018cde:	602a      	str	r2, [r5, #0]
 8018ce0:	e7ee      	b.n	8018cc0 <__swhatbuf_r+0x1c>
 8018ce2:	2340      	movs	r3, #64	; 0x40
 8018ce4:	2000      	movs	r0, #0
 8018ce6:	6023      	str	r3, [r4, #0]
 8018ce8:	b016      	add	sp, #88	; 0x58
 8018cea:	bd70      	pop	{r4, r5, r6, pc}

08018cec <__smakebuf_r>:
 8018cec:	898b      	ldrh	r3, [r1, #12]
 8018cee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018cf0:	079d      	lsls	r5, r3, #30
 8018cf2:	4606      	mov	r6, r0
 8018cf4:	460c      	mov	r4, r1
 8018cf6:	d507      	bpl.n	8018d08 <__smakebuf_r+0x1c>
 8018cf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018cfc:	6023      	str	r3, [r4, #0]
 8018cfe:	6123      	str	r3, [r4, #16]
 8018d00:	2301      	movs	r3, #1
 8018d02:	6163      	str	r3, [r4, #20]
 8018d04:	b002      	add	sp, #8
 8018d06:	bd70      	pop	{r4, r5, r6, pc}
 8018d08:	ab01      	add	r3, sp, #4
 8018d0a:	466a      	mov	r2, sp
 8018d0c:	f7ff ffca 	bl	8018ca4 <__swhatbuf_r>
 8018d10:	9900      	ldr	r1, [sp, #0]
 8018d12:	4605      	mov	r5, r0
 8018d14:	4630      	mov	r0, r6
 8018d16:	f7ff faab 	bl	8018270 <_malloc_r>
 8018d1a:	b948      	cbnz	r0, 8018d30 <__smakebuf_r+0x44>
 8018d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018d20:	059a      	lsls	r2, r3, #22
 8018d22:	d4ef      	bmi.n	8018d04 <__smakebuf_r+0x18>
 8018d24:	f023 0303 	bic.w	r3, r3, #3
 8018d28:	f043 0302 	orr.w	r3, r3, #2
 8018d2c:	81a3      	strh	r3, [r4, #12]
 8018d2e:	e7e3      	b.n	8018cf8 <__smakebuf_r+0xc>
 8018d30:	4b0d      	ldr	r3, [pc, #52]	; (8018d68 <__smakebuf_r+0x7c>)
 8018d32:	62b3      	str	r3, [r6, #40]	; 0x28
 8018d34:	89a3      	ldrh	r3, [r4, #12]
 8018d36:	6020      	str	r0, [r4, #0]
 8018d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018d3c:	81a3      	strh	r3, [r4, #12]
 8018d3e:	9b00      	ldr	r3, [sp, #0]
 8018d40:	6163      	str	r3, [r4, #20]
 8018d42:	9b01      	ldr	r3, [sp, #4]
 8018d44:	6120      	str	r0, [r4, #16]
 8018d46:	b15b      	cbz	r3, 8018d60 <__smakebuf_r+0x74>
 8018d48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018d4c:	4630      	mov	r0, r6
 8018d4e:	f000 f833 	bl	8018db8 <_isatty_r>
 8018d52:	b128      	cbz	r0, 8018d60 <__smakebuf_r+0x74>
 8018d54:	89a3      	ldrh	r3, [r4, #12]
 8018d56:	f023 0303 	bic.w	r3, r3, #3
 8018d5a:	f043 0301 	orr.w	r3, r3, #1
 8018d5e:	81a3      	strh	r3, [r4, #12]
 8018d60:	89a3      	ldrh	r3, [r4, #12]
 8018d62:	431d      	orrs	r5, r3
 8018d64:	81a5      	strh	r5, [r4, #12]
 8018d66:	e7cd      	b.n	8018d04 <__smakebuf_r+0x18>
 8018d68:	08018079 	.word	0x08018079

08018d6c <__malloc_lock>:
 8018d6c:	4770      	bx	lr

08018d6e <__malloc_unlock>:
 8018d6e:	4770      	bx	lr

08018d70 <_read_r>:
 8018d70:	b538      	push	{r3, r4, r5, lr}
 8018d72:	4c07      	ldr	r4, [pc, #28]	; (8018d90 <_read_r+0x20>)
 8018d74:	4605      	mov	r5, r0
 8018d76:	4608      	mov	r0, r1
 8018d78:	4611      	mov	r1, r2
 8018d7a:	2200      	movs	r2, #0
 8018d7c:	6022      	str	r2, [r4, #0]
 8018d7e:	461a      	mov	r2, r3
 8018d80:	f7e7 fee0 	bl	8000b44 <_read>
 8018d84:	1c43      	adds	r3, r0, #1
 8018d86:	d102      	bne.n	8018d8e <_read_r+0x1e>
 8018d88:	6823      	ldr	r3, [r4, #0]
 8018d8a:	b103      	cbz	r3, 8018d8e <_read_r+0x1e>
 8018d8c:	602b      	str	r3, [r5, #0]
 8018d8e:	bd38      	pop	{r3, r4, r5, pc}
 8018d90:	2000f558 	.word	0x2000f558

08018d94 <_fstat_r>:
 8018d94:	b538      	push	{r3, r4, r5, lr}
 8018d96:	4c07      	ldr	r4, [pc, #28]	; (8018db4 <_fstat_r+0x20>)
 8018d98:	2300      	movs	r3, #0
 8018d9a:	4605      	mov	r5, r0
 8018d9c:	4608      	mov	r0, r1
 8018d9e:	4611      	mov	r1, r2
 8018da0:	6023      	str	r3, [r4, #0]
 8018da2:	f7e7 ff14 	bl	8000bce <_fstat>
 8018da6:	1c43      	adds	r3, r0, #1
 8018da8:	d102      	bne.n	8018db0 <_fstat_r+0x1c>
 8018daa:	6823      	ldr	r3, [r4, #0]
 8018dac:	b103      	cbz	r3, 8018db0 <_fstat_r+0x1c>
 8018dae:	602b      	str	r3, [r5, #0]
 8018db0:	bd38      	pop	{r3, r4, r5, pc}
 8018db2:	bf00      	nop
 8018db4:	2000f558 	.word	0x2000f558

08018db8 <_isatty_r>:
 8018db8:	b538      	push	{r3, r4, r5, lr}
 8018dba:	4c06      	ldr	r4, [pc, #24]	; (8018dd4 <_isatty_r+0x1c>)
 8018dbc:	2300      	movs	r3, #0
 8018dbe:	4605      	mov	r5, r0
 8018dc0:	4608      	mov	r0, r1
 8018dc2:	6023      	str	r3, [r4, #0]
 8018dc4:	f7e7 ff13 	bl	8000bee <_isatty>
 8018dc8:	1c43      	adds	r3, r0, #1
 8018dca:	d102      	bne.n	8018dd2 <_isatty_r+0x1a>
 8018dcc:	6823      	ldr	r3, [r4, #0]
 8018dce:	b103      	cbz	r3, 8018dd2 <_isatty_r+0x1a>
 8018dd0:	602b      	str	r3, [r5, #0]
 8018dd2:	bd38      	pop	{r3, r4, r5, pc}
 8018dd4:	2000f558 	.word	0x2000f558

08018dd8 <_init>:
 8018dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018dda:	bf00      	nop
 8018ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018dde:	bc08      	pop	{r3}
 8018de0:	469e      	mov	lr, r3
 8018de2:	4770      	bx	lr

08018de4 <_fini>:
 8018de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018de6:	bf00      	nop
 8018de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018dea:	bc08      	pop	{r3}
 8018dec:	469e      	mov	lr, r3
 8018dee:	4770      	bx	lr
